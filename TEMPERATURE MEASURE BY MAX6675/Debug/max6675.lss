
max6675.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002cee  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00002cee  00002d62  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001a88  00000000  00000000  00002d78  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000a69  00000000  00000000  00004800  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  00005269  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  000053c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  00005558  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  0000759d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  0000869e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  00009620  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  000097a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  00009a62  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a2f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__ctors_end>
       4:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
       8:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
       c:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      10:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      14:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      18:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      1c:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      20:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      24:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      28:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      2c:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      30:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      34:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      38:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      3c:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      40:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      44:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      48:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      4c:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      50:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      54:	00 40       	sbci	r16, 0x00	; 0
      56:	7a 10       	cpse	r7, r10
      58:	f3 5a       	subi	r31, 0xA3	; 163
      5a:	00 a0       	ldd	r0, Z+32	; 0x20
      5c:	72 4e       	sbci	r23, 0xE2	; 226
      5e:	18 09       	sbc	r17, r8
      60:	00 10       	cpse	r0, r0
      62:	a5 d4       	rcall	.+2378   	; 0x9ae <__fixsfsi+0x1a>
      64:	e8 00       	.word	0x00e8	; ????
      66:	00 e8       	ldi	r16, 0x80	; 128
      68:	76 48       	sbci	r23, 0x86	; 134
      6a:	17 00       	.word	0x0017	; ????
      6c:	00 e4       	ldi	r16, 0x40	; 64
      6e:	0b 54       	subi	r16, 0x4B	; 75
      70:	02 00       	.word	0x0002	; ????
      72:	00 ca       	rjmp	.-3072   	; 0xfffff474 <__eeprom_end+0xff7ef474>
      74:	9a 3b       	cpi	r25, 0xBA	; 186
      76:	00 00       	nop
      78:	00 e1       	ldi	r16, 0x10	; 16
      7a:	f5 05       	cpc	r31, r5
      7c:	00 00       	nop
      7e:	80 96       	adiw	r24, 0x20	; 32
      80:	98 00       	.word	0x0098	; ????
      82:	00 00       	nop
      84:	40 42       	sbci	r20, 0x20	; 32
      86:	0f 00       	.word	0x000f	; ????
      88:	00 00       	nop
      8a:	a0 86       	std	Z+8, r10	; 0x08
      8c:	01 00       	.word	0x0001	; ????
      8e:	00 00       	nop
      90:	10 27       	eor	r17, r16
      92:	00 00       	nop
      94:	00 00       	nop
      96:	e8 03       	fmulsu	r22, r16
      98:	00 00       	nop
      9a:	00 00       	nop
      9c:	64 00       	.word	0x0064	; ????
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	0a 00       	.word	0x000a	; ????
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	01 00       	.word	0x0001	; ????
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	2c 76       	andi	r18, 0x6C	; 108
      b0:	d8 88       	ldd	r13, Y+16	; 0x10
      b2:	dc 67       	ori	r29, 0x7C	; 124
      b4:	4f 08       	sbc	r4, r15
      b6:	23 df       	rcall	.-442    	; 0xfffffefe <__eeprom_end+0xff7efefe>
      b8:	c1 df       	rcall	.-126    	; 0x3c <__CCP__+0x8>
      ba:	ae 59       	subi	r26, 0x9E	; 158
      bc:	e1 b1       	in	r30, 0x01	; 1
      be:	b7 96       	adiw	r30, 0x27	; 39
      c0:	e5 e3       	ldi	r30, 0x35	; 53
      c2:	e4 53       	subi	r30, 0x34	; 52
      c4:	c6 3a       	cpi	r28, 0xA6	; 166
      c6:	e6 51       	subi	r30, 0x16	; 22
      c8:	99 76       	andi	r25, 0x69	; 105
      ca:	96 e8       	ldi	r25, 0x86	; 134
      cc:	e6 c2       	rjmp	.+1484   	; 0x69a <__mulsf3+0x172>
      ce:	84 26       	eor	r8, r20
      d0:	eb 89       	ldd	r30, Y+19	; 0x13
      d2:	8c 9b       	sbis	0x11, 4	; 17
      d4:	62 ed       	ldi	r22, 0xD2	; 210
      d6:	40 7c       	andi	r20, 0xC0	; 192
      d8:	6f fc       	.word	0xfc6f	; ????
      da:	ef bc       	out	0x2f, r14	; 47
      dc:	9c 9f       	mul	r25, r28
      de:	40 f2       	brcs	.-112    	; 0x70 <__SREG__+0x31>
      e0:	ba a5       	ldd	r27, Y+42	; 0x2a
      e2:	6f a5       	ldd	r22, Y+47	; 0x2f
      e4:	f4 90       	lpm	r15, Z+
      e6:	05 5a       	subi	r16, 0xA5	; 165
      e8:	2a f7       	brpl	.-54     	; 0xb4 <__SREG__+0x75>
      ea:	5c 93       	st	X, r21
      ec:	6b 6c       	ori	r22, 0xCB	; 203
      ee:	f9 67       	ori	r31, 0x79	; 121
      f0:	6d c1       	rjmp	.+730    	; 0x3cc <_fpadd_parts+0x1f8>
      f2:	1b fc       	.word	0xfc1b	; ????
      f4:	e0 e4       	ldi	r30, 0x40	; 64
      f6:	0d 47       	sbci	r16, 0x7D	; 125
      f8:	fe f5       	brtc	.+126    	; 0x178 <__bad_interrupt>
      fa:	20 e6       	ldi	r18, 0x60	; 96
      fc:	b5 00       	.word	0x00b5	; ????
      fe:	d0 ed       	ldi	r29, 0xD0	; 208
     100:	90 2e       	mov	r9, r16
     102:	03 00       	.word	0x0003	; ????
     104:	94 35       	cpi	r25, 0x54	; 84
     106:	77 05       	cpc	r23, r7
     108:	00 80       	ld	r0, Z
     10a:	84 1e       	adc	r8, r20
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 20       	and	r0, r0
     110:	4e 0a       	sbc	r4, r30
     112:	00 00       	nop
     114:	00 c8       	rjmp	.-4096   	; 0xfffff116 <__eeprom_end+0xff7ef116>
     116:	0c 33       	cpi	r16, 0x3C	; 60
     118:	33 33       	cpi	r19, 0x33	; 51
     11a:	33 0f       	add	r19, r19
     11c:	98 6e       	ori	r25, 0xE8	; 232
     11e:	12 83       	std	Z+2, r17	; 0x02
     120:	11 41       	sbci	r17, 0x11	; 17
     122:	ef 8d       	ldd	r30, Y+31	; 0x1f
     124:	21 14       	cp	r2, r1
     126:	89 3b       	cpi	r24, 0xB9	; 185
     128:	e6 55       	subi	r30, 0x56	; 86
     12a:	16 cf       	rjmp	.-468    	; 0xffffff58 <__eeprom_end+0xff7eff58>
     12c:	fe e6       	ldi	r31, 0x6E	; 110
     12e:	db 18       	sub	r13, r11
     130:	d1 84       	ldd	r13, Z+9	; 0x09
     132:	4b 38       	cpi	r20, 0x8B	; 139
     134:	1b f7       	brvc	.-58     	; 0xfc <__SREG__+0xbd>
     136:	7c 1d       	adc	r23, r12
     138:	90 1d       	adc	r25, r0
     13a:	a4 bb       	out	0x14, r26	; 20
     13c:	e4 24       	eor	r14, r4
     13e:	20 32       	cpi	r18, 0x20	; 32
     140:	84 72       	andi	r24, 0x24	; 36
     142:	5e 22       	and	r5, r30
     144:	81 00       	.word	0x0081	; ????
     146:	c9 f1       	breq	.+114    	; 0x1ba <__fixunssfsi+0x3e>
     148:	24 ec       	ldi	r18, 0xC4	; 196
     14a:	a1 e5       	ldi	r26, 0x51	; 81
     14c:	3d 27       	eor	r19, r29

0000014e <__ctors_end>:
     14e:	11 24       	eor	r1, r1
     150:	1f be       	out	0x3f, r1	; 63
     152:	cf e5       	ldi	r28, 0x5F	; 95
     154:	d4 e0       	ldi	r29, 0x04	; 4
     156:	de bf       	out	0x3e, r29	; 62
     158:	cd bf       	out	0x3d, r28	; 61

0000015a <__do_copy_data>:
     15a:	10 e0       	ldi	r17, 0x00	; 0
     15c:	a0 e6       	ldi	r26, 0x60	; 96
     15e:	b0 e0       	ldi	r27, 0x00	; 0
     160:	ee ee       	ldi	r30, 0xEE	; 238
     162:	fc e2       	ldi	r31, 0x2C	; 44
     164:	02 c0       	rjmp	.+4      	; 0x16a <.do_copy_data_start>

00000166 <.do_copy_data_loop>:
     166:	05 90       	lpm	r0, Z+
     168:	0d 92       	st	X+, r0

0000016a <.do_copy_data_start>:
     16a:	a4 37       	cpi	r26, 0x74	; 116
     16c:	b1 07       	cpc	r27, r17
     16e:	d9 f7       	brne	.-10     	; 0x166 <.do_copy_data_loop>
     170:	0e 94 6d 12 	call	0x24da	; 0x24da <main>
     174:	0c 94 75 16 	jmp	0x2cea	; 0x2cea <_exit>

00000178 <__bad_interrupt>:
     178:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000017c <__fixunssfsi>:
     17c:	ef 92       	push	r14
     17e:	ff 92       	push	r15
     180:	0f 93       	push	r16
     182:	1f 93       	push	r17
     184:	7b 01       	movw	r14, r22
     186:	8c 01       	movw	r16, r24
     188:	20 e0       	ldi	r18, 0x00	; 0
     18a:	30 e0       	ldi	r19, 0x00	; 0
     18c:	40 e0       	ldi	r20, 0x00	; 0
     18e:	5f e4       	ldi	r21, 0x4F	; 79
     190:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__gesf2>
     194:	88 23       	and	r24, r24
     196:	8c f0       	brlt	.+34     	; 0x1ba <__fixunssfsi+0x3e>
     198:	c8 01       	movw	r24, r16
     19a:	b7 01       	movw	r22, r14
     19c:	20 e0       	ldi	r18, 0x00	; 0
     19e:	30 e0       	ldi	r19, 0x00	; 0
     1a0:	40 e0       	ldi	r20, 0x00	; 0
     1a2:	5f e4       	ldi	r21, 0x4F	; 79
     1a4:	0e 94 36 02 	call	0x46c	; 0x46c <__subsf3>
     1a8:	0e 94 ca 04 	call	0x994	; 0x994 <__fixsfsi>
     1ac:	9b 01       	movw	r18, r22
     1ae:	ac 01       	movw	r20, r24
     1b0:	20 50       	subi	r18, 0x00	; 0
     1b2:	30 40       	sbci	r19, 0x00	; 0
     1b4:	40 40       	sbci	r20, 0x00	; 0
     1b6:	50 48       	sbci	r21, 0x80	; 128
     1b8:	06 c0       	rjmp	.+12     	; 0x1c6 <__fixunssfsi+0x4a>
     1ba:	c8 01       	movw	r24, r16
     1bc:	b7 01       	movw	r22, r14
     1be:	0e 94 ca 04 	call	0x994	; 0x994 <__fixsfsi>
     1c2:	9b 01       	movw	r18, r22
     1c4:	ac 01       	movw	r20, r24
     1c6:	b9 01       	movw	r22, r18
     1c8:	ca 01       	movw	r24, r20
     1ca:	1f 91       	pop	r17
     1cc:	0f 91       	pop	r16
     1ce:	ff 90       	pop	r15
     1d0:	ef 90       	pop	r14
     1d2:	08 95       	ret

000001d4 <_fpadd_parts>:
     1d4:	a0 e0       	ldi	r26, 0x00	; 0
     1d6:	b0 e0       	ldi	r27, 0x00	; 0
     1d8:	e0 ef       	ldi	r30, 0xF0	; 240
     1da:	f0 e0       	ldi	r31, 0x00	; 0
     1dc:	0c 94 9e 13 	jmp	0x273c	; 0x273c <__prologue_saves__>
     1e0:	dc 01       	movw	r26, r24
     1e2:	2b 01       	movw	r4, r22
     1e4:	fa 01       	movw	r30, r20
     1e6:	9c 91       	ld	r25, X
     1e8:	92 30       	cpi	r25, 0x02	; 2
     1ea:	08 f4       	brcc	.+2      	; 0x1ee <_fpadd_parts+0x1a>
     1ec:	39 c1       	rjmp	.+626    	; 0x460 <__stack+0x1>
     1ee:	eb 01       	movw	r28, r22
     1f0:	88 81       	ld	r24, Y
     1f2:	82 30       	cpi	r24, 0x02	; 2
     1f4:	08 f4       	brcc	.+2      	; 0x1f8 <_fpadd_parts+0x24>
     1f6:	33 c1       	rjmp	.+614    	; 0x45e <_fpadd_parts+0x28a>
     1f8:	94 30       	cpi	r25, 0x04	; 4
     1fa:	69 f4       	brne	.+26     	; 0x216 <_fpadd_parts+0x42>
     1fc:	84 30       	cpi	r24, 0x04	; 4
     1fe:	09 f0       	breq	.+2      	; 0x202 <_fpadd_parts+0x2e>
     200:	2f c1       	rjmp	.+606    	; 0x460 <__stack+0x1>
     202:	11 96       	adiw	r26, 0x01	; 1
     204:	9c 91       	ld	r25, X
     206:	11 97       	sbiw	r26, 0x01	; 1
     208:	89 81       	ldd	r24, Y+1	; 0x01
     20a:	98 17       	cp	r25, r24
     20c:	09 f4       	brne	.+2      	; 0x210 <_fpadd_parts+0x3c>
     20e:	28 c1       	rjmp	.+592    	; 0x460 <__stack+0x1>
     210:	ab e6       	ldi	r26, 0x6B	; 107
     212:	b0 e0       	ldi	r27, 0x00	; 0
     214:	25 c1       	rjmp	.+586    	; 0x460 <__stack+0x1>
     216:	84 30       	cpi	r24, 0x04	; 4
     218:	09 f4       	brne	.+2      	; 0x21c <_fpadd_parts+0x48>
     21a:	21 c1       	rjmp	.+578    	; 0x45e <_fpadd_parts+0x28a>
     21c:	82 30       	cpi	r24, 0x02	; 2
     21e:	a9 f4       	brne	.+42     	; 0x24a <_fpadd_parts+0x76>
     220:	92 30       	cpi	r25, 0x02	; 2
     222:	09 f0       	breq	.+2      	; 0x226 <_fpadd_parts+0x52>
     224:	1d c1       	rjmp	.+570    	; 0x460 <__stack+0x1>
     226:	9a 01       	movw	r18, r20
     228:	ad 01       	movw	r20, r26
     22a:	88 e0       	ldi	r24, 0x08	; 8
     22c:	ea 01       	movw	r28, r20
     22e:	09 90       	ld	r0, Y+
     230:	ae 01       	movw	r20, r28
     232:	e9 01       	movw	r28, r18
     234:	09 92       	st	Y+, r0
     236:	9e 01       	movw	r18, r28
     238:	81 50       	subi	r24, 0x01	; 1
     23a:	c1 f7       	brne	.-16     	; 0x22c <_fpadd_parts+0x58>
     23c:	e2 01       	movw	r28, r4
     23e:	89 81       	ldd	r24, Y+1	; 0x01
     240:	11 96       	adiw	r26, 0x01	; 1
     242:	9c 91       	ld	r25, X
     244:	89 23       	and	r24, r25
     246:	81 83       	std	Z+1, r24	; 0x01
     248:	08 c1       	rjmp	.+528    	; 0x45a <_fpadd_parts+0x286>
     24a:	92 30       	cpi	r25, 0x02	; 2
     24c:	09 f4       	brne	.+2      	; 0x250 <_fpadd_parts+0x7c>
     24e:	07 c1       	rjmp	.+526    	; 0x45e <_fpadd_parts+0x28a>
     250:	12 96       	adiw	r26, 0x02	; 2
     252:	2d 90       	ld	r2, X+
     254:	3c 90       	ld	r3, X
     256:	13 97       	sbiw	r26, 0x03	; 3
     258:	eb 01       	movw	r28, r22
     25a:	8a 81       	ldd	r24, Y+2	; 0x02
     25c:	9b 81       	ldd	r25, Y+3	; 0x03
     25e:	14 96       	adiw	r26, 0x04	; 4
     260:	ad 90       	ld	r10, X+
     262:	bd 90       	ld	r11, X+
     264:	cd 90       	ld	r12, X+
     266:	dc 90       	ld	r13, X
     268:	17 97       	sbiw	r26, 0x07	; 7
     26a:	ec 80       	ldd	r14, Y+4	; 0x04
     26c:	fd 80       	ldd	r15, Y+5	; 0x05
     26e:	0e 81       	ldd	r16, Y+6	; 0x06
     270:	1f 81       	ldd	r17, Y+7	; 0x07
     272:	91 01       	movw	r18, r2
     274:	28 1b       	sub	r18, r24
     276:	39 0b       	sbc	r19, r25
     278:	b9 01       	movw	r22, r18
     27a:	37 ff       	sbrs	r19, 7
     27c:	04 c0       	rjmp	.+8      	; 0x286 <_fpadd_parts+0xb2>
     27e:	66 27       	eor	r22, r22
     280:	77 27       	eor	r23, r23
     282:	62 1b       	sub	r22, r18
     284:	73 0b       	sbc	r23, r19
     286:	60 32       	cpi	r22, 0x20	; 32
     288:	71 05       	cpc	r23, r1
     28a:	0c f0       	brlt	.+2      	; 0x28e <_fpadd_parts+0xba>
     28c:	61 c0       	rjmp	.+194    	; 0x350 <_fpadd_parts+0x17c>
     28e:	12 16       	cp	r1, r18
     290:	13 06       	cpc	r1, r19
     292:	6c f5       	brge	.+90     	; 0x2ee <_fpadd_parts+0x11a>
     294:	37 01       	movw	r6, r14
     296:	48 01       	movw	r8, r16
     298:	06 2e       	mov	r0, r22
     29a:	04 c0       	rjmp	.+8      	; 0x2a4 <_fpadd_parts+0xd0>
     29c:	96 94       	lsr	r9
     29e:	87 94       	ror	r8
     2a0:	77 94       	ror	r7
     2a2:	67 94       	ror	r6
     2a4:	0a 94       	dec	r0
     2a6:	d2 f7       	brpl	.-12     	; 0x29c <_fpadd_parts+0xc8>
     2a8:	21 e0       	ldi	r18, 0x01	; 1
     2aa:	30 e0       	ldi	r19, 0x00	; 0
     2ac:	40 e0       	ldi	r20, 0x00	; 0
     2ae:	50 e0       	ldi	r21, 0x00	; 0
     2b0:	04 c0       	rjmp	.+8      	; 0x2ba <_fpadd_parts+0xe6>
     2b2:	22 0f       	add	r18, r18
     2b4:	33 1f       	adc	r19, r19
     2b6:	44 1f       	adc	r20, r20
     2b8:	55 1f       	adc	r21, r21
     2ba:	6a 95       	dec	r22
     2bc:	d2 f7       	brpl	.-12     	; 0x2b2 <_fpadd_parts+0xde>
     2be:	21 50       	subi	r18, 0x01	; 1
     2c0:	30 40       	sbci	r19, 0x00	; 0
     2c2:	40 40       	sbci	r20, 0x00	; 0
     2c4:	50 40       	sbci	r21, 0x00	; 0
     2c6:	2e 21       	and	r18, r14
     2c8:	3f 21       	and	r19, r15
     2ca:	40 23       	and	r20, r16
     2cc:	51 23       	and	r21, r17
     2ce:	21 15       	cp	r18, r1
     2d0:	31 05       	cpc	r19, r1
     2d2:	41 05       	cpc	r20, r1
     2d4:	51 05       	cpc	r21, r1
     2d6:	21 f0       	breq	.+8      	; 0x2e0 <_fpadd_parts+0x10c>
     2d8:	21 e0       	ldi	r18, 0x01	; 1
     2da:	30 e0       	ldi	r19, 0x00	; 0
     2dc:	40 e0       	ldi	r20, 0x00	; 0
     2de:	50 e0       	ldi	r21, 0x00	; 0
     2e0:	79 01       	movw	r14, r18
     2e2:	8a 01       	movw	r16, r20
     2e4:	e6 28       	or	r14, r6
     2e6:	f7 28       	or	r15, r7
     2e8:	08 29       	or	r16, r8
     2ea:	19 29       	or	r17, r9
     2ec:	3c c0       	rjmp	.+120    	; 0x366 <_fpadd_parts+0x192>
     2ee:	23 2b       	or	r18, r19
     2f0:	d1 f1       	breq	.+116    	; 0x366 <_fpadd_parts+0x192>
     2f2:	26 0e       	add	r2, r22
     2f4:	37 1e       	adc	r3, r23
     2f6:	35 01       	movw	r6, r10
     2f8:	46 01       	movw	r8, r12
     2fa:	06 2e       	mov	r0, r22
     2fc:	04 c0       	rjmp	.+8      	; 0x306 <_fpadd_parts+0x132>
     2fe:	96 94       	lsr	r9
     300:	87 94       	ror	r8
     302:	77 94       	ror	r7
     304:	67 94       	ror	r6
     306:	0a 94       	dec	r0
     308:	d2 f7       	brpl	.-12     	; 0x2fe <_fpadd_parts+0x12a>
     30a:	21 e0       	ldi	r18, 0x01	; 1
     30c:	30 e0       	ldi	r19, 0x00	; 0
     30e:	40 e0       	ldi	r20, 0x00	; 0
     310:	50 e0       	ldi	r21, 0x00	; 0
     312:	04 c0       	rjmp	.+8      	; 0x31c <_fpadd_parts+0x148>
     314:	22 0f       	add	r18, r18
     316:	33 1f       	adc	r19, r19
     318:	44 1f       	adc	r20, r20
     31a:	55 1f       	adc	r21, r21
     31c:	6a 95       	dec	r22
     31e:	d2 f7       	brpl	.-12     	; 0x314 <_fpadd_parts+0x140>
     320:	21 50       	subi	r18, 0x01	; 1
     322:	30 40       	sbci	r19, 0x00	; 0
     324:	40 40       	sbci	r20, 0x00	; 0
     326:	50 40       	sbci	r21, 0x00	; 0
     328:	2a 21       	and	r18, r10
     32a:	3b 21       	and	r19, r11
     32c:	4c 21       	and	r20, r12
     32e:	5d 21       	and	r21, r13
     330:	21 15       	cp	r18, r1
     332:	31 05       	cpc	r19, r1
     334:	41 05       	cpc	r20, r1
     336:	51 05       	cpc	r21, r1
     338:	21 f0       	breq	.+8      	; 0x342 <_fpadd_parts+0x16e>
     33a:	21 e0       	ldi	r18, 0x01	; 1
     33c:	30 e0       	ldi	r19, 0x00	; 0
     33e:	40 e0       	ldi	r20, 0x00	; 0
     340:	50 e0       	ldi	r21, 0x00	; 0
     342:	59 01       	movw	r10, r18
     344:	6a 01       	movw	r12, r20
     346:	a6 28       	or	r10, r6
     348:	b7 28       	or	r11, r7
     34a:	c8 28       	or	r12, r8
     34c:	d9 28       	or	r13, r9
     34e:	0b c0       	rjmp	.+22     	; 0x366 <_fpadd_parts+0x192>
     350:	82 15       	cp	r24, r2
     352:	93 05       	cpc	r25, r3
     354:	2c f0       	brlt	.+10     	; 0x360 <_fpadd_parts+0x18c>
     356:	1c 01       	movw	r2, r24
     358:	aa 24       	eor	r10, r10
     35a:	bb 24       	eor	r11, r11
     35c:	65 01       	movw	r12, r10
     35e:	03 c0       	rjmp	.+6      	; 0x366 <_fpadd_parts+0x192>
     360:	ee 24       	eor	r14, r14
     362:	ff 24       	eor	r15, r15
     364:	87 01       	movw	r16, r14
     366:	11 96       	adiw	r26, 0x01	; 1
     368:	9c 91       	ld	r25, X
     36a:	d2 01       	movw	r26, r4
     36c:	11 96       	adiw	r26, 0x01	; 1
     36e:	8c 91       	ld	r24, X
     370:	98 17       	cp	r25, r24
     372:	09 f4       	brne	.+2      	; 0x376 <_fpadd_parts+0x1a2>
     374:	45 c0       	rjmp	.+138    	; 0x400 <_fpadd_parts+0x22c>
     376:	99 23       	and	r25, r25
     378:	39 f0       	breq	.+14     	; 0x388 <_fpadd_parts+0x1b4>
     37a:	a8 01       	movw	r20, r16
     37c:	97 01       	movw	r18, r14
     37e:	2a 19       	sub	r18, r10
     380:	3b 09       	sbc	r19, r11
     382:	4c 09       	sbc	r20, r12
     384:	5d 09       	sbc	r21, r13
     386:	06 c0       	rjmp	.+12     	; 0x394 <_fpadd_parts+0x1c0>
     388:	a6 01       	movw	r20, r12
     38a:	95 01       	movw	r18, r10
     38c:	2e 19       	sub	r18, r14
     38e:	3f 09       	sbc	r19, r15
     390:	40 0b       	sbc	r20, r16
     392:	51 0b       	sbc	r21, r17
     394:	57 fd       	sbrc	r21, 7
     396:	08 c0       	rjmp	.+16     	; 0x3a8 <_fpadd_parts+0x1d4>
     398:	11 82       	std	Z+1, r1	; 0x01
     39a:	33 82       	std	Z+3, r3	; 0x03
     39c:	22 82       	std	Z+2, r2	; 0x02
     39e:	24 83       	std	Z+4, r18	; 0x04
     3a0:	35 83       	std	Z+5, r19	; 0x05
     3a2:	46 83       	std	Z+6, r20	; 0x06
     3a4:	57 83       	std	Z+7, r21	; 0x07
     3a6:	1d c0       	rjmp	.+58     	; 0x3e2 <_fpadd_parts+0x20e>
     3a8:	81 e0       	ldi	r24, 0x01	; 1
     3aa:	81 83       	std	Z+1, r24	; 0x01
     3ac:	33 82       	std	Z+3, r3	; 0x03
     3ae:	22 82       	std	Z+2, r2	; 0x02
     3b0:	88 27       	eor	r24, r24
     3b2:	99 27       	eor	r25, r25
     3b4:	dc 01       	movw	r26, r24
     3b6:	82 1b       	sub	r24, r18
     3b8:	93 0b       	sbc	r25, r19
     3ba:	a4 0b       	sbc	r26, r20
     3bc:	b5 0b       	sbc	r27, r21
     3be:	84 83       	std	Z+4, r24	; 0x04
     3c0:	95 83       	std	Z+5, r25	; 0x05
     3c2:	a6 83       	std	Z+6, r26	; 0x06
     3c4:	b7 83       	std	Z+7, r27	; 0x07
     3c6:	0d c0       	rjmp	.+26     	; 0x3e2 <_fpadd_parts+0x20e>
     3c8:	22 0f       	add	r18, r18
     3ca:	33 1f       	adc	r19, r19
     3cc:	44 1f       	adc	r20, r20
     3ce:	55 1f       	adc	r21, r21
     3d0:	24 83       	std	Z+4, r18	; 0x04
     3d2:	35 83       	std	Z+5, r19	; 0x05
     3d4:	46 83       	std	Z+6, r20	; 0x06
     3d6:	57 83       	std	Z+7, r21	; 0x07
     3d8:	82 81       	ldd	r24, Z+2	; 0x02
     3da:	93 81       	ldd	r25, Z+3	; 0x03
     3dc:	01 97       	sbiw	r24, 0x01	; 1
     3de:	93 83       	std	Z+3, r25	; 0x03
     3e0:	82 83       	std	Z+2, r24	; 0x02
     3e2:	24 81       	ldd	r18, Z+4	; 0x04
     3e4:	35 81       	ldd	r19, Z+5	; 0x05
     3e6:	46 81       	ldd	r20, Z+6	; 0x06
     3e8:	57 81       	ldd	r21, Z+7	; 0x07
     3ea:	da 01       	movw	r26, r20
     3ec:	c9 01       	movw	r24, r18
     3ee:	01 97       	sbiw	r24, 0x01	; 1
     3f0:	a1 09       	sbc	r26, r1
     3f2:	b1 09       	sbc	r27, r1
     3f4:	8f 5f       	subi	r24, 0xFF	; 255
     3f6:	9f 4f       	sbci	r25, 0xFF	; 255
     3f8:	af 4f       	sbci	r26, 0xFF	; 255
     3fa:	bf 43       	sbci	r27, 0x3F	; 63
     3fc:	28 f3       	brcs	.-54     	; 0x3c8 <_fpadd_parts+0x1f4>
     3fe:	0b c0       	rjmp	.+22     	; 0x416 <_fpadd_parts+0x242>
     400:	91 83       	std	Z+1, r25	; 0x01
     402:	33 82       	std	Z+3, r3	; 0x03
     404:	22 82       	std	Z+2, r2	; 0x02
     406:	ea 0c       	add	r14, r10
     408:	fb 1c       	adc	r15, r11
     40a:	0c 1d       	adc	r16, r12
     40c:	1d 1d       	adc	r17, r13
     40e:	e4 82       	std	Z+4, r14	; 0x04
     410:	f5 82       	std	Z+5, r15	; 0x05
     412:	06 83       	std	Z+6, r16	; 0x06
     414:	17 83       	std	Z+7, r17	; 0x07
     416:	83 e0       	ldi	r24, 0x03	; 3
     418:	80 83       	st	Z, r24
     41a:	24 81       	ldd	r18, Z+4	; 0x04
     41c:	35 81       	ldd	r19, Z+5	; 0x05
     41e:	46 81       	ldd	r20, Z+6	; 0x06
     420:	57 81       	ldd	r21, Z+7	; 0x07
     422:	57 ff       	sbrs	r21, 7
     424:	1a c0       	rjmp	.+52     	; 0x45a <_fpadd_parts+0x286>
     426:	c9 01       	movw	r24, r18
     428:	aa 27       	eor	r26, r26
     42a:	97 fd       	sbrc	r25, 7
     42c:	a0 95       	com	r26
     42e:	ba 2f       	mov	r27, r26
     430:	81 70       	andi	r24, 0x01	; 1
     432:	90 70       	andi	r25, 0x00	; 0
     434:	a0 70       	andi	r26, 0x00	; 0
     436:	b0 70       	andi	r27, 0x00	; 0
     438:	56 95       	lsr	r21
     43a:	47 95       	ror	r20
     43c:	37 95       	ror	r19
     43e:	27 95       	ror	r18
     440:	82 2b       	or	r24, r18
     442:	93 2b       	or	r25, r19
     444:	a4 2b       	or	r26, r20
     446:	b5 2b       	or	r27, r21
     448:	84 83       	std	Z+4, r24	; 0x04
     44a:	95 83       	std	Z+5, r25	; 0x05
     44c:	a6 83       	std	Z+6, r26	; 0x06
     44e:	b7 83       	std	Z+7, r27	; 0x07
     450:	82 81       	ldd	r24, Z+2	; 0x02
     452:	93 81       	ldd	r25, Z+3	; 0x03
     454:	01 96       	adiw	r24, 0x01	; 1
     456:	93 83       	std	Z+3, r25	; 0x03
     458:	82 83       	std	Z+2, r24	; 0x02
     45a:	df 01       	movw	r26, r30
     45c:	01 c0       	rjmp	.+2      	; 0x460 <__stack+0x1>
     45e:	d2 01       	movw	r26, r4
     460:	cd 01       	movw	r24, r26
     462:	cd b7       	in	r28, 0x3d	; 61
     464:	de b7       	in	r29, 0x3e	; 62
     466:	e2 e1       	ldi	r30, 0x12	; 18
     468:	0c 94 ba 13 	jmp	0x2774	; 0x2774 <__epilogue_restores__>

0000046c <__subsf3>:
     46c:	a0 e2       	ldi	r26, 0x20	; 32
     46e:	b0 e0       	ldi	r27, 0x00	; 0
     470:	ec e3       	ldi	r30, 0x3C	; 60
     472:	f2 e0       	ldi	r31, 0x02	; 2
     474:	0c 94 aa 13 	jmp	0x2754	; 0x2754 <__prologue_saves__+0x18>
     478:	69 83       	std	Y+1, r22	; 0x01
     47a:	7a 83       	std	Y+2, r23	; 0x02
     47c:	8b 83       	std	Y+3, r24	; 0x03
     47e:	9c 83       	std	Y+4, r25	; 0x04
     480:	2d 83       	std	Y+5, r18	; 0x05
     482:	3e 83       	std	Y+6, r19	; 0x06
     484:	4f 83       	std	Y+7, r20	; 0x07
     486:	58 87       	std	Y+8, r21	; 0x08
     488:	e9 e0       	ldi	r30, 0x09	; 9
     48a:	ee 2e       	mov	r14, r30
     48c:	f1 2c       	mov	r15, r1
     48e:	ec 0e       	add	r14, r28
     490:	fd 1e       	adc	r15, r29
     492:	ce 01       	movw	r24, r28
     494:	01 96       	adiw	r24, 0x01	; 1
     496:	b7 01       	movw	r22, r14
     498:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <__unpack_f>
     49c:	8e 01       	movw	r16, r28
     49e:	0f 5e       	subi	r16, 0xEF	; 239
     4a0:	1f 4f       	sbci	r17, 0xFF	; 255
     4a2:	ce 01       	movw	r24, r28
     4a4:	05 96       	adiw	r24, 0x05	; 5
     4a6:	b8 01       	movw	r22, r16
     4a8:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <__unpack_f>
     4ac:	8a 89       	ldd	r24, Y+18	; 0x12
     4ae:	91 e0       	ldi	r25, 0x01	; 1
     4b0:	89 27       	eor	r24, r25
     4b2:	8a 8b       	std	Y+18, r24	; 0x12
     4b4:	c7 01       	movw	r24, r14
     4b6:	b8 01       	movw	r22, r16
     4b8:	ae 01       	movw	r20, r28
     4ba:	47 5e       	subi	r20, 0xE7	; 231
     4bc:	5f 4f       	sbci	r21, 0xFF	; 255
     4be:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <_fpadd_parts>
     4c2:	0e 94 1e 05 	call	0xa3c	; 0xa3c <__pack_f>
     4c6:	a0 96       	adiw	r28, 0x20	; 32
     4c8:	e6 e0       	ldi	r30, 0x06	; 6
     4ca:	0c 94 c6 13 	jmp	0x278c	; 0x278c <__epilogue_restores__+0x18>

000004ce <__addsf3>:
     4ce:	a0 e2       	ldi	r26, 0x20	; 32
     4d0:	b0 e0       	ldi	r27, 0x00	; 0
     4d2:	ed e6       	ldi	r30, 0x6D	; 109
     4d4:	f2 e0       	ldi	r31, 0x02	; 2
     4d6:	0c 94 aa 13 	jmp	0x2754	; 0x2754 <__prologue_saves__+0x18>
     4da:	69 83       	std	Y+1, r22	; 0x01
     4dc:	7a 83       	std	Y+2, r23	; 0x02
     4de:	8b 83       	std	Y+3, r24	; 0x03
     4e0:	9c 83       	std	Y+4, r25	; 0x04
     4e2:	2d 83       	std	Y+5, r18	; 0x05
     4e4:	3e 83       	std	Y+6, r19	; 0x06
     4e6:	4f 83       	std	Y+7, r20	; 0x07
     4e8:	58 87       	std	Y+8, r21	; 0x08
     4ea:	f9 e0       	ldi	r31, 0x09	; 9
     4ec:	ef 2e       	mov	r14, r31
     4ee:	f1 2c       	mov	r15, r1
     4f0:	ec 0e       	add	r14, r28
     4f2:	fd 1e       	adc	r15, r29
     4f4:	ce 01       	movw	r24, r28
     4f6:	01 96       	adiw	r24, 0x01	; 1
     4f8:	b7 01       	movw	r22, r14
     4fa:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <__unpack_f>
     4fe:	8e 01       	movw	r16, r28
     500:	0f 5e       	subi	r16, 0xEF	; 239
     502:	1f 4f       	sbci	r17, 0xFF	; 255
     504:	ce 01       	movw	r24, r28
     506:	05 96       	adiw	r24, 0x05	; 5
     508:	b8 01       	movw	r22, r16
     50a:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <__unpack_f>
     50e:	c7 01       	movw	r24, r14
     510:	b8 01       	movw	r22, r16
     512:	ae 01       	movw	r20, r28
     514:	47 5e       	subi	r20, 0xE7	; 231
     516:	5f 4f       	sbci	r21, 0xFF	; 255
     518:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <_fpadd_parts>
     51c:	0e 94 1e 05 	call	0xa3c	; 0xa3c <__pack_f>
     520:	a0 96       	adiw	r28, 0x20	; 32
     522:	e6 e0       	ldi	r30, 0x06	; 6
     524:	0c 94 c6 13 	jmp	0x278c	; 0x278c <__epilogue_restores__+0x18>

00000528 <__mulsf3>:
     528:	a0 e2       	ldi	r26, 0x20	; 32
     52a:	b0 e0       	ldi	r27, 0x00	; 0
     52c:	ea e9       	ldi	r30, 0x9A	; 154
     52e:	f2 e0       	ldi	r31, 0x02	; 2
     530:	0c 94 9e 13 	jmp	0x273c	; 0x273c <__prologue_saves__>
     534:	69 83       	std	Y+1, r22	; 0x01
     536:	7a 83       	std	Y+2, r23	; 0x02
     538:	8b 83       	std	Y+3, r24	; 0x03
     53a:	9c 83       	std	Y+4, r25	; 0x04
     53c:	2d 83       	std	Y+5, r18	; 0x05
     53e:	3e 83       	std	Y+6, r19	; 0x06
     540:	4f 83       	std	Y+7, r20	; 0x07
     542:	58 87       	std	Y+8, r21	; 0x08
     544:	ce 01       	movw	r24, r28
     546:	01 96       	adiw	r24, 0x01	; 1
     548:	be 01       	movw	r22, r28
     54a:	67 5f       	subi	r22, 0xF7	; 247
     54c:	7f 4f       	sbci	r23, 0xFF	; 255
     54e:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <__unpack_f>
     552:	ce 01       	movw	r24, r28
     554:	05 96       	adiw	r24, 0x05	; 5
     556:	be 01       	movw	r22, r28
     558:	6f 5e       	subi	r22, 0xEF	; 239
     55a:	7f 4f       	sbci	r23, 0xFF	; 255
     55c:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <__unpack_f>
     560:	99 85       	ldd	r25, Y+9	; 0x09
     562:	92 30       	cpi	r25, 0x02	; 2
     564:	88 f0       	brcs	.+34     	; 0x588 <__mulsf3+0x60>
     566:	89 89       	ldd	r24, Y+17	; 0x11
     568:	82 30       	cpi	r24, 0x02	; 2
     56a:	c8 f0       	brcs	.+50     	; 0x59e <__mulsf3+0x76>
     56c:	94 30       	cpi	r25, 0x04	; 4
     56e:	19 f4       	brne	.+6      	; 0x576 <__mulsf3+0x4e>
     570:	82 30       	cpi	r24, 0x02	; 2
     572:	51 f4       	brne	.+20     	; 0x588 <__mulsf3+0x60>
     574:	04 c0       	rjmp	.+8      	; 0x57e <__mulsf3+0x56>
     576:	84 30       	cpi	r24, 0x04	; 4
     578:	29 f4       	brne	.+10     	; 0x584 <__mulsf3+0x5c>
     57a:	92 30       	cpi	r25, 0x02	; 2
     57c:	81 f4       	brne	.+32     	; 0x59e <__mulsf3+0x76>
     57e:	8b e6       	ldi	r24, 0x6B	; 107
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	c6 c0       	rjmp	.+396    	; 0x710 <__mulsf3+0x1e8>
     584:	92 30       	cpi	r25, 0x02	; 2
     586:	49 f4       	brne	.+18     	; 0x59a <__mulsf3+0x72>
     588:	20 e0       	ldi	r18, 0x00	; 0
     58a:	9a 85       	ldd	r25, Y+10	; 0x0a
     58c:	8a 89       	ldd	r24, Y+18	; 0x12
     58e:	98 13       	cpse	r25, r24
     590:	21 e0       	ldi	r18, 0x01	; 1
     592:	2a 87       	std	Y+10, r18	; 0x0a
     594:	ce 01       	movw	r24, r28
     596:	09 96       	adiw	r24, 0x09	; 9
     598:	bb c0       	rjmp	.+374    	; 0x710 <__mulsf3+0x1e8>
     59a:	82 30       	cpi	r24, 0x02	; 2
     59c:	49 f4       	brne	.+18     	; 0x5b0 <__mulsf3+0x88>
     59e:	20 e0       	ldi	r18, 0x00	; 0
     5a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     5a2:	8a 89       	ldd	r24, Y+18	; 0x12
     5a4:	98 13       	cpse	r25, r24
     5a6:	21 e0       	ldi	r18, 0x01	; 1
     5a8:	2a 8b       	std	Y+18, r18	; 0x12
     5aa:	ce 01       	movw	r24, r28
     5ac:	41 96       	adiw	r24, 0x11	; 17
     5ae:	b0 c0       	rjmp	.+352    	; 0x710 <__mulsf3+0x1e8>
     5b0:	2d 84       	ldd	r2, Y+13	; 0x0d
     5b2:	3e 84       	ldd	r3, Y+14	; 0x0e
     5b4:	4f 84       	ldd	r4, Y+15	; 0x0f
     5b6:	58 88       	ldd	r5, Y+16	; 0x10
     5b8:	6d 88       	ldd	r6, Y+21	; 0x15
     5ba:	7e 88       	ldd	r7, Y+22	; 0x16
     5bc:	8f 88       	ldd	r8, Y+23	; 0x17
     5be:	98 8c       	ldd	r9, Y+24	; 0x18
     5c0:	ee 24       	eor	r14, r14
     5c2:	ff 24       	eor	r15, r15
     5c4:	87 01       	movw	r16, r14
     5c6:	aa 24       	eor	r10, r10
     5c8:	bb 24       	eor	r11, r11
     5ca:	65 01       	movw	r12, r10
     5cc:	40 e0       	ldi	r20, 0x00	; 0
     5ce:	50 e0       	ldi	r21, 0x00	; 0
     5d0:	60 e0       	ldi	r22, 0x00	; 0
     5d2:	70 e0       	ldi	r23, 0x00	; 0
     5d4:	e0 e0       	ldi	r30, 0x00	; 0
     5d6:	f0 e0       	ldi	r31, 0x00	; 0
     5d8:	c1 01       	movw	r24, r2
     5da:	81 70       	andi	r24, 0x01	; 1
     5dc:	90 70       	andi	r25, 0x00	; 0
     5de:	89 2b       	or	r24, r25
     5e0:	e9 f0       	breq	.+58     	; 0x61c <__mulsf3+0xf4>
     5e2:	e6 0c       	add	r14, r6
     5e4:	f7 1c       	adc	r15, r7
     5e6:	08 1d       	adc	r16, r8
     5e8:	19 1d       	adc	r17, r9
     5ea:	9a 01       	movw	r18, r20
     5ec:	ab 01       	movw	r20, r22
     5ee:	2a 0d       	add	r18, r10
     5f0:	3b 1d       	adc	r19, r11
     5f2:	4c 1d       	adc	r20, r12
     5f4:	5d 1d       	adc	r21, r13
     5f6:	80 e0       	ldi	r24, 0x00	; 0
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	a0 e0       	ldi	r26, 0x00	; 0
     5fc:	b0 e0       	ldi	r27, 0x00	; 0
     5fe:	e6 14       	cp	r14, r6
     600:	f7 04       	cpc	r15, r7
     602:	08 05       	cpc	r16, r8
     604:	19 05       	cpc	r17, r9
     606:	20 f4       	brcc	.+8      	; 0x610 <__mulsf3+0xe8>
     608:	81 e0       	ldi	r24, 0x01	; 1
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	a0 e0       	ldi	r26, 0x00	; 0
     60e:	b0 e0       	ldi	r27, 0x00	; 0
     610:	ba 01       	movw	r22, r20
     612:	a9 01       	movw	r20, r18
     614:	48 0f       	add	r20, r24
     616:	59 1f       	adc	r21, r25
     618:	6a 1f       	adc	r22, r26
     61a:	7b 1f       	adc	r23, r27
     61c:	aa 0c       	add	r10, r10
     61e:	bb 1c       	adc	r11, r11
     620:	cc 1c       	adc	r12, r12
     622:	dd 1c       	adc	r13, r13
     624:	97 fe       	sbrs	r9, 7
     626:	08 c0       	rjmp	.+16     	; 0x638 <__mulsf3+0x110>
     628:	81 e0       	ldi	r24, 0x01	; 1
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	a0 e0       	ldi	r26, 0x00	; 0
     62e:	b0 e0       	ldi	r27, 0x00	; 0
     630:	a8 2a       	or	r10, r24
     632:	b9 2a       	or	r11, r25
     634:	ca 2a       	or	r12, r26
     636:	db 2a       	or	r13, r27
     638:	31 96       	adiw	r30, 0x01	; 1
     63a:	e0 32       	cpi	r30, 0x20	; 32
     63c:	f1 05       	cpc	r31, r1
     63e:	49 f0       	breq	.+18     	; 0x652 <__mulsf3+0x12a>
     640:	66 0c       	add	r6, r6
     642:	77 1c       	adc	r7, r7
     644:	88 1c       	adc	r8, r8
     646:	99 1c       	adc	r9, r9
     648:	56 94       	lsr	r5
     64a:	47 94       	ror	r4
     64c:	37 94       	ror	r3
     64e:	27 94       	ror	r2
     650:	c3 cf       	rjmp	.-122    	; 0x5d8 <__mulsf3+0xb0>
     652:	fa 85       	ldd	r31, Y+10	; 0x0a
     654:	ea 89       	ldd	r30, Y+18	; 0x12
     656:	2b 89       	ldd	r18, Y+19	; 0x13
     658:	3c 89       	ldd	r19, Y+20	; 0x14
     65a:	8b 85       	ldd	r24, Y+11	; 0x0b
     65c:	9c 85       	ldd	r25, Y+12	; 0x0c
     65e:	28 0f       	add	r18, r24
     660:	39 1f       	adc	r19, r25
     662:	2e 5f       	subi	r18, 0xFE	; 254
     664:	3f 4f       	sbci	r19, 0xFF	; 255
     666:	17 c0       	rjmp	.+46     	; 0x696 <__mulsf3+0x16e>
     668:	ca 01       	movw	r24, r20
     66a:	81 70       	andi	r24, 0x01	; 1
     66c:	90 70       	andi	r25, 0x00	; 0
     66e:	89 2b       	or	r24, r25
     670:	61 f0       	breq	.+24     	; 0x68a <__mulsf3+0x162>
     672:	16 95       	lsr	r17
     674:	07 95       	ror	r16
     676:	f7 94       	ror	r15
     678:	e7 94       	ror	r14
     67a:	80 e0       	ldi	r24, 0x00	; 0
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	a0 e0       	ldi	r26, 0x00	; 0
     680:	b0 e8       	ldi	r27, 0x80	; 128
     682:	e8 2a       	or	r14, r24
     684:	f9 2a       	or	r15, r25
     686:	0a 2b       	or	r16, r26
     688:	1b 2b       	or	r17, r27
     68a:	76 95       	lsr	r23
     68c:	67 95       	ror	r22
     68e:	57 95       	ror	r21
     690:	47 95       	ror	r20
     692:	2f 5f       	subi	r18, 0xFF	; 255
     694:	3f 4f       	sbci	r19, 0xFF	; 255
     696:	77 fd       	sbrc	r23, 7
     698:	e7 cf       	rjmp	.-50     	; 0x668 <__mulsf3+0x140>
     69a:	0c c0       	rjmp	.+24     	; 0x6b4 <__mulsf3+0x18c>
     69c:	44 0f       	add	r20, r20
     69e:	55 1f       	adc	r21, r21
     6a0:	66 1f       	adc	r22, r22
     6a2:	77 1f       	adc	r23, r23
     6a4:	17 fd       	sbrc	r17, 7
     6a6:	41 60       	ori	r20, 0x01	; 1
     6a8:	ee 0c       	add	r14, r14
     6aa:	ff 1c       	adc	r15, r15
     6ac:	00 1f       	adc	r16, r16
     6ae:	11 1f       	adc	r17, r17
     6b0:	21 50       	subi	r18, 0x01	; 1
     6b2:	30 40       	sbci	r19, 0x00	; 0
     6b4:	40 30       	cpi	r20, 0x00	; 0
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	59 07       	cpc	r21, r25
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	69 07       	cpc	r22, r25
     6be:	90 e4       	ldi	r25, 0x40	; 64
     6c0:	79 07       	cpc	r23, r25
     6c2:	60 f3       	brcs	.-40     	; 0x69c <__mulsf3+0x174>
     6c4:	2b 8f       	std	Y+27, r18	; 0x1b
     6c6:	3c 8f       	std	Y+28, r19	; 0x1c
     6c8:	db 01       	movw	r26, r22
     6ca:	ca 01       	movw	r24, r20
     6cc:	8f 77       	andi	r24, 0x7F	; 127
     6ce:	90 70       	andi	r25, 0x00	; 0
     6d0:	a0 70       	andi	r26, 0x00	; 0
     6d2:	b0 70       	andi	r27, 0x00	; 0
     6d4:	80 34       	cpi	r24, 0x40	; 64
     6d6:	91 05       	cpc	r25, r1
     6d8:	a1 05       	cpc	r26, r1
     6da:	b1 05       	cpc	r27, r1
     6dc:	61 f4       	brne	.+24     	; 0x6f6 <__mulsf3+0x1ce>
     6de:	47 fd       	sbrc	r20, 7
     6e0:	0a c0       	rjmp	.+20     	; 0x6f6 <__mulsf3+0x1ce>
     6e2:	e1 14       	cp	r14, r1
     6e4:	f1 04       	cpc	r15, r1
     6e6:	01 05       	cpc	r16, r1
     6e8:	11 05       	cpc	r17, r1
     6ea:	29 f0       	breq	.+10     	; 0x6f6 <__mulsf3+0x1ce>
     6ec:	40 5c       	subi	r20, 0xC0	; 192
     6ee:	5f 4f       	sbci	r21, 0xFF	; 255
     6f0:	6f 4f       	sbci	r22, 0xFF	; 255
     6f2:	7f 4f       	sbci	r23, 0xFF	; 255
     6f4:	40 78       	andi	r20, 0x80	; 128
     6f6:	1a 8e       	std	Y+26, r1	; 0x1a
     6f8:	fe 17       	cp	r31, r30
     6fa:	11 f0       	breq	.+4      	; 0x700 <__mulsf3+0x1d8>
     6fc:	81 e0       	ldi	r24, 0x01	; 1
     6fe:	8a 8f       	std	Y+26, r24	; 0x1a
     700:	4d 8f       	std	Y+29, r20	; 0x1d
     702:	5e 8f       	std	Y+30, r21	; 0x1e
     704:	6f 8f       	std	Y+31, r22	; 0x1f
     706:	78 a3       	std	Y+32, r23	; 0x20
     708:	83 e0       	ldi	r24, 0x03	; 3
     70a:	89 8f       	std	Y+25, r24	; 0x19
     70c:	ce 01       	movw	r24, r28
     70e:	49 96       	adiw	r24, 0x19	; 25
     710:	0e 94 1e 05 	call	0xa3c	; 0xa3c <__pack_f>
     714:	a0 96       	adiw	r28, 0x20	; 32
     716:	e2 e1       	ldi	r30, 0x12	; 18
     718:	0c 94 ba 13 	jmp	0x2774	; 0x2774 <__epilogue_restores__>

0000071c <__divsf3>:
     71c:	a8 e1       	ldi	r26, 0x18	; 24
     71e:	b0 e0       	ldi	r27, 0x00	; 0
     720:	e4 e9       	ldi	r30, 0x94	; 148
     722:	f3 e0       	ldi	r31, 0x03	; 3
     724:	0c 94 a6 13 	jmp	0x274c	; 0x274c <__prologue_saves__+0x10>
     728:	69 83       	std	Y+1, r22	; 0x01
     72a:	7a 83       	std	Y+2, r23	; 0x02
     72c:	8b 83       	std	Y+3, r24	; 0x03
     72e:	9c 83       	std	Y+4, r25	; 0x04
     730:	2d 83       	std	Y+5, r18	; 0x05
     732:	3e 83       	std	Y+6, r19	; 0x06
     734:	4f 83       	std	Y+7, r20	; 0x07
     736:	58 87       	std	Y+8, r21	; 0x08
     738:	b9 e0       	ldi	r27, 0x09	; 9
     73a:	eb 2e       	mov	r14, r27
     73c:	f1 2c       	mov	r15, r1
     73e:	ec 0e       	add	r14, r28
     740:	fd 1e       	adc	r15, r29
     742:	ce 01       	movw	r24, r28
     744:	01 96       	adiw	r24, 0x01	; 1
     746:	b7 01       	movw	r22, r14
     748:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <__unpack_f>
     74c:	8e 01       	movw	r16, r28
     74e:	0f 5e       	subi	r16, 0xEF	; 239
     750:	1f 4f       	sbci	r17, 0xFF	; 255
     752:	ce 01       	movw	r24, r28
     754:	05 96       	adiw	r24, 0x05	; 5
     756:	b8 01       	movw	r22, r16
     758:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <__unpack_f>
     75c:	29 85       	ldd	r18, Y+9	; 0x09
     75e:	22 30       	cpi	r18, 0x02	; 2
     760:	08 f4       	brcc	.+2      	; 0x764 <__divsf3+0x48>
     762:	7e c0       	rjmp	.+252    	; 0x860 <__divsf3+0x144>
     764:	39 89       	ldd	r19, Y+17	; 0x11
     766:	32 30       	cpi	r19, 0x02	; 2
     768:	10 f4       	brcc	.+4      	; 0x76e <__divsf3+0x52>
     76a:	b8 01       	movw	r22, r16
     76c:	7c c0       	rjmp	.+248    	; 0x866 <__divsf3+0x14a>
     76e:	8a 85       	ldd	r24, Y+10	; 0x0a
     770:	9a 89       	ldd	r25, Y+18	; 0x12
     772:	89 27       	eor	r24, r25
     774:	8a 87       	std	Y+10, r24	; 0x0a
     776:	24 30       	cpi	r18, 0x04	; 4
     778:	11 f0       	breq	.+4      	; 0x77e <__divsf3+0x62>
     77a:	22 30       	cpi	r18, 0x02	; 2
     77c:	31 f4       	brne	.+12     	; 0x78a <__divsf3+0x6e>
     77e:	23 17       	cp	r18, r19
     780:	09 f0       	breq	.+2      	; 0x784 <__divsf3+0x68>
     782:	6e c0       	rjmp	.+220    	; 0x860 <__divsf3+0x144>
     784:	6b e6       	ldi	r22, 0x6B	; 107
     786:	70 e0       	ldi	r23, 0x00	; 0
     788:	6e c0       	rjmp	.+220    	; 0x866 <__divsf3+0x14a>
     78a:	34 30       	cpi	r19, 0x04	; 4
     78c:	39 f4       	brne	.+14     	; 0x79c <__divsf3+0x80>
     78e:	1d 86       	std	Y+13, r1	; 0x0d
     790:	1e 86       	std	Y+14, r1	; 0x0e
     792:	1f 86       	std	Y+15, r1	; 0x0f
     794:	18 8a       	std	Y+16, r1	; 0x10
     796:	1c 86       	std	Y+12, r1	; 0x0c
     798:	1b 86       	std	Y+11, r1	; 0x0b
     79a:	04 c0       	rjmp	.+8      	; 0x7a4 <__divsf3+0x88>
     79c:	32 30       	cpi	r19, 0x02	; 2
     79e:	21 f4       	brne	.+8      	; 0x7a8 <__divsf3+0x8c>
     7a0:	84 e0       	ldi	r24, 0x04	; 4
     7a2:	89 87       	std	Y+9, r24	; 0x09
     7a4:	b7 01       	movw	r22, r14
     7a6:	5f c0       	rjmp	.+190    	; 0x866 <__divsf3+0x14a>
     7a8:	2b 85       	ldd	r18, Y+11	; 0x0b
     7aa:	3c 85       	ldd	r19, Y+12	; 0x0c
     7ac:	8b 89       	ldd	r24, Y+19	; 0x13
     7ae:	9c 89       	ldd	r25, Y+20	; 0x14
     7b0:	28 1b       	sub	r18, r24
     7b2:	39 0b       	sbc	r19, r25
     7b4:	3c 87       	std	Y+12, r19	; 0x0c
     7b6:	2b 87       	std	Y+11, r18	; 0x0b
     7b8:	ed 84       	ldd	r14, Y+13	; 0x0d
     7ba:	fe 84       	ldd	r15, Y+14	; 0x0e
     7bc:	0f 85       	ldd	r16, Y+15	; 0x0f
     7be:	18 89       	ldd	r17, Y+16	; 0x10
     7c0:	ad 88       	ldd	r10, Y+21	; 0x15
     7c2:	be 88       	ldd	r11, Y+22	; 0x16
     7c4:	cf 88       	ldd	r12, Y+23	; 0x17
     7c6:	d8 8c       	ldd	r13, Y+24	; 0x18
     7c8:	ea 14       	cp	r14, r10
     7ca:	fb 04       	cpc	r15, r11
     7cc:	0c 05       	cpc	r16, r12
     7ce:	1d 05       	cpc	r17, r13
     7d0:	40 f4       	brcc	.+16     	; 0x7e2 <__divsf3+0xc6>
     7d2:	ee 0c       	add	r14, r14
     7d4:	ff 1c       	adc	r15, r15
     7d6:	00 1f       	adc	r16, r16
     7d8:	11 1f       	adc	r17, r17
     7da:	21 50       	subi	r18, 0x01	; 1
     7dc:	30 40       	sbci	r19, 0x00	; 0
     7de:	3c 87       	std	Y+12, r19	; 0x0c
     7e0:	2b 87       	std	Y+11, r18	; 0x0b
     7e2:	20 e0       	ldi	r18, 0x00	; 0
     7e4:	30 e0       	ldi	r19, 0x00	; 0
     7e6:	40 e0       	ldi	r20, 0x00	; 0
     7e8:	50 e0       	ldi	r21, 0x00	; 0
     7ea:	80 e0       	ldi	r24, 0x00	; 0
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	a0 e0       	ldi	r26, 0x00	; 0
     7f0:	b0 e4       	ldi	r27, 0x40	; 64
     7f2:	60 e0       	ldi	r22, 0x00	; 0
     7f4:	70 e0       	ldi	r23, 0x00	; 0
     7f6:	ea 14       	cp	r14, r10
     7f8:	fb 04       	cpc	r15, r11
     7fa:	0c 05       	cpc	r16, r12
     7fc:	1d 05       	cpc	r17, r13
     7fe:	40 f0       	brcs	.+16     	; 0x810 <__divsf3+0xf4>
     800:	28 2b       	or	r18, r24
     802:	39 2b       	or	r19, r25
     804:	4a 2b       	or	r20, r26
     806:	5b 2b       	or	r21, r27
     808:	ea 18       	sub	r14, r10
     80a:	fb 08       	sbc	r15, r11
     80c:	0c 09       	sbc	r16, r12
     80e:	1d 09       	sbc	r17, r13
     810:	b6 95       	lsr	r27
     812:	a7 95       	ror	r26
     814:	97 95       	ror	r25
     816:	87 95       	ror	r24
     818:	ee 0c       	add	r14, r14
     81a:	ff 1c       	adc	r15, r15
     81c:	00 1f       	adc	r16, r16
     81e:	11 1f       	adc	r17, r17
     820:	6f 5f       	subi	r22, 0xFF	; 255
     822:	7f 4f       	sbci	r23, 0xFF	; 255
     824:	6f 31       	cpi	r22, 0x1F	; 31
     826:	71 05       	cpc	r23, r1
     828:	31 f7       	brne	.-52     	; 0x7f6 <__divsf3+0xda>
     82a:	da 01       	movw	r26, r20
     82c:	c9 01       	movw	r24, r18
     82e:	8f 77       	andi	r24, 0x7F	; 127
     830:	90 70       	andi	r25, 0x00	; 0
     832:	a0 70       	andi	r26, 0x00	; 0
     834:	b0 70       	andi	r27, 0x00	; 0
     836:	80 34       	cpi	r24, 0x40	; 64
     838:	91 05       	cpc	r25, r1
     83a:	a1 05       	cpc	r26, r1
     83c:	b1 05       	cpc	r27, r1
     83e:	61 f4       	brne	.+24     	; 0x858 <__divsf3+0x13c>
     840:	27 fd       	sbrc	r18, 7
     842:	0a c0       	rjmp	.+20     	; 0x858 <__divsf3+0x13c>
     844:	e1 14       	cp	r14, r1
     846:	f1 04       	cpc	r15, r1
     848:	01 05       	cpc	r16, r1
     84a:	11 05       	cpc	r17, r1
     84c:	29 f0       	breq	.+10     	; 0x858 <__divsf3+0x13c>
     84e:	20 5c       	subi	r18, 0xC0	; 192
     850:	3f 4f       	sbci	r19, 0xFF	; 255
     852:	4f 4f       	sbci	r20, 0xFF	; 255
     854:	5f 4f       	sbci	r21, 0xFF	; 255
     856:	20 78       	andi	r18, 0x80	; 128
     858:	2d 87       	std	Y+13, r18	; 0x0d
     85a:	3e 87       	std	Y+14, r19	; 0x0e
     85c:	4f 87       	std	Y+15, r20	; 0x0f
     85e:	58 8b       	std	Y+16, r21	; 0x10
     860:	be 01       	movw	r22, r28
     862:	67 5f       	subi	r22, 0xF7	; 247
     864:	7f 4f       	sbci	r23, 0xFF	; 255
     866:	cb 01       	movw	r24, r22
     868:	0e 94 1e 05 	call	0xa3c	; 0xa3c <__pack_f>
     86c:	68 96       	adiw	r28, 0x18	; 24
     86e:	ea e0       	ldi	r30, 0x0A	; 10
     870:	0c 94 c2 13 	jmp	0x2784	; 0x2784 <__epilogue_restores__+0x10>

00000874 <__gtsf2>:
     874:	a8 e1       	ldi	r26, 0x18	; 24
     876:	b0 e0       	ldi	r27, 0x00	; 0
     878:	e0 e4       	ldi	r30, 0x40	; 64
     87a:	f4 e0       	ldi	r31, 0x04	; 4
     87c:	0c 94 aa 13 	jmp	0x2754	; 0x2754 <__prologue_saves__+0x18>
     880:	69 83       	std	Y+1, r22	; 0x01
     882:	7a 83       	std	Y+2, r23	; 0x02
     884:	8b 83       	std	Y+3, r24	; 0x03
     886:	9c 83       	std	Y+4, r25	; 0x04
     888:	2d 83       	std	Y+5, r18	; 0x05
     88a:	3e 83       	std	Y+6, r19	; 0x06
     88c:	4f 83       	std	Y+7, r20	; 0x07
     88e:	58 87       	std	Y+8, r21	; 0x08
     890:	89 e0       	ldi	r24, 0x09	; 9
     892:	e8 2e       	mov	r14, r24
     894:	f1 2c       	mov	r15, r1
     896:	ec 0e       	add	r14, r28
     898:	fd 1e       	adc	r15, r29
     89a:	ce 01       	movw	r24, r28
     89c:	01 96       	adiw	r24, 0x01	; 1
     89e:	b7 01       	movw	r22, r14
     8a0:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <__unpack_f>
     8a4:	8e 01       	movw	r16, r28
     8a6:	0f 5e       	subi	r16, 0xEF	; 239
     8a8:	1f 4f       	sbci	r17, 0xFF	; 255
     8aa:	ce 01       	movw	r24, r28
     8ac:	05 96       	adiw	r24, 0x05	; 5
     8ae:	b8 01       	movw	r22, r16
     8b0:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <__unpack_f>
     8b4:	89 85       	ldd	r24, Y+9	; 0x09
     8b6:	82 30       	cpi	r24, 0x02	; 2
     8b8:	40 f0       	brcs	.+16     	; 0x8ca <__gtsf2+0x56>
     8ba:	89 89       	ldd	r24, Y+17	; 0x11
     8bc:	82 30       	cpi	r24, 0x02	; 2
     8be:	28 f0       	brcs	.+10     	; 0x8ca <__gtsf2+0x56>
     8c0:	c7 01       	movw	r24, r14
     8c2:	b8 01       	movw	r22, r16
     8c4:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <__fpcmp_parts_f>
     8c8:	01 c0       	rjmp	.+2      	; 0x8cc <__gtsf2+0x58>
     8ca:	8f ef       	ldi	r24, 0xFF	; 255
     8cc:	68 96       	adiw	r28, 0x18	; 24
     8ce:	e6 e0       	ldi	r30, 0x06	; 6
     8d0:	0c 94 c6 13 	jmp	0x278c	; 0x278c <__epilogue_restores__+0x18>

000008d4 <__gesf2>:
     8d4:	a8 e1       	ldi	r26, 0x18	; 24
     8d6:	b0 e0       	ldi	r27, 0x00	; 0
     8d8:	e0 e7       	ldi	r30, 0x70	; 112
     8da:	f4 e0       	ldi	r31, 0x04	; 4
     8dc:	0c 94 aa 13 	jmp	0x2754	; 0x2754 <__prologue_saves__+0x18>
     8e0:	69 83       	std	Y+1, r22	; 0x01
     8e2:	7a 83       	std	Y+2, r23	; 0x02
     8e4:	8b 83       	std	Y+3, r24	; 0x03
     8e6:	9c 83       	std	Y+4, r25	; 0x04
     8e8:	2d 83       	std	Y+5, r18	; 0x05
     8ea:	3e 83       	std	Y+6, r19	; 0x06
     8ec:	4f 83       	std	Y+7, r20	; 0x07
     8ee:	58 87       	std	Y+8, r21	; 0x08
     8f0:	89 e0       	ldi	r24, 0x09	; 9
     8f2:	e8 2e       	mov	r14, r24
     8f4:	f1 2c       	mov	r15, r1
     8f6:	ec 0e       	add	r14, r28
     8f8:	fd 1e       	adc	r15, r29
     8fa:	ce 01       	movw	r24, r28
     8fc:	01 96       	adiw	r24, 0x01	; 1
     8fe:	b7 01       	movw	r22, r14
     900:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <__unpack_f>
     904:	8e 01       	movw	r16, r28
     906:	0f 5e       	subi	r16, 0xEF	; 239
     908:	1f 4f       	sbci	r17, 0xFF	; 255
     90a:	ce 01       	movw	r24, r28
     90c:	05 96       	adiw	r24, 0x05	; 5
     90e:	b8 01       	movw	r22, r16
     910:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <__unpack_f>
     914:	89 85       	ldd	r24, Y+9	; 0x09
     916:	82 30       	cpi	r24, 0x02	; 2
     918:	40 f0       	brcs	.+16     	; 0x92a <__gesf2+0x56>
     91a:	89 89       	ldd	r24, Y+17	; 0x11
     91c:	82 30       	cpi	r24, 0x02	; 2
     91e:	28 f0       	brcs	.+10     	; 0x92a <__gesf2+0x56>
     920:	c7 01       	movw	r24, r14
     922:	b8 01       	movw	r22, r16
     924:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <__fpcmp_parts_f>
     928:	01 c0       	rjmp	.+2      	; 0x92c <__gesf2+0x58>
     92a:	8f ef       	ldi	r24, 0xFF	; 255
     92c:	68 96       	adiw	r28, 0x18	; 24
     92e:	e6 e0       	ldi	r30, 0x06	; 6
     930:	0c 94 c6 13 	jmp	0x278c	; 0x278c <__epilogue_restores__+0x18>

00000934 <__ltsf2>:
     934:	a8 e1       	ldi	r26, 0x18	; 24
     936:	b0 e0       	ldi	r27, 0x00	; 0
     938:	e0 ea       	ldi	r30, 0xA0	; 160
     93a:	f4 e0       	ldi	r31, 0x04	; 4
     93c:	0c 94 aa 13 	jmp	0x2754	; 0x2754 <__prologue_saves__+0x18>
     940:	69 83       	std	Y+1, r22	; 0x01
     942:	7a 83       	std	Y+2, r23	; 0x02
     944:	8b 83       	std	Y+3, r24	; 0x03
     946:	9c 83       	std	Y+4, r25	; 0x04
     948:	2d 83       	std	Y+5, r18	; 0x05
     94a:	3e 83       	std	Y+6, r19	; 0x06
     94c:	4f 83       	std	Y+7, r20	; 0x07
     94e:	58 87       	std	Y+8, r21	; 0x08
     950:	89 e0       	ldi	r24, 0x09	; 9
     952:	e8 2e       	mov	r14, r24
     954:	f1 2c       	mov	r15, r1
     956:	ec 0e       	add	r14, r28
     958:	fd 1e       	adc	r15, r29
     95a:	ce 01       	movw	r24, r28
     95c:	01 96       	adiw	r24, 0x01	; 1
     95e:	b7 01       	movw	r22, r14
     960:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <__unpack_f>
     964:	8e 01       	movw	r16, r28
     966:	0f 5e       	subi	r16, 0xEF	; 239
     968:	1f 4f       	sbci	r17, 0xFF	; 255
     96a:	ce 01       	movw	r24, r28
     96c:	05 96       	adiw	r24, 0x05	; 5
     96e:	b8 01       	movw	r22, r16
     970:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <__unpack_f>
     974:	89 85       	ldd	r24, Y+9	; 0x09
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	40 f0       	brcs	.+16     	; 0x98a <__ltsf2+0x56>
     97a:	89 89       	ldd	r24, Y+17	; 0x11
     97c:	82 30       	cpi	r24, 0x02	; 2
     97e:	28 f0       	brcs	.+10     	; 0x98a <__ltsf2+0x56>
     980:	c7 01       	movw	r24, r14
     982:	b8 01       	movw	r22, r16
     984:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <__fpcmp_parts_f>
     988:	01 c0       	rjmp	.+2      	; 0x98c <__ltsf2+0x58>
     98a:	81 e0       	ldi	r24, 0x01	; 1
     98c:	68 96       	adiw	r28, 0x18	; 24
     98e:	e6 e0       	ldi	r30, 0x06	; 6
     990:	0c 94 c6 13 	jmp	0x278c	; 0x278c <__epilogue_restores__+0x18>

00000994 <__fixsfsi>:
     994:	ac e0       	ldi	r26, 0x0C	; 12
     996:	b0 e0       	ldi	r27, 0x00	; 0
     998:	e0 ed       	ldi	r30, 0xD0	; 208
     99a:	f4 e0       	ldi	r31, 0x04	; 4
     99c:	0c 94 ae 13 	jmp	0x275c	; 0x275c <__prologue_saves__+0x20>
     9a0:	69 83       	std	Y+1, r22	; 0x01
     9a2:	7a 83       	std	Y+2, r23	; 0x02
     9a4:	8b 83       	std	Y+3, r24	; 0x03
     9a6:	9c 83       	std	Y+4, r25	; 0x04
     9a8:	ce 01       	movw	r24, r28
     9aa:	01 96       	adiw	r24, 0x01	; 1
     9ac:	be 01       	movw	r22, r28
     9ae:	6b 5f       	subi	r22, 0xFB	; 251
     9b0:	7f 4f       	sbci	r23, 0xFF	; 255
     9b2:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <__unpack_f>
     9b6:	8d 81       	ldd	r24, Y+5	; 0x05
     9b8:	82 30       	cpi	r24, 0x02	; 2
     9ba:	61 f1       	breq	.+88     	; 0xa14 <__fixsfsi+0x80>
     9bc:	82 30       	cpi	r24, 0x02	; 2
     9be:	50 f1       	brcs	.+84     	; 0xa14 <__fixsfsi+0x80>
     9c0:	84 30       	cpi	r24, 0x04	; 4
     9c2:	21 f4       	brne	.+8      	; 0x9cc <__fixsfsi+0x38>
     9c4:	8e 81       	ldd	r24, Y+6	; 0x06
     9c6:	88 23       	and	r24, r24
     9c8:	51 f1       	breq	.+84     	; 0xa1e <__fixsfsi+0x8a>
     9ca:	2e c0       	rjmp	.+92     	; 0xa28 <__fixsfsi+0x94>
     9cc:	2f 81       	ldd	r18, Y+7	; 0x07
     9ce:	38 85       	ldd	r19, Y+8	; 0x08
     9d0:	37 fd       	sbrc	r19, 7
     9d2:	20 c0       	rjmp	.+64     	; 0xa14 <__fixsfsi+0x80>
     9d4:	6e 81       	ldd	r22, Y+6	; 0x06
     9d6:	2f 31       	cpi	r18, 0x1F	; 31
     9d8:	31 05       	cpc	r19, r1
     9da:	1c f0       	brlt	.+6      	; 0x9e2 <__fixsfsi+0x4e>
     9dc:	66 23       	and	r22, r22
     9de:	f9 f0       	breq	.+62     	; 0xa1e <__fixsfsi+0x8a>
     9e0:	23 c0       	rjmp	.+70     	; 0xa28 <__fixsfsi+0x94>
     9e2:	8e e1       	ldi	r24, 0x1E	; 30
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	82 1b       	sub	r24, r18
     9e8:	93 0b       	sbc	r25, r19
     9ea:	29 85       	ldd	r18, Y+9	; 0x09
     9ec:	3a 85       	ldd	r19, Y+10	; 0x0a
     9ee:	4b 85       	ldd	r20, Y+11	; 0x0b
     9f0:	5c 85       	ldd	r21, Y+12	; 0x0c
     9f2:	04 c0       	rjmp	.+8      	; 0x9fc <__fixsfsi+0x68>
     9f4:	56 95       	lsr	r21
     9f6:	47 95       	ror	r20
     9f8:	37 95       	ror	r19
     9fa:	27 95       	ror	r18
     9fc:	8a 95       	dec	r24
     9fe:	d2 f7       	brpl	.-12     	; 0x9f4 <__fixsfsi+0x60>
     a00:	66 23       	and	r22, r22
     a02:	b1 f0       	breq	.+44     	; 0xa30 <__fixsfsi+0x9c>
     a04:	50 95       	com	r21
     a06:	40 95       	com	r20
     a08:	30 95       	com	r19
     a0a:	21 95       	neg	r18
     a0c:	3f 4f       	sbci	r19, 0xFF	; 255
     a0e:	4f 4f       	sbci	r20, 0xFF	; 255
     a10:	5f 4f       	sbci	r21, 0xFF	; 255
     a12:	0e c0       	rjmp	.+28     	; 0xa30 <__fixsfsi+0x9c>
     a14:	20 e0       	ldi	r18, 0x00	; 0
     a16:	30 e0       	ldi	r19, 0x00	; 0
     a18:	40 e0       	ldi	r20, 0x00	; 0
     a1a:	50 e0       	ldi	r21, 0x00	; 0
     a1c:	09 c0       	rjmp	.+18     	; 0xa30 <__fixsfsi+0x9c>
     a1e:	2f ef       	ldi	r18, 0xFF	; 255
     a20:	3f ef       	ldi	r19, 0xFF	; 255
     a22:	4f ef       	ldi	r20, 0xFF	; 255
     a24:	5f e7       	ldi	r21, 0x7F	; 127
     a26:	04 c0       	rjmp	.+8      	; 0xa30 <__fixsfsi+0x9c>
     a28:	20 e0       	ldi	r18, 0x00	; 0
     a2a:	30 e0       	ldi	r19, 0x00	; 0
     a2c:	40 e0       	ldi	r20, 0x00	; 0
     a2e:	50 e8       	ldi	r21, 0x80	; 128
     a30:	b9 01       	movw	r22, r18
     a32:	ca 01       	movw	r24, r20
     a34:	2c 96       	adiw	r28, 0x0c	; 12
     a36:	e2 e0       	ldi	r30, 0x02	; 2
     a38:	0c 94 ca 13 	jmp	0x2794	; 0x2794 <__epilogue_restores__+0x20>

00000a3c <__pack_f>:
     a3c:	df 92       	push	r13
     a3e:	ef 92       	push	r14
     a40:	ff 92       	push	r15
     a42:	0f 93       	push	r16
     a44:	1f 93       	push	r17
     a46:	fc 01       	movw	r30, r24
     a48:	e4 80       	ldd	r14, Z+4	; 0x04
     a4a:	f5 80       	ldd	r15, Z+5	; 0x05
     a4c:	06 81       	ldd	r16, Z+6	; 0x06
     a4e:	17 81       	ldd	r17, Z+7	; 0x07
     a50:	d1 80       	ldd	r13, Z+1	; 0x01
     a52:	80 81       	ld	r24, Z
     a54:	82 30       	cpi	r24, 0x02	; 2
     a56:	48 f4       	brcc	.+18     	; 0xa6a <__pack_f+0x2e>
     a58:	80 e0       	ldi	r24, 0x00	; 0
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	a0 e1       	ldi	r26, 0x10	; 16
     a5e:	b0 e0       	ldi	r27, 0x00	; 0
     a60:	e8 2a       	or	r14, r24
     a62:	f9 2a       	or	r15, r25
     a64:	0a 2b       	or	r16, r26
     a66:	1b 2b       	or	r17, r27
     a68:	a5 c0       	rjmp	.+330    	; 0xbb4 <__pack_f+0x178>
     a6a:	84 30       	cpi	r24, 0x04	; 4
     a6c:	09 f4       	brne	.+2      	; 0xa70 <__pack_f+0x34>
     a6e:	9f c0       	rjmp	.+318    	; 0xbae <__pack_f+0x172>
     a70:	82 30       	cpi	r24, 0x02	; 2
     a72:	21 f4       	brne	.+8      	; 0xa7c <__pack_f+0x40>
     a74:	ee 24       	eor	r14, r14
     a76:	ff 24       	eor	r15, r15
     a78:	87 01       	movw	r16, r14
     a7a:	05 c0       	rjmp	.+10     	; 0xa86 <__pack_f+0x4a>
     a7c:	e1 14       	cp	r14, r1
     a7e:	f1 04       	cpc	r15, r1
     a80:	01 05       	cpc	r16, r1
     a82:	11 05       	cpc	r17, r1
     a84:	19 f4       	brne	.+6      	; 0xa8c <__pack_f+0x50>
     a86:	e0 e0       	ldi	r30, 0x00	; 0
     a88:	f0 e0       	ldi	r31, 0x00	; 0
     a8a:	96 c0       	rjmp	.+300    	; 0xbb8 <__pack_f+0x17c>
     a8c:	62 81       	ldd	r22, Z+2	; 0x02
     a8e:	73 81       	ldd	r23, Z+3	; 0x03
     a90:	9f ef       	ldi	r25, 0xFF	; 255
     a92:	62 38       	cpi	r22, 0x82	; 130
     a94:	79 07       	cpc	r23, r25
     a96:	0c f0       	brlt	.+2      	; 0xa9a <__pack_f+0x5e>
     a98:	5b c0       	rjmp	.+182    	; 0xb50 <__pack_f+0x114>
     a9a:	22 e8       	ldi	r18, 0x82	; 130
     a9c:	3f ef       	ldi	r19, 0xFF	; 255
     a9e:	26 1b       	sub	r18, r22
     aa0:	37 0b       	sbc	r19, r23
     aa2:	2a 31       	cpi	r18, 0x1A	; 26
     aa4:	31 05       	cpc	r19, r1
     aa6:	2c f0       	brlt	.+10     	; 0xab2 <__pack_f+0x76>
     aa8:	20 e0       	ldi	r18, 0x00	; 0
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	2a c0       	rjmp	.+84     	; 0xb06 <__pack_f+0xca>
     ab2:	b8 01       	movw	r22, r16
     ab4:	a7 01       	movw	r20, r14
     ab6:	02 2e       	mov	r0, r18
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__pack_f+0x86>
     aba:	76 95       	lsr	r23
     abc:	67 95       	ror	r22
     abe:	57 95       	ror	r21
     ac0:	47 95       	ror	r20
     ac2:	0a 94       	dec	r0
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__pack_f+0x7e>
     ac6:	81 e0       	ldi	r24, 0x01	; 1
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	a0 e0       	ldi	r26, 0x00	; 0
     acc:	b0 e0       	ldi	r27, 0x00	; 0
     ace:	04 c0       	rjmp	.+8      	; 0xad8 <__pack_f+0x9c>
     ad0:	88 0f       	add	r24, r24
     ad2:	99 1f       	adc	r25, r25
     ad4:	aa 1f       	adc	r26, r26
     ad6:	bb 1f       	adc	r27, r27
     ad8:	2a 95       	dec	r18
     ada:	d2 f7       	brpl	.-12     	; 0xad0 <__pack_f+0x94>
     adc:	01 97       	sbiw	r24, 0x01	; 1
     ade:	a1 09       	sbc	r26, r1
     ae0:	b1 09       	sbc	r27, r1
     ae2:	8e 21       	and	r24, r14
     ae4:	9f 21       	and	r25, r15
     ae6:	a0 23       	and	r26, r16
     ae8:	b1 23       	and	r27, r17
     aea:	00 97       	sbiw	r24, 0x00	; 0
     aec:	a1 05       	cpc	r26, r1
     aee:	b1 05       	cpc	r27, r1
     af0:	21 f0       	breq	.+8      	; 0xafa <__pack_f+0xbe>
     af2:	81 e0       	ldi	r24, 0x01	; 1
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	a0 e0       	ldi	r26, 0x00	; 0
     af8:	b0 e0       	ldi	r27, 0x00	; 0
     afa:	9a 01       	movw	r18, r20
     afc:	ab 01       	movw	r20, r22
     afe:	28 2b       	or	r18, r24
     b00:	39 2b       	or	r19, r25
     b02:	4a 2b       	or	r20, r26
     b04:	5b 2b       	or	r21, r27
     b06:	da 01       	movw	r26, r20
     b08:	c9 01       	movw	r24, r18
     b0a:	8f 77       	andi	r24, 0x7F	; 127
     b0c:	90 70       	andi	r25, 0x00	; 0
     b0e:	a0 70       	andi	r26, 0x00	; 0
     b10:	b0 70       	andi	r27, 0x00	; 0
     b12:	80 34       	cpi	r24, 0x40	; 64
     b14:	91 05       	cpc	r25, r1
     b16:	a1 05       	cpc	r26, r1
     b18:	b1 05       	cpc	r27, r1
     b1a:	39 f4       	brne	.+14     	; 0xb2a <__pack_f+0xee>
     b1c:	27 ff       	sbrs	r18, 7
     b1e:	09 c0       	rjmp	.+18     	; 0xb32 <__pack_f+0xf6>
     b20:	20 5c       	subi	r18, 0xC0	; 192
     b22:	3f 4f       	sbci	r19, 0xFF	; 255
     b24:	4f 4f       	sbci	r20, 0xFF	; 255
     b26:	5f 4f       	sbci	r21, 0xFF	; 255
     b28:	04 c0       	rjmp	.+8      	; 0xb32 <__pack_f+0xf6>
     b2a:	21 5c       	subi	r18, 0xC1	; 193
     b2c:	3f 4f       	sbci	r19, 0xFF	; 255
     b2e:	4f 4f       	sbci	r20, 0xFF	; 255
     b30:	5f 4f       	sbci	r21, 0xFF	; 255
     b32:	e0 e0       	ldi	r30, 0x00	; 0
     b34:	f0 e0       	ldi	r31, 0x00	; 0
     b36:	20 30       	cpi	r18, 0x00	; 0
     b38:	a0 e0       	ldi	r26, 0x00	; 0
     b3a:	3a 07       	cpc	r19, r26
     b3c:	a0 e0       	ldi	r26, 0x00	; 0
     b3e:	4a 07       	cpc	r20, r26
     b40:	a0 e4       	ldi	r26, 0x40	; 64
     b42:	5a 07       	cpc	r21, r26
     b44:	10 f0       	brcs	.+4      	; 0xb4a <__pack_f+0x10e>
     b46:	e1 e0       	ldi	r30, 0x01	; 1
     b48:	f0 e0       	ldi	r31, 0x00	; 0
     b4a:	79 01       	movw	r14, r18
     b4c:	8a 01       	movw	r16, r20
     b4e:	27 c0       	rjmp	.+78     	; 0xb9e <__pack_f+0x162>
     b50:	60 38       	cpi	r22, 0x80	; 128
     b52:	71 05       	cpc	r23, r1
     b54:	64 f5       	brge	.+88     	; 0xbae <__pack_f+0x172>
     b56:	fb 01       	movw	r30, r22
     b58:	e1 58       	subi	r30, 0x81	; 129
     b5a:	ff 4f       	sbci	r31, 0xFF	; 255
     b5c:	d8 01       	movw	r26, r16
     b5e:	c7 01       	movw	r24, r14
     b60:	8f 77       	andi	r24, 0x7F	; 127
     b62:	90 70       	andi	r25, 0x00	; 0
     b64:	a0 70       	andi	r26, 0x00	; 0
     b66:	b0 70       	andi	r27, 0x00	; 0
     b68:	80 34       	cpi	r24, 0x40	; 64
     b6a:	91 05       	cpc	r25, r1
     b6c:	a1 05       	cpc	r26, r1
     b6e:	b1 05       	cpc	r27, r1
     b70:	39 f4       	brne	.+14     	; 0xb80 <__pack_f+0x144>
     b72:	e7 fe       	sbrs	r14, 7
     b74:	0d c0       	rjmp	.+26     	; 0xb90 <__pack_f+0x154>
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	a0 e0       	ldi	r26, 0x00	; 0
     b7c:	b0 e0       	ldi	r27, 0x00	; 0
     b7e:	04 c0       	rjmp	.+8      	; 0xb88 <__pack_f+0x14c>
     b80:	8f e3       	ldi	r24, 0x3F	; 63
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	a0 e0       	ldi	r26, 0x00	; 0
     b86:	b0 e0       	ldi	r27, 0x00	; 0
     b88:	e8 0e       	add	r14, r24
     b8a:	f9 1e       	adc	r15, r25
     b8c:	0a 1f       	adc	r16, r26
     b8e:	1b 1f       	adc	r17, r27
     b90:	17 ff       	sbrs	r17, 7
     b92:	05 c0       	rjmp	.+10     	; 0xb9e <__pack_f+0x162>
     b94:	16 95       	lsr	r17
     b96:	07 95       	ror	r16
     b98:	f7 94       	ror	r15
     b9a:	e7 94       	ror	r14
     b9c:	31 96       	adiw	r30, 0x01	; 1
     b9e:	87 e0       	ldi	r24, 0x07	; 7
     ba0:	16 95       	lsr	r17
     ba2:	07 95       	ror	r16
     ba4:	f7 94       	ror	r15
     ba6:	e7 94       	ror	r14
     ba8:	8a 95       	dec	r24
     baa:	d1 f7       	brne	.-12     	; 0xba0 <__pack_f+0x164>
     bac:	05 c0       	rjmp	.+10     	; 0xbb8 <__pack_f+0x17c>
     bae:	ee 24       	eor	r14, r14
     bb0:	ff 24       	eor	r15, r15
     bb2:	87 01       	movw	r16, r14
     bb4:	ef ef       	ldi	r30, 0xFF	; 255
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	6e 2f       	mov	r22, r30
     bba:	67 95       	ror	r22
     bbc:	66 27       	eor	r22, r22
     bbe:	67 95       	ror	r22
     bc0:	90 2f       	mov	r25, r16
     bc2:	9f 77       	andi	r25, 0x7F	; 127
     bc4:	d7 94       	ror	r13
     bc6:	dd 24       	eor	r13, r13
     bc8:	d7 94       	ror	r13
     bca:	8e 2f       	mov	r24, r30
     bcc:	86 95       	lsr	r24
     bce:	49 2f       	mov	r20, r25
     bd0:	46 2b       	or	r20, r22
     bd2:	58 2f       	mov	r21, r24
     bd4:	5d 29       	or	r21, r13
     bd6:	b7 01       	movw	r22, r14
     bd8:	ca 01       	movw	r24, r20
     bda:	1f 91       	pop	r17
     bdc:	0f 91       	pop	r16
     bde:	ff 90       	pop	r15
     be0:	ef 90       	pop	r14
     be2:	df 90       	pop	r13
     be4:	08 95       	ret

00000be6 <__unpack_f>:
     be6:	fc 01       	movw	r30, r24
     be8:	db 01       	movw	r26, r22
     bea:	40 81       	ld	r20, Z
     bec:	51 81       	ldd	r21, Z+1	; 0x01
     bee:	22 81       	ldd	r18, Z+2	; 0x02
     bf0:	62 2f       	mov	r22, r18
     bf2:	6f 77       	andi	r22, 0x7F	; 127
     bf4:	70 e0       	ldi	r23, 0x00	; 0
     bf6:	22 1f       	adc	r18, r18
     bf8:	22 27       	eor	r18, r18
     bfa:	22 1f       	adc	r18, r18
     bfc:	93 81       	ldd	r25, Z+3	; 0x03
     bfe:	89 2f       	mov	r24, r25
     c00:	88 0f       	add	r24, r24
     c02:	82 2b       	or	r24, r18
     c04:	28 2f       	mov	r18, r24
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	99 1f       	adc	r25, r25
     c0a:	99 27       	eor	r25, r25
     c0c:	99 1f       	adc	r25, r25
     c0e:	11 96       	adiw	r26, 0x01	; 1
     c10:	9c 93       	st	X, r25
     c12:	11 97       	sbiw	r26, 0x01	; 1
     c14:	21 15       	cp	r18, r1
     c16:	31 05       	cpc	r19, r1
     c18:	a9 f5       	brne	.+106    	; 0xc84 <__unpack_f+0x9e>
     c1a:	41 15       	cp	r20, r1
     c1c:	51 05       	cpc	r21, r1
     c1e:	61 05       	cpc	r22, r1
     c20:	71 05       	cpc	r23, r1
     c22:	11 f4       	brne	.+4      	; 0xc28 <__unpack_f+0x42>
     c24:	82 e0       	ldi	r24, 0x02	; 2
     c26:	37 c0       	rjmp	.+110    	; 0xc96 <__unpack_f+0xb0>
     c28:	82 e8       	ldi	r24, 0x82	; 130
     c2a:	9f ef       	ldi	r25, 0xFF	; 255
     c2c:	13 96       	adiw	r26, 0x03	; 3
     c2e:	9c 93       	st	X, r25
     c30:	8e 93       	st	-X, r24
     c32:	12 97       	sbiw	r26, 0x02	; 2
     c34:	9a 01       	movw	r18, r20
     c36:	ab 01       	movw	r20, r22
     c38:	67 e0       	ldi	r22, 0x07	; 7
     c3a:	22 0f       	add	r18, r18
     c3c:	33 1f       	adc	r19, r19
     c3e:	44 1f       	adc	r20, r20
     c40:	55 1f       	adc	r21, r21
     c42:	6a 95       	dec	r22
     c44:	d1 f7       	brne	.-12     	; 0xc3a <__unpack_f+0x54>
     c46:	83 e0       	ldi	r24, 0x03	; 3
     c48:	8c 93       	st	X, r24
     c4a:	0d c0       	rjmp	.+26     	; 0xc66 <__unpack_f+0x80>
     c4c:	22 0f       	add	r18, r18
     c4e:	33 1f       	adc	r19, r19
     c50:	44 1f       	adc	r20, r20
     c52:	55 1f       	adc	r21, r21
     c54:	12 96       	adiw	r26, 0x02	; 2
     c56:	8d 91       	ld	r24, X+
     c58:	9c 91       	ld	r25, X
     c5a:	13 97       	sbiw	r26, 0x03	; 3
     c5c:	01 97       	sbiw	r24, 0x01	; 1
     c5e:	13 96       	adiw	r26, 0x03	; 3
     c60:	9c 93       	st	X, r25
     c62:	8e 93       	st	-X, r24
     c64:	12 97       	sbiw	r26, 0x02	; 2
     c66:	20 30       	cpi	r18, 0x00	; 0
     c68:	80 e0       	ldi	r24, 0x00	; 0
     c6a:	38 07       	cpc	r19, r24
     c6c:	80 e0       	ldi	r24, 0x00	; 0
     c6e:	48 07       	cpc	r20, r24
     c70:	80 e4       	ldi	r24, 0x40	; 64
     c72:	58 07       	cpc	r21, r24
     c74:	58 f3       	brcs	.-42     	; 0xc4c <__unpack_f+0x66>
     c76:	14 96       	adiw	r26, 0x04	; 4
     c78:	2d 93       	st	X+, r18
     c7a:	3d 93       	st	X+, r19
     c7c:	4d 93       	st	X+, r20
     c7e:	5c 93       	st	X, r21
     c80:	17 97       	sbiw	r26, 0x07	; 7
     c82:	08 95       	ret
     c84:	2f 3f       	cpi	r18, 0xFF	; 255
     c86:	31 05       	cpc	r19, r1
     c88:	79 f4       	brne	.+30     	; 0xca8 <__unpack_f+0xc2>
     c8a:	41 15       	cp	r20, r1
     c8c:	51 05       	cpc	r21, r1
     c8e:	61 05       	cpc	r22, r1
     c90:	71 05       	cpc	r23, r1
     c92:	19 f4       	brne	.+6      	; 0xc9a <__unpack_f+0xb4>
     c94:	84 e0       	ldi	r24, 0x04	; 4
     c96:	8c 93       	st	X, r24
     c98:	08 95       	ret
     c9a:	64 ff       	sbrs	r22, 4
     c9c:	03 c0       	rjmp	.+6      	; 0xca4 <__unpack_f+0xbe>
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	8c 93       	st	X, r24
     ca2:	12 c0       	rjmp	.+36     	; 0xcc8 <__unpack_f+0xe2>
     ca4:	1c 92       	st	X, r1
     ca6:	10 c0       	rjmp	.+32     	; 0xcc8 <__unpack_f+0xe2>
     ca8:	2f 57       	subi	r18, 0x7F	; 127
     caa:	30 40       	sbci	r19, 0x00	; 0
     cac:	13 96       	adiw	r26, 0x03	; 3
     cae:	3c 93       	st	X, r19
     cb0:	2e 93       	st	-X, r18
     cb2:	12 97       	sbiw	r26, 0x02	; 2
     cb4:	83 e0       	ldi	r24, 0x03	; 3
     cb6:	8c 93       	st	X, r24
     cb8:	87 e0       	ldi	r24, 0x07	; 7
     cba:	44 0f       	add	r20, r20
     cbc:	55 1f       	adc	r21, r21
     cbe:	66 1f       	adc	r22, r22
     cc0:	77 1f       	adc	r23, r23
     cc2:	8a 95       	dec	r24
     cc4:	d1 f7       	brne	.-12     	; 0xcba <__unpack_f+0xd4>
     cc6:	70 64       	ori	r23, 0x40	; 64
     cc8:	14 96       	adiw	r26, 0x04	; 4
     cca:	4d 93       	st	X+, r20
     ccc:	5d 93       	st	X+, r21
     cce:	6d 93       	st	X+, r22
     cd0:	7c 93       	st	X, r23
     cd2:	17 97       	sbiw	r26, 0x07	; 7
     cd4:	08 95       	ret

00000cd6 <__fpcmp_parts_f>:
     cd6:	1f 93       	push	r17
     cd8:	dc 01       	movw	r26, r24
     cda:	fb 01       	movw	r30, r22
     cdc:	9c 91       	ld	r25, X
     cde:	92 30       	cpi	r25, 0x02	; 2
     ce0:	08 f4       	brcc	.+2      	; 0xce4 <__fpcmp_parts_f+0xe>
     ce2:	47 c0       	rjmp	.+142    	; 0xd72 <__fpcmp_parts_f+0x9c>
     ce4:	80 81       	ld	r24, Z
     ce6:	82 30       	cpi	r24, 0x02	; 2
     ce8:	08 f4       	brcc	.+2      	; 0xcec <__fpcmp_parts_f+0x16>
     cea:	43 c0       	rjmp	.+134    	; 0xd72 <__fpcmp_parts_f+0x9c>
     cec:	94 30       	cpi	r25, 0x04	; 4
     cee:	51 f4       	brne	.+20     	; 0xd04 <__fpcmp_parts_f+0x2e>
     cf0:	11 96       	adiw	r26, 0x01	; 1
     cf2:	1c 91       	ld	r17, X
     cf4:	84 30       	cpi	r24, 0x04	; 4
     cf6:	99 f5       	brne	.+102    	; 0xd5e <__fpcmp_parts_f+0x88>
     cf8:	81 81       	ldd	r24, Z+1	; 0x01
     cfa:	68 2f       	mov	r22, r24
     cfc:	70 e0       	ldi	r23, 0x00	; 0
     cfe:	61 1b       	sub	r22, r17
     d00:	71 09       	sbc	r23, r1
     d02:	3f c0       	rjmp	.+126    	; 0xd82 <__fpcmp_parts_f+0xac>
     d04:	84 30       	cpi	r24, 0x04	; 4
     d06:	21 f0       	breq	.+8      	; 0xd10 <__fpcmp_parts_f+0x3a>
     d08:	92 30       	cpi	r25, 0x02	; 2
     d0a:	31 f4       	brne	.+12     	; 0xd18 <__fpcmp_parts_f+0x42>
     d0c:	82 30       	cpi	r24, 0x02	; 2
     d0e:	b9 f1       	breq	.+110    	; 0xd7e <__fpcmp_parts_f+0xa8>
     d10:	81 81       	ldd	r24, Z+1	; 0x01
     d12:	88 23       	and	r24, r24
     d14:	89 f1       	breq	.+98     	; 0xd78 <__fpcmp_parts_f+0xa2>
     d16:	2d c0       	rjmp	.+90     	; 0xd72 <__fpcmp_parts_f+0x9c>
     d18:	11 96       	adiw	r26, 0x01	; 1
     d1a:	1c 91       	ld	r17, X
     d1c:	11 97       	sbiw	r26, 0x01	; 1
     d1e:	82 30       	cpi	r24, 0x02	; 2
     d20:	f1 f0       	breq	.+60     	; 0xd5e <__fpcmp_parts_f+0x88>
     d22:	81 81       	ldd	r24, Z+1	; 0x01
     d24:	18 17       	cp	r17, r24
     d26:	d9 f4       	brne	.+54     	; 0xd5e <__fpcmp_parts_f+0x88>
     d28:	12 96       	adiw	r26, 0x02	; 2
     d2a:	2d 91       	ld	r18, X+
     d2c:	3c 91       	ld	r19, X
     d2e:	13 97       	sbiw	r26, 0x03	; 3
     d30:	82 81       	ldd	r24, Z+2	; 0x02
     d32:	93 81       	ldd	r25, Z+3	; 0x03
     d34:	82 17       	cp	r24, r18
     d36:	93 07       	cpc	r25, r19
     d38:	94 f0       	brlt	.+36     	; 0xd5e <__fpcmp_parts_f+0x88>
     d3a:	28 17       	cp	r18, r24
     d3c:	39 07       	cpc	r19, r25
     d3e:	bc f0       	brlt	.+46     	; 0xd6e <__fpcmp_parts_f+0x98>
     d40:	14 96       	adiw	r26, 0x04	; 4
     d42:	8d 91       	ld	r24, X+
     d44:	9d 91       	ld	r25, X+
     d46:	0d 90       	ld	r0, X+
     d48:	bc 91       	ld	r27, X
     d4a:	a0 2d       	mov	r26, r0
     d4c:	24 81       	ldd	r18, Z+4	; 0x04
     d4e:	35 81       	ldd	r19, Z+5	; 0x05
     d50:	46 81       	ldd	r20, Z+6	; 0x06
     d52:	57 81       	ldd	r21, Z+7	; 0x07
     d54:	28 17       	cp	r18, r24
     d56:	39 07       	cpc	r19, r25
     d58:	4a 07       	cpc	r20, r26
     d5a:	5b 07       	cpc	r21, r27
     d5c:	18 f4       	brcc	.+6      	; 0xd64 <__fpcmp_parts_f+0x8e>
     d5e:	11 23       	and	r17, r17
     d60:	41 f0       	breq	.+16     	; 0xd72 <__fpcmp_parts_f+0x9c>
     d62:	0a c0       	rjmp	.+20     	; 0xd78 <__fpcmp_parts_f+0xa2>
     d64:	82 17       	cp	r24, r18
     d66:	93 07       	cpc	r25, r19
     d68:	a4 07       	cpc	r26, r20
     d6a:	b5 07       	cpc	r27, r21
     d6c:	40 f4       	brcc	.+16     	; 0xd7e <__fpcmp_parts_f+0xa8>
     d6e:	11 23       	and	r17, r17
     d70:	19 f0       	breq	.+6      	; 0xd78 <__fpcmp_parts_f+0xa2>
     d72:	61 e0       	ldi	r22, 0x01	; 1
     d74:	70 e0       	ldi	r23, 0x00	; 0
     d76:	05 c0       	rjmp	.+10     	; 0xd82 <__fpcmp_parts_f+0xac>
     d78:	6f ef       	ldi	r22, 0xFF	; 255
     d7a:	7f ef       	ldi	r23, 0xFF	; 255
     d7c:	02 c0       	rjmp	.+4      	; 0xd82 <__fpcmp_parts_f+0xac>
     d7e:	60 e0       	ldi	r22, 0x00	; 0
     d80:	70 e0       	ldi	r23, 0x00	; 0
     d82:	cb 01       	movw	r24, r22
     d84:	1f 91       	pop	r17
     d86:	08 95       	ret

00000d88 <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
     d88:	df 93       	push	r29
     d8a:	cf 93       	push	r28
     d8c:	cd b7       	in	r28, 0x3d	; 61
     d8e:	de b7       	in	r29, 0x3e	; 62
     d90:	e1 97       	sbiw	r28, 0x31	; 49
     d92:	0f b6       	in	r0, 0x3f	; 63
     d94:	f8 94       	cli
     d96:	de bf       	out	0x3e, r29	; 62
     d98:	0f be       	out	0x3f, r0	; 63
     d9a:	cd bf       	out	0x3d, r28	; 61
#if (DATA_BITS_MODE == 4)
	LCD_DIR|=0xFF;
     d9c:	e4 e3       	ldi	r30, 0x34	; 52
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	80 81       	ld	r24, Z
     da2:	e4 e3       	ldi	r30, 0x34	; 52
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	8f ef       	ldi	r24, 0xFF	; 255
     da8:	80 83       	st	Z, r24
	LCD_PORT&=~(1<<EN);
     daa:	a5 e3       	ldi	r26, 0x35	; 53
     dac:	b0 e0       	ldi	r27, 0x00	; 0
     dae:	e5 e3       	ldi	r30, 0x35	; 53
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	80 81       	ld	r24, Z
     db4:	8b 7f       	andi	r24, 0xFB	; 251
     db6:	8c 93       	st	X, r24
     db8:	80 e0       	ldi	r24, 0x00	; 0
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	aa ef       	ldi	r26, 0xFA	; 250
     dbe:	b4 e4       	ldi	r27, 0x44	; 68
     dc0:	8d a7       	std	Y+45, r24	; 0x2d
     dc2:	9e a7       	std	Y+46, r25	; 0x2e
     dc4:	af a7       	std	Y+47, r26	; 0x2f
     dc6:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     dc8:	6d a5       	ldd	r22, Y+45	; 0x2d
     dca:	7e a5       	ldd	r23, Y+46	; 0x2e
     dcc:	8f a5       	ldd	r24, Y+47	; 0x2f
     dce:	98 a9       	ldd	r25, Y+48	; 0x30
     dd0:	2b ea       	ldi	r18, 0xAB	; 171
     dd2:	3a ea       	ldi	r19, 0xAA	; 170
     dd4:	4a e2       	ldi	r20, 0x2A	; 42
     dd6:	50 e4       	ldi	r21, 0x40	; 64
     dd8:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
     ddc:	dc 01       	movw	r26, r24
     dde:	cb 01       	movw	r24, r22
     de0:	89 a7       	std	Y+41, r24	; 0x29
     de2:	9a a7       	std	Y+42, r25	; 0x2a
     de4:	ab a7       	std	Y+43, r26	; 0x2b
     de6:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
     de8:	69 a5       	ldd	r22, Y+41	; 0x29
     dea:	7a a5       	ldd	r23, Y+42	; 0x2a
     dec:	8b a5       	ldd	r24, Y+43	; 0x2b
     dee:	9c a5       	ldd	r25, Y+44	; 0x2c
     df0:	20 e0       	ldi	r18, 0x00	; 0
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	40 e8       	ldi	r20, 0x80	; 128
     df6:	5f e3       	ldi	r21, 0x3F	; 63
     df8:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
     dfc:	88 23       	and	r24, r24
     dfe:	1c f4       	brge	.+6      	; 0xe06 <LCD_init+0x7e>
		__ticks = 1;
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	88 a7       	std	Y+40, r24	; 0x28
     e04:	91 c0       	rjmp	.+290    	; 0xf28 <LCD_init+0x1a0>
	else if (__tmp > 255)
     e06:	69 a5       	ldd	r22, Y+41	; 0x29
     e08:	7a a5       	ldd	r23, Y+42	; 0x2a
     e0a:	8b a5       	ldd	r24, Y+43	; 0x2b
     e0c:	9c a5       	ldd	r25, Y+44	; 0x2c
     e0e:	20 e0       	ldi	r18, 0x00	; 0
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	4f e7       	ldi	r20, 0x7F	; 127
     e14:	53 e4       	ldi	r21, 0x43	; 67
     e16:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
     e1a:	18 16       	cp	r1, r24
     e1c:	0c f0       	brlt	.+2      	; 0xe20 <LCD_init+0x98>
     e1e:	7b c0       	rjmp	.+246    	; 0xf16 <LCD_init+0x18e>
	{
		_delay_ms(__us / 1000.0);
     e20:	6d a5       	ldd	r22, Y+45	; 0x2d
     e22:	7e a5       	ldd	r23, Y+46	; 0x2e
     e24:	8f a5       	ldd	r24, Y+47	; 0x2f
     e26:	98 a9       	ldd	r25, Y+48	; 0x30
     e28:	20 e0       	ldi	r18, 0x00	; 0
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	4a e7       	ldi	r20, 0x7A	; 122
     e2e:	54 e4       	ldi	r21, 0x44	; 68
     e30:	0e 94 8e 03 	call	0x71c	; 0x71c <__divsf3>
     e34:	dc 01       	movw	r26, r24
     e36:	cb 01       	movw	r24, r22
     e38:	8c a3       	std	Y+36, r24	; 0x24
     e3a:	9d a3       	std	Y+37, r25	; 0x25
     e3c:	ae a3       	std	Y+38, r26	; 0x26
     e3e:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e40:	6c a1       	ldd	r22, Y+36	; 0x24
     e42:	7d a1       	ldd	r23, Y+37	; 0x25
     e44:	8e a1       	ldd	r24, Y+38	; 0x26
     e46:	9f a1       	ldd	r25, Y+39	; 0x27
     e48:	20 e0       	ldi	r18, 0x00	; 0
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	4a ef       	ldi	r20, 0xFA	; 250
     e4e:	54 e4       	ldi	r21, 0x44	; 68
     e50:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
     e54:	dc 01       	movw	r26, r24
     e56:	cb 01       	movw	r24, r22
     e58:	88 a3       	std	Y+32, r24	; 0x20
     e5a:	99 a3       	std	Y+33, r25	; 0x21
     e5c:	aa a3       	std	Y+34, r26	; 0x22
     e5e:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
     e60:	68 a1       	ldd	r22, Y+32	; 0x20
     e62:	79 a1       	ldd	r23, Y+33	; 0x21
     e64:	8a a1       	ldd	r24, Y+34	; 0x22
     e66:	9b a1       	ldd	r25, Y+35	; 0x23
     e68:	20 e0       	ldi	r18, 0x00	; 0
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	40 e8       	ldi	r20, 0x80	; 128
     e6e:	5f e3       	ldi	r21, 0x3F	; 63
     e70:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
     e74:	88 23       	and	r24, r24
     e76:	2c f4       	brge	.+10     	; 0xe82 <LCD_init+0xfa>
		__ticks = 1;
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	9f 8f       	std	Y+31, r25	; 0x1f
     e7e:	8e 8f       	std	Y+30, r24	; 0x1e
     e80:	3f c0       	rjmp	.+126    	; 0xf00 <LCD_init+0x178>
	else if (__tmp > 65535)
     e82:	68 a1       	ldd	r22, Y+32	; 0x20
     e84:	79 a1       	ldd	r23, Y+33	; 0x21
     e86:	8a a1       	ldd	r24, Y+34	; 0x22
     e88:	9b a1       	ldd	r25, Y+35	; 0x23
     e8a:	20 e0       	ldi	r18, 0x00	; 0
     e8c:	3f ef       	ldi	r19, 0xFF	; 255
     e8e:	4f e7       	ldi	r20, 0x7F	; 127
     e90:	57 e4       	ldi	r21, 0x47	; 71
     e92:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
     e96:	18 16       	cp	r1, r24
     e98:	4c f5       	brge	.+82     	; 0xeec <LCD_init+0x164>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e9a:	6c a1       	ldd	r22, Y+36	; 0x24
     e9c:	7d a1       	ldd	r23, Y+37	; 0x25
     e9e:	8e a1       	ldd	r24, Y+38	; 0x26
     ea0:	9f a1       	ldd	r25, Y+39	; 0x27
     ea2:	20 e0       	ldi	r18, 0x00	; 0
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	40 e2       	ldi	r20, 0x20	; 32
     ea8:	51 e4       	ldi	r21, 0x41	; 65
     eaa:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
     eae:	dc 01       	movw	r26, r24
     eb0:	cb 01       	movw	r24, r22
     eb2:	bc 01       	movw	r22, r24
     eb4:	cd 01       	movw	r24, r26
     eb6:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
     eba:	dc 01       	movw	r26, r24
     ebc:	cb 01       	movw	r24, r22
     ebe:	9f 8f       	std	Y+31, r25	; 0x1f
     ec0:	8e 8f       	std	Y+30, r24	; 0x1e
     ec2:	0f c0       	rjmp	.+30     	; 0xee2 <LCD_init+0x15a>
     ec4:	88 ec       	ldi	r24, 0xC8	; 200
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	9d 8f       	std	Y+29, r25	; 0x1d
     eca:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ecc:	8c 8d       	ldd	r24, Y+28	; 0x1c
     ece:	9d 8d       	ldd	r25, Y+29	; 0x1d
     ed0:	01 97       	sbiw	r24, 0x01	; 1
     ed2:	f1 f7       	brne	.-4      	; 0xed0 <LCD_init+0x148>
     ed4:	9d 8f       	std	Y+29, r25	; 0x1d
     ed6:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ed8:	8e 8d       	ldd	r24, Y+30	; 0x1e
     eda:	9f 8d       	ldd	r25, Y+31	; 0x1f
     edc:	01 97       	sbiw	r24, 0x01	; 1
     ede:	9f 8f       	std	Y+31, r25	; 0x1f
     ee0:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ee2:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ee4:	9f 8d       	ldd	r25, Y+31	; 0x1f
     ee6:	00 97       	sbiw	r24, 0x00	; 0
     ee8:	69 f7       	brne	.-38     	; 0xec4 <LCD_init+0x13c>
     eea:	24 c0       	rjmp	.+72     	; 0xf34 <LCD_init+0x1ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     eec:	68 a1       	ldd	r22, Y+32	; 0x20
     eee:	79 a1       	ldd	r23, Y+33	; 0x21
     ef0:	8a a1       	ldd	r24, Y+34	; 0x22
     ef2:	9b a1       	ldd	r25, Y+35	; 0x23
     ef4:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
     ef8:	dc 01       	movw	r26, r24
     efa:	cb 01       	movw	r24, r22
     efc:	9f 8f       	std	Y+31, r25	; 0x1f
     efe:	8e 8f       	std	Y+30, r24	; 0x1e
     f00:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f02:	9f 8d       	ldd	r25, Y+31	; 0x1f
     f04:	9b 8f       	std	Y+27, r25	; 0x1b
     f06:	8a 8f       	std	Y+26, r24	; 0x1a
     f08:	8a 8d       	ldd	r24, Y+26	; 0x1a
     f0a:	9b 8d       	ldd	r25, Y+27	; 0x1b
     f0c:	01 97       	sbiw	r24, 0x01	; 1
     f0e:	f1 f7       	brne	.-4      	; 0xf0c <LCD_init+0x184>
     f10:	9b 8f       	std	Y+27, r25	; 0x1b
     f12:	8a 8f       	std	Y+26, r24	; 0x1a
     f14:	0f c0       	rjmp	.+30     	; 0xf34 <LCD_init+0x1ac>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     f16:	69 a5       	ldd	r22, Y+41	; 0x29
     f18:	7a a5       	ldd	r23, Y+42	; 0x2a
     f1a:	8b a5       	ldd	r24, Y+43	; 0x2b
     f1c:	9c a5       	ldd	r25, Y+44	; 0x2c
     f1e:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
     f22:	dc 01       	movw	r26, r24
     f24:	cb 01       	movw	r24, r22
     f26:	88 a7       	std	Y+40, r24	; 0x28
     f28:	88 a5       	ldd	r24, Y+40	; 0x28
     f2a:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     f2c:	89 8d       	ldd	r24, Y+25	; 0x19
     f2e:	8a 95       	dec	r24
     f30:	f1 f7       	brne	.-4      	; 0xf2e <LCD_init+0x1a6>
     f32:	89 8f       	std	Y+25, r24	; 0x19
		_delay_us(2000);
		LCD_sendCommand(FOUR_BITS_DATA_MODE);
     f34:	82 e0       	ldi	r24, 0x02	; 2
     f36:	0e 94 6d 08 	call	0x10da	; 0x10da <LCD_sendCommand>
     f3a:	80 e0       	ldi	r24, 0x00	; 0
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	a8 ec       	ldi	r26, 0xC8	; 200
     f40:	b2 e4       	ldi	r27, 0x42	; 66
     f42:	8d 8b       	std	Y+21, r24	; 0x15
     f44:	9e 8b       	std	Y+22, r25	; 0x16
     f46:	af 8b       	std	Y+23, r26	; 0x17
     f48:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     f4a:	6d 89       	ldd	r22, Y+21	; 0x15
     f4c:	7e 89       	ldd	r23, Y+22	; 0x16
     f4e:	8f 89       	ldd	r24, Y+23	; 0x17
     f50:	98 8d       	ldd	r25, Y+24	; 0x18
     f52:	2b ea       	ldi	r18, 0xAB	; 171
     f54:	3a ea       	ldi	r19, 0xAA	; 170
     f56:	4a e2       	ldi	r20, 0x2A	; 42
     f58:	50 e4       	ldi	r21, 0x40	; 64
     f5a:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
     f5e:	dc 01       	movw	r26, r24
     f60:	cb 01       	movw	r24, r22
     f62:	89 8b       	std	Y+17, r24	; 0x11
     f64:	9a 8b       	std	Y+18, r25	; 0x12
     f66:	ab 8b       	std	Y+19, r26	; 0x13
     f68:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     f6a:	69 89       	ldd	r22, Y+17	; 0x11
     f6c:	7a 89       	ldd	r23, Y+18	; 0x12
     f6e:	8b 89       	ldd	r24, Y+19	; 0x13
     f70:	9c 89       	ldd	r25, Y+20	; 0x14
     f72:	20 e0       	ldi	r18, 0x00	; 0
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	40 e8       	ldi	r20, 0x80	; 128
     f78:	5f e3       	ldi	r21, 0x3F	; 63
     f7a:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
     f7e:	88 23       	and	r24, r24
     f80:	1c f4       	brge	.+6      	; 0xf88 <LCD_init+0x200>
		__ticks = 1;
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	88 8b       	std	Y+16, r24	; 0x10
     f86:	91 c0       	rjmp	.+290    	; 0x10aa <LCD_init+0x322>
	else if (__tmp > 255)
     f88:	69 89       	ldd	r22, Y+17	; 0x11
     f8a:	7a 89       	ldd	r23, Y+18	; 0x12
     f8c:	8b 89       	ldd	r24, Y+19	; 0x13
     f8e:	9c 89       	ldd	r25, Y+20	; 0x14
     f90:	20 e0       	ldi	r18, 0x00	; 0
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	4f e7       	ldi	r20, 0x7F	; 127
     f96:	53 e4       	ldi	r21, 0x43	; 67
     f98:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
     f9c:	18 16       	cp	r1, r24
     f9e:	0c f0       	brlt	.+2      	; 0xfa2 <LCD_init+0x21a>
     fa0:	7b c0       	rjmp	.+246    	; 0x1098 <LCD_init+0x310>
	{
		_delay_ms(__us / 1000.0);
     fa2:	6d 89       	ldd	r22, Y+21	; 0x15
     fa4:	7e 89       	ldd	r23, Y+22	; 0x16
     fa6:	8f 89       	ldd	r24, Y+23	; 0x17
     fa8:	98 8d       	ldd	r25, Y+24	; 0x18
     faa:	20 e0       	ldi	r18, 0x00	; 0
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	4a e7       	ldi	r20, 0x7A	; 122
     fb0:	54 e4       	ldi	r21, 0x44	; 68
     fb2:	0e 94 8e 03 	call	0x71c	; 0x71c <__divsf3>
     fb6:	dc 01       	movw	r26, r24
     fb8:	cb 01       	movw	r24, r22
     fba:	8c 87       	std	Y+12, r24	; 0x0c
     fbc:	9d 87       	std	Y+13, r25	; 0x0d
     fbe:	ae 87       	std	Y+14, r26	; 0x0e
     fc0:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fc2:	6c 85       	ldd	r22, Y+12	; 0x0c
     fc4:	7d 85       	ldd	r23, Y+13	; 0x0d
     fc6:	8e 85       	ldd	r24, Y+14	; 0x0e
     fc8:	9f 85       	ldd	r25, Y+15	; 0x0f
     fca:	20 e0       	ldi	r18, 0x00	; 0
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	4a ef       	ldi	r20, 0xFA	; 250
     fd0:	54 e4       	ldi	r21, 0x44	; 68
     fd2:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
     fd6:	dc 01       	movw	r26, r24
     fd8:	cb 01       	movw	r24, r22
     fda:	88 87       	std	Y+8, r24	; 0x08
     fdc:	99 87       	std	Y+9, r25	; 0x09
     fde:	aa 87       	std	Y+10, r26	; 0x0a
     fe0:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     fe2:	68 85       	ldd	r22, Y+8	; 0x08
     fe4:	79 85       	ldd	r23, Y+9	; 0x09
     fe6:	8a 85       	ldd	r24, Y+10	; 0x0a
     fe8:	9b 85       	ldd	r25, Y+11	; 0x0b
     fea:	20 e0       	ldi	r18, 0x00	; 0
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	40 e8       	ldi	r20, 0x80	; 128
     ff0:	5f e3       	ldi	r21, 0x3F	; 63
     ff2:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
     ff6:	88 23       	and	r24, r24
     ff8:	2c f4       	brge	.+10     	; 0x1004 <LCD_init+0x27c>
		__ticks = 1;
     ffa:	81 e0       	ldi	r24, 0x01	; 1
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	9f 83       	std	Y+7, r25	; 0x07
    1000:	8e 83       	std	Y+6, r24	; 0x06
    1002:	3f c0       	rjmp	.+126    	; 0x1082 <LCD_init+0x2fa>
	else if (__tmp > 65535)
    1004:	68 85       	ldd	r22, Y+8	; 0x08
    1006:	79 85       	ldd	r23, Y+9	; 0x09
    1008:	8a 85       	ldd	r24, Y+10	; 0x0a
    100a:	9b 85       	ldd	r25, Y+11	; 0x0b
    100c:	20 e0       	ldi	r18, 0x00	; 0
    100e:	3f ef       	ldi	r19, 0xFF	; 255
    1010:	4f e7       	ldi	r20, 0x7F	; 127
    1012:	57 e4       	ldi	r21, 0x47	; 71
    1014:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    1018:	18 16       	cp	r1, r24
    101a:	4c f5       	brge	.+82     	; 0x106e <LCD_init+0x2e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    101c:	6c 85       	ldd	r22, Y+12	; 0x0c
    101e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1020:	8e 85       	ldd	r24, Y+14	; 0x0e
    1022:	9f 85       	ldd	r25, Y+15	; 0x0f
    1024:	20 e0       	ldi	r18, 0x00	; 0
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	40 e2       	ldi	r20, 0x20	; 32
    102a:	51 e4       	ldi	r21, 0x41	; 65
    102c:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    1030:	dc 01       	movw	r26, r24
    1032:	cb 01       	movw	r24, r22
    1034:	bc 01       	movw	r22, r24
    1036:	cd 01       	movw	r24, r26
    1038:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    103c:	dc 01       	movw	r26, r24
    103e:	cb 01       	movw	r24, r22
    1040:	9f 83       	std	Y+7, r25	; 0x07
    1042:	8e 83       	std	Y+6, r24	; 0x06
    1044:	0f c0       	rjmp	.+30     	; 0x1064 <LCD_init+0x2dc>
    1046:	88 ec       	ldi	r24, 0xC8	; 200
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	9d 83       	std	Y+5, r25	; 0x05
    104c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    104e:	8c 81       	ldd	r24, Y+4	; 0x04
    1050:	9d 81       	ldd	r25, Y+5	; 0x05
    1052:	01 97       	sbiw	r24, 0x01	; 1
    1054:	f1 f7       	brne	.-4      	; 0x1052 <LCD_init+0x2ca>
    1056:	9d 83       	std	Y+5, r25	; 0x05
    1058:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    105a:	8e 81       	ldd	r24, Y+6	; 0x06
    105c:	9f 81       	ldd	r25, Y+7	; 0x07
    105e:	01 97       	sbiw	r24, 0x01	; 1
    1060:	9f 83       	std	Y+7, r25	; 0x07
    1062:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1064:	8e 81       	ldd	r24, Y+6	; 0x06
    1066:	9f 81       	ldd	r25, Y+7	; 0x07
    1068:	00 97       	sbiw	r24, 0x00	; 0
    106a:	69 f7       	brne	.-38     	; 0x1046 <LCD_init+0x2be>
    106c:	24 c0       	rjmp	.+72     	; 0x10b6 <LCD_init+0x32e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    106e:	68 85       	ldd	r22, Y+8	; 0x08
    1070:	79 85       	ldd	r23, Y+9	; 0x09
    1072:	8a 85       	ldd	r24, Y+10	; 0x0a
    1074:	9b 85       	ldd	r25, Y+11	; 0x0b
    1076:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    107a:	dc 01       	movw	r26, r24
    107c:	cb 01       	movw	r24, r22
    107e:	9f 83       	std	Y+7, r25	; 0x07
    1080:	8e 83       	std	Y+6, r24	; 0x06
    1082:	8e 81       	ldd	r24, Y+6	; 0x06
    1084:	9f 81       	ldd	r25, Y+7	; 0x07
    1086:	9b 83       	std	Y+3, r25	; 0x03
    1088:	8a 83       	std	Y+2, r24	; 0x02
    108a:	8a 81       	ldd	r24, Y+2	; 0x02
    108c:	9b 81       	ldd	r25, Y+3	; 0x03
    108e:	01 97       	sbiw	r24, 0x01	; 1
    1090:	f1 f7       	brne	.-4      	; 0x108e <LCD_init+0x306>
    1092:	9b 83       	std	Y+3, r25	; 0x03
    1094:	8a 83       	std	Y+2, r24	; 0x02
    1096:	0f c0       	rjmp	.+30     	; 0x10b6 <LCD_init+0x32e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1098:	69 89       	ldd	r22, Y+17	; 0x11
    109a:	7a 89       	ldd	r23, Y+18	; 0x12
    109c:	8b 89       	ldd	r24, Y+19	; 0x13
    109e:	9c 89       	ldd	r25, Y+20	; 0x14
    10a0:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    10a4:	dc 01       	movw	r26, r24
    10a6:	cb 01       	movw	r24, r22
    10a8:	88 8b       	std	Y+16, r24	; 0x10
    10aa:	88 89       	ldd	r24, Y+16	; 0x10
    10ac:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    10ae:	89 81       	ldd	r24, Y+1	; 0x01
    10b0:	8a 95       	dec	r24
    10b2:	f1 f7       	brne	.-4      	; 0x10b0 <LCD_init+0x328>
    10b4:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(100);
		LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE);
    10b6:	88 e2       	ldi	r24, 0x28	; 40
    10b8:	0e 94 6d 08 	call	0x10da	; 0x10da <LCD_sendCommand>
		LCD_DIR|=(1<<EN)|(1<<RS)|(1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
		LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */
		LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
#endif

	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    10bc:	8c e0       	ldi	r24, 0x0C	; 12
    10be:	0e 94 6d 08 	call	0x10da	; 0x10da <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	0e 94 6d 08 	call	0x10da	; 0x10da <LCD_sendCommand>
	}
    10c8:	e1 96       	adiw	r28, 0x31	; 49
    10ca:	0f b6       	in	r0, 0x3f	; 63
    10cc:	f8 94       	cli
    10ce:	de bf       	out	0x3e, r29	; 62
    10d0:	0f be       	out	0x3f, r0	; 63
    10d2:	cd bf       	out	0x3d, r28	; 61
    10d4:	cf 91       	pop	r28
    10d6:	df 91       	pop	r29
    10d8:	08 95       	ret

000010da <LCD_sendCommand>:
void LCD_sendCommand(uint8 command){
    10da:	0f 93       	push	r16
    10dc:	1f 93       	push	r17
    10de:	df 93       	push	r29
    10e0:	cf 93       	push	r28
    10e2:	cd b7       	in	r28, 0x3d	; 61
    10e4:	de b7       	in	r29, 0x3e	; 62
    10e6:	c3 56       	subi	r28, 0x63	; 99
    10e8:	d0 40       	sbci	r29, 0x00	; 0
    10ea:	0f b6       	in	r0, 0x3f	; 63
    10ec:	f8 94       	cli
    10ee:	de bf       	out	0x3e, r29	; 62
    10f0:	0f be       	out	0x3f, r0	; 63
    10f2:	cd bf       	out	0x3d, r28	; 61
    10f4:	fe 01       	movw	r30, r28
    10f6:	ed 59       	subi	r30, 0x9D	; 157
    10f8:	ff 4f       	sbci	r31, 0xFF	; 255
    10fa:	80 83       	st	Z, r24
	CLEAR_BIT(LCD_PORT,RS); /* Instruction Mode RS=0 */
    10fc:	a5 e3       	ldi	r26, 0x35	; 53
    10fe:	b0 e0       	ldi	r27, 0x00	; 0
    1100:	e5 e3       	ldi	r30, 0x35	; 53
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	80 81       	ld	r24, Z
    1106:	8e 7f       	andi	r24, 0xFE	; 254
    1108:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_PORT,RW); /* write data to LCD so RW=0 */
    110a:	a5 e3       	ldi	r26, 0x35	; 53
    110c:	b0 e0       	ldi	r27, 0x00	; 0
    110e:	e5 e3       	ldi	r30, 0x35	; 53
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	80 81       	ld	r24, Z
    1114:	8d 7f       	andi	r24, 0xFD	; 253
    1116:	8c 93       	st	X, r24
    1118:	fe 01       	movw	r30, r28
    111a:	e1 5a       	subi	r30, 0xA1	; 161
    111c:	ff 4f       	sbci	r31, 0xFF	; 255
    111e:	80 e0       	ldi	r24, 0x00	; 0
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	a0 e8       	ldi	r26, 0x80	; 128
    1124:	bf e3       	ldi	r27, 0x3F	; 63
    1126:	80 83       	st	Z, r24
    1128:	91 83       	std	Z+1, r25	; 0x01
    112a:	a2 83       	std	Z+2, r26	; 0x02
    112c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    112e:	8e 01       	movw	r16, r28
    1130:	05 5a       	subi	r16, 0xA5	; 165
    1132:	1f 4f       	sbci	r17, 0xFF	; 255
    1134:	fe 01       	movw	r30, r28
    1136:	e1 5a       	subi	r30, 0xA1	; 161
    1138:	ff 4f       	sbci	r31, 0xFF	; 255
    113a:	60 81       	ld	r22, Z
    113c:	71 81       	ldd	r23, Z+1	; 0x01
    113e:	82 81       	ldd	r24, Z+2	; 0x02
    1140:	93 81       	ldd	r25, Z+3	; 0x03
    1142:	20 e0       	ldi	r18, 0x00	; 0
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	4a ef       	ldi	r20, 0xFA	; 250
    1148:	54 e4       	ldi	r21, 0x44	; 68
    114a:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    114e:	dc 01       	movw	r26, r24
    1150:	cb 01       	movw	r24, r22
    1152:	f8 01       	movw	r30, r16
    1154:	80 83       	st	Z, r24
    1156:	91 83       	std	Z+1, r25	; 0x01
    1158:	a2 83       	std	Z+2, r26	; 0x02
    115a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    115c:	fe 01       	movw	r30, r28
    115e:	e5 5a       	subi	r30, 0xA5	; 165
    1160:	ff 4f       	sbci	r31, 0xFF	; 255
    1162:	60 81       	ld	r22, Z
    1164:	71 81       	ldd	r23, Z+1	; 0x01
    1166:	82 81       	ldd	r24, Z+2	; 0x02
    1168:	93 81       	ldd	r25, Z+3	; 0x03
    116a:	20 e0       	ldi	r18, 0x00	; 0
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	40 e8       	ldi	r20, 0x80	; 128
    1170:	5f e3       	ldi	r21, 0x3F	; 63
    1172:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    1176:	88 23       	and	r24, r24
    1178:	44 f4       	brge	.+16     	; 0x118a <LCD_sendCommand+0xb0>
		__ticks = 1;
    117a:	fe 01       	movw	r30, r28
    117c:	e7 5a       	subi	r30, 0xA7	; 167
    117e:	ff 4f       	sbci	r31, 0xFF	; 255
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	91 83       	std	Z+1, r25	; 0x01
    1186:	80 83       	st	Z, r24
    1188:	64 c0       	rjmp	.+200    	; 0x1252 <LCD_sendCommand+0x178>
	else if (__tmp > 65535)
    118a:	fe 01       	movw	r30, r28
    118c:	e5 5a       	subi	r30, 0xA5	; 165
    118e:	ff 4f       	sbci	r31, 0xFF	; 255
    1190:	60 81       	ld	r22, Z
    1192:	71 81       	ldd	r23, Z+1	; 0x01
    1194:	82 81       	ldd	r24, Z+2	; 0x02
    1196:	93 81       	ldd	r25, Z+3	; 0x03
    1198:	20 e0       	ldi	r18, 0x00	; 0
    119a:	3f ef       	ldi	r19, 0xFF	; 255
    119c:	4f e7       	ldi	r20, 0x7F	; 127
    119e:	57 e4       	ldi	r21, 0x47	; 71
    11a0:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    11a4:	18 16       	cp	r1, r24
    11a6:	0c f0       	brlt	.+2      	; 0x11aa <LCD_sendCommand+0xd0>
    11a8:	43 c0       	rjmp	.+134    	; 0x1230 <LCD_sendCommand+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11aa:	fe 01       	movw	r30, r28
    11ac:	e1 5a       	subi	r30, 0xA1	; 161
    11ae:	ff 4f       	sbci	r31, 0xFF	; 255
    11b0:	60 81       	ld	r22, Z
    11b2:	71 81       	ldd	r23, Z+1	; 0x01
    11b4:	82 81       	ldd	r24, Z+2	; 0x02
    11b6:	93 81       	ldd	r25, Z+3	; 0x03
    11b8:	20 e0       	ldi	r18, 0x00	; 0
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	40 e2       	ldi	r20, 0x20	; 32
    11be:	51 e4       	ldi	r21, 0x41	; 65
    11c0:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    11c4:	dc 01       	movw	r26, r24
    11c6:	cb 01       	movw	r24, r22
    11c8:	8e 01       	movw	r16, r28
    11ca:	07 5a       	subi	r16, 0xA7	; 167
    11cc:	1f 4f       	sbci	r17, 0xFF	; 255
    11ce:	bc 01       	movw	r22, r24
    11d0:	cd 01       	movw	r24, r26
    11d2:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    11d6:	dc 01       	movw	r26, r24
    11d8:	cb 01       	movw	r24, r22
    11da:	f8 01       	movw	r30, r16
    11dc:	91 83       	std	Z+1, r25	; 0x01
    11de:	80 83       	st	Z, r24
    11e0:	1f c0       	rjmp	.+62     	; 0x1220 <LCD_sendCommand+0x146>
    11e2:	fe 01       	movw	r30, r28
    11e4:	e9 5a       	subi	r30, 0xA9	; 169
    11e6:	ff 4f       	sbci	r31, 0xFF	; 255
    11e8:	88 ec       	ldi	r24, 0xC8	; 200
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	91 83       	std	Z+1, r25	; 0x01
    11ee:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    11f0:	fe 01       	movw	r30, r28
    11f2:	e9 5a       	subi	r30, 0xA9	; 169
    11f4:	ff 4f       	sbci	r31, 0xFF	; 255
    11f6:	80 81       	ld	r24, Z
    11f8:	91 81       	ldd	r25, Z+1	; 0x01
    11fa:	01 97       	sbiw	r24, 0x01	; 1
    11fc:	f1 f7       	brne	.-4      	; 0x11fa <LCD_sendCommand+0x120>
    11fe:	fe 01       	movw	r30, r28
    1200:	e9 5a       	subi	r30, 0xA9	; 169
    1202:	ff 4f       	sbci	r31, 0xFF	; 255
    1204:	91 83       	std	Z+1, r25	; 0x01
    1206:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1208:	de 01       	movw	r26, r28
    120a:	a7 5a       	subi	r26, 0xA7	; 167
    120c:	bf 4f       	sbci	r27, 0xFF	; 255
    120e:	fe 01       	movw	r30, r28
    1210:	e7 5a       	subi	r30, 0xA7	; 167
    1212:	ff 4f       	sbci	r31, 0xFF	; 255
    1214:	80 81       	ld	r24, Z
    1216:	91 81       	ldd	r25, Z+1	; 0x01
    1218:	01 97       	sbiw	r24, 0x01	; 1
    121a:	11 96       	adiw	r26, 0x01	; 1
    121c:	9c 93       	st	X, r25
    121e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1220:	fe 01       	movw	r30, r28
    1222:	e7 5a       	subi	r30, 0xA7	; 167
    1224:	ff 4f       	sbci	r31, 0xFF	; 255
    1226:	80 81       	ld	r24, Z
    1228:	91 81       	ldd	r25, Z+1	; 0x01
    122a:	00 97       	sbiw	r24, 0x00	; 0
    122c:	d1 f6       	brne	.-76     	; 0x11e2 <LCD_sendCommand+0x108>
    122e:	27 c0       	rjmp	.+78     	; 0x127e <LCD_sendCommand+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1230:	8e 01       	movw	r16, r28
    1232:	07 5a       	subi	r16, 0xA7	; 167
    1234:	1f 4f       	sbci	r17, 0xFF	; 255
    1236:	fe 01       	movw	r30, r28
    1238:	e5 5a       	subi	r30, 0xA5	; 165
    123a:	ff 4f       	sbci	r31, 0xFF	; 255
    123c:	60 81       	ld	r22, Z
    123e:	71 81       	ldd	r23, Z+1	; 0x01
    1240:	82 81       	ldd	r24, Z+2	; 0x02
    1242:	93 81       	ldd	r25, Z+3	; 0x03
    1244:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    1248:	dc 01       	movw	r26, r24
    124a:	cb 01       	movw	r24, r22
    124c:	f8 01       	movw	r30, r16
    124e:	91 83       	std	Z+1, r25	; 0x01
    1250:	80 83       	st	Z, r24
    1252:	de 01       	movw	r26, r28
    1254:	ab 5a       	subi	r26, 0xAB	; 171
    1256:	bf 4f       	sbci	r27, 0xFF	; 255
    1258:	fe 01       	movw	r30, r28
    125a:	e7 5a       	subi	r30, 0xA7	; 167
    125c:	ff 4f       	sbci	r31, 0xFF	; 255
    125e:	80 81       	ld	r24, Z
    1260:	91 81       	ldd	r25, Z+1	; 0x01
    1262:	8d 93       	st	X+, r24
    1264:	9c 93       	st	X, r25
    1266:	fe 01       	movw	r30, r28
    1268:	eb 5a       	subi	r30, 0xAB	; 171
    126a:	ff 4f       	sbci	r31, 0xFF	; 255
    126c:	80 81       	ld	r24, Z
    126e:	91 81       	ldd	r25, Z+1	; 0x01
    1270:	01 97       	sbiw	r24, 0x01	; 1
    1272:	f1 f7       	brne	.-4      	; 0x1270 <LCD_sendCommand+0x196>
    1274:	fe 01       	movw	r30, r28
    1276:	eb 5a       	subi	r30, 0xAB	; 171
    1278:	ff 4f       	sbci	r31, 0xFF	; 255
    127a:	91 83       	std	Z+1, r25	; 0x01
    127c:	80 83       	st	Z, r24
		_delay_ms(1); /* delay for processing Tas = 50ns */
		SET_BIT(LCD_PORT,EN); /* Enable LCD E=1 */
    127e:	a5 e3       	ldi	r26, 0x35	; 53
    1280:	b0 e0       	ldi	r27, 0x00	; 0
    1282:	e5 e3       	ldi	r30, 0x35	; 53
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	80 81       	ld	r24, Z
    1288:	84 60       	ori	r24, 0x04	; 4
    128a:	8c 93       	st	X, r24
    128c:	fe 01       	movw	r30, r28
    128e:	ef 5a       	subi	r30, 0xAF	; 175
    1290:	ff 4f       	sbci	r31, 0xFF	; 255
    1292:	80 e0       	ldi	r24, 0x00	; 0
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	a0 e8       	ldi	r26, 0x80	; 128
    1298:	bf e3       	ldi	r27, 0x3F	; 63
    129a:	80 83       	st	Z, r24
    129c:	91 83       	std	Z+1, r25	; 0x01
    129e:	a2 83       	std	Z+2, r26	; 0x02
    12a0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12a2:	8e 01       	movw	r16, r28
    12a4:	03 5b       	subi	r16, 0xB3	; 179
    12a6:	1f 4f       	sbci	r17, 0xFF	; 255
    12a8:	fe 01       	movw	r30, r28
    12aa:	ef 5a       	subi	r30, 0xAF	; 175
    12ac:	ff 4f       	sbci	r31, 0xFF	; 255
    12ae:	60 81       	ld	r22, Z
    12b0:	71 81       	ldd	r23, Z+1	; 0x01
    12b2:	82 81       	ldd	r24, Z+2	; 0x02
    12b4:	93 81       	ldd	r25, Z+3	; 0x03
    12b6:	20 e0       	ldi	r18, 0x00	; 0
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	4a ef       	ldi	r20, 0xFA	; 250
    12bc:	54 e4       	ldi	r21, 0x44	; 68
    12be:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    12c2:	dc 01       	movw	r26, r24
    12c4:	cb 01       	movw	r24, r22
    12c6:	f8 01       	movw	r30, r16
    12c8:	80 83       	st	Z, r24
    12ca:	91 83       	std	Z+1, r25	; 0x01
    12cc:	a2 83       	std	Z+2, r26	; 0x02
    12ce:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    12d0:	fe 01       	movw	r30, r28
    12d2:	e3 5b       	subi	r30, 0xB3	; 179
    12d4:	ff 4f       	sbci	r31, 0xFF	; 255
    12d6:	60 81       	ld	r22, Z
    12d8:	71 81       	ldd	r23, Z+1	; 0x01
    12da:	82 81       	ldd	r24, Z+2	; 0x02
    12dc:	93 81       	ldd	r25, Z+3	; 0x03
    12de:	20 e0       	ldi	r18, 0x00	; 0
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	40 e8       	ldi	r20, 0x80	; 128
    12e4:	5f e3       	ldi	r21, 0x3F	; 63
    12e6:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    12ea:	88 23       	and	r24, r24
    12ec:	44 f4       	brge	.+16     	; 0x12fe <LCD_sendCommand+0x224>
		__ticks = 1;
    12ee:	fe 01       	movw	r30, r28
    12f0:	e5 5b       	subi	r30, 0xB5	; 181
    12f2:	ff 4f       	sbci	r31, 0xFF	; 255
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	91 83       	std	Z+1, r25	; 0x01
    12fa:	80 83       	st	Z, r24
    12fc:	64 c0       	rjmp	.+200    	; 0x13c6 <LCD_sendCommand+0x2ec>
	else if (__tmp > 65535)
    12fe:	fe 01       	movw	r30, r28
    1300:	e3 5b       	subi	r30, 0xB3	; 179
    1302:	ff 4f       	sbci	r31, 0xFF	; 255
    1304:	60 81       	ld	r22, Z
    1306:	71 81       	ldd	r23, Z+1	; 0x01
    1308:	82 81       	ldd	r24, Z+2	; 0x02
    130a:	93 81       	ldd	r25, Z+3	; 0x03
    130c:	20 e0       	ldi	r18, 0x00	; 0
    130e:	3f ef       	ldi	r19, 0xFF	; 255
    1310:	4f e7       	ldi	r20, 0x7F	; 127
    1312:	57 e4       	ldi	r21, 0x47	; 71
    1314:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    1318:	18 16       	cp	r1, r24
    131a:	0c f0       	brlt	.+2      	; 0x131e <LCD_sendCommand+0x244>
    131c:	43 c0       	rjmp	.+134    	; 0x13a4 <LCD_sendCommand+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    131e:	fe 01       	movw	r30, r28
    1320:	ef 5a       	subi	r30, 0xAF	; 175
    1322:	ff 4f       	sbci	r31, 0xFF	; 255
    1324:	60 81       	ld	r22, Z
    1326:	71 81       	ldd	r23, Z+1	; 0x01
    1328:	82 81       	ldd	r24, Z+2	; 0x02
    132a:	93 81       	ldd	r25, Z+3	; 0x03
    132c:	20 e0       	ldi	r18, 0x00	; 0
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	40 e2       	ldi	r20, 0x20	; 32
    1332:	51 e4       	ldi	r21, 0x41	; 65
    1334:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    1338:	dc 01       	movw	r26, r24
    133a:	cb 01       	movw	r24, r22
    133c:	8e 01       	movw	r16, r28
    133e:	05 5b       	subi	r16, 0xB5	; 181
    1340:	1f 4f       	sbci	r17, 0xFF	; 255
    1342:	bc 01       	movw	r22, r24
    1344:	cd 01       	movw	r24, r26
    1346:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    134a:	dc 01       	movw	r26, r24
    134c:	cb 01       	movw	r24, r22
    134e:	f8 01       	movw	r30, r16
    1350:	91 83       	std	Z+1, r25	; 0x01
    1352:	80 83       	st	Z, r24
    1354:	1f c0       	rjmp	.+62     	; 0x1394 <LCD_sendCommand+0x2ba>
    1356:	fe 01       	movw	r30, r28
    1358:	e7 5b       	subi	r30, 0xB7	; 183
    135a:	ff 4f       	sbci	r31, 0xFF	; 255
    135c:	88 ec       	ldi	r24, 0xC8	; 200
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	91 83       	std	Z+1, r25	; 0x01
    1362:	80 83       	st	Z, r24
    1364:	fe 01       	movw	r30, r28
    1366:	e7 5b       	subi	r30, 0xB7	; 183
    1368:	ff 4f       	sbci	r31, 0xFF	; 255
    136a:	80 81       	ld	r24, Z
    136c:	91 81       	ldd	r25, Z+1	; 0x01
    136e:	01 97       	sbiw	r24, 0x01	; 1
    1370:	f1 f7       	brne	.-4      	; 0x136e <LCD_sendCommand+0x294>
    1372:	fe 01       	movw	r30, r28
    1374:	e7 5b       	subi	r30, 0xB7	; 183
    1376:	ff 4f       	sbci	r31, 0xFF	; 255
    1378:	91 83       	std	Z+1, r25	; 0x01
    137a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    137c:	de 01       	movw	r26, r28
    137e:	a5 5b       	subi	r26, 0xB5	; 181
    1380:	bf 4f       	sbci	r27, 0xFF	; 255
    1382:	fe 01       	movw	r30, r28
    1384:	e5 5b       	subi	r30, 0xB5	; 181
    1386:	ff 4f       	sbci	r31, 0xFF	; 255
    1388:	80 81       	ld	r24, Z
    138a:	91 81       	ldd	r25, Z+1	; 0x01
    138c:	01 97       	sbiw	r24, 0x01	; 1
    138e:	11 96       	adiw	r26, 0x01	; 1
    1390:	9c 93       	st	X, r25
    1392:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1394:	fe 01       	movw	r30, r28
    1396:	e5 5b       	subi	r30, 0xB5	; 181
    1398:	ff 4f       	sbci	r31, 0xFF	; 255
    139a:	80 81       	ld	r24, Z
    139c:	91 81       	ldd	r25, Z+1	; 0x01
    139e:	00 97       	sbiw	r24, 0x00	; 0
    13a0:	d1 f6       	brne	.-76     	; 0x1356 <LCD_sendCommand+0x27c>
    13a2:	27 c0       	rjmp	.+78     	; 0x13f2 <LCD_sendCommand+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13a4:	8e 01       	movw	r16, r28
    13a6:	05 5b       	subi	r16, 0xB5	; 181
    13a8:	1f 4f       	sbci	r17, 0xFF	; 255
    13aa:	fe 01       	movw	r30, r28
    13ac:	e3 5b       	subi	r30, 0xB3	; 179
    13ae:	ff 4f       	sbci	r31, 0xFF	; 255
    13b0:	60 81       	ld	r22, Z
    13b2:	71 81       	ldd	r23, Z+1	; 0x01
    13b4:	82 81       	ldd	r24, Z+2	; 0x02
    13b6:	93 81       	ldd	r25, Z+3	; 0x03
    13b8:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    13bc:	dc 01       	movw	r26, r24
    13be:	cb 01       	movw	r24, r22
    13c0:	f8 01       	movw	r30, r16
    13c2:	91 83       	std	Z+1, r25	; 0x01
    13c4:	80 83       	st	Z, r24
    13c6:	de 01       	movw	r26, r28
    13c8:	a9 5b       	subi	r26, 0xB9	; 185
    13ca:	bf 4f       	sbci	r27, 0xFF	; 255
    13cc:	fe 01       	movw	r30, r28
    13ce:	e5 5b       	subi	r30, 0xB5	; 181
    13d0:	ff 4f       	sbci	r31, 0xFF	; 255
    13d2:	80 81       	ld	r24, Z
    13d4:	91 81       	ldd	r25, Z+1	; 0x01
    13d6:	8d 93       	st	X+, r24
    13d8:	9c 93       	st	X, r25
    13da:	fe 01       	movw	r30, r28
    13dc:	e9 5b       	subi	r30, 0xB9	; 185
    13de:	ff 4f       	sbci	r31, 0xFF	; 255
    13e0:	80 81       	ld	r24, Z
    13e2:	91 81       	ldd	r25, Z+1	; 0x01
    13e4:	01 97       	sbiw	r24, 0x01	; 1
    13e6:	f1 f7       	brne	.-4      	; 0x13e4 <LCD_sendCommand+0x30a>
    13e8:	fe 01       	movw	r30, r28
    13ea:	e9 5b       	subi	r30, 0xB9	; 185
    13ec:	ff 4f       	sbci	r31, 0xFF	; 255
    13ee:	91 83       	std	Z+1, r25	; 0x01
    13f0:	80 83       	st	Z, r24
		_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
#if (DATA_BITS_MODE == 4)
		LCD_PORT = (LCD_PORT & 0x0F) | (command & 0xF0);
    13f2:	a5 e3       	ldi	r26, 0x35	; 53
    13f4:	b0 e0       	ldi	r27, 0x00	; 0
    13f6:	e5 e3       	ldi	r30, 0x35	; 53
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	80 81       	ld	r24, Z
    13fc:	98 2f       	mov	r25, r24
    13fe:	9f 70       	andi	r25, 0x0F	; 15
    1400:	fe 01       	movw	r30, r28
    1402:	ed 59       	subi	r30, 0x9D	; 157
    1404:	ff 4f       	sbci	r31, 0xFF	; 255
    1406:	80 81       	ld	r24, Z
    1408:	80 7f       	andi	r24, 0xF0	; 240
    140a:	89 2b       	or	r24, r25
    140c:	8c 93       	st	X, r24
    140e:	fe 01       	movw	r30, r28
    1410:	ed 5b       	subi	r30, 0xBD	; 189
    1412:	ff 4f       	sbci	r31, 0xFF	; 255
    1414:	80 e0       	ldi	r24, 0x00	; 0
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	a0 e8       	ldi	r26, 0x80	; 128
    141a:	bf e3       	ldi	r27, 0x3F	; 63
    141c:	80 83       	st	Z, r24
    141e:	91 83       	std	Z+1, r25	; 0x01
    1420:	a2 83       	std	Z+2, r26	; 0x02
    1422:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1424:	8e 01       	movw	r16, r28
    1426:	01 5c       	subi	r16, 0xC1	; 193
    1428:	1f 4f       	sbci	r17, 0xFF	; 255
    142a:	fe 01       	movw	r30, r28
    142c:	ed 5b       	subi	r30, 0xBD	; 189
    142e:	ff 4f       	sbci	r31, 0xFF	; 255
    1430:	60 81       	ld	r22, Z
    1432:	71 81       	ldd	r23, Z+1	; 0x01
    1434:	82 81       	ldd	r24, Z+2	; 0x02
    1436:	93 81       	ldd	r25, Z+3	; 0x03
    1438:	20 e0       	ldi	r18, 0x00	; 0
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	4a ef       	ldi	r20, 0xFA	; 250
    143e:	54 e4       	ldi	r21, 0x44	; 68
    1440:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    1444:	dc 01       	movw	r26, r24
    1446:	cb 01       	movw	r24, r22
    1448:	f8 01       	movw	r30, r16
    144a:	80 83       	st	Z, r24
    144c:	91 83       	std	Z+1, r25	; 0x01
    144e:	a2 83       	std	Z+2, r26	; 0x02
    1450:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1452:	fe 01       	movw	r30, r28
    1454:	ff 96       	adiw	r30, 0x3f	; 63
    1456:	60 81       	ld	r22, Z
    1458:	71 81       	ldd	r23, Z+1	; 0x01
    145a:	82 81       	ldd	r24, Z+2	; 0x02
    145c:	93 81       	ldd	r25, Z+3	; 0x03
    145e:	20 e0       	ldi	r18, 0x00	; 0
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	40 e8       	ldi	r20, 0x80	; 128
    1464:	5f e3       	ldi	r21, 0x3F	; 63
    1466:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    146a:	88 23       	and	r24, r24
    146c:	2c f4       	brge	.+10     	; 0x1478 <LCD_sendCommand+0x39e>
		__ticks = 1;
    146e:	81 e0       	ldi	r24, 0x01	; 1
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	9e af       	std	Y+62, r25	; 0x3e
    1474:	8d af       	std	Y+61, r24	; 0x3d
    1476:	46 c0       	rjmp	.+140    	; 0x1504 <LCD_sendCommand+0x42a>
	else if (__tmp > 65535)
    1478:	fe 01       	movw	r30, r28
    147a:	ff 96       	adiw	r30, 0x3f	; 63
    147c:	60 81       	ld	r22, Z
    147e:	71 81       	ldd	r23, Z+1	; 0x01
    1480:	82 81       	ldd	r24, Z+2	; 0x02
    1482:	93 81       	ldd	r25, Z+3	; 0x03
    1484:	20 e0       	ldi	r18, 0x00	; 0
    1486:	3f ef       	ldi	r19, 0xFF	; 255
    1488:	4f e7       	ldi	r20, 0x7F	; 127
    148a:	57 e4       	ldi	r21, 0x47	; 71
    148c:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    1490:	18 16       	cp	r1, r24
    1492:	64 f5       	brge	.+88     	; 0x14ec <LCD_sendCommand+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1494:	fe 01       	movw	r30, r28
    1496:	ed 5b       	subi	r30, 0xBD	; 189
    1498:	ff 4f       	sbci	r31, 0xFF	; 255
    149a:	60 81       	ld	r22, Z
    149c:	71 81       	ldd	r23, Z+1	; 0x01
    149e:	82 81       	ldd	r24, Z+2	; 0x02
    14a0:	93 81       	ldd	r25, Z+3	; 0x03
    14a2:	20 e0       	ldi	r18, 0x00	; 0
    14a4:	30 e0       	ldi	r19, 0x00	; 0
    14a6:	40 e2       	ldi	r20, 0x20	; 32
    14a8:	51 e4       	ldi	r21, 0x41	; 65
    14aa:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    14ae:	dc 01       	movw	r26, r24
    14b0:	cb 01       	movw	r24, r22
    14b2:	bc 01       	movw	r22, r24
    14b4:	cd 01       	movw	r24, r26
    14b6:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    14ba:	dc 01       	movw	r26, r24
    14bc:	cb 01       	movw	r24, r22
    14be:	9e af       	std	Y+62, r25	; 0x3e
    14c0:	8d af       	std	Y+61, r24	; 0x3d
    14c2:	0f c0       	rjmp	.+30     	; 0x14e2 <LCD_sendCommand+0x408>
    14c4:	88 ec       	ldi	r24, 0xC8	; 200
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	9c af       	std	Y+60, r25	; 0x3c
    14ca:	8b af       	std	Y+59, r24	; 0x3b
    14cc:	8b ad       	ldd	r24, Y+59	; 0x3b
    14ce:	9c ad       	ldd	r25, Y+60	; 0x3c
    14d0:	01 97       	sbiw	r24, 0x01	; 1
    14d2:	f1 f7       	brne	.-4      	; 0x14d0 <LCD_sendCommand+0x3f6>
    14d4:	9c af       	std	Y+60, r25	; 0x3c
    14d6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14d8:	8d ad       	ldd	r24, Y+61	; 0x3d
    14da:	9e ad       	ldd	r25, Y+62	; 0x3e
    14dc:	01 97       	sbiw	r24, 0x01	; 1
    14de:	9e af       	std	Y+62, r25	; 0x3e
    14e0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14e2:	8d ad       	ldd	r24, Y+61	; 0x3d
    14e4:	9e ad       	ldd	r25, Y+62	; 0x3e
    14e6:	00 97       	sbiw	r24, 0x00	; 0
    14e8:	69 f7       	brne	.-38     	; 0x14c4 <LCD_sendCommand+0x3ea>
    14ea:	16 c0       	rjmp	.+44     	; 0x1518 <LCD_sendCommand+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14ec:	fe 01       	movw	r30, r28
    14ee:	ff 96       	adiw	r30, 0x3f	; 63
    14f0:	60 81       	ld	r22, Z
    14f2:	71 81       	ldd	r23, Z+1	; 0x01
    14f4:	82 81       	ldd	r24, Z+2	; 0x02
    14f6:	93 81       	ldd	r25, Z+3	; 0x03
    14f8:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    14fc:	dc 01       	movw	r26, r24
    14fe:	cb 01       	movw	r24, r22
    1500:	9e af       	std	Y+62, r25	; 0x3e
    1502:	8d af       	std	Y+61, r24	; 0x3d
    1504:	8d ad       	ldd	r24, Y+61	; 0x3d
    1506:	9e ad       	ldd	r25, Y+62	; 0x3e
    1508:	9a af       	std	Y+58, r25	; 0x3a
    150a:	89 af       	std	Y+57, r24	; 0x39
    150c:	89 ad       	ldd	r24, Y+57	; 0x39
    150e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1510:	01 97       	sbiw	r24, 0x01	; 1
    1512:	f1 f7       	brne	.-4      	; 0x1510 <LCD_sendCommand+0x436>
    1514:	9a af       	std	Y+58, r25	; 0x3a
    1516:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(1); /* delay for processing Tdsw = 100ns */
			CLEAR_BIT(LCD_PORT,EN); /* disable LCD E=0 */
    1518:	a5 e3       	ldi	r26, 0x35	; 53
    151a:	b0 e0       	ldi	r27, 0x00	; 0
    151c:	e5 e3       	ldi	r30, 0x35	; 53
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	80 81       	ld	r24, Z
    1522:	8b 7f       	andi	r24, 0xFB	; 251
    1524:	8c 93       	st	X, r24
    1526:	80 e0       	ldi	r24, 0x00	; 0
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	a0 e8       	ldi	r26, 0x80	; 128
    152c:	bf e3       	ldi	r27, 0x3F	; 63
    152e:	8d ab       	std	Y+53, r24	; 0x35
    1530:	9e ab       	std	Y+54, r25	; 0x36
    1532:	af ab       	std	Y+55, r26	; 0x37
    1534:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1536:	6d a9       	ldd	r22, Y+53	; 0x35
    1538:	7e a9       	ldd	r23, Y+54	; 0x36
    153a:	8f a9       	ldd	r24, Y+55	; 0x37
    153c:	98 ad       	ldd	r25, Y+56	; 0x38
    153e:	20 e0       	ldi	r18, 0x00	; 0
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	4a ef       	ldi	r20, 0xFA	; 250
    1544:	54 e4       	ldi	r21, 0x44	; 68
    1546:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    154a:	dc 01       	movw	r26, r24
    154c:	cb 01       	movw	r24, r22
    154e:	89 ab       	std	Y+49, r24	; 0x31
    1550:	9a ab       	std	Y+50, r25	; 0x32
    1552:	ab ab       	std	Y+51, r26	; 0x33
    1554:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1556:	69 a9       	ldd	r22, Y+49	; 0x31
    1558:	7a a9       	ldd	r23, Y+50	; 0x32
    155a:	8b a9       	ldd	r24, Y+51	; 0x33
    155c:	9c a9       	ldd	r25, Y+52	; 0x34
    155e:	20 e0       	ldi	r18, 0x00	; 0
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	40 e8       	ldi	r20, 0x80	; 128
    1564:	5f e3       	ldi	r21, 0x3F	; 63
    1566:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    156a:	88 23       	and	r24, r24
    156c:	2c f4       	brge	.+10     	; 0x1578 <LCD_sendCommand+0x49e>
		__ticks = 1;
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	98 ab       	std	Y+48, r25	; 0x30
    1574:	8f a7       	std	Y+47, r24	; 0x2f
    1576:	3f c0       	rjmp	.+126    	; 0x15f6 <LCD_sendCommand+0x51c>
	else if (__tmp > 65535)
    1578:	69 a9       	ldd	r22, Y+49	; 0x31
    157a:	7a a9       	ldd	r23, Y+50	; 0x32
    157c:	8b a9       	ldd	r24, Y+51	; 0x33
    157e:	9c a9       	ldd	r25, Y+52	; 0x34
    1580:	20 e0       	ldi	r18, 0x00	; 0
    1582:	3f ef       	ldi	r19, 0xFF	; 255
    1584:	4f e7       	ldi	r20, 0x7F	; 127
    1586:	57 e4       	ldi	r21, 0x47	; 71
    1588:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    158c:	18 16       	cp	r1, r24
    158e:	4c f5       	brge	.+82     	; 0x15e2 <LCD_sendCommand+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1590:	6d a9       	ldd	r22, Y+53	; 0x35
    1592:	7e a9       	ldd	r23, Y+54	; 0x36
    1594:	8f a9       	ldd	r24, Y+55	; 0x37
    1596:	98 ad       	ldd	r25, Y+56	; 0x38
    1598:	20 e0       	ldi	r18, 0x00	; 0
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	40 e2       	ldi	r20, 0x20	; 32
    159e:	51 e4       	ldi	r21, 0x41	; 65
    15a0:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    15a4:	dc 01       	movw	r26, r24
    15a6:	cb 01       	movw	r24, r22
    15a8:	bc 01       	movw	r22, r24
    15aa:	cd 01       	movw	r24, r26
    15ac:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    15b0:	dc 01       	movw	r26, r24
    15b2:	cb 01       	movw	r24, r22
    15b4:	98 ab       	std	Y+48, r25	; 0x30
    15b6:	8f a7       	std	Y+47, r24	; 0x2f
    15b8:	0f c0       	rjmp	.+30     	; 0x15d8 <LCD_sendCommand+0x4fe>
    15ba:	88 ec       	ldi	r24, 0xC8	; 200
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	9e a7       	std	Y+46, r25	; 0x2e
    15c0:	8d a7       	std	Y+45, r24	; 0x2d
    15c2:	8d a5       	ldd	r24, Y+45	; 0x2d
    15c4:	9e a5       	ldd	r25, Y+46	; 0x2e
    15c6:	01 97       	sbiw	r24, 0x01	; 1
    15c8:	f1 f7       	brne	.-4      	; 0x15c6 <LCD_sendCommand+0x4ec>
    15ca:	9e a7       	std	Y+46, r25	; 0x2e
    15cc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    15d0:	98 a9       	ldd	r25, Y+48	; 0x30
    15d2:	01 97       	sbiw	r24, 0x01	; 1
    15d4:	98 ab       	std	Y+48, r25	; 0x30
    15d6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    15da:	98 a9       	ldd	r25, Y+48	; 0x30
    15dc:	00 97       	sbiw	r24, 0x00	; 0
    15de:	69 f7       	brne	.-38     	; 0x15ba <LCD_sendCommand+0x4e0>
    15e0:	14 c0       	rjmp	.+40     	; 0x160a <LCD_sendCommand+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15e2:	69 a9       	ldd	r22, Y+49	; 0x31
    15e4:	7a a9       	ldd	r23, Y+50	; 0x32
    15e6:	8b a9       	ldd	r24, Y+51	; 0x33
    15e8:	9c a9       	ldd	r25, Y+52	; 0x34
    15ea:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    15ee:	dc 01       	movw	r26, r24
    15f0:	cb 01       	movw	r24, r22
    15f2:	98 ab       	std	Y+48, r25	; 0x30
    15f4:	8f a7       	std	Y+47, r24	; 0x2f
    15f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    15f8:	98 a9       	ldd	r25, Y+48	; 0x30
    15fa:	9c a7       	std	Y+44, r25	; 0x2c
    15fc:	8b a7       	std	Y+43, r24	; 0x2b
    15fe:	8b a5       	ldd	r24, Y+43	; 0x2b
    1600:	9c a5       	ldd	r25, Y+44	; 0x2c
    1602:	01 97       	sbiw	r24, 0x01	; 1
    1604:	f1 f7       	brne	.-4      	; 0x1602 <LCD_sendCommand+0x528>
    1606:	9c a7       	std	Y+44, r25	; 0x2c
    1608:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(1); /* delay for processing Th = 13ns */
			SET_BIT(LCD_PORT,EN); /* Enable LCD E=1 */
    160a:	a5 e3       	ldi	r26, 0x35	; 53
    160c:	b0 e0       	ldi	r27, 0x00	; 0
    160e:	e5 e3       	ldi	r30, 0x35	; 53
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	80 81       	ld	r24, Z
    1614:	84 60       	ori	r24, 0x04	; 4
    1616:	8c 93       	st	X, r24
    1618:	80 e0       	ldi	r24, 0x00	; 0
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	a0 e8       	ldi	r26, 0x80	; 128
    161e:	bf e3       	ldi	r27, 0x3F	; 63
    1620:	8f a3       	std	Y+39, r24	; 0x27
    1622:	98 a7       	std	Y+40, r25	; 0x28
    1624:	a9 a7       	std	Y+41, r26	; 0x29
    1626:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1628:	6f a1       	ldd	r22, Y+39	; 0x27
    162a:	78 a5       	ldd	r23, Y+40	; 0x28
    162c:	89 a5       	ldd	r24, Y+41	; 0x29
    162e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1630:	20 e0       	ldi	r18, 0x00	; 0
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	4a ef       	ldi	r20, 0xFA	; 250
    1636:	54 e4       	ldi	r21, 0x44	; 68
    1638:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    163c:	dc 01       	movw	r26, r24
    163e:	cb 01       	movw	r24, r22
    1640:	8b a3       	std	Y+35, r24	; 0x23
    1642:	9c a3       	std	Y+36, r25	; 0x24
    1644:	ad a3       	std	Y+37, r26	; 0x25
    1646:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1648:	6b a1       	ldd	r22, Y+35	; 0x23
    164a:	7c a1       	ldd	r23, Y+36	; 0x24
    164c:	8d a1       	ldd	r24, Y+37	; 0x25
    164e:	9e a1       	ldd	r25, Y+38	; 0x26
    1650:	20 e0       	ldi	r18, 0x00	; 0
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	40 e8       	ldi	r20, 0x80	; 128
    1656:	5f e3       	ldi	r21, 0x3F	; 63
    1658:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    165c:	88 23       	and	r24, r24
    165e:	2c f4       	brge	.+10     	; 0x166a <LCD_sendCommand+0x590>
		__ticks = 1;
    1660:	81 e0       	ldi	r24, 0x01	; 1
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	9a a3       	std	Y+34, r25	; 0x22
    1666:	89 a3       	std	Y+33, r24	; 0x21
    1668:	3f c0       	rjmp	.+126    	; 0x16e8 <LCD_sendCommand+0x60e>
	else if (__tmp > 65535)
    166a:	6b a1       	ldd	r22, Y+35	; 0x23
    166c:	7c a1       	ldd	r23, Y+36	; 0x24
    166e:	8d a1       	ldd	r24, Y+37	; 0x25
    1670:	9e a1       	ldd	r25, Y+38	; 0x26
    1672:	20 e0       	ldi	r18, 0x00	; 0
    1674:	3f ef       	ldi	r19, 0xFF	; 255
    1676:	4f e7       	ldi	r20, 0x7F	; 127
    1678:	57 e4       	ldi	r21, 0x47	; 71
    167a:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    167e:	18 16       	cp	r1, r24
    1680:	4c f5       	brge	.+82     	; 0x16d4 <LCD_sendCommand+0x5fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1682:	6f a1       	ldd	r22, Y+39	; 0x27
    1684:	78 a5       	ldd	r23, Y+40	; 0x28
    1686:	89 a5       	ldd	r24, Y+41	; 0x29
    1688:	9a a5       	ldd	r25, Y+42	; 0x2a
    168a:	20 e0       	ldi	r18, 0x00	; 0
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	40 e2       	ldi	r20, 0x20	; 32
    1690:	51 e4       	ldi	r21, 0x41	; 65
    1692:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    1696:	dc 01       	movw	r26, r24
    1698:	cb 01       	movw	r24, r22
    169a:	bc 01       	movw	r22, r24
    169c:	cd 01       	movw	r24, r26
    169e:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    16a2:	dc 01       	movw	r26, r24
    16a4:	cb 01       	movw	r24, r22
    16a6:	9a a3       	std	Y+34, r25	; 0x22
    16a8:	89 a3       	std	Y+33, r24	; 0x21
    16aa:	0f c0       	rjmp	.+30     	; 0x16ca <LCD_sendCommand+0x5f0>
    16ac:	88 ec       	ldi	r24, 0xC8	; 200
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	98 a3       	std	Y+32, r25	; 0x20
    16b2:	8f 8f       	std	Y+31, r24	; 0x1f
    16b4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    16b6:	98 a1       	ldd	r25, Y+32	; 0x20
    16b8:	01 97       	sbiw	r24, 0x01	; 1
    16ba:	f1 f7       	brne	.-4      	; 0x16b8 <LCD_sendCommand+0x5de>
    16bc:	98 a3       	std	Y+32, r25	; 0x20
    16be:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16c0:	89 a1       	ldd	r24, Y+33	; 0x21
    16c2:	9a a1       	ldd	r25, Y+34	; 0x22
    16c4:	01 97       	sbiw	r24, 0x01	; 1
    16c6:	9a a3       	std	Y+34, r25	; 0x22
    16c8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16ca:	89 a1       	ldd	r24, Y+33	; 0x21
    16cc:	9a a1       	ldd	r25, Y+34	; 0x22
    16ce:	00 97       	sbiw	r24, 0x00	; 0
    16d0:	69 f7       	brne	.-38     	; 0x16ac <LCD_sendCommand+0x5d2>
    16d2:	14 c0       	rjmp	.+40     	; 0x16fc <LCD_sendCommand+0x622>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16d4:	6b a1       	ldd	r22, Y+35	; 0x23
    16d6:	7c a1       	ldd	r23, Y+36	; 0x24
    16d8:	8d a1       	ldd	r24, Y+37	; 0x25
    16da:	9e a1       	ldd	r25, Y+38	; 0x26
    16dc:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    16e0:	dc 01       	movw	r26, r24
    16e2:	cb 01       	movw	r24, r22
    16e4:	9a a3       	std	Y+34, r25	; 0x22
    16e6:	89 a3       	std	Y+33, r24	; 0x21
    16e8:	89 a1       	ldd	r24, Y+33	; 0x21
    16ea:	9a a1       	ldd	r25, Y+34	; 0x22
    16ec:	9e 8f       	std	Y+30, r25	; 0x1e
    16ee:	8d 8f       	std	Y+29, r24	; 0x1d
    16f0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16f2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    16f4:	01 97       	sbiw	r24, 0x01	; 1
    16f6:	f1 f7       	brne	.-4      	; 0x16f4 <LCD_sendCommand+0x61a>
    16f8:	9e 8f       	std	Y+30, r25	; 0x1e
    16fa:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
			LCD_PORT = (LCD_PORT & 0x0F) | ((command & 0x0F) << 4);
    16fc:	a5 e3       	ldi	r26, 0x35	; 53
    16fe:	b0 e0       	ldi	r27, 0x00	; 0
    1700:	e5 e3       	ldi	r30, 0x35	; 53
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	80 81       	ld	r24, Z
    1706:	28 2f       	mov	r18, r24
    1708:	2f 70       	andi	r18, 0x0F	; 15
    170a:	fe 01       	movw	r30, r28
    170c:	ed 59       	subi	r30, 0x9D	; 157
    170e:	ff 4f       	sbci	r31, 0xFF	; 255
    1710:	80 81       	ld	r24, Z
    1712:	88 2f       	mov	r24, r24
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	82 95       	swap	r24
    1718:	92 95       	swap	r25
    171a:	90 7f       	andi	r25, 0xF0	; 240
    171c:	98 27       	eor	r25, r24
    171e:	80 7f       	andi	r24, 0xF0	; 240
    1720:	98 27       	eor	r25, r24
    1722:	82 2b       	or	r24, r18
    1724:	8c 93       	st	X, r24
    1726:	80 e0       	ldi	r24, 0x00	; 0
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	a0 e8       	ldi	r26, 0x80	; 128
    172c:	bf e3       	ldi	r27, 0x3F	; 63
    172e:	89 8f       	std	Y+25, r24	; 0x19
    1730:	9a 8f       	std	Y+26, r25	; 0x1a
    1732:	ab 8f       	std	Y+27, r26	; 0x1b
    1734:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1736:	69 8d       	ldd	r22, Y+25	; 0x19
    1738:	7a 8d       	ldd	r23, Y+26	; 0x1a
    173a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    173c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    173e:	20 e0       	ldi	r18, 0x00	; 0
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	4a ef       	ldi	r20, 0xFA	; 250
    1744:	54 e4       	ldi	r21, 0x44	; 68
    1746:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    174a:	dc 01       	movw	r26, r24
    174c:	cb 01       	movw	r24, r22
    174e:	8d 8b       	std	Y+21, r24	; 0x15
    1750:	9e 8b       	std	Y+22, r25	; 0x16
    1752:	af 8b       	std	Y+23, r26	; 0x17
    1754:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1756:	6d 89       	ldd	r22, Y+21	; 0x15
    1758:	7e 89       	ldd	r23, Y+22	; 0x16
    175a:	8f 89       	ldd	r24, Y+23	; 0x17
    175c:	98 8d       	ldd	r25, Y+24	; 0x18
    175e:	20 e0       	ldi	r18, 0x00	; 0
    1760:	30 e0       	ldi	r19, 0x00	; 0
    1762:	40 e8       	ldi	r20, 0x80	; 128
    1764:	5f e3       	ldi	r21, 0x3F	; 63
    1766:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    176a:	88 23       	and	r24, r24
    176c:	2c f4       	brge	.+10     	; 0x1778 <LCD_sendCommand+0x69e>
		__ticks = 1;
    176e:	81 e0       	ldi	r24, 0x01	; 1
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	9c 8b       	std	Y+20, r25	; 0x14
    1774:	8b 8b       	std	Y+19, r24	; 0x13
    1776:	3f c0       	rjmp	.+126    	; 0x17f6 <LCD_sendCommand+0x71c>
	else if (__tmp > 65535)
    1778:	6d 89       	ldd	r22, Y+21	; 0x15
    177a:	7e 89       	ldd	r23, Y+22	; 0x16
    177c:	8f 89       	ldd	r24, Y+23	; 0x17
    177e:	98 8d       	ldd	r25, Y+24	; 0x18
    1780:	20 e0       	ldi	r18, 0x00	; 0
    1782:	3f ef       	ldi	r19, 0xFF	; 255
    1784:	4f e7       	ldi	r20, 0x7F	; 127
    1786:	57 e4       	ldi	r21, 0x47	; 71
    1788:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    178c:	18 16       	cp	r1, r24
    178e:	4c f5       	brge	.+82     	; 0x17e2 <LCD_sendCommand+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1790:	69 8d       	ldd	r22, Y+25	; 0x19
    1792:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1794:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1796:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1798:	20 e0       	ldi	r18, 0x00	; 0
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	40 e2       	ldi	r20, 0x20	; 32
    179e:	51 e4       	ldi	r21, 0x41	; 65
    17a0:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    17a4:	dc 01       	movw	r26, r24
    17a6:	cb 01       	movw	r24, r22
    17a8:	bc 01       	movw	r22, r24
    17aa:	cd 01       	movw	r24, r26
    17ac:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    17b0:	dc 01       	movw	r26, r24
    17b2:	cb 01       	movw	r24, r22
    17b4:	9c 8b       	std	Y+20, r25	; 0x14
    17b6:	8b 8b       	std	Y+19, r24	; 0x13
    17b8:	0f c0       	rjmp	.+30     	; 0x17d8 <LCD_sendCommand+0x6fe>
    17ba:	88 ec       	ldi	r24, 0xC8	; 200
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	9a 8b       	std	Y+18, r25	; 0x12
    17c0:	89 8b       	std	Y+17, r24	; 0x11
    17c2:	89 89       	ldd	r24, Y+17	; 0x11
    17c4:	9a 89       	ldd	r25, Y+18	; 0x12
    17c6:	01 97       	sbiw	r24, 0x01	; 1
    17c8:	f1 f7       	brne	.-4      	; 0x17c6 <LCD_sendCommand+0x6ec>
    17ca:	9a 8b       	std	Y+18, r25	; 0x12
    17cc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17ce:	8b 89       	ldd	r24, Y+19	; 0x13
    17d0:	9c 89       	ldd	r25, Y+20	; 0x14
    17d2:	01 97       	sbiw	r24, 0x01	; 1
    17d4:	9c 8b       	std	Y+20, r25	; 0x14
    17d6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17d8:	8b 89       	ldd	r24, Y+19	; 0x13
    17da:	9c 89       	ldd	r25, Y+20	; 0x14
    17dc:	00 97       	sbiw	r24, 0x00	; 0
    17de:	69 f7       	brne	.-38     	; 0x17ba <LCD_sendCommand+0x6e0>
    17e0:	14 c0       	rjmp	.+40     	; 0x180a <LCD_sendCommand+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17e2:	6d 89       	ldd	r22, Y+21	; 0x15
    17e4:	7e 89       	ldd	r23, Y+22	; 0x16
    17e6:	8f 89       	ldd	r24, Y+23	; 0x17
    17e8:	98 8d       	ldd	r25, Y+24	; 0x18
    17ea:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    17ee:	dc 01       	movw	r26, r24
    17f0:	cb 01       	movw	r24, r22
    17f2:	9c 8b       	std	Y+20, r25	; 0x14
    17f4:	8b 8b       	std	Y+19, r24	; 0x13
    17f6:	8b 89       	ldd	r24, Y+19	; 0x13
    17f8:	9c 89       	ldd	r25, Y+20	; 0x14
    17fa:	98 8b       	std	Y+16, r25	; 0x10
    17fc:	8f 87       	std	Y+15, r24	; 0x0f
    17fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    1800:	98 89       	ldd	r25, Y+16	; 0x10
    1802:	01 97       	sbiw	r24, 0x01	; 1
    1804:	f1 f7       	brne	.-4      	; 0x1802 <LCD_sendCommand+0x728>
    1806:	98 8b       	std	Y+16, r25	; 0x10
    1808:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1); /* delay for processing Tdsw = 100ns */
				CLEAR_BIT(LCD_PORT,EN); /* disable LCD E=0 */
    180a:	a5 e3       	ldi	r26, 0x35	; 53
    180c:	b0 e0       	ldi	r27, 0x00	; 0
    180e:	e5 e3       	ldi	r30, 0x35	; 53
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	80 81       	ld	r24, Z
    1814:	8b 7f       	andi	r24, 0xFB	; 251
    1816:	8c 93       	st	X, r24
    1818:	80 e0       	ldi	r24, 0x00	; 0
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	a0 e8       	ldi	r26, 0x80	; 128
    181e:	bf e3       	ldi	r27, 0x3F	; 63
    1820:	8b 87       	std	Y+11, r24	; 0x0b
    1822:	9c 87       	std	Y+12, r25	; 0x0c
    1824:	ad 87       	std	Y+13, r26	; 0x0d
    1826:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1828:	6b 85       	ldd	r22, Y+11	; 0x0b
    182a:	7c 85       	ldd	r23, Y+12	; 0x0c
    182c:	8d 85       	ldd	r24, Y+13	; 0x0d
    182e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1830:	20 e0       	ldi	r18, 0x00	; 0
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	4a ef       	ldi	r20, 0xFA	; 250
    1836:	54 e4       	ldi	r21, 0x44	; 68
    1838:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    183c:	dc 01       	movw	r26, r24
    183e:	cb 01       	movw	r24, r22
    1840:	8f 83       	std	Y+7, r24	; 0x07
    1842:	98 87       	std	Y+8, r25	; 0x08
    1844:	a9 87       	std	Y+9, r26	; 0x09
    1846:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1848:	6f 81       	ldd	r22, Y+7	; 0x07
    184a:	78 85       	ldd	r23, Y+8	; 0x08
    184c:	89 85       	ldd	r24, Y+9	; 0x09
    184e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1850:	20 e0       	ldi	r18, 0x00	; 0
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	40 e8       	ldi	r20, 0x80	; 128
    1856:	5f e3       	ldi	r21, 0x3F	; 63
    1858:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    185c:	88 23       	and	r24, r24
    185e:	2c f4       	brge	.+10     	; 0x186a <LCD_sendCommand+0x790>
		__ticks = 1;
    1860:	81 e0       	ldi	r24, 0x01	; 1
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	9e 83       	std	Y+6, r25	; 0x06
    1866:	8d 83       	std	Y+5, r24	; 0x05
    1868:	3f c0       	rjmp	.+126    	; 0x18e8 <LCD_sendCommand+0x80e>
	else if (__tmp > 65535)
    186a:	6f 81       	ldd	r22, Y+7	; 0x07
    186c:	78 85       	ldd	r23, Y+8	; 0x08
    186e:	89 85       	ldd	r24, Y+9	; 0x09
    1870:	9a 85       	ldd	r25, Y+10	; 0x0a
    1872:	20 e0       	ldi	r18, 0x00	; 0
    1874:	3f ef       	ldi	r19, 0xFF	; 255
    1876:	4f e7       	ldi	r20, 0x7F	; 127
    1878:	57 e4       	ldi	r21, 0x47	; 71
    187a:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    187e:	18 16       	cp	r1, r24
    1880:	4c f5       	brge	.+82     	; 0x18d4 <LCD_sendCommand+0x7fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1882:	6b 85       	ldd	r22, Y+11	; 0x0b
    1884:	7c 85       	ldd	r23, Y+12	; 0x0c
    1886:	8d 85       	ldd	r24, Y+13	; 0x0d
    1888:	9e 85       	ldd	r25, Y+14	; 0x0e
    188a:	20 e0       	ldi	r18, 0x00	; 0
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	40 e2       	ldi	r20, 0x20	; 32
    1890:	51 e4       	ldi	r21, 0x41	; 65
    1892:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    1896:	dc 01       	movw	r26, r24
    1898:	cb 01       	movw	r24, r22
    189a:	bc 01       	movw	r22, r24
    189c:	cd 01       	movw	r24, r26
    189e:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    18a2:	dc 01       	movw	r26, r24
    18a4:	cb 01       	movw	r24, r22
    18a6:	9e 83       	std	Y+6, r25	; 0x06
    18a8:	8d 83       	std	Y+5, r24	; 0x05
    18aa:	0f c0       	rjmp	.+30     	; 0x18ca <LCD_sendCommand+0x7f0>
    18ac:	88 ec       	ldi	r24, 0xC8	; 200
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	9c 83       	std	Y+4, r25	; 0x04
    18b2:	8b 83       	std	Y+3, r24	; 0x03
    18b4:	8b 81       	ldd	r24, Y+3	; 0x03
    18b6:	9c 81       	ldd	r25, Y+4	; 0x04
    18b8:	01 97       	sbiw	r24, 0x01	; 1
    18ba:	f1 f7       	brne	.-4      	; 0x18b8 <LCD_sendCommand+0x7de>
    18bc:	9c 83       	std	Y+4, r25	; 0x04
    18be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18c0:	8d 81       	ldd	r24, Y+5	; 0x05
    18c2:	9e 81       	ldd	r25, Y+6	; 0x06
    18c4:	01 97       	sbiw	r24, 0x01	; 1
    18c6:	9e 83       	std	Y+6, r25	; 0x06
    18c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18ca:	8d 81       	ldd	r24, Y+5	; 0x05
    18cc:	9e 81       	ldd	r25, Y+6	; 0x06
    18ce:	00 97       	sbiw	r24, 0x00	; 0
    18d0:	69 f7       	brne	.-38     	; 0x18ac <LCD_sendCommand+0x7d2>
    18d2:	14 c0       	rjmp	.+40     	; 0x18fc <LCD_sendCommand+0x822>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18d4:	6f 81       	ldd	r22, Y+7	; 0x07
    18d6:	78 85       	ldd	r23, Y+8	; 0x08
    18d8:	89 85       	ldd	r24, Y+9	; 0x09
    18da:	9a 85       	ldd	r25, Y+10	; 0x0a
    18dc:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    18e0:	dc 01       	movw	r26, r24
    18e2:	cb 01       	movw	r24, r22
    18e4:	9e 83       	std	Y+6, r25	; 0x06
    18e6:	8d 83       	std	Y+5, r24	; 0x05
    18e8:	8d 81       	ldd	r24, Y+5	; 0x05
    18ea:	9e 81       	ldd	r25, Y+6	; 0x06
    18ec:	9a 83       	std	Y+2, r25	; 0x02
    18ee:	89 83       	std	Y+1, r24	; 0x01
    18f0:	89 81       	ldd	r24, Y+1	; 0x01
    18f2:	9a 81       	ldd	r25, Y+2	; 0x02
    18f4:	01 97       	sbiw	r24, 0x01	; 1
    18f6:	f1 f7       	brne	.-4      	; 0x18f4 <LCD_sendCommand+0x81a>
    18f8:	9a 83       	std	Y+2, r25	; 0x02
    18fa:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_PORT,EN); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    18fc:	cd 59       	subi	r28, 0x9D	; 157
    18fe:	df 4f       	sbci	r29, 0xFF	; 255
    1900:	0f b6       	in	r0, 0x3f	; 63
    1902:	f8 94       	cli
    1904:	de bf       	out	0x3e, r29	; 62
    1906:	0f be       	out	0x3f, r0	; 63
    1908:	cd bf       	out	0x3d, r28	; 61
    190a:	cf 91       	pop	r28
    190c:	df 91       	pop	r29
    190e:	1f 91       	pop	r17
    1910:	0f 91       	pop	r16
    1912:	08 95       	ret

00001914 <LCD_displayCharacter>:
void LCD_displayCharacter(uint8 data){
    1914:	0f 93       	push	r16
    1916:	1f 93       	push	r17
    1918:	df 93       	push	r29
    191a:	cf 93       	push	r28
    191c:	cd b7       	in	r28, 0x3d	; 61
    191e:	de b7       	in	r29, 0x3e	; 62
    1920:	c3 56       	subi	r28, 0x63	; 99
    1922:	d0 40       	sbci	r29, 0x00	; 0
    1924:	0f b6       	in	r0, 0x3f	; 63
    1926:	f8 94       	cli
    1928:	de bf       	out	0x3e, r29	; 62
    192a:	0f be       	out	0x3f, r0	; 63
    192c:	cd bf       	out	0x3d, r28	; 61
    192e:	fe 01       	movw	r30, r28
    1930:	ed 59       	subi	r30, 0x9D	; 157
    1932:	ff 4f       	sbci	r31, 0xFF	; 255
    1934:	80 83       	st	Z, r24
	SET_BIT(LCD_PORT,RS); /* Data Mode RS=1 */
    1936:	a5 e3       	ldi	r26, 0x35	; 53
    1938:	b0 e0       	ldi	r27, 0x00	; 0
    193a:	e5 e3       	ldi	r30, 0x35	; 53
    193c:	f0 e0       	ldi	r31, 0x00	; 0
    193e:	80 81       	ld	r24, Z
    1940:	81 60       	ori	r24, 0x01	; 1
    1942:	8c 93       	st	X, r24
		CLEAR_BIT(LCD_PORT,RW); /* write data to LCD so RW=0 */
    1944:	a5 e3       	ldi	r26, 0x35	; 53
    1946:	b0 e0       	ldi	r27, 0x00	; 0
    1948:	e5 e3       	ldi	r30, 0x35	; 53
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	80 81       	ld	r24, Z
    194e:	8d 7f       	andi	r24, 0xFD	; 253
    1950:	8c 93       	st	X, r24
    1952:	fe 01       	movw	r30, r28
    1954:	e1 5a       	subi	r30, 0xA1	; 161
    1956:	ff 4f       	sbci	r31, 0xFF	; 255
    1958:	80 e0       	ldi	r24, 0x00	; 0
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	a0 e8       	ldi	r26, 0x80	; 128
    195e:	bf e3       	ldi	r27, 0x3F	; 63
    1960:	80 83       	st	Z, r24
    1962:	91 83       	std	Z+1, r25	; 0x01
    1964:	a2 83       	std	Z+2, r26	; 0x02
    1966:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1968:	8e 01       	movw	r16, r28
    196a:	05 5a       	subi	r16, 0xA5	; 165
    196c:	1f 4f       	sbci	r17, 0xFF	; 255
    196e:	fe 01       	movw	r30, r28
    1970:	e1 5a       	subi	r30, 0xA1	; 161
    1972:	ff 4f       	sbci	r31, 0xFF	; 255
    1974:	60 81       	ld	r22, Z
    1976:	71 81       	ldd	r23, Z+1	; 0x01
    1978:	82 81       	ldd	r24, Z+2	; 0x02
    197a:	93 81       	ldd	r25, Z+3	; 0x03
    197c:	20 e0       	ldi	r18, 0x00	; 0
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	4a ef       	ldi	r20, 0xFA	; 250
    1982:	54 e4       	ldi	r21, 0x44	; 68
    1984:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    1988:	dc 01       	movw	r26, r24
    198a:	cb 01       	movw	r24, r22
    198c:	f8 01       	movw	r30, r16
    198e:	80 83       	st	Z, r24
    1990:	91 83       	std	Z+1, r25	; 0x01
    1992:	a2 83       	std	Z+2, r26	; 0x02
    1994:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1996:	fe 01       	movw	r30, r28
    1998:	e5 5a       	subi	r30, 0xA5	; 165
    199a:	ff 4f       	sbci	r31, 0xFF	; 255
    199c:	60 81       	ld	r22, Z
    199e:	71 81       	ldd	r23, Z+1	; 0x01
    19a0:	82 81       	ldd	r24, Z+2	; 0x02
    19a2:	93 81       	ldd	r25, Z+3	; 0x03
    19a4:	20 e0       	ldi	r18, 0x00	; 0
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	40 e8       	ldi	r20, 0x80	; 128
    19aa:	5f e3       	ldi	r21, 0x3F	; 63
    19ac:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    19b0:	88 23       	and	r24, r24
    19b2:	44 f4       	brge	.+16     	; 0x19c4 <LCD_displayCharacter+0xb0>
		__ticks = 1;
    19b4:	fe 01       	movw	r30, r28
    19b6:	e7 5a       	subi	r30, 0xA7	; 167
    19b8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ba:	81 e0       	ldi	r24, 0x01	; 1
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	91 83       	std	Z+1, r25	; 0x01
    19c0:	80 83       	st	Z, r24
    19c2:	64 c0       	rjmp	.+200    	; 0x1a8c <LCD_displayCharacter+0x178>
	else if (__tmp > 65535)
    19c4:	fe 01       	movw	r30, r28
    19c6:	e5 5a       	subi	r30, 0xA5	; 165
    19c8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ca:	60 81       	ld	r22, Z
    19cc:	71 81       	ldd	r23, Z+1	; 0x01
    19ce:	82 81       	ldd	r24, Z+2	; 0x02
    19d0:	93 81       	ldd	r25, Z+3	; 0x03
    19d2:	20 e0       	ldi	r18, 0x00	; 0
    19d4:	3f ef       	ldi	r19, 0xFF	; 255
    19d6:	4f e7       	ldi	r20, 0x7F	; 127
    19d8:	57 e4       	ldi	r21, 0x47	; 71
    19da:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    19de:	18 16       	cp	r1, r24
    19e0:	0c f0       	brlt	.+2      	; 0x19e4 <LCD_displayCharacter+0xd0>
    19e2:	43 c0       	rjmp	.+134    	; 0x1a6a <LCD_displayCharacter+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19e4:	fe 01       	movw	r30, r28
    19e6:	e1 5a       	subi	r30, 0xA1	; 161
    19e8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ea:	60 81       	ld	r22, Z
    19ec:	71 81       	ldd	r23, Z+1	; 0x01
    19ee:	82 81       	ldd	r24, Z+2	; 0x02
    19f0:	93 81       	ldd	r25, Z+3	; 0x03
    19f2:	20 e0       	ldi	r18, 0x00	; 0
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	40 e2       	ldi	r20, 0x20	; 32
    19f8:	51 e4       	ldi	r21, 0x41	; 65
    19fa:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    19fe:	dc 01       	movw	r26, r24
    1a00:	cb 01       	movw	r24, r22
    1a02:	8e 01       	movw	r16, r28
    1a04:	07 5a       	subi	r16, 0xA7	; 167
    1a06:	1f 4f       	sbci	r17, 0xFF	; 255
    1a08:	bc 01       	movw	r22, r24
    1a0a:	cd 01       	movw	r24, r26
    1a0c:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    1a10:	dc 01       	movw	r26, r24
    1a12:	cb 01       	movw	r24, r22
    1a14:	f8 01       	movw	r30, r16
    1a16:	91 83       	std	Z+1, r25	; 0x01
    1a18:	80 83       	st	Z, r24
    1a1a:	1f c0       	rjmp	.+62     	; 0x1a5a <LCD_displayCharacter+0x146>
    1a1c:	fe 01       	movw	r30, r28
    1a1e:	e9 5a       	subi	r30, 0xA9	; 169
    1a20:	ff 4f       	sbci	r31, 0xFF	; 255
    1a22:	88 ec       	ldi	r24, 0xC8	; 200
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	91 83       	std	Z+1, r25	; 0x01
    1a28:	80 83       	st	Z, r24
    1a2a:	fe 01       	movw	r30, r28
    1a2c:	e9 5a       	subi	r30, 0xA9	; 169
    1a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a30:	80 81       	ld	r24, Z
    1a32:	91 81       	ldd	r25, Z+1	; 0x01
    1a34:	01 97       	sbiw	r24, 0x01	; 1
    1a36:	f1 f7       	brne	.-4      	; 0x1a34 <LCD_displayCharacter+0x120>
    1a38:	fe 01       	movw	r30, r28
    1a3a:	e9 5a       	subi	r30, 0xA9	; 169
    1a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3e:	91 83       	std	Z+1, r25	; 0x01
    1a40:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a42:	de 01       	movw	r26, r28
    1a44:	a7 5a       	subi	r26, 0xA7	; 167
    1a46:	bf 4f       	sbci	r27, 0xFF	; 255
    1a48:	fe 01       	movw	r30, r28
    1a4a:	e7 5a       	subi	r30, 0xA7	; 167
    1a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4e:	80 81       	ld	r24, Z
    1a50:	91 81       	ldd	r25, Z+1	; 0x01
    1a52:	01 97       	sbiw	r24, 0x01	; 1
    1a54:	11 96       	adiw	r26, 0x01	; 1
    1a56:	9c 93       	st	X, r25
    1a58:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a5a:	fe 01       	movw	r30, r28
    1a5c:	e7 5a       	subi	r30, 0xA7	; 167
    1a5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a60:	80 81       	ld	r24, Z
    1a62:	91 81       	ldd	r25, Z+1	; 0x01
    1a64:	00 97       	sbiw	r24, 0x00	; 0
    1a66:	d1 f6       	brne	.-76     	; 0x1a1c <LCD_displayCharacter+0x108>
    1a68:	27 c0       	rjmp	.+78     	; 0x1ab8 <LCD_displayCharacter+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a6a:	8e 01       	movw	r16, r28
    1a6c:	07 5a       	subi	r16, 0xA7	; 167
    1a6e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a70:	fe 01       	movw	r30, r28
    1a72:	e5 5a       	subi	r30, 0xA5	; 165
    1a74:	ff 4f       	sbci	r31, 0xFF	; 255
    1a76:	60 81       	ld	r22, Z
    1a78:	71 81       	ldd	r23, Z+1	; 0x01
    1a7a:	82 81       	ldd	r24, Z+2	; 0x02
    1a7c:	93 81       	ldd	r25, Z+3	; 0x03
    1a7e:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    1a82:	dc 01       	movw	r26, r24
    1a84:	cb 01       	movw	r24, r22
    1a86:	f8 01       	movw	r30, r16
    1a88:	91 83       	std	Z+1, r25	; 0x01
    1a8a:	80 83       	st	Z, r24
    1a8c:	de 01       	movw	r26, r28
    1a8e:	ab 5a       	subi	r26, 0xAB	; 171
    1a90:	bf 4f       	sbci	r27, 0xFF	; 255
    1a92:	fe 01       	movw	r30, r28
    1a94:	e7 5a       	subi	r30, 0xA7	; 167
    1a96:	ff 4f       	sbci	r31, 0xFF	; 255
    1a98:	80 81       	ld	r24, Z
    1a9a:	91 81       	ldd	r25, Z+1	; 0x01
    1a9c:	8d 93       	st	X+, r24
    1a9e:	9c 93       	st	X, r25
    1aa0:	fe 01       	movw	r30, r28
    1aa2:	eb 5a       	subi	r30, 0xAB	; 171
    1aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa6:	80 81       	ld	r24, Z
    1aa8:	91 81       	ldd	r25, Z+1	; 0x01
    1aaa:	01 97       	sbiw	r24, 0x01	; 1
    1aac:	f1 f7       	brne	.-4      	; 0x1aaa <LCD_displayCharacter+0x196>
    1aae:	fe 01       	movw	r30, r28
    1ab0:	eb 5a       	subi	r30, 0xAB	; 171
    1ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab4:	91 83       	std	Z+1, r25	; 0x01
    1ab6:	80 83       	st	Z, r24
			_delay_ms(1); /* delay for processing Tas = 50ns */
			SET_BIT(LCD_PORT,EN); /* Enable LCD E=1 */
    1ab8:	a5 e3       	ldi	r26, 0x35	; 53
    1aba:	b0 e0       	ldi	r27, 0x00	; 0
    1abc:	e5 e3       	ldi	r30, 0x35	; 53
    1abe:	f0 e0       	ldi	r31, 0x00	; 0
    1ac0:	80 81       	ld	r24, Z
    1ac2:	84 60       	ori	r24, 0x04	; 4
    1ac4:	8c 93       	st	X, r24
    1ac6:	fe 01       	movw	r30, r28
    1ac8:	ef 5a       	subi	r30, 0xAF	; 175
    1aca:	ff 4f       	sbci	r31, 0xFF	; 255
    1acc:	80 e0       	ldi	r24, 0x00	; 0
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	a0 e8       	ldi	r26, 0x80	; 128
    1ad2:	bf e3       	ldi	r27, 0x3F	; 63
    1ad4:	80 83       	st	Z, r24
    1ad6:	91 83       	std	Z+1, r25	; 0x01
    1ad8:	a2 83       	std	Z+2, r26	; 0x02
    1ada:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1adc:	8e 01       	movw	r16, r28
    1ade:	03 5b       	subi	r16, 0xB3	; 179
    1ae0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ae2:	fe 01       	movw	r30, r28
    1ae4:	ef 5a       	subi	r30, 0xAF	; 175
    1ae6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae8:	60 81       	ld	r22, Z
    1aea:	71 81       	ldd	r23, Z+1	; 0x01
    1aec:	82 81       	ldd	r24, Z+2	; 0x02
    1aee:	93 81       	ldd	r25, Z+3	; 0x03
    1af0:	20 e0       	ldi	r18, 0x00	; 0
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	4a ef       	ldi	r20, 0xFA	; 250
    1af6:	54 e4       	ldi	r21, 0x44	; 68
    1af8:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    1afc:	dc 01       	movw	r26, r24
    1afe:	cb 01       	movw	r24, r22
    1b00:	f8 01       	movw	r30, r16
    1b02:	80 83       	st	Z, r24
    1b04:	91 83       	std	Z+1, r25	; 0x01
    1b06:	a2 83       	std	Z+2, r26	; 0x02
    1b08:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b0a:	fe 01       	movw	r30, r28
    1b0c:	e3 5b       	subi	r30, 0xB3	; 179
    1b0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b10:	60 81       	ld	r22, Z
    1b12:	71 81       	ldd	r23, Z+1	; 0x01
    1b14:	82 81       	ldd	r24, Z+2	; 0x02
    1b16:	93 81       	ldd	r25, Z+3	; 0x03
    1b18:	20 e0       	ldi	r18, 0x00	; 0
    1b1a:	30 e0       	ldi	r19, 0x00	; 0
    1b1c:	40 e8       	ldi	r20, 0x80	; 128
    1b1e:	5f e3       	ldi	r21, 0x3F	; 63
    1b20:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    1b24:	88 23       	and	r24, r24
    1b26:	44 f4       	brge	.+16     	; 0x1b38 <LCD_displayCharacter+0x224>
		__ticks = 1;
    1b28:	fe 01       	movw	r30, r28
    1b2a:	e5 5b       	subi	r30, 0xB5	; 181
    1b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2e:	81 e0       	ldi	r24, 0x01	; 1
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	91 83       	std	Z+1, r25	; 0x01
    1b34:	80 83       	st	Z, r24
    1b36:	64 c0       	rjmp	.+200    	; 0x1c00 <LCD_displayCharacter+0x2ec>
	else if (__tmp > 65535)
    1b38:	fe 01       	movw	r30, r28
    1b3a:	e3 5b       	subi	r30, 0xB3	; 179
    1b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3e:	60 81       	ld	r22, Z
    1b40:	71 81       	ldd	r23, Z+1	; 0x01
    1b42:	82 81       	ldd	r24, Z+2	; 0x02
    1b44:	93 81       	ldd	r25, Z+3	; 0x03
    1b46:	20 e0       	ldi	r18, 0x00	; 0
    1b48:	3f ef       	ldi	r19, 0xFF	; 255
    1b4a:	4f e7       	ldi	r20, 0x7F	; 127
    1b4c:	57 e4       	ldi	r21, 0x47	; 71
    1b4e:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    1b52:	18 16       	cp	r1, r24
    1b54:	0c f0       	brlt	.+2      	; 0x1b58 <LCD_displayCharacter+0x244>
    1b56:	43 c0       	rjmp	.+134    	; 0x1bde <LCD_displayCharacter+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b58:	fe 01       	movw	r30, r28
    1b5a:	ef 5a       	subi	r30, 0xAF	; 175
    1b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5e:	60 81       	ld	r22, Z
    1b60:	71 81       	ldd	r23, Z+1	; 0x01
    1b62:	82 81       	ldd	r24, Z+2	; 0x02
    1b64:	93 81       	ldd	r25, Z+3	; 0x03
    1b66:	20 e0       	ldi	r18, 0x00	; 0
    1b68:	30 e0       	ldi	r19, 0x00	; 0
    1b6a:	40 e2       	ldi	r20, 0x20	; 32
    1b6c:	51 e4       	ldi	r21, 0x41	; 65
    1b6e:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    1b72:	dc 01       	movw	r26, r24
    1b74:	cb 01       	movw	r24, r22
    1b76:	8e 01       	movw	r16, r28
    1b78:	05 5b       	subi	r16, 0xB5	; 181
    1b7a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b7c:	bc 01       	movw	r22, r24
    1b7e:	cd 01       	movw	r24, r26
    1b80:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    1b84:	dc 01       	movw	r26, r24
    1b86:	cb 01       	movw	r24, r22
    1b88:	f8 01       	movw	r30, r16
    1b8a:	91 83       	std	Z+1, r25	; 0x01
    1b8c:	80 83       	st	Z, r24
    1b8e:	1f c0       	rjmp	.+62     	; 0x1bce <LCD_displayCharacter+0x2ba>
    1b90:	fe 01       	movw	r30, r28
    1b92:	e7 5b       	subi	r30, 0xB7	; 183
    1b94:	ff 4f       	sbci	r31, 0xFF	; 255
    1b96:	88 ec       	ldi	r24, 0xC8	; 200
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	91 83       	std	Z+1, r25	; 0x01
    1b9c:	80 83       	st	Z, r24
    1b9e:	fe 01       	movw	r30, r28
    1ba0:	e7 5b       	subi	r30, 0xB7	; 183
    1ba2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba4:	80 81       	ld	r24, Z
    1ba6:	91 81       	ldd	r25, Z+1	; 0x01
    1ba8:	01 97       	sbiw	r24, 0x01	; 1
    1baa:	f1 f7       	brne	.-4      	; 0x1ba8 <LCD_displayCharacter+0x294>
    1bac:	fe 01       	movw	r30, r28
    1bae:	e7 5b       	subi	r30, 0xB7	; 183
    1bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb2:	91 83       	std	Z+1, r25	; 0x01
    1bb4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bb6:	de 01       	movw	r26, r28
    1bb8:	a5 5b       	subi	r26, 0xB5	; 181
    1bba:	bf 4f       	sbci	r27, 0xFF	; 255
    1bbc:	fe 01       	movw	r30, r28
    1bbe:	e5 5b       	subi	r30, 0xB5	; 181
    1bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc2:	80 81       	ld	r24, Z
    1bc4:	91 81       	ldd	r25, Z+1	; 0x01
    1bc6:	01 97       	sbiw	r24, 0x01	; 1
    1bc8:	11 96       	adiw	r26, 0x01	; 1
    1bca:	9c 93       	st	X, r25
    1bcc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bce:	fe 01       	movw	r30, r28
    1bd0:	e5 5b       	subi	r30, 0xB5	; 181
    1bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd4:	80 81       	ld	r24, Z
    1bd6:	91 81       	ldd	r25, Z+1	; 0x01
    1bd8:	00 97       	sbiw	r24, 0x00	; 0
    1bda:	d1 f6       	brne	.-76     	; 0x1b90 <LCD_displayCharacter+0x27c>
    1bdc:	27 c0       	rjmp	.+78     	; 0x1c2c <LCD_displayCharacter+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bde:	8e 01       	movw	r16, r28
    1be0:	05 5b       	subi	r16, 0xB5	; 181
    1be2:	1f 4f       	sbci	r17, 0xFF	; 255
    1be4:	fe 01       	movw	r30, r28
    1be6:	e3 5b       	subi	r30, 0xB3	; 179
    1be8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bea:	60 81       	ld	r22, Z
    1bec:	71 81       	ldd	r23, Z+1	; 0x01
    1bee:	82 81       	ldd	r24, Z+2	; 0x02
    1bf0:	93 81       	ldd	r25, Z+3	; 0x03
    1bf2:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    1bf6:	dc 01       	movw	r26, r24
    1bf8:	cb 01       	movw	r24, r22
    1bfa:	f8 01       	movw	r30, r16
    1bfc:	91 83       	std	Z+1, r25	; 0x01
    1bfe:	80 83       	st	Z, r24
    1c00:	de 01       	movw	r26, r28
    1c02:	a9 5b       	subi	r26, 0xB9	; 185
    1c04:	bf 4f       	sbci	r27, 0xFF	; 255
    1c06:	fe 01       	movw	r30, r28
    1c08:	e5 5b       	subi	r30, 0xB5	; 181
    1c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0c:	80 81       	ld	r24, Z
    1c0e:	91 81       	ldd	r25, Z+1	; 0x01
    1c10:	8d 93       	st	X+, r24
    1c12:	9c 93       	st	X, r25
    1c14:	fe 01       	movw	r30, r28
    1c16:	e9 5b       	subi	r30, 0xB9	; 185
    1c18:	ff 4f       	sbci	r31, 0xFF	; 255
    1c1a:	80 81       	ld	r24, Z
    1c1c:	91 81       	ldd	r25, Z+1	; 0x01
    1c1e:	01 97       	sbiw	r24, 0x01	; 1
    1c20:	f1 f7       	brne	.-4      	; 0x1c1e <LCD_displayCharacter+0x30a>
    1c22:	fe 01       	movw	r30, r28
    1c24:	e9 5b       	subi	r30, 0xB9	; 185
    1c26:	ff 4f       	sbci	r31, 0xFF	; 255
    1c28:	91 83       	std	Z+1, r25	; 0x01
    1c2a:	80 83       	st	Z, r24
			_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	#if (DATA_BITS_MODE == 4)
			LCD_PORT = (LCD_PORT & 0x0F) | (data & 0xF0);
    1c2c:	a5 e3       	ldi	r26, 0x35	; 53
    1c2e:	b0 e0       	ldi	r27, 0x00	; 0
    1c30:	e5 e3       	ldi	r30, 0x35	; 53
    1c32:	f0 e0       	ldi	r31, 0x00	; 0
    1c34:	80 81       	ld	r24, Z
    1c36:	98 2f       	mov	r25, r24
    1c38:	9f 70       	andi	r25, 0x0F	; 15
    1c3a:	fe 01       	movw	r30, r28
    1c3c:	ed 59       	subi	r30, 0x9D	; 157
    1c3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c40:	80 81       	ld	r24, Z
    1c42:	80 7f       	andi	r24, 0xF0	; 240
    1c44:	89 2b       	or	r24, r25
    1c46:	8c 93       	st	X, r24
    1c48:	fe 01       	movw	r30, r28
    1c4a:	ed 5b       	subi	r30, 0xBD	; 189
    1c4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c4e:	80 e0       	ldi	r24, 0x00	; 0
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	a0 e8       	ldi	r26, 0x80	; 128
    1c54:	bf e3       	ldi	r27, 0x3F	; 63
    1c56:	80 83       	st	Z, r24
    1c58:	91 83       	std	Z+1, r25	; 0x01
    1c5a:	a2 83       	std	Z+2, r26	; 0x02
    1c5c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c5e:	8e 01       	movw	r16, r28
    1c60:	01 5c       	subi	r16, 0xC1	; 193
    1c62:	1f 4f       	sbci	r17, 0xFF	; 255
    1c64:	fe 01       	movw	r30, r28
    1c66:	ed 5b       	subi	r30, 0xBD	; 189
    1c68:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6a:	60 81       	ld	r22, Z
    1c6c:	71 81       	ldd	r23, Z+1	; 0x01
    1c6e:	82 81       	ldd	r24, Z+2	; 0x02
    1c70:	93 81       	ldd	r25, Z+3	; 0x03
    1c72:	20 e0       	ldi	r18, 0x00	; 0
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	4a ef       	ldi	r20, 0xFA	; 250
    1c78:	54 e4       	ldi	r21, 0x44	; 68
    1c7a:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    1c7e:	dc 01       	movw	r26, r24
    1c80:	cb 01       	movw	r24, r22
    1c82:	f8 01       	movw	r30, r16
    1c84:	80 83       	st	Z, r24
    1c86:	91 83       	std	Z+1, r25	; 0x01
    1c88:	a2 83       	std	Z+2, r26	; 0x02
    1c8a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c8c:	fe 01       	movw	r30, r28
    1c8e:	ff 96       	adiw	r30, 0x3f	; 63
    1c90:	60 81       	ld	r22, Z
    1c92:	71 81       	ldd	r23, Z+1	; 0x01
    1c94:	82 81       	ldd	r24, Z+2	; 0x02
    1c96:	93 81       	ldd	r25, Z+3	; 0x03
    1c98:	20 e0       	ldi	r18, 0x00	; 0
    1c9a:	30 e0       	ldi	r19, 0x00	; 0
    1c9c:	40 e8       	ldi	r20, 0x80	; 128
    1c9e:	5f e3       	ldi	r21, 0x3F	; 63
    1ca0:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    1ca4:	88 23       	and	r24, r24
    1ca6:	2c f4       	brge	.+10     	; 0x1cb2 <LCD_displayCharacter+0x39e>
		__ticks = 1;
    1ca8:	81 e0       	ldi	r24, 0x01	; 1
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	9e af       	std	Y+62, r25	; 0x3e
    1cae:	8d af       	std	Y+61, r24	; 0x3d
    1cb0:	46 c0       	rjmp	.+140    	; 0x1d3e <LCD_displayCharacter+0x42a>
	else if (__tmp > 65535)
    1cb2:	fe 01       	movw	r30, r28
    1cb4:	ff 96       	adiw	r30, 0x3f	; 63
    1cb6:	60 81       	ld	r22, Z
    1cb8:	71 81       	ldd	r23, Z+1	; 0x01
    1cba:	82 81       	ldd	r24, Z+2	; 0x02
    1cbc:	93 81       	ldd	r25, Z+3	; 0x03
    1cbe:	20 e0       	ldi	r18, 0x00	; 0
    1cc0:	3f ef       	ldi	r19, 0xFF	; 255
    1cc2:	4f e7       	ldi	r20, 0x7F	; 127
    1cc4:	57 e4       	ldi	r21, 0x47	; 71
    1cc6:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    1cca:	18 16       	cp	r1, r24
    1ccc:	64 f5       	brge	.+88     	; 0x1d26 <LCD_displayCharacter+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cce:	fe 01       	movw	r30, r28
    1cd0:	ed 5b       	subi	r30, 0xBD	; 189
    1cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd4:	60 81       	ld	r22, Z
    1cd6:	71 81       	ldd	r23, Z+1	; 0x01
    1cd8:	82 81       	ldd	r24, Z+2	; 0x02
    1cda:	93 81       	ldd	r25, Z+3	; 0x03
    1cdc:	20 e0       	ldi	r18, 0x00	; 0
    1cde:	30 e0       	ldi	r19, 0x00	; 0
    1ce0:	40 e2       	ldi	r20, 0x20	; 32
    1ce2:	51 e4       	ldi	r21, 0x41	; 65
    1ce4:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    1ce8:	dc 01       	movw	r26, r24
    1cea:	cb 01       	movw	r24, r22
    1cec:	bc 01       	movw	r22, r24
    1cee:	cd 01       	movw	r24, r26
    1cf0:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    1cf4:	dc 01       	movw	r26, r24
    1cf6:	cb 01       	movw	r24, r22
    1cf8:	9e af       	std	Y+62, r25	; 0x3e
    1cfa:	8d af       	std	Y+61, r24	; 0x3d
    1cfc:	0f c0       	rjmp	.+30     	; 0x1d1c <LCD_displayCharacter+0x408>
    1cfe:	88 ec       	ldi	r24, 0xC8	; 200
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	9c af       	std	Y+60, r25	; 0x3c
    1d04:	8b af       	std	Y+59, r24	; 0x3b
    1d06:	8b ad       	ldd	r24, Y+59	; 0x3b
    1d08:	9c ad       	ldd	r25, Y+60	; 0x3c
    1d0a:	01 97       	sbiw	r24, 0x01	; 1
    1d0c:	f1 f7       	brne	.-4      	; 0x1d0a <LCD_displayCharacter+0x3f6>
    1d0e:	9c af       	std	Y+60, r25	; 0x3c
    1d10:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d12:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d14:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d16:	01 97       	sbiw	r24, 0x01	; 1
    1d18:	9e af       	std	Y+62, r25	; 0x3e
    1d1a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d1c:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d1e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d20:	00 97       	sbiw	r24, 0x00	; 0
    1d22:	69 f7       	brne	.-38     	; 0x1cfe <LCD_displayCharacter+0x3ea>
    1d24:	16 c0       	rjmp	.+44     	; 0x1d52 <LCD_displayCharacter+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d26:	fe 01       	movw	r30, r28
    1d28:	ff 96       	adiw	r30, 0x3f	; 63
    1d2a:	60 81       	ld	r22, Z
    1d2c:	71 81       	ldd	r23, Z+1	; 0x01
    1d2e:	82 81       	ldd	r24, Z+2	; 0x02
    1d30:	93 81       	ldd	r25, Z+3	; 0x03
    1d32:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    1d36:	dc 01       	movw	r26, r24
    1d38:	cb 01       	movw	r24, r22
    1d3a:	9e af       	std	Y+62, r25	; 0x3e
    1d3c:	8d af       	std	Y+61, r24	; 0x3d
    1d3e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d40:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d42:	9a af       	std	Y+58, r25	; 0x3a
    1d44:	89 af       	std	Y+57, r24	; 0x39
    1d46:	89 ad       	ldd	r24, Y+57	; 0x39
    1d48:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d4a:	01 97       	sbiw	r24, 0x01	; 1
    1d4c:	f1 f7       	brne	.-4      	; 0x1d4a <LCD_displayCharacter+0x436>
    1d4e:	9a af       	std	Y+58, r25	; 0x3a
    1d50:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(1); /* delay for processing Tdsw = 100ns */
				CLEAR_BIT(LCD_PORT,EN); /* disable LCD E=0 */
    1d52:	a5 e3       	ldi	r26, 0x35	; 53
    1d54:	b0 e0       	ldi	r27, 0x00	; 0
    1d56:	e5 e3       	ldi	r30, 0x35	; 53
    1d58:	f0 e0       	ldi	r31, 0x00	; 0
    1d5a:	80 81       	ld	r24, Z
    1d5c:	8b 7f       	andi	r24, 0xFB	; 251
    1d5e:	8c 93       	st	X, r24
    1d60:	80 e0       	ldi	r24, 0x00	; 0
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	a0 e8       	ldi	r26, 0x80	; 128
    1d66:	bf e3       	ldi	r27, 0x3F	; 63
    1d68:	8d ab       	std	Y+53, r24	; 0x35
    1d6a:	9e ab       	std	Y+54, r25	; 0x36
    1d6c:	af ab       	std	Y+55, r26	; 0x37
    1d6e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d70:	6d a9       	ldd	r22, Y+53	; 0x35
    1d72:	7e a9       	ldd	r23, Y+54	; 0x36
    1d74:	8f a9       	ldd	r24, Y+55	; 0x37
    1d76:	98 ad       	ldd	r25, Y+56	; 0x38
    1d78:	20 e0       	ldi	r18, 0x00	; 0
    1d7a:	30 e0       	ldi	r19, 0x00	; 0
    1d7c:	4a ef       	ldi	r20, 0xFA	; 250
    1d7e:	54 e4       	ldi	r21, 0x44	; 68
    1d80:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    1d84:	dc 01       	movw	r26, r24
    1d86:	cb 01       	movw	r24, r22
    1d88:	89 ab       	std	Y+49, r24	; 0x31
    1d8a:	9a ab       	std	Y+50, r25	; 0x32
    1d8c:	ab ab       	std	Y+51, r26	; 0x33
    1d8e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1d90:	69 a9       	ldd	r22, Y+49	; 0x31
    1d92:	7a a9       	ldd	r23, Y+50	; 0x32
    1d94:	8b a9       	ldd	r24, Y+51	; 0x33
    1d96:	9c a9       	ldd	r25, Y+52	; 0x34
    1d98:	20 e0       	ldi	r18, 0x00	; 0
    1d9a:	30 e0       	ldi	r19, 0x00	; 0
    1d9c:	40 e8       	ldi	r20, 0x80	; 128
    1d9e:	5f e3       	ldi	r21, 0x3F	; 63
    1da0:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    1da4:	88 23       	and	r24, r24
    1da6:	2c f4       	brge	.+10     	; 0x1db2 <LCD_displayCharacter+0x49e>
		__ticks = 1;
    1da8:	81 e0       	ldi	r24, 0x01	; 1
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	98 ab       	std	Y+48, r25	; 0x30
    1dae:	8f a7       	std	Y+47, r24	; 0x2f
    1db0:	3f c0       	rjmp	.+126    	; 0x1e30 <LCD_displayCharacter+0x51c>
	else if (__tmp > 65535)
    1db2:	69 a9       	ldd	r22, Y+49	; 0x31
    1db4:	7a a9       	ldd	r23, Y+50	; 0x32
    1db6:	8b a9       	ldd	r24, Y+51	; 0x33
    1db8:	9c a9       	ldd	r25, Y+52	; 0x34
    1dba:	20 e0       	ldi	r18, 0x00	; 0
    1dbc:	3f ef       	ldi	r19, 0xFF	; 255
    1dbe:	4f e7       	ldi	r20, 0x7F	; 127
    1dc0:	57 e4       	ldi	r21, 0x47	; 71
    1dc2:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    1dc6:	18 16       	cp	r1, r24
    1dc8:	4c f5       	brge	.+82     	; 0x1e1c <LCD_displayCharacter+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dca:	6d a9       	ldd	r22, Y+53	; 0x35
    1dcc:	7e a9       	ldd	r23, Y+54	; 0x36
    1dce:	8f a9       	ldd	r24, Y+55	; 0x37
    1dd0:	98 ad       	ldd	r25, Y+56	; 0x38
    1dd2:	20 e0       	ldi	r18, 0x00	; 0
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	40 e2       	ldi	r20, 0x20	; 32
    1dd8:	51 e4       	ldi	r21, 0x41	; 65
    1dda:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    1dde:	dc 01       	movw	r26, r24
    1de0:	cb 01       	movw	r24, r22
    1de2:	bc 01       	movw	r22, r24
    1de4:	cd 01       	movw	r24, r26
    1de6:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    1dea:	dc 01       	movw	r26, r24
    1dec:	cb 01       	movw	r24, r22
    1dee:	98 ab       	std	Y+48, r25	; 0x30
    1df0:	8f a7       	std	Y+47, r24	; 0x2f
    1df2:	0f c0       	rjmp	.+30     	; 0x1e12 <LCD_displayCharacter+0x4fe>
    1df4:	88 ec       	ldi	r24, 0xC8	; 200
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	9e a7       	std	Y+46, r25	; 0x2e
    1dfa:	8d a7       	std	Y+45, r24	; 0x2d
    1dfc:	8d a5       	ldd	r24, Y+45	; 0x2d
    1dfe:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e00:	01 97       	sbiw	r24, 0x01	; 1
    1e02:	f1 f7       	brne	.-4      	; 0x1e00 <LCD_displayCharacter+0x4ec>
    1e04:	9e a7       	std	Y+46, r25	; 0x2e
    1e06:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e08:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e0a:	98 a9       	ldd	r25, Y+48	; 0x30
    1e0c:	01 97       	sbiw	r24, 0x01	; 1
    1e0e:	98 ab       	std	Y+48, r25	; 0x30
    1e10:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e12:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e14:	98 a9       	ldd	r25, Y+48	; 0x30
    1e16:	00 97       	sbiw	r24, 0x00	; 0
    1e18:	69 f7       	brne	.-38     	; 0x1df4 <LCD_displayCharacter+0x4e0>
    1e1a:	14 c0       	rjmp	.+40     	; 0x1e44 <LCD_displayCharacter+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e1c:	69 a9       	ldd	r22, Y+49	; 0x31
    1e1e:	7a a9       	ldd	r23, Y+50	; 0x32
    1e20:	8b a9       	ldd	r24, Y+51	; 0x33
    1e22:	9c a9       	ldd	r25, Y+52	; 0x34
    1e24:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    1e28:	dc 01       	movw	r26, r24
    1e2a:	cb 01       	movw	r24, r22
    1e2c:	98 ab       	std	Y+48, r25	; 0x30
    1e2e:	8f a7       	std	Y+47, r24	; 0x2f
    1e30:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e32:	98 a9       	ldd	r25, Y+48	; 0x30
    1e34:	9c a7       	std	Y+44, r25	; 0x2c
    1e36:	8b a7       	std	Y+43, r24	; 0x2b
    1e38:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e3a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e3c:	01 97       	sbiw	r24, 0x01	; 1
    1e3e:	f1 f7       	brne	.-4      	; 0x1e3c <LCD_displayCharacter+0x528>
    1e40:	9c a7       	std	Y+44, r25	; 0x2c
    1e42:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(1); /* delay for processing Th = 13ns */
				SET_BIT(LCD_PORT,EN); /* Enable LCD E=1 */
    1e44:	a5 e3       	ldi	r26, 0x35	; 53
    1e46:	b0 e0       	ldi	r27, 0x00	; 0
    1e48:	e5 e3       	ldi	r30, 0x35	; 53
    1e4a:	f0 e0       	ldi	r31, 0x00	; 0
    1e4c:	80 81       	ld	r24, Z
    1e4e:	84 60       	ori	r24, 0x04	; 4
    1e50:	8c 93       	st	X, r24
    1e52:	80 e0       	ldi	r24, 0x00	; 0
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	a0 e8       	ldi	r26, 0x80	; 128
    1e58:	bf e3       	ldi	r27, 0x3F	; 63
    1e5a:	8f a3       	std	Y+39, r24	; 0x27
    1e5c:	98 a7       	std	Y+40, r25	; 0x28
    1e5e:	a9 a7       	std	Y+41, r26	; 0x29
    1e60:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e62:	6f a1       	ldd	r22, Y+39	; 0x27
    1e64:	78 a5       	ldd	r23, Y+40	; 0x28
    1e66:	89 a5       	ldd	r24, Y+41	; 0x29
    1e68:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e6a:	20 e0       	ldi	r18, 0x00	; 0
    1e6c:	30 e0       	ldi	r19, 0x00	; 0
    1e6e:	4a ef       	ldi	r20, 0xFA	; 250
    1e70:	54 e4       	ldi	r21, 0x44	; 68
    1e72:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    1e76:	dc 01       	movw	r26, r24
    1e78:	cb 01       	movw	r24, r22
    1e7a:	8b a3       	std	Y+35, r24	; 0x23
    1e7c:	9c a3       	std	Y+36, r25	; 0x24
    1e7e:	ad a3       	std	Y+37, r26	; 0x25
    1e80:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e82:	6b a1       	ldd	r22, Y+35	; 0x23
    1e84:	7c a1       	ldd	r23, Y+36	; 0x24
    1e86:	8d a1       	ldd	r24, Y+37	; 0x25
    1e88:	9e a1       	ldd	r25, Y+38	; 0x26
    1e8a:	20 e0       	ldi	r18, 0x00	; 0
    1e8c:	30 e0       	ldi	r19, 0x00	; 0
    1e8e:	40 e8       	ldi	r20, 0x80	; 128
    1e90:	5f e3       	ldi	r21, 0x3F	; 63
    1e92:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    1e96:	88 23       	and	r24, r24
    1e98:	2c f4       	brge	.+10     	; 0x1ea4 <LCD_displayCharacter+0x590>
		__ticks = 1;
    1e9a:	81 e0       	ldi	r24, 0x01	; 1
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	9a a3       	std	Y+34, r25	; 0x22
    1ea0:	89 a3       	std	Y+33, r24	; 0x21
    1ea2:	3f c0       	rjmp	.+126    	; 0x1f22 <LCD_displayCharacter+0x60e>
	else if (__tmp > 65535)
    1ea4:	6b a1       	ldd	r22, Y+35	; 0x23
    1ea6:	7c a1       	ldd	r23, Y+36	; 0x24
    1ea8:	8d a1       	ldd	r24, Y+37	; 0x25
    1eaa:	9e a1       	ldd	r25, Y+38	; 0x26
    1eac:	20 e0       	ldi	r18, 0x00	; 0
    1eae:	3f ef       	ldi	r19, 0xFF	; 255
    1eb0:	4f e7       	ldi	r20, 0x7F	; 127
    1eb2:	57 e4       	ldi	r21, 0x47	; 71
    1eb4:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    1eb8:	18 16       	cp	r1, r24
    1eba:	4c f5       	brge	.+82     	; 0x1f0e <LCD_displayCharacter+0x5fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ebc:	6f a1       	ldd	r22, Y+39	; 0x27
    1ebe:	78 a5       	ldd	r23, Y+40	; 0x28
    1ec0:	89 a5       	ldd	r24, Y+41	; 0x29
    1ec2:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ec4:	20 e0       	ldi	r18, 0x00	; 0
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	40 e2       	ldi	r20, 0x20	; 32
    1eca:	51 e4       	ldi	r21, 0x41	; 65
    1ecc:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    1ed0:	dc 01       	movw	r26, r24
    1ed2:	cb 01       	movw	r24, r22
    1ed4:	bc 01       	movw	r22, r24
    1ed6:	cd 01       	movw	r24, r26
    1ed8:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    1edc:	dc 01       	movw	r26, r24
    1ede:	cb 01       	movw	r24, r22
    1ee0:	9a a3       	std	Y+34, r25	; 0x22
    1ee2:	89 a3       	std	Y+33, r24	; 0x21
    1ee4:	0f c0       	rjmp	.+30     	; 0x1f04 <LCD_displayCharacter+0x5f0>
    1ee6:	88 ec       	ldi	r24, 0xC8	; 200
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	98 a3       	std	Y+32, r25	; 0x20
    1eec:	8f 8f       	std	Y+31, r24	; 0x1f
    1eee:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ef0:	98 a1       	ldd	r25, Y+32	; 0x20
    1ef2:	01 97       	sbiw	r24, 0x01	; 1
    1ef4:	f1 f7       	brne	.-4      	; 0x1ef2 <LCD_displayCharacter+0x5de>
    1ef6:	98 a3       	std	Y+32, r25	; 0x20
    1ef8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1efa:	89 a1       	ldd	r24, Y+33	; 0x21
    1efc:	9a a1       	ldd	r25, Y+34	; 0x22
    1efe:	01 97       	sbiw	r24, 0x01	; 1
    1f00:	9a a3       	std	Y+34, r25	; 0x22
    1f02:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f04:	89 a1       	ldd	r24, Y+33	; 0x21
    1f06:	9a a1       	ldd	r25, Y+34	; 0x22
    1f08:	00 97       	sbiw	r24, 0x00	; 0
    1f0a:	69 f7       	brne	.-38     	; 0x1ee6 <LCD_displayCharacter+0x5d2>
    1f0c:	14 c0       	rjmp	.+40     	; 0x1f36 <LCD_displayCharacter+0x622>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f0e:	6b a1       	ldd	r22, Y+35	; 0x23
    1f10:	7c a1       	ldd	r23, Y+36	; 0x24
    1f12:	8d a1       	ldd	r24, Y+37	; 0x25
    1f14:	9e a1       	ldd	r25, Y+38	; 0x26
    1f16:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    1f1a:	dc 01       	movw	r26, r24
    1f1c:	cb 01       	movw	r24, r22
    1f1e:	9a a3       	std	Y+34, r25	; 0x22
    1f20:	89 a3       	std	Y+33, r24	; 0x21
    1f22:	89 a1       	ldd	r24, Y+33	; 0x21
    1f24:	9a a1       	ldd	r25, Y+34	; 0x22
    1f26:	9e 8f       	std	Y+30, r25	; 0x1e
    1f28:	8d 8f       	std	Y+29, r24	; 0x1d
    1f2a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f2c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f2e:	01 97       	sbiw	r24, 0x01	; 1
    1f30:	f1 f7       	brne	.-4      	; 0x1f2e <LCD_displayCharacter+0x61a>
    1f32:	9e 8f       	std	Y+30, r25	; 0x1e
    1f34:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
				LCD_PORT = (LCD_PORT & 0x0F) | ((data & 0x0F) << 4);
    1f36:	a5 e3       	ldi	r26, 0x35	; 53
    1f38:	b0 e0       	ldi	r27, 0x00	; 0
    1f3a:	e5 e3       	ldi	r30, 0x35	; 53
    1f3c:	f0 e0       	ldi	r31, 0x00	; 0
    1f3e:	80 81       	ld	r24, Z
    1f40:	28 2f       	mov	r18, r24
    1f42:	2f 70       	andi	r18, 0x0F	; 15
    1f44:	fe 01       	movw	r30, r28
    1f46:	ed 59       	subi	r30, 0x9D	; 157
    1f48:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4a:	80 81       	ld	r24, Z
    1f4c:	88 2f       	mov	r24, r24
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	82 95       	swap	r24
    1f52:	92 95       	swap	r25
    1f54:	90 7f       	andi	r25, 0xF0	; 240
    1f56:	98 27       	eor	r25, r24
    1f58:	80 7f       	andi	r24, 0xF0	; 240
    1f5a:	98 27       	eor	r25, r24
    1f5c:	82 2b       	or	r24, r18
    1f5e:	8c 93       	st	X, r24
    1f60:	80 e0       	ldi	r24, 0x00	; 0
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	a0 e8       	ldi	r26, 0x80	; 128
    1f66:	bf e3       	ldi	r27, 0x3F	; 63
    1f68:	89 8f       	std	Y+25, r24	; 0x19
    1f6a:	9a 8f       	std	Y+26, r25	; 0x1a
    1f6c:	ab 8f       	std	Y+27, r26	; 0x1b
    1f6e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f70:	69 8d       	ldd	r22, Y+25	; 0x19
    1f72:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f74:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f76:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f78:	20 e0       	ldi	r18, 0x00	; 0
    1f7a:	30 e0       	ldi	r19, 0x00	; 0
    1f7c:	4a ef       	ldi	r20, 0xFA	; 250
    1f7e:	54 e4       	ldi	r21, 0x44	; 68
    1f80:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    1f84:	dc 01       	movw	r26, r24
    1f86:	cb 01       	movw	r24, r22
    1f88:	8d 8b       	std	Y+21, r24	; 0x15
    1f8a:	9e 8b       	std	Y+22, r25	; 0x16
    1f8c:	af 8b       	std	Y+23, r26	; 0x17
    1f8e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f90:	6d 89       	ldd	r22, Y+21	; 0x15
    1f92:	7e 89       	ldd	r23, Y+22	; 0x16
    1f94:	8f 89       	ldd	r24, Y+23	; 0x17
    1f96:	98 8d       	ldd	r25, Y+24	; 0x18
    1f98:	20 e0       	ldi	r18, 0x00	; 0
    1f9a:	30 e0       	ldi	r19, 0x00	; 0
    1f9c:	40 e8       	ldi	r20, 0x80	; 128
    1f9e:	5f e3       	ldi	r21, 0x3F	; 63
    1fa0:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    1fa4:	88 23       	and	r24, r24
    1fa6:	2c f4       	brge	.+10     	; 0x1fb2 <LCD_displayCharacter+0x69e>
		__ticks = 1;
    1fa8:	81 e0       	ldi	r24, 0x01	; 1
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	9c 8b       	std	Y+20, r25	; 0x14
    1fae:	8b 8b       	std	Y+19, r24	; 0x13
    1fb0:	3f c0       	rjmp	.+126    	; 0x2030 <LCD_displayCharacter+0x71c>
	else if (__tmp > 65535)
    1fb2:	6d 89       	ldd	r22, Y+21	; 0x15
    1fb4:	7e 89       	ldd	r23, Y+22	; 0x16
    1fb6:	8f 89       	ldd	r24, Y+23	; 0x17
    1fb8:	98 8d       	ldd	r25, Y+24	; 0x18
    1fba:	20 e0       	ldi	r18, 0x00	; 0
    1fbc:	3f ef       	ldi	r19, 0xFF	; 255
    1fbe:	4f e7       	ldi	r20, 0x7F	; 127
    1fc0:	57 e4       	ldi	r21, 0x47	; 71
    1fc2:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    1fc6:	18 16       	cp	r1, r24
    1fc8:	4c f5       	brge	.+82     	; 0x201c <LCD_displayCharacter+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fca:	69 8d       	ldd	r22, Y+25	; 0x19
    1fcc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fd0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fd2:	20 e0       	ldi	r18, 0x00	; 0
    1fd4:	30 e0       	ldi	r19, 0x00	; 0
    1fd6:	40 e2       	ldi	r20, 0x20	; 32
    1fd8:	51 e4       	ldi	r21, 0x41	; 65
    1fda:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    1fde:	dc 01       	movw	r26, r24
    1fe0:	cb 01       	movw	r24, r22
    1fe2:	bc 01       	movw	r22, r24
    1fe4:	cd 01       	movw	r24, r26
    1fe6:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    1fea:	dc 01       	movw	r26, r24
    1fec:	cb 01       	movw	r24, r22
    1fee:	9c 8b       	std	Y+20, r25	; 0x14
    1ff0:	8b 8b       	std	Y+19, r24	; 0x13
    1ff2:	0f c0       	rjmp	.+30     	; 0x2012 <LCD_displayCharacter+0x6fe>
    1ff4:	88 ec       	ldi	r24, 0xC8	; 200
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	9a 8b       	std	Y+18, r25	; 0x12
    1ffa:	89 8b       	std	Y+17, r24	; 0x11
    1ffc:	89 89       	ldd	r24, Y+17	; 0x11
    1ffe:	9a 89       	ldd	r25, Y+18	; 0x12
    2000:	01 97       	sbiw	r24, 0x01	; 1
    2002:	f1 f7       	brne	.-4      	; 0x2000 <LCD_displayCharacter+0x6ec>
    2004:	9a 8b       	std	Y+18, r25	; 0x12
    2006:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2008:	8b 89       	ldd	r24, Y+19	; 0x13
    200a:	9c 89       	ldd	r25, Y+20	; 0x14
    200c:	01 97       	sbiw	r24, 0x01	; 1
    200e:	9c 8b       	std	Y+20, r25	; 0x14
    2010:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2012:	8b 89       	ldd	r24, Y+19	; 0x13
    2014:	9c 89       	ldd	r25, Y+20	; 0x14
    2016:	00 97       	sbiw	r24, 0x00	; 0
    2018:	69 f7       	brne	.-38     	; 0x1ff4 <LCD_displayCharacter+0x6e0>
    201a:	14 c0       	rjmp	.+40     	; 0x2044 <LCD_displayCharacter+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    201c:	6d 89       	ldd	r22, Y+21	; 0x15
    201e:	7e 89       	ldd	r23, Y+22	; 0x16
    2020:	8f 89       	ldd	r24, Y+23	; 0x17
    2022:	98 8d       	ldd	r25, Y+24	; 0x18
    2024:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    2028:	dc 01       	movw	r26, r24
    202a:	cb 01       	movw	r24, r22
    202c:	9c 8b       	std	Y+20, r25	; 0x14
    202e:	8b 8b       	std	Y+19, r24	; 0x13
    2030:	8b 89       	ldd	r24, Y+19	; 0x13
    2032:	9c 89       	ldd	r25, Y+20	; 0x14
    2034:	98 8b       	std	Y+16, r25	; 0x10
    2036:	8f 87       	std	Y+15, r24	; 0x0f
    2038:	8f 85       	ldd	r24, Y+15	; 0x0f
    203a:	98 89       	ldd	r25, Y+16	; 0x10
    203c:	01 97       	sbiw	r24, 0x01	; 1
    203e:	f1 f7       	brne	.-4      	; 0x203c <LCD_displayCharacter+0x728>
    2040:	98 8b       	std	Y+16, r25	; 0x10
    2042:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(1); /* delay for processing Tdsw = 100ns */
					CLEAR_BIT(LCD_PORT,EN); /* disable LCD E=0 */
    2044:	a5 e3       	ldi	r26, 0x35	; 53
    2046:	b0 e0       	ldi	r27, 0x00	; 0
    2048:	e5 e3       	ldi	r30, 0x35	; 53
    204a:	f0 e0       	ldi	r31, 0x00	; 0
    204c:	80 81       	ld	r24, Z
    204e:	8b 7f       	andi	r24, 0xFB	; 251
    2050:	8c 93       	st	X, r24
    2052:	80 e0       	ldi	r24, 0x00	; 0
    2054:	90 e0       	ldi	r25, 0x00	; 0
    2056:	a0 e8       	ldi	r26, 0x80	; 128
    2058:	bf e3       	ldi	r27, 0x3F	; 63
    205a:	8b 87       	std	Y+11, r24	; 0x0b
    205c:	9c 87       	std	Y+12, r25	; 0x0c
    205e:	ad 87       	std	Y+13, r26	; 0x0d
    2060:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2062:	6b 85       	ldd	r22, Y+11	; 0x0b
    2064:	7c 85       	ldd	r23, Y+12	; 0x0c
    2066:	8d 85       	ldd	r24, Y+13	; 0x0d
    2068:	9e 85       	ldd	r25, Y+14	; 0x0e
    206a:	20 e0       	ldi	r18, 0x00	; 0
    206c:	30 e0       	ldi	r19, 0x00	; 0
    206e:	4a ef       	ldi	r20, 0xFA	; 250
    2070:	54 e4       	ldi	r21, 0x44	; 68
    2072:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    2076:	dc 01       	movw	r26, r24
    2078:	cb 01       	movw	r24, r22
    207a:	8f 83       	std	Y+7, r24	; 0x07
    207c:	98 87       	std	Y+8, r25	; 0x08
    207e:	a9 87       	std	Y+9, r26	; 0x09
    2080:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2082:	6f 81       	ldd	r22, Y+7	; 0x07
    2084:	78 85       	ldd	r23, Y+8	; 0x08
    2086:	89 85       	ldd	r24, Y+9	; 0x09
    2088:	9a 85       	ldd	r25, Y+10	; 0x0a
    208a:	20 e0       	ldi	r18, 0x00	; 0
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	40 e8       	ldi	r20, 0x80	; 128
    2090:	5f e3       	ldi	r21, 0x3F	; 63
    2092:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    2096:	88 23       	and	r24, r24
    2098:	2c f4       	brge	.+10     	; 0x20a4 <LCD_displayCharacter+0x790>
		__ticks = 1;
    209a:	81 e0       	ldi	r24, 0x01	; 1
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	9e 83       	std	Y+6, r25	; 0x06
    20a0:	8d 83       	std	Y+5, r24	; 0x05
    20a2:	3f c0       	rjmp	.+126    	; 0x2122 <LCD_displayCharacter+0x80e>
	else if (__tmp > 65535)
    20a4:	6f 81       	ldd	r22, Y+7	; 0x07
    20a6:	78 85       	ldd	r23, Y+8	; 0x08
    20a8:	89 85       	ldd	r24, Y+9	; 0x09
    20aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ac:	20 e0       	ldi	r18, 0x00	; 0
    20ae:	3f ef       	ldi	r19, 0xFF	; 255
    20b0:	4f e7       	ldi	r20, 0x7F	; 127
    20b2:	57 e4       	ldi	r21, 0x47	; 71
    20b4:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    20b8:	18 16       	cp	r1, r24
    20ba:	4c f5       	brge	.+82     	; 0x210e <LCD_displayCharacter+0x7fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    20be:	7c 85       	ldd	r23, Y+12	; 0x0c
    20c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    20c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    20c4:	20 e0       	ldi	r18, 0x00	; 0
    20c6:	30 e0       	ldi	r19, 0x00	; 0
    20c8:	40 e2       	ldi	r20, 0x20	; 32
    20ca:	51 e4       	ldi	r21, 0x41	; 65
    20cc:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    20d0:	dc 01       	movw	r26, r24
    20d2:	cb 01       	movw	r24, r22
    20d4:	bc 01       	movw	r22, r24
    20d6:	cd 01       	movw	r24, r26
    20d8:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    20dc:	dc 01       	movw	r26, r24
    20de:	cb 01       	movw	r24, r22
    20e0:	9e 83       	std	Y+6, r25	; 0x06
    20e2:	8d 83       	std	Y+5, r24	; 0x05
    20e4:	0f c0       	rjmp	.+30     	; 0x2104 <LCD_displayCharacter+0x7f0>
    20e6:	88 ec       	ldi	r24, 0xC8	; 200
    20e8:	90 e0       	ldi	r25, 0x00	; 0
    20ea:	9c 83       	std	Y+4, r25	; 0x04
    20ec:	8b 83       	std	Y+3, r24	; 0x03
    20ee:	8b 81       	ldd	r24, Y+3	; 0x03
    20f0:	9c 81       	ldd	r25, Y+4	; 0x04
    20f2:	01 97       	sbiw	r24, 0x01	; 1
    20f4:	f1 f7       	brne	.-4      	; 0x20f2 <LCD_displayCharacter+0x7de>
    20f6:	9c 83       	std	Y+4, r25	; 0x04
    20f8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20fa:	8d 81       	ldd	r24, Y+5	; 0x05
    20fc:	9e 81       	ldd	r25, Y+6	; 0x06
    20fe:	01 97       	sbiw	r24, 0x01	; 1
    2100:	9e 83       	std	Y+6, r25	; 0x06
    2102:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2104:	8d 81       	ldd	r24, Y+5	; 0x05
    2106:	9e 81       	ldd	r25, Y+6	; 0x06
    2108:	00 97       	sbiw	r24, 0x00	; 0
    210a:	69 f7       	brne	.-38     	; 0x20e6 <LCD_displayCharacter+0x7d2>
    210c:	14 c0       	rjmp	.+40     	; 0x2136 <LCD_displayCharacter+0x822>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    210e:	6f 81       	ldd	r22, Y+7	; 0x07
    2110:	78 85       	ldd	r23, Y+8	; 0x08
    2112:	89 85       	ldd	r24, Y+9	; 0x09
    2114:	9a 85       	ldd	r25, Y+10	; 0x0a
    2116:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    211a:	dc 01       	movw	r26, r24
    211c:	cb 01       	movw	r24, r22
    211e:	9e 83       	std	Y+6, r25	; 0x06
    2120:	8d 83       	std	Y+5, r24	; 0x05
    2122:	8d 81       	ldd	r24, Y+5	; 0x05
    2124:	9e 81       	ldd	r25, Y+6	; 0x06
    2126:	9a 83       	std	Y+2, r25	; 0x02
    2128:	89 83       	std	Y+1, r24	; 0x01
    212a:	89 81       	ldd	r24, Y+1	; 0x01
    212c:	9a 81       	ldd	r25, Y+2	; 0x02
    212e:	01 97       	sbiw	r24, 0x01	; 1
    2130:	f1 f7       	brne	.-4      	; 0x212e <LCD_displayCharacter+0x81a>
    2132:	9a 83       	std	Y+2, r25	; 0x02
    2134:	89 83       	std	Y+1, r24	; 0x01
		LCD_DATA_PORT = data; /* out the required command to the data bus D0 --> D7 */
		_delay_ms(1); /* delay for processing Tdsw = 100ns */
		CLEAR_BIT(LCD_PORT,EN); /* disable LCD E=0 */
		_delay_ms(1); /* delay for processing Th = 13ns */
	#endif
}
    2136:	cd 59       	subi	r28, 0x9D	; 157
    2138:	df 4f       	sbci	r29, 0xFF	; 255
    213a:	0f b6       	in	r0, 0x3f	; 63
    213c:	f8 94       	cli
    213e:	de bf       	out	0x3e, r29	; 62
    2140:	0f be       	out	0x3f, r0	; 63
    2142:	cd bf       	out	0x3d, r28	; 61
    2144:	cf 91       	pop	r28
    2146:	df 91       	pop	r29
    2148:	1f 91       	pop	r17
    214a:	0f 91       	pop	r16
    214c:	08 95       	ret

0000214e <LCD_gotoRowColumn>:
void LCD_gotoRowColumn(unsigned char row,unsigned char col){
    214e:	df 93       	push	r29
    2150:	cf 93       	push	r28
    2152:	cd b7       	in	r28, 0x3d	; 61
    2154:	de b7       	in	r29, 0x3e	; 62
    2156:	6e 97       	sbiw	r28, 0x1e	; 30
    2158:	0f b6       	in	r0, 0x3f	; 63
    215a:	f8 94       	cli
    215c:	de bf       	out	0x3e, r29	; 62
    215e:	0f be       	out	0x3f, r0	; 63
    2160:	cd bf       	out	0x3d, r28	; 61
    2162:	8d 8f       	std	Y+29, r24	; 0x1d
    2164:	6e 8f       	std	Y+30, r22	; 0x1e
	unsigned char fristcharadr[]={0x80,0xC0,0x90,0xD0};  // location of the rows in lcd (2lines and 4lines)
    2166:	80 e8       	ldi	r24, 0x80	; 128
    2168:	89 8f       	std	Y+25, r24	; 0x19
    216a:	80 ec       	ldi	r24, 0xC0	; 192
    216c:	8a 8f       	std	Y+26, r24	; 0x1a
    216e:	80 e9       	ldi	r24, 0x90	; 144
    2170:	8b 8f       	std	Y+27, r24	; 0x1b
    2172:	80 ed       	ldi	r24, 0xD0	; 208
    2174:	8c 8f       	std	Y+28, r24	; 0x1c
	LCD_sendCommand(fristcharadr[row-1]+(col-1));
    2176:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2178:	88 2f       	mov	r24, r24
    217a:	90 e0       	ldi	r25, 0x00	; 0
    217c:	9c 01       	movw	r18, r24
    217e:	21 50       	subi	r18, 0x01	; 1
    2180:	30 40       	sbci	r19, 0x00	; 0
    2182:	ce 01       	movw	r24, r28
    2184:	49 96       	adiw	r24, 0x19	; 25
    2186:	fc 01       	movw	r30, r24
    2188:	e2 0f       	add	r30, r18
    218a:	f3 1f       	adc	r31, r19
    218c:	90 81       	ld	r25, Z
    218e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2190:	89 0f       	add	r24, r25
    2192:	81 50       	subi	r24, 0x01	; 1
    2194:	0e 94 6d 08 	call	0x10da	; 0x10da <LCD_sendCommand>
    2198:	80 e0       	ldi	r24, 0x00	; 0
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	a8 ec       	ldi	r26, 0xC8	; 200
    219e:	b2 e4       	ldi	r27, 0x42	; 66
    21a0:	8d 8b       	std	Y+21, r24	; 0x15
    21a2:	9e 8b       	std	Y+22, r25	; 0x16
    21a4:	af 8b       	std	Y+23, r26	; 0x17
    21a6:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    21a8:	6d 89       	ldd	r22, Y+21	; 0x15
    21aa:	7e 89       	ldd	r23, Y+22	; 0x16
    21ac:	8f 89       	ldd	r24, Y+23	; 0x17
    21ae:	98 8d       	ldd	r25, Y+24	; 0x18
    21b0:	2b ea       	ldi	r18, 0xAB	; 171
    21b2:	3a ea       	ldi	r19, 0xAA	; 170
    21b4:	4a e2       	ldi	r20, 0x2A	; 42
    21b6:	50 e4       	ldi	r21, 0x40	; 64
    21b8:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    21bc:	dc 01       	movw	r26, r24
    21be:	cb 01       	movw	r24, r22
    21c0:	89 8b       	std	Y+17, r24	; 0x11
    21c2:	9a 8b       	std	Y+18, r25	; 0x12
    21c4:	ab 8b       	std	Y+19, r26	; 0x13
    21c6:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    21c8:	69 89       	ldd	r22, Y+17	; 0x11
    21ca:	7a 89       	ldd	r23, Y+18	; 0x12
    21cc:	8b 89       	ldd	r24, Y+19	; 0x13
    21ce:	9c 89       	ldd	r25, Y+20	; 0x14
    21d0:	20 e0       	ldi	r18, 0x00	; 0
    21d2:	30 e0       	ldi	r19, 0x00	; 0
    21d4:	40 e8       	ldi	r20, 0x80	; 128
    21d6:	5f e3       	ldi	r21, 0x3F	; 63
    21d8:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    21dc:	88 23       	and	r24, r24
    21de:	1c f4       	brge	.+6      	; 0x21e6 <LCD_gotoRowColumn+0x98>
		__ticks = 1;
    21e0:	81 e0       	ldi	r24, 0x01	; 1
    21e2:	88 8b       	std	Y+16, r24	; 0x10
    21e4:	91 c0       	rjmp	.+290    	; 0x2308 <LCD_gotoRowColumn+0x1ba>
	else if (__tmp > 255)
    21e6:	69 89       	ldd	r22, Y+17	; 0x11
    21e8:	7a 89       	ldd	r23, Y+18	; 0x12
    21ea:	8b 89       	ldd	r24, Y+19	; 0x13
    21ec:	9c 89       	ldd	r25, Y+20	; 0x14
    21ee:	20 e0       	ldi	r18, 0x00	; 0
    21f0:	30 e0       	ldi	r19, 0x00	; 0
    21f2:	4f e7       	ldi	r20, 0x7F	; 127
    21f4:	53 e4       	ldi	r21, 0x43	; 67
    21f6:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    21fa:	18 16       	cp	r1, r24
    21fc:	0c f0       	brlt	.+2      	; 0x2200 <LCD_gotoRowColumn+0xb2>
    21fe:	7b c0       	rjmp	.+246    	; 0x22f6 <LCD_gotoRowColumn+0x1a8>
	{
		_delay_ms(__us / 1000.0);
    2200:	6d 89       	ldd	r22, Y+21	; 0x15
    2202:	7e 89       	ldd	r23, Y+22	; 0x16
    2204:	8f 89       	ldd	r24, Y+23	; 0x17
    2206:	98 8d       	ldd	r25, Y+24	; 0x18
    2208:	20 e0       	ldi	r18, 0x00	; 0
    220a:	30 e0       	ldi	r19, 0x00	; 0
    220c:	4a e7       	ldi	r20, 0x7A	; 122
    220e:	54 e4       	ldi	r21, 0x44	; 68
    2210:	0e 94 8e 03 	call	0x71c	; 0x71c <__divsf3>
    2214:	dc 01       	movw	r26, r24
    2216:	cb 01       	movw	r24, r22
    2218:	8c 87       	std	Y+12, r24	; 0x0c
    221a:	9d 87       	std	Y+13, r25	; 0x0d
    221c:	ae 87       	std	Y+14, r26	; 0x0e
    221e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2220:	6c 85       	ldd	r22, Y+12	; 0x0c
    2222:	7d 85       	ldd	r23, Y+13	; 0x0d
    2224:	8e 85       	ldd	r24, Y+14	; 0x0e
    2226:	9f 85       	ldd	r25, Y+15	; 0x0f
    2228:	20 e0       	ldi	r18, 0x00	; 0
    222a:	30 e0       	ldi	r19, 0x00	; 0
    222c:	4a ef       	ldi	r20, 0xFA	; 250
    222e:	54 e4       	ldi	r21, 0x44	; 68
    2230:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    2234:	dc 01       	movw	r26, r24
    2236:	cb 01       	movw	r24, r22
    2238:	88 87       	std	Y+8, r24	; 0x08
    223a:	99 87       	std	Y+9, r25	; 0x09
    223c:	aa 87       	std	Y+10, r26	; 0x0a
    223e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2240:	68 85       	ldd	r22, Y+8	; 0x08
    2242:	79 85       	ldd	r23, Y+9	; 0x09
    2244:	8a 85       	ldd	r24, Y+10	; 0x0a
    2246:	9b 85       	ldd	r25, Y+11	; 0x0b
    2248:	20 e0       	ldi	r18, 0x00	; 0
    224a:	30 e0       	ldi	r19, 0x00	; 0
    224c:	40 e8       	ldi	r20, 0x80	; 128
    224e:	5f e3       	ldi	r21, 0x3F	; 63
    2250:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    2254:	88 23       	and	r24, r24
    2256:	2c f4       	brge	.+10     	; 0x2262 <LCD_gotoRowColumn+0x114>
		__ticks = 1;
    2258:	81 e0       	ldi	r24, 0x01	; 1
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	9f 83       	std	Y+7, r25	; 0x07
    225e:	8e 83       	std	Y+6, r24	; 0x06
    2260:	3f c0       	rjmp	.+126    	; 0x22e0 <LCD_gotoRowColumn+0x192>
	else if (__tmp > 65535)
    2262:	68 85       	ldd	r22, Y+8	; 0x08
    2264:	79 85       	ldd	r23, Y+9	; 0x09
    2266:	8a 85       	ldd	r24, Y+10	; 0x0a
    2268:	9b 85       	ldd	r25, Y+11	; 0x0b
    226a:	20 e0       	ldi	r18, 0x00	; 0
    226c:	3f ef       	ldi	r19, 0xFF	; 255
    226e:	4f e7       	ldi	r20, 0x7F	; 127
    2270:	57 e4       	ldi	r21, 0x47	; 71
    2272:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    2276:	18 16       	cp	r1, r24
    2278:	4c f5       	brge	.+82     	; 0x22cc <LCD_gotoRowColumn+0x17e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    227a:	6c 85       	ldd	r22, Y+12	; 0x0c
    227c:	7d 85       	ldd	r23, Y+13	; 0x0d
    227e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2280:	9f 85       	ldd	r25, Y+15	; 0x0f
    2282:	20 e0       	ldi	r18, 0x00	; 0
    2284:	30 e0       	ldi	r19, 0x00	; 0
    2286:	40 e2       	ldi	r20, 0x20	; 32
    2288:	51 e4       	ldi	r21, 0x41	; 65
    228a:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    228e:	dc 01       	movw	r26, r24
    2290:	cb 01       	movw	r24, r22
    2292:	bc 01       	movw	r22, r24
    2294:	cd 01       	movw	r24, r26
    2296:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    229a:	dc 01       	movw	r26, r24
    229c:	cb 01       	movw	r24, r22
    229e:	9f 83       	std	Y+7, r25	; 0x07
    22a0:	8e 83       	std	Y+6, r24	; 0x06
    22a2:	0f c0       	rjmp	.+30     	; 0x22c2 <LCD_gotoRowColumn+0x174>
    22a4:	88 ec       	ldi	r24, 0xC8	; 200
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	9d 83       	std	Y+5, r25	; 0x05
    22aa:	8c 83       	std	Y+4, r24	; 0x04
    22ac:	8c 81       	ldd	r24, Y+4	; 0x04
    22ae:	9d 81       	ldd	r25, Y+5	; 0x05
    22b0:	01 97       	sbiw	r24, 0x01	; 1
    22b2:	f1 f7       	brne	.-4      	; 0x22b0 <LCD_gotoRowColumn+0x162>
    22b4:	9d 83       	std	Y+5, r25	; 0x05
    22b6:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22b8:	8e 81       	ldd	r24, Y+6	; 0x06
    22ba:	9f 81       	ldd	r25, Y+7	; 0x07
    22bc:	01 97       	sbiw	r24, 0x01	; 1
    22be:	9f 83       	std	Y+7, r25	; 0x07
    22c0:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22c2:	8e 81       	ldd	r24, Y+6	; 0x06
    22c4:	9f 81       	ldd	r25, Y+7	; 0x07
    22c6:	00 97       	sbiw	r24, 0x00	; 0
    22c8:	69 f7       	brne	.-38     	; 0x22a4 <LCD_gotoRowColumn+0x156>
    22ca:	24 c0       	rjmp	.+72     	; 0x2314 <LCD_gotoRowColumn+0x1c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22cc:	68 85       	ldd	r22, Y+8	; 0x08
    22ce:	79 85       	ldd	r23, Y+9	; 0x09
    22d0:	8a 85       	ldd	r24, Y+10	; 0x0a
    22d2:	9b 85       	ldd	r25, Y+11	; 0x0b
    22d4:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    22d8:	dc 01       	movw	r26, r24
    22da:	cb 01       	movw	r24, r22
    22dc:	9f 83       	std	Y+7, r25	; 0x07
    22de:	8e 83       	std	Y+6, r24	; 0x06
    22e0:	8e 81       	ldd	r24, Y+6	; 0x06
    22e2:	9f 81       	ldd	r25, Y+7	; 0x07
    22e4:	9b 83       	std	Y+3, r25	; 0x03
    22e6:	8a 83       	std	Y+2, r24	; 0x02
    22e8:	8a 81       	ldd	r24, Y+2	; 0x02
    22ea:	9b 81       	ldd	r25, Y+3	; 0x03
    22ec:	01 97       	sbiw	r24, 0x01	; 1
    22ee:	f1 f7       	brne	.-4      	; 0x22ec <LCD_gotoRowColumn+0x19e>
    22f0:	9b 83       	std	Y+3, r25	; 0x03
    22f2:	8a 83       	std	Y+2, r24	; 0x02
    22f4:	0f c0       	rjmp	.+30     	; 0x2314 <LCD_gotoRowColumn+0x1c6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    22f6:	69 89       	ldd	r22, Y+17	; 0x11
    22f8:	7a 89       	ldd	r23, Y+18	; 0x12
    22fa:	8b 89       	ldd	r24, Y+19	; 0x13
    22fc:	9c 89       	ldd	r25, Y+20	; 0x14
    22fe:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    2302:	dc 01       	movw	r26, r24
    2304:	cb 01       	movw	r24, r22
    2306:	88 8b       	std	Y+16, r24	; 0x10
    2308:	88 89       	ldd	r24, Y+16	; 0x10
    230a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    230c:	89 81       	ldd	r24, Y+1	; 0x01
    230e:	8a 95       	dec	r24
    2310:	f1 f7       	brne	.-4      	; 0x230e <LCD_gotoRowColumn+0x1c0>
    2312:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);
	}
    2314:	6e 96       	adiw	r28, 0x1e	; 30
    2316:	0f b6       	in	r0, 0x3f	; 63
    2318:	f8 94       	cli
    231a:	de bf       	out	0x3e, r29	; 62
    231c:	0f be       	out	0x3f, r0	; 63
    231e:	cd bf       	out	0x3d, r28	; 61
    2320:	cf 91       	pop	r28
    2322:	df 91       	pop	r29
    2324:	08 95       	ret

00002326 <LCD_print_str>:
void LCD_print_str(char *text){
    2326:	df 93       	push	r29
    2328:	cf 93       	push	r28
    232a:	00 d0       	rcall	.+0      	; 0x232c <LCD_print_str+0x6>
    232c:	cd b7       	in	r28, 0x3d	; 61
    232e:	de b7       	in	r29, 0x3e	; 62
    2330:	9a 83       	std	Y+2, r25	; 0x02
    2332:	89 83       	std	Y+1, r24	; 0x01
    2334:	0a c0       	rjmp	.+20     	; 0x234a <LCD_print_str+0x24>
	while((*text) !='\0'){
		LCD_displayCharacter(*text);
    2336:	e9 81       	ldd	r30, Y+1	; 0x01
    2338:	fa 81       	ldd	r31, Y+2	; 0x02
    233a:	80 81       	ld	r24, Z
    233c:	0e 94 8a 0c 	call	0x1914	; 0x1914 <LCD_displayCharacter>
		text++;
    2340:	89 81       	ldd	r24, Y+1	; 0x01
    2342:	9a 81       	ldd	r25, Y+2	; 0x02
    2344:	01 96       	adiw	r24, 0x01	; 1
    2346:	9a 83       	std	Y+2, r25	; 0x02
    2348:	89 83       	std	Y+1, r24	; 0x01
	unsigned char fristcharadr[]={0x80,0xC0,0x90,0xD0};  // location of the rows in lcd (2lines and 4lines)
	LCD_sendCommand(fristcharadr[row-1]+(col-1));
	_delay_us(100);
	}
void LCD_print_str(char *text){
	while((*text) !='\0'){
    234a:	e9 81       	ldd	r30, Y+1	; 0x01
    234c:	fa 81       	ldd	r31, Y+2	; 0x02
    234e:	80 81       	ld	r24, Z
    2350:	88 23       	and	r24, r24
    2352:	89 f7       	brne	.-30     	; 0x2336 <LCD_print_str+0x10>
		LCD_displayCharacter(*text);
		text++;
	}

}
    2354:	0f 90       	pop	r0
    2356:	0f 90       	pop	r0
    2358:	cf 91       	pop	r28
    235a:	df 91       	pop	r29
    235c:	08 95       	ret

0000235e <LCD_intgerToString>:
void LCD_intgerToString(int data)
{
    235e:	df 93       	push	r29
    2360:	cf 93       	push	r28
    2362:	cd b7       	in	r28, 0x3d	; 61
    2364:	de b7       	in	r29, 0x3e	; 62
    2366:	62 97       	sbiw	r28, 0x12	; 18
    2368:	0f b6       	in	r0, 0x3f	; 63
    236a:	f8 94       	cli
    236c:	de bf       	out	0x3e, r29	; 62
    236e:	0f be       	out	0x3f, r0	; 63
    2370:	cd bf       	out	0x3d, r28	; 61
    2372:	9a 8b       	std	Y+18, r25	; 0x12
    2374:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    2376:	89 89       	ldd	r24, Y+17	; 0x11
    2378:	9a 89       	ldd	r25, Y+18	; 0x12
    237a:	9e 01       	movw	r18, r28
    237c:	2f 5f       	subi	r18, 0xFF	; 255
    237e:	3f 4f       	sbci	r19, 0xFF	; 255
    2380:	b9 01       	movw	r22, r18
    2382:	4a e0       	ldi	r20, 0x0A	; 10
    2384:	50 e0       	ldi	r21, 0x00	; 0
    2386:	0e 94 f6 13 	call	0x27ec	; 0x27ec <itoa>
   LCD_print_str(buff);
    238a:	ce 01       	movw	r24, r28
    238c:	01 96       	adiw	r24, 0x01	; 1
    238e:	0e 94 93 11 	call	0x2326	; 0x2326 <LCD_print_str>
}
    2392:	62 96       	adiw	r28, 0x12	; 18
    2394:	0f b6       	in	r0, 0x3f	; 63
    2396:	f8 94       	cli
    2398:	de bf       	out	0x3e, r29	; 62
    239a:	0f be       	out	0x3f, r0	; 63
    239c:	cd bf       	out	0x3d, r28	; 61
    239e:	cf 91       	pop	r28
    23a0:	df 91       	pop	r29
    23a2:	08 95       	ret

000023a4 <LCD_FLOATToString>:
void LCD_FLOATToString(double data,uint8 width,uint8 prec){
    23a4:	0f 93       	push	r16
    23a6:	1f 93       	push	r17
    23a8:	df 93       	push	r29
    23aa:	cf 93       	push	r28
    23ac:	cd b7       	in	r28, 0x3d	; 61
    23ae:	de b7       	in	r29, 0x3e	; 62
    23b0:	66 97       	sbiw	r28, 0x16	; 22
    23b2:	0f b6       	in	r0, 0x3f	; 63
    23b4:	f8 94       	cli
    23b6:	de bf       	out	0x3e, r29	; 62
    23b8:	0f be       	out	0x3f, r0	; 63
    23ba:	cd bf       	out	0x3d, r28	; 61
    23bc:	69 8b       	std	Y+17, r22	; 0x11
    23be:	7a 8b       	std	Y+18, r23	; 0x12
    23c0:	8b 8b       	std	Y+19, r24	; 0x13
    23c2:	9c 8b       	std	Y+20, r25	; 0x14
    23c4:	4d 8b       	std	Y+21, r20	; 0x15
    23c6:	2e 8b       	std	Y+22, r18	; 0x16
	char num[16];
	dtostrf(data,width,prec,num);
    23c8:	8d 89       	ldd	r24, Y+21	; 0x15
    23ca:	48 2f       	mov	r20, r24
    23cc:	50 e0       	ldi	r21, 0x00	; 0
    23ce:	8e 89       	ldd	r24, Y+22	; 0x16
    23d0:	28 2f       	mov	r18, r24
    23d2:	30 e0       	ldi	r19, 0x00	; 0
    23d4:	89 89       	ldd	r24, Y+17	; 0x11
    23d6:	9a 89       	ldd	r25, Y+18	; 0x12
    23d8:	ab 89       	ldd	r26, Y+19	; 0x13
    23da:	bc 89       	ldd	r27, Y+20	; 0x14
    23dc:	bc 01       	movw	r22, r24
    23de:	cd 01       	movw	r24, r26
    23e0:	fe 01       	movw	r30, r28
    23e2:	31 96       	adiw	r30, 0x01	; 1
    23e4:	8f 01       	movw	r16, r30
    23e6:	0e 94 d5 13 	call	0x27aa	; 0x27aa <dtostrf>
	LCD_print_str(num);
    23ea:	ce 01       	movw	r24, r28
    23ec:	01 96       	adiw	r24, 0x01	; 1
    23ee:	0e 94 93 11 	call	0x2326	; 0x2326 <LCD_print_str>
}
    23f2:	66 96       	adiw	r28, 0x16	; 22
    23f4:	0f b6       	in	r0, 0x3f	; 63
    23f6:	f8 94       	cli
    23f8:	de bf       	out	0x3e, r29	; 62
    23fa:	0f be       	out	0x3f, r0	; 63
    23fc:	cd bf       	out	0x3d, r28	; 61
    23fe:	cf 91       	pop	r28
    2400:	df 91       	pop	r29
    2402:	1f 91       	pop	r17
    2404:	0f 91       	pop	r16
    2406:	08 95       	ret

00002408 <LCD_clearScreen>:
void LCD_clearScreen(void){
    2408:	df 93       	push	r29
    240a:	cf 93       	push	r28
    240c:	cd b7       	in	r28, 0x3d	; 61
    240e:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display
    2410:	81 e0       	ldi	r24, 0x01	; 1
    2412:	0e 94 6d 08 	call	0x10da	; 0x10da <LCD_sendCommand>
}
    2416:	cf 91       	pop	r28
    2418:	df 91       	pop	r29
    241a:	08 95       	ret

0000241c <SPI_M_Init>:

#include "SPI_Master.h"
//function to SPI Initialization
//**************************************************************************************
void SPI_M_Init()					/* SPI Initialize function */
{
    241c:	df 93       	push	r29
    241e:	cf 93       	push	r28
    2420:	cd b7       	in	r28, 0x3d	; 61
    2422:	de b7       	in	r29, 0x3e	; 62
	DDRB = (1<<MOSI)|(1<<SCK)|(1<<SS);				/* Set MOSI and SCK output, all others input */												/* define reset pin as a output */
    2424:	e7 e3       	ldi	r30, 0x37	; 55
    2426:	f0 e0       	ldi	r31, 0x00	; 0
    2428:	80 eb       	ldi	r24, 0xB0	; 176
    242a:	80 83       	st	Z, r24
	DDRB &= ~(1<<MISO);												/* define MISO pin as a input */
    242c:	a7 e3       	ldi	r26, 0x37	; 55
    242e:	b0 e0       	ldi	r27, 0x00	; 0
    2430:	e7 e3       	ldi	r30, 0x37	; 55
    2432:	f0 e0       	ldi	r31, 0x00	; 0
    2434:	80 81       	ld	r24, Z
    2436:	8f 7b       	andi	r24, 0xBF	; 191
    2438:	8c 93       	st	X, r24
	PORTB |= (1<<SS);												/* Make SS pin as a output */
    243a:	a8 e3       	ldi	r26, 0x38	; 56
    243c:	b0 e0       	ldi	r27, 0x00	; 0
    243e:	e8 e3       	ldi	r30, 0x38	; 56
    2440:	f0 e0       	ldi	r31, 0x00	; 0
    2442:	80 81       	ld	r24, Z
    2444:	80 61       	ori	r24, 0x10	; 16
    2446:	8c 93       	st	X, r24
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);							/* Enable SPE, MSTR and SPR0 bit in SPI control register */
    2448:	ed e2       	ldi	r30, 0x2D	; 45
    244a:	f0 e0       	ldi	r31, 0x00	; 0
    244c:	81 e5       	ldi	r24, 0x51	; 81
    244e:	80 83       	st	Z, r24

}
    2450:	cf 91       	pop	r28
    2452:	df 91       	pop	r29
    2454:	08 95       	ret

00002456 <SPI_M_Write>:
//********************************************************************************************************
//SPI_Write function.
void SPI_M_Write(char data)		/* SPI write data function */
{
    2456:	df 93       	push	r29
    2458:	cf 93       	push	r28
    245a:	0f 92       	push	r0
    245c:	cd b7       	in	r28, 0x3d	; 61
    245e:	de b7       	in	r29, 0x3e	; 62
    2460:	89 83       	std	Y+1, r24	; 0x01
	
	SPDR = data;			/* Write data to SPI data register */
    2462:	ef e2       	ldi	r30, 0x2F	; 47
    2464:	f0 e0       	ldi	r31, 0x00	; 0
    2466:	89 81       	ldd	r24, Y+1	; 0x01
    2468:	80 83       	st	Z, r24
	while(!(SPSR & (1<<SPIF)));	/* Wait till transmission complete */
    246a:	ee e2       	ldi	r30, 0x2E	; 46
    246c:	f0 e0       	ldi	r31, 0x00	; 0
    246e:	80 81       	ld	r24, Z
    2470:	88 23       	and	r24, r24
    2472:	dc f7       	brge	.-10     	; 0x246a <SPI_M_Write+0x14>
}
    2474:	0f 90       	pop	r0
    2476:	cf 91       	pop	r28
    2478:	df 91       	pop	r29
    247a:	08 95       	ret

0000247c <SPI_M_Read>:
//********************************************************************************************************
//SPI_Read function
char SPI_M_Read()				/* SPI read data function */
{
    247c:	df 93       	push	r29
    247e:	cf 93       	push	r28
    2480:	cd b7       	in	r28, 0x3d	; 61
    2482:	de b7       	in	r29, 0x3e	; 62
	SPDR = 0xFF;
    2484:	ef e2       	ldi	r30, 0x2F	; 47
    2486:	f0 e0       	ldi	r31, 0x00	; 0
    2488:	8f ef       	ldi	r24, 0xFF	; 255
    248a:	80 83       	st	Z, r24
	while(!(SPSR & (1<<SPIF)));	/* Wait till reception complete */
    248c:	ee e2       	ldi	r30, 0x2E	; 46
    248e:	f0 e0       	ldi	r31, 0x00	; 0
    2490:	80 81       	ld	r24, Z
    2492:	88 23       	and	r24, r24
    2494:	dc f7       	brge	.-10     	; 0x248c <SPI_M_Read+0x10>
	return(SPDR);			/* Return received data */
    2496:	ef e2       	ldi	r30, 0x2F	; 47
    2498:	f0 e0       	ldi	r31, 0x00	; 0
    249a:	80 81       	ld	r24, Z
}
    249c:	cf 91       	pop	r28
    249e:	df 91       	pop	r29
    24a0:	08 95       	ret

000024a2 <SPI_SS_enable>:
//**********************************************************************************************************
void SPI_SS_enable()
{
    24a2:	df 93       	push	r29
    24a4:	cf 93       	push	r28
    24a6:	cd b7       	in	r28, 0x3d	; 61
    24a8:	de b7       	in	r29, 0x3e	; 62
	PORTB&=~(1<<PB4);
    24aa:	a8 e3       	ldi	r26, 0x38	; 56
    24ac:	b0 e0       	ldi	r27, 0x00	; 0
    24ae:	e8 e3       	ldi	r30, 0x38	; 56
    24b0:	f0 e0       	ldi	r31, 0x00	; 0
    24b2:	80 81       	ld	r24, Z
    24b4:	8f 7e       	andi	r24, 0xEF	; 239
    24b6:	8c 93       	st	X, r24
}
    24b8:	cf 91       	pop	r28
    24ba:	df 91       	pop	r29
    24bc:	08 95       	ret

000024be <SPI_SS_disable>:
//**********************************************************************************************************
void SPI_SS_disable(){
    24be:	df 93       	push	r29
    24c0:	cf 93       	push	r28
    24c2:	cd b7       	in	r28, 0x3d	; 61
    24c4:	de b7       	in	r29, 0x3e	; 62
	PORTB|=(1<<PB4);
    24c6:	a8 e3       	ldi	r26, 0x38	; 56
    24c8:	b0 e0       	ldi	r27, 0x00	; 0
    24ca:	e8 e3       	ldi	r30, 0x38	; 56
    24cc:	f0 e0       	ldi	r31, 0x00	; 0
    24ce:	80 81       	ld	r24, Z
    24d0:	80 61       	ori	r24, 0x10	; 16
    24d2:	8c 93       	st	X, r24
	}
    24d4:	cf 91       	pop	r28
    24d6:	df 91       	pop	r29
    24d8:	08 95       	ret

000024da <main>:





int main(void){
    24da:	df 93       	push	r29
    24dc:	cf 93       	push	r28
    24de:	cd b7       	in	r28, 0x3d	; 61
    24e0:	de b7       	in	r29, 0x3e	; 62
    24e2:	a2 97       	sbiw	r28, 0x22	; 34
    24e4:	0f b6       	in	r0, 0x3f	; 63
    24e6:	f8 94       	cli
    24e8:	de bf       	out	0x3e, r29	; 62
    24ea:	0f be       	out	0x3f, r0	; 63
    24ec:	cd bf       	out	0x3d, r28	; 61
    uint8 temp_l,temp_h;
    uint16 temp,tempe;
    SPI_M_Init();
    24ee:	0e 94 0e 12 	call	0x241c	; 0x241c <SPI_M_Init>
	LCD_init();
    24f2:	0e 94 c4 06 	call	0xd88	; 0xd88 <LCD_init>
    while(1){
    LCD_gotoRowColumn(1,1);
    24f6:	81 e0       	ldi	r24, 0x01	; 1
    24f8:	61 e0       	ldi	r22, 0x01	; 1
    24fa:	0e 94 a7 10 	call	0x214e	; 0x214e <LCD_gotoRowColumn>
    LCD_print_str("tempature=");
    24fe:	80 e6       	ldi	r24, 0x60	; 96
    2500:	90 e0       	ldi	r25, 0x00	; 0
    2502:	0e 94 93 11 	call	0x2326	; 0x2326 <LCD_print_str>
    SPI_SS_enable();
    2506:	0e 94 51 12 	call	0x24a2	; 0x24a2 <SPI_SS_enable>
    250a:	80 e0       	ldi	r24, 0x00	; 0
    250c:	90 e0       	ldi	r25, 0x00	; 0
    250e:	a0 e8       	ldi	r26, 0x80	; 128
    2510:	bf e3       	ldi	r27, 0x3F	; 63
    2512:	89 8f       	std	Y+25, r24	; 0x19
    2514:	9a 8f       	std	Y+26, r25	; 0x1a
    2516:	ab 8f       	std	Y+27, r26	; 0x1b
    2518:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    251a:	69 8d       	ldd	r22, Y+25	; 0x19
    251c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    251e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2520:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2522:	20 e0       	ldi	r18, 0x00	; 0
    2524:	30 e0       	ldi	r19, 0x00	; 0
    2526:	4a ef       	ldi	r20, 0xFA	; 250
    2528:	54 e4       	ldi	r21, 0x44	; 68
    252a:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    252e:	dc 01       	movw	r26, r24
    2530:	cb 01       	movw	r24, r22
    2532:	8d 8b       	std	Y+21, r24	; 0x15
    2534:	9e 8b       	std	Y+22, r25	; 0x16
    2536:	af 8b       	std	Y+23, r26	; 0x17
    2538:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    253a:	6d 89       	ldd	r22, Y+21	; 0x15
    253c:	7e 89       	ldd	r23, Y+22	; 0x16
    253e:	8f 89       	ldd	r24, Y+23	; 0x17
    2540:	98 8d       	ldd	r25, Y+24	; 0x18
    2542:	20 e0       	ldi	r18, 0x00	; 0
    2544:	30 e0       	ldi	r19, 0x00	; 0
    2546:	40 e8       	ldi	r20, 0x80	; 128
    2548:	5f e3       	ldi	r21, 0x3F	; 63
    254a:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    254e:	88 23       	and	r24, r24
    2550:	2c f4       	brge	.+10     	; 0x255c <main+0x82>
		__ticks = 1;
    2552:	81 e0       	ldi	r24, 0x01	; 1
    2554:	90 e0       	ldi	r25, 0x00	; 0
    2556:	9c 8b       	std	Y+20, r25	; 0x14
    2558:	8b 8b       	std	Y+19, r24	; 0x13
    255a:	3f c0       	rjmp	.+126    	; 0x25da <main+0x100>
	else if (__tmp > 65535)
    255c:	6d 89       	ldd	r22, Y+21	; 0x15
    255e:	7e 89       	ldd	r23, Y+22	; 0x16
    2560:	8f 89       	ldd	r24, Y+23	; 0x17
    2562:	98 8d       	ldd	r25, Y+24	; 0x18
    2564:	20 e0       	ldi	r18, 0x00	; 0
    2566:	3f ef       	ldi	r19, 0xFF	; 255
    2568:	4f e7       	ldi	r20, 0x7F	; 127
    256a:	57 e4       	ldi	r21, 0x47	; 71
    256c:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    2570:	18 16       	cp	r1, r24
    2572:	4c f5       	brge	.+82     	; 0x25c6 <main+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2574:	69 8d       	ldd	r22, Y+25	; 0x19
    2576:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2578:	8b 8d       	ldd	r24, Y+27	; 0x1b
    257a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    257c:	20 e0       	ldi	r18, 0x00	; 0
    257e:	30 e0       	ldi	r19, 0x00	; 0
    2580:	40 e2       	ldi	r20, 0x20	; 32
    2582:	51 e4       	ldi	r21, 0x41	; 65
    2584:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    2588:	dc 01       	movw	r26, r24
    258a:	cb 01       	movw	r24, r22
    258c:	bc 01       	movw	r22, r24
    258e:	cd 01       	movw	r24, r26
    2590:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    2594:	dc 01       	movw	r26, r24
    2596:	cb 01       	movw	r24, r22
    2598:	9c 8b       	std	Y+20, r25	; 0x14
    259a:	8b 8b       	std	Y+19, r24	; 0x13
    259c:	0f c0       	rjmp	.+30     	; 0x25bc <main+0xe2>
    259e:	88 ec       	ldi	r24, 0xC8	; 200
    25a0:	90 e0       	ldi	r25, 0x00	; 0
    25a2:	9a 8b       	std	Y+18, r25	; 0x12
    25a4:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    25a6:	89 89       	ldd	r24, Y+17	; 0x11
    25a8:	9a 89       	ldd	r25, Y+18	; 0x12
    25aa:	01 97       	sbiw	r24, 0x01	; 1
    25ac:	f1 f7       	brne	.-4      	; 0x25aa <main+0xd0>
    25ae:	9a 8b       	std	Y+18, r25	; 0x12
    25b0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25b2:	8b 89       	ldd	r24, Y+19	; 0x13
    25b4:	9c 89       	ldd	r25, Y+20	; 0x14
    25b6:	01 97       	sbiw	r24, 0x01	; 1
    25b8:	9c 8b       	std	Y+20, r25	; 0x14
    25ba:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25bc:	8b 89       	ldd	r24, Y+19	; 0x13
    25be:	9c 89       	ldd	r25, Y+20	; 0x14
    25c0:	00 97       	sbiw	r24, 0x00	; 0
    25c2:	69 f7       	brne	.-38     	; 0x259e <main+0xc4>
    25c4:	14 c0       	rjmp	.+40     	; 0x25ee <main+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25c6:	6d 89       	ldd	r22, Y+21	; 0x15
    25c8:	7e 89       	ldd	r23, Y+22	; 0x16
    25ca:	8f 89       	ldd	r24, Y+23	; 0x17
    25cc:	98 8d       	ldd	r25, Y+24	; 0x18
    25ce:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    25d2:	dc 01       	movw	r26, r24
    25d4:	cb 01       	movw	r24, r22
    25d6:	9c 8b       	std	Y+20, r25	; 0x14
    25d8:	8b 8b       	std	Y+19, r24	; 0x13
    25da:	8b 89       	ldd	r24, Y+19	; 0x13
    25dc:	9c 89       	ldd	r25, Y+20	; 0x14
    25de:	98 8b       	std	Y+16, r25	; 0x10
    25e0:	8f 87       	std	Y+15, r24	; 0x0f
    25e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    25e4:	98 89       	ldd	r25, Y+16	; 0x10
    25e6:	01 97       	sbiw	r24, 0x01	; 1
    25e8:	f1 f7       	brne	.-4      	; 0x25e6 <main+0x10c>
    25ea:	98 8b       	std	Y+16, r25	; 0x10
    25ec:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(1);
    temp_h=SPI_M_Read();
    25ee:	0e 94 3e 12 	call	0x247c	; 0x247c <SPI_M_Read>
    25f2:	89 a3       	std	Y+33, r24	; 0x21
    temp_l=SPI_M_Read();
    25f4:	0e 94 3e 12 	call	0x247c	; 0x247c <SPI_M_Read>
    25f8:	8a a3       	std	Y+34, r24	; 0x22
    SPI_SS_disable();
    25fa:	0e 94 5f 12 	call	0x24be	; 0x24be <SPI_SS_disable>
    temp=(temp_h<<8)|temp_l;
    25fe:	89 a1       	ldd	r24, Y+33	; 0x21
    2600:	88 2f       	mov	r24, r24
    2602:	90 e0       	ldi	r25, 0x00	; 0
    2604:	38 2f       	mov	r19, r24
    2606:	22 27       	eor	r18, r18
    2608:	8a a1       	ldd	r24, Y+34	; 0x22
    260a:	88 2f       	mov	r24, r24
    260c:	90 e0       	ldi	r25, 0x00	; 0
    260e:	82 2b       	or	r24, r18
    2610:	93 2b       	or	r25, r19
    2612:	98 a3       	std	Y+32, r25	; 0x20
    2614:	8f 8f       	std	Y+31, r24	; 0x1f
    temp=temp&0x7fff;
    2616:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2618:	98 a1       	ldd	r25, Y+32	; 0x20
    261a:	9f 77       	andi	r25, 0x7F	; 127
    261c:	98 a3       	std	Y+32, r25	; 0x20
    261e:	8f 8f       	std	Y+31, r24	; 0x1f
    temp>>=2;
    2620:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2622:	98 a1       	ldd	r25, Y+32	; 0x20
    2624:	96 95       	lsr	r25
    2626:	87 95       	ror	r24
    2628:	96 95       	lsr	r25
    262a:	87 95       	ror	r24
    262c:	98 a3       	std	Y+32, r25	; 0x20
    262e:	8f 8f       	std	Y+31, r24	; 0x1f
    tempe=(temp/4)-24;
    2630:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2632:	98 a1       	ldd	r25, Y+32	; 0x20
    2634:	96 95       	lsr	r25
    2636:	87 95       	ror	r24
    2638:	96 95       	lsr	r25
    263a:	87 95       	ror	r24
    263c:	48 97       	sbiw	r24, 0x18	; 24
    263e:	9e 8f       	std	Y+30, r25	; 0x1e
    2640:	8d 8f       	std	Y+29, r24	; 0x1d
    LCD_gotoRowColumn(1,12);
    2642:	81 e0       	ldi	r24, 0x01	; 1
    2644:	6c e0       	ldi	r22, 0x0C	; 12
    2646:	0e 94 a7 10 	call	0x214e	; 0x214e <LCD_gotoRowColumn>
    LCD_intgerToString(tempe);
    264a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    264c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    264e:	0e 94 af 11 	call	0x235e	; 0x235e <LCD_intgerToString>
    2652:	80 e0       	ldi	r24, 0x00	; 0
    2654:	90 e0       	ldi	r25, 0x00	; 0
    2656:	aa ef       	ldi	r26, 0xFA	; 250
    2658:	b3 e4       	ldi	r27, 0x43	; 67
    265a:	8b 87       	std	Y+11, r24	; 0x0b
    265c:	9c 87       	std	Y+12, r25	; 0x0c
    265e:	ad 87       	std	Y+13, r26	; 0x0d
    2660:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2662:	6b 85       	ldd	r22, Y+11	; 0x0b
    2664:	7c 85       	ldd	r23, Y+12	; 0x0c
    2666:	8d 85       	ldd	r24, Y+13	; 0x0d
    2668:	9e 85       	ldd	r25, Y+14	; 0x0e
    266a:	20 e0       	ldi	r18, 0x00	; 0
    266c:	30 e0       	ldi	r19, 0x00	; 0
    266e:	4a ef       	ldi	r20, 0xFA	; 250
    2670:	54 e4       	ldi	r21, 0x44	; 68
    2672:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    2676:	dc 01       	movw	r26, r24
    2678:	cb 01       	movw	r24, r22
    267a:	8f 83       	std	Y+7, r24	; 0x07
    267c:	98 87       	std	Y+8, r25	; 0x08
    267e:	a9 87       	std	Y+9, r26	; 0x09
    2680:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2682:	6f 81       	ldd	r22, Y+7	; 0x07
    2684:	78 85       	ldd	r23, Y+8	; 0x08
    2686:	89 85       	ldd	r24, Y+9	; 0x09
    2688:	9a 85       	ldd	r25, Y+10	; 0x0a
    268a:	20 e0       	ldi	r18, 0x00	; 0
    268c:	30 e0       	ldi	r19, 0x00	; 0
    268e:	40 e8       	ldi	r20, 0x80	; 128
    2690:	5f e3       	ldi	r21, 0x3F	; 63
    2692:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    2696:	88 23       	and	r24, r24
    2698:	2c f4       	brge	.+10     	; 0x26a4 <main+0x1ca>
		__ticks = 1;
    269a:	81 e0       	ldi	r24, 0x01	; 1
    269c:	90 e0       	ldi	r25, 0x00	; 0
    269e:	9e 83       	std	Y+6, r25	; 0x06
    26a0:	8d 83       	std	Y+5, r24	; 0x05
    26a2:	3f c0       	rjmp	.+126    	; 0x2722 <main+0x248>
	else if (__tmp > 65535)
    26a4:	6f 81       	ldd	r22, Y+7	; 0x07
    26a6:	78 85       	ldd	r23, Y+8	; 0x08
    26a8:	89 85       	ldd	r24, Y+9	; 0x09
    26aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    26ac:	20 e0       	ldi	r18, 0x00	; 0
    26ae:	3f ef       	ldi	r19, 0xFF	; 255
    26b0:	4f e7       	ldi	r20, 0x7F	; 127
    26b2:	57 e4       	ldi	r21, 0x47	; 71
    26b4:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    26b8:	18 16       	cp	r1, r24
    26ba:	4c f5       	brge	.+82     	; 0x270e <main+0x234>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    26be:	7c 85       	ldd	r23, Y+12	; 0x0c
    26c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    26c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    26c4:	20 e0       	ldi	r18, 0x00	; 0
    26c6:	30 e0       	ldi	r19, 0x00	; 0
    26c8:	40 e2       	ldi	r20, 0x20	; 32
    26ca:	51 e4       	ldi	r21, 0x41	; 65
    26cc:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    26d0:	dc 01       	movw	r26, r24
    26d2:	cb 01       	movw	r24, r22
    26d4:	bc 01       	movw	r22, r24
    26d6:	cd 01       	movw	r24, r26
    26d8:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    26dc:	dc 01       	movw	r26, r24
    26de:	cb 01       	movw	r24, r22
    26e0:	9e 83       	std	Y+6, r25	; 0x06
    26e2:	8d 83       	std	Y+5, r24	; 0x05
    26e4:	0f c0       	rjmp	.+30     	; 0x2704 <main+0x22a>
    26e6:	88 ec       	ldi	r24, 0xC8	; 200
    26e8:	90 e0       	ldi	r25, 0x00	; 0
    26ea:	9c 83       	std	Y+4, r25	; 0x04
    26ec:	8b 83       	std	Y+3, r24	; 0x03
    26ee:	8b 81       	ldd	r24, Y+3	; 0x03
    26f0:	9c 81       	ldd	r25, Y+4	; 0x04
    26f2:	01 97       	sbiw	r24, 0x01	; 1
    26f4:	f1 f7       	brne	.-4      	; 0x26f2 <main+0x218>
    26f6:	9c 83       	std	Y+4, r25	; 0x04
    26f8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26fa:	8d 81       	ldd	r24, Y+5	; 0x05
    26fc:	9e 81       	ldd	r25, Y+6	; 0x06
    26fe:	01 97       	sbiw	r24, 0x01	; 1
    2700:	9e 83       	std	Y+6, r25	; 0x06
    2702:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2704:	8d 81       	ldd	r24, Y+5	; 0x05
    2706:	9e 81       	ldd	r25, Y+6	; 0x06
    2708:	00 97       	sbiw	r24, 0x00	; 0
    270a:	69 f7       	brne	.-38     	; 0x26e6 <main+0x20c>
    270c:	14 c0       	rjmp	.+40     	; 0x2736 <main+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    270e:	6f 81       	ldd	r22, Y+7	; 0x07
    2710:	78 85       	ldd	r23, Y+8	; 0x08
    2712:	89 85       	ldd	r24, Y+9	; 0x09
    2714:	9a 85       	ldd	r25, Y+10	; 0x0a
    2716:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    271a:	dc 01       	movw	r26, r24
    271c:	cb 01       	movw	r24, r22
    271e:	9e 83       	std	Y+6, r25	; 0x06
    2720:	8d 83       	std	Y+5, r24	; 0x05
    2722:	8d 81       	ldd	r24, Y+5	; 0x05
    2724:	9e 81       	ldd	r25, Y+6	; 0x06
    2726:	9a 83       	std	Y+2, r25	; 0x02
    2728:	89 83       	std	Y+1, r24	; 0x01
    272a:	89 81       	ldd	r24, Y+1	; 0x01
    272c:	9a 81       	ldd	r25, Y+2	; 0x02
    272e:	01 97       	sbiw	r24, 0x01	; 1
    2730:	f1 f7       	brne	.-4      	; 0x272e <main+0x254>
    2732:	9a 83       	std	Y+2, r25	; 0x02
    2734:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(500);
    LCD_clearScreen();
    2736:	0e 94 04 12 	call	0x2408	; 0x2408 <LCD_clearScreen>
    273a:	dd ce       	rjmp	.-582    	; 0x24f6 <main+0x1c>

0000273c <__prologue_saves__>:
    273c:	2f 92       	push	r2
    273e:	3f 92       	push	r3
    2740:	4f 92       	push	r4
    2742:	5f 92       	push	r5
    2744:	6f 92       	push	r6
    2746:	7f 92       	push	r7
    2748:	8f 92       	push	r8
    274a:	9f 92       	push	r9
    274c:	af 92       	push	r10
    274e:	bf 92       	push	r11
    2750:	cf 92       	push	r12
    2752:	df 92       	push	r13
    2754:	ef 92       	push	r14
    2756:	ff 92       	push	r15
    2758:	0f 93       	push	r16
    275a:	1f 93       	push	r17
    275c:	cf 93       	push	r28
    275e:	df 93       	push	r29
    2760:	cd b7       	in	r28, 0x3d	; 61
    2762:	de b7       	in	r29, 0x3e	; 62
    2764:	ca 1b       	sub	r28, r26
    2766:	db 0b       	sbc	r29, r27
    2768:	0f b6       	in	r0, 0x3f	; 63
    276a:	f8 94       	cli
    276c:	de bf       	out	0x3e, r29	; 62
    276e:	0f be       	out	0x3f, r0	; 63
    2770:	cd bf       	out	0x3d, r28	; 61
    2772:	09 94       	ijmp

00002774 <__epilogue_restores__>:
    2774:	2a 88       	ldd	r2, Y+18	; 0x12
    2776:	39 88       	ldd	r3, Y+17	; 0x11
    2778:	48 88       	ldd	r4, Y+16	; 0x10
    277a:	5f 84       	ldd	r5, Y+15	; 0x0f
    277c:	6e 84       	ldd	r6, Y+14	; 0x0e
    277e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2780:	8c 84       	ldd	r8, Y+12	; 0x0c
    2782:	9b 84       	ldd	r9, Y+11	; 0x0b
    2784:	aa 84       	ldd	r10, Y+10	; 0x0a
    2786:	b9 84       	ldd	r11, Y+9	; 0x09
    2788:	c8 84       	ldd	r12, Y+8	; 0x08
    278a:	df 80       	ldd	r13, Y+7	; 0x07
    278c:	ee 80       	ldd	r14, Y+6	; 0x06
    278e:	fd 80       	ldd	r15, Y+5	; 0x05
    2790:	0c 81       	ldd	r16, Y+4	; 0x04
    2792:	1b 81       	ldd	r17, Y+3	; 0x03
    2794:	aa 81       	ldd	r26, Y+2	; 0x02
    2796:	b9 81       	ldd	r27, Y+1	; 0x01
    2798:	ce 0f       	add	r28, r30
    279a:	d1 1d       	adc	r29, r1
    279c:	0f b6       	in	r0, 0x3f	; 63
    279e:	f8 94       	cli
    27a0:	de bf       	out	0x3e, r29	; 62
    27a2:	0f be       	out	0x3f, r0	; 63
    27a4:	cd bf       	out	0x3d, r28	; 61
    27a6:	ed 01       	movw	r28, r26
    27a8:	08 95       	ret

000027aa <dtostrf>:
    27aa:	ef 92       	push	r14
    27ac:	ff 92       	push	r15
    27ae:	0f 93       	push	r16
    27b0:	1f 93       	push	r17
    27b2:	f2 2f       	mov	r31, r18
    27b4:	f0 2e       	mov	r15, r16
    27b6:	47 fd       	sbrc	r20, 7
    27b8:	02 c0       	rjmp	.+4      	; 0x27be <dtostrf+0x14>
    27ba:	e4 e0       	ldi	r30, 0x04	; 4
    27bc:	01 c0       	rjmp	.+2      	; 0x27c0 <dtostrf+0x16>
    27be:	e4 e1       	ldi	r30, 0x14	; 20
    27c0:	24 2f       	mov	r18, r20
    27c2:	33 27       	eor	r19, r19
    27c4:	27 fd       	sbrc	r18, 7
    27c6:	30 95       	com	r19
    27c8:	37 ff       	sbrs	r19, 7
    27ca:	03 c0       	rjmp	.+6      	; 0x27d2 <dtostrf+0x28>
    27cc:	30 95       	com	r19
    27ce:	21 95       	neg	r18
    27d0:	3f 4f       	sbci	r19, 0xFF	; 255
    27d2:	4f 2d       	mov	r20, r15
    27d4:	51 2f       	mov	r21, r17
    27d6:	0f 2f       	mov	r16, r31
    27d8:	ee 2e       	mov	r14, r30
    27da:	0e 94 17 14 	call	0x282e	; 0x282e <dtoa_prf>
    27de:	8f 2d       	mov	r24, r15
    27e0:	91 2f       	mov	r25, r17
    27e2:	1f 91       	pop	r17
    27e4:	0f 91       	pop	r16
    27e6:	ff 90       	pop	r15
    27e8:	ef 90       	pop	r14
    27ea:	08 95       	ret

000027ec <itoa>:
    27ec:	fb 01       	movw	r30, r22
    27ee:	9f 01       	movw	r18, r30
    27f0:	e8 94       	clt
    27f2:	42 30       	cpi	r20, 0x02	; 2
    27f4:	c4 f0       	brlt	.+48     	; 0x2826 <itoa+0x3a>
    27f6:	45 32       	cpi	r20, 0x25	; 37
    27f8:	b4 f4       	brge	.+44     	; 0x2826 <itoa+0x3a>
    27fa:	4a 30       	cpi	r20, 0x0A	; 10
    27fc:	29 f4       	brne	.+10     	; 0x2808 <itoa+0x1c>
    27fe:	97 fb       	bst	r25, 7
    2800:	1e f4       	brtc	.+6      	; 0x2808 <itoa+0x1c>
    2802:	90 95       	com	r25
    2804:	81 95       	neg	r24
    2806:	9f 4f       	sbci	r25, 0xFF	; 255
    2808:	64 2f       	mov	r22, r20
    280a:	77 27       	eor	r23, r23
    280c:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <__udivmodhi4>
    2810:	80 5d       	subi	r24, 0xD0	; 208
    2812:	8a 33       	cpi	r24, 0x3A	; 58
    2814:	0c f0       	brlt	.+2      	; 0x2818 <itoa+0x2c>
    2816:	89 5d       	subi	r24, 0xD9	; 217
    2818:	81 93       	st	Z+, r24
    281a:	cb 01       	movw	r24, r22
    281c:	00 97       	sbiw	r24, 0x00	; 0
    281e:	a1 f7       	brne	.-24     	; 0x2808 <itoa+0x1c>
    2820:	16 f4       	brtc	.+4      	; 0x2826 <itoa+0x3a>
    2822:	5d e2       	ldi	r21, 0x2D	; 45
    2824:	51 93       	st	Z+, r21
    2826:	10 82       	st	Z, r1
    2828:	c9 01       	movw	r24, r18
    282a:	0c 94 51 16 	jmp	0x2ca2	; 0x2ca2 <strrev>

0000282e <dtoa_prf>:
    282e:	a9 e0       	ldi	r26, 0x09	; 9
    2830:	b0 e0       	ldi	r27, 0x00	; 0
    2832:	ed e1       	ldi	r30, 0x1D	; 29
    2834:	f4 e1       	ldi	r31, 0x14	; 20
    2836:	0c 94 a2 13 	jmp	0x2744	; 0x2744 <__prologue_saves__+0x8>
    283a:	6a 01       	movw	r12, r20
    283c:	12 2f       	mov	r17, r18
    283e:	a0 2e       	mov	r10, r16
    2840:	be 2c       	mov	r11, r14
    2842:	2b e3       	ldi	r18, 0x3B	; 59
    2844:	20 17       	cp	r18, r16
    2846:	18 f4       	brcc	.+6      	; 0x284e <dtoa_prf+0x20>
    2848:	2c e3       	ldi	r18, 0x3C	; 60
    284a:	92 2e       	mov	r9, r18
    284c:	02 c0       	rjmp	.+4      	; 0x2852 <dtoa_prf+0x24>
    284e:	90 2e       	mov	r9, r16
    2850:	93 94       	inc	r9
    2852:	ae 01       	movw	r20, r28
    2854:	4f 5f       	subi	r20, 0xFF	; 255
    2856:	5f 4f       	sbci	r21, 0xFF	; 255
    2858:	27 e0       	ldi	r18, 0x07	; 7
    285a:	09 2d       	mov	r16, r9
    285c:	0e 94 79 15 	call	0x2af2	; 0x2af2 <__ftoa_engine>
    2860:	bc 01       	movw	r22, r24
    2862:	89 81       	ldd	r24, Y+1	; 0x01
    2864:	e8 2e       	mov	r14, r24
    2866:	ff 24       	eor	r15, r15
    2868:	c7 01       	movw	r24, r14
    286a:	89 70       	andi	r24, 0x09	; 9
    286c:	90 70       	andi	r25, 0x00	; 0
    286e:	01 97       	sbiw	r24, 0x01	; 1
    2870:	11 f4       	brne	.+4      	; 0x2876 <dtoa_prf+0x48>
    2872:	ad e2       	ldi	r26, 0x2D	; 45
    2874:	09 c0       	rjmp	.+18     	; 0x2888 <dtoa_prf+0x5a>
    2876:	b1 fe       	sbrs	r11, 1
    2878:	02 c0       	rjmp	.+4      	; 0x287e <dtoa_prf+0x50>
    287a:	ab e2       	ldi	r26, 0x2B	; 43
    287c:	05 c0       	rjmp	.+10     	; 0x2888 <dtoa_prf+0x5a>
    287e:	b0 fc       	sbrc	r11, 0
    2880:	02 c0       	rjmp	.+4      	; 0x2886 <dtoa_prf+0x58>
    2882:	a0 e0       	ldi	r26, 0x00	; 0
    2884:	01 c0       	rjmp	.+2      	; 0x2888 <dtoa_prf+0x5a>
    2886:	a0 e2       	ldi	r26, 0x20	; 32
    2888:	e3 fe       	sbrs	r14, 3
    288a:	3b c0       	rjmp	.+118    	; 0x2902 <dtoa_prf+0xd4>
    288c:	aa 23       	and	r26, r26
    288e:	11 f4       	brne	.+4      	; 0x2894 <dtoa_prf+0x66>
    2890:	23 e0       	ldi	r18, 0x03	; 3
    2892:	01 c0       	rjmp	.+2      	; 0x2896 <dtoa_prf+0x68>
    2894:	24 e0       	ldi	r18, 0x04	; 4
    2896:	21 17       	cp	r18, r17
    2898:	10 f0       	brcs	.+4      	; 0x289e <dtoa_prf+0x70>
    289a:	20 e0       	ldi	r18, 0x00	; 0
    289c:	02 c0       	rjmp	.+4      	; 0x28a2 <dtoa_prf+0x74>
    289e:	12 1b       	sub	r17, r18
    28a0:	21 2f       	mov	r18, r17
    28a2:	eb 2c       	mov	r14, r11
    28a4:	b4 fe       	sbrs	r11, 4
    28a6:	02 c0       	rjmp	.+4      	; 0x28ac <dtoa_prf+0x7e>
    28a8:	32 2f       	mov	r19, r18
    28aa:	0a c0       	rjmp	.+20     	; 0x28c0 <dtoa_prf+0x92>
    28ac:	f6 01       	movw	r30, r12
    28ae:	32 2f       	mov	r19, r18
    28b0:	80 e2       	ldi	r24, 0x20	; 32
    28b2:	02 c0       	rjmp	.+4      	; 0x28b8 <dtoa_prf+0x8a>
    28b4:	81 93       	st	Z+, r24
    28b6:	31 50       	subi	r19, 0x01	; 1
    28b8:	33 23       	and	r19, r19
    28ba:	e1 f7       	brne	.-8      	; 0x28b4 <dtoa_prf+0x86>
    28bc:	c2 0e       	add	r12, r18
    28be:	d1 1c       	adc	r13, r1
    28c0:	aa 23       	and	r26, r26
    28c2:	19 f0       	breq	.+6      	; 0x28ca <dtoa_prf+0x9c>
    28c4:	f6 01       	movw	r30, r12
    28c6:	a1 93       	st	Z+, r26
    28c8:	6f 01       	movw	r12, r30
    28ca:	f6 01       	movw	r30, r12
    28cc:	31 96       	adiw	r30, 0x01	; 1
    28ce:	e2 fe       	sbrs	r14, 2
    28d0:	05 c0       	rjmp	.+10     	; 0x28dc <dtoa_prf+0xae>
    28d2:	9e e4       	ldi	r25, 0x4E	; 78
    28d4:	d6 01       	movw	r26, r12
    28d6:	9c 93       	st	X, r25
    28d8:	81 e4       	ldi	r24, 0x41	; 65
    28da:	04 c0       	rjmp	.+8      	; 0x28e4 <dtoa_prf+0xb6>
    28dc:	9e e6       	ldi	r25, 0x6E	; 110
    28de:	d6 01       	movw	r26, r12
    28e0:	9c 93       	st	X, r25
    28e2:	81 e6       	ldi	r24, 0x61	; 97
    28e4:	11 96       	adiw	r26, 0x01	; 1
    28e6:	8c 93       	st	X, r24
    28e8:	91 83       	std	Z+1, r25	; 0x01
    28ea:	32 96       	adiw	r30, 0x02	; 2
    28ec:	df 01       	movw	r26, r30
    28ee:	83 2f       	mov	r24, r19
    28f0:	90 e2       	ldi	r25, 0x20	; 32
    28f2:	02 c0       	rjmp	.+4      	; 0x28f8 <dtoa_prf+0xca>
    28f4:	9d 93       	st	X+, r25
    28f6:	81 50       	subi	r24, 0x01	; 1
    28f8:	88 23       	and	r24, r24
    28fa:	e1 f7       	brne	.-8      	; 0x28f4 <dtoa_prf+0xc6>
    28fc:	e3 0f       	add	r30, r19
    28fe:	f1 1d       	adc	r31, r1
    2900:	40 c0       	rjmp	.+128    	; 0x2982 <dtoa_prf+0x154>
    2902:	e2 fe       	sbrs	r14, 2
    2904:	42 c0       	rjmp	.+132    	; 0x298a <dtoa_prf+0x15c>
    2906:	aa 23       	and	r26, r26
    2908:	11 f4       	brne	.+4      	; 0x290e <dtoa_prf+0xe0>
    290a:	23 e0       	ldi	r18, 0x03	; 3
    290c:	01 c0       	rjmp	.+2      	; 0x2910 <dtoa_prf+0xe2>
    290e:	24 e0       	ldi	r18, 0x04	; 4
    2910:	21 17       	cp	r18, r17
    2912:	10 f0       	brcs	.+4      	; 0x2918 <dtoa_prf+0xea>
    2914:	20 e0       	ldi	r18, 0x00	; 0
    2916:	02 c0       	rjmp	.+4      	; 0x291c <dtoa_prf+0xee>
    2918:	12 1b       	sub	r17, r18
    291a:	21 2f       	mov	r18, r17
    291c:	eb 2c       	mov	r14, r11
    291e:	b4 fe       	sbrs	r11, 4
    2920:	02 c0       	rjmp	.+4      	; 0x2926 <dtoa_prf+0xf8>
    2922:	92 2f       	mov	r25, r18
    2924:	0a c0       	rjmp	.+20     	; 0x293a <dtoa_prf+0x10c>
    2926:	f6 01       	movw	r30, r12
    2928:	92 2f       	mov	r25, r18
    292a:	80 e2       	ldi	r24, 0x20	; 32
    292c:	02 c0       	rjmp	.+4      	; 0x2932 <dtoa_prf+0x104>
    292e:	81 93       	st	Z+, r24
    2930:	91 50       	subi	r25, 0x01	; 1
    2932:	99 23       	and	r25, r25
    2934:	e1 f7       	brne	.-8      	; 0x292e <dtoa_prf+0x100>
    2936:	c2 0e       	add	r12, r18
    2938:	d1 1c       	adc	r13, r1
    293a:	aa 23       	and	r26, r26
    293c:	19 f0       	breq	.+6      	; 0x2944 <dtoa_prf+0x116>
    293e:	f6 01       	movw	r30, r12
    2940:	a1 93       	st	Z+, r26
    2942:	6f 01       	movw	r12, r30
    2944:	f6 01       	movw	r30, r12
    2946:	31 96       	adiw	r30, 0x01	; 1
    2948:	e2 fe       	sbrs	r14, 2
    294a:	08 c0       	rjmp	.+16     	; 0x295c <dtoa_prf+0x12e>
    294c:	89 e4       	ldi	r24, 0x49	; 73
    294e:	d6 01       	movw	r26, r12
    2950:	8c 93       	st	X, r24
    2952:	8e e4       	ldi	r24, 0x4E	; 78
    2954:	11 96       	adiw	r26, 0x01	; 1
    2956:	8c 93       	st	X, r24
    2958:	86 e4       	ldi	r24, 0x46	; 70
    295a:	07 c0       	rjmp	.+14     	; 0x296a <dtoa_prf+0x13c>
    295c:	89 e6       	ldi	r24, 0x69	; 105
    295e:	d6 01       	movw	r26, r12
    2960:	8c 93       	st	X, r24
    2962:	8e e6       	ldi	r24, 0x6E	; 110
    2964:	11 96       	adiw	r26, 0x01	; 1
    2966:	8c 93       	st	X, r24
    2968:	86 e6       	ldi	r24, 0x66	; 102
    296a:	81 83       	std	Z+1, r24	; 0x01
    296c:	32 96       	adiw	r30, 0x02	; 2
    296e:	df 01       	movw	r26, r30
    2970:	89 2f       	mov	r24, r25
    2972:	20 e2       	ldi	r18, 0x20	; 32
    2974:	02 c0       	rjmp	.+4      	; 0x297a <dtoa_prf+0x14c>
    2976:	2d 93       	st	X+, r18
    2978:	81 50       	subi	r24, 0x01	; 1
    297a:	88 23       	and	r24, r24
    297c:	e1 f7       	brne	.-8      	; 0x2976 <dtoa_prf+0x148>
    297e:	e9 0f       	add	r30, r25
    2980:	f1 1d       	adc	r31, r1
    2982:	10 82       	st	Z, r1
    2984:	2e ef       	ldi	r18, 0xFE	; 254
    2986:	3f ef       	ldi	r19, 0xFF	; 255
    2988:	af c0       	rjmp	.+350    	; 0x2ae8 <dtoa_prf+0x2ba>
    298a:	16 16       	cp	r1, r22
    298c:	17 06       	cpc	r1, r23
    298e:	1c f0       	brlt	.+6      	; 0x2996 <dtoa_prf+0x168>
    2990:	41 e0       	ldi	r20, 0x01	; 1
    2992:	50 e0       	ldi	r21, 0x00	; 0
    2994:	03 c0       	rjmp	.+6      	; 0x299c <dtoa_prf+0x16e>
    2996:	ab 01       	movw	r20, r22
    2998:	4f 5f       	subi	r20, 0xFF	; 255
    299a:	5f 4f       	sbci	r21, 0xFF	; 255
    299c:	aa 20       	and	r10, r10
    299e:	19 f4       	brne	.+6      	; 0x29a6 <dtoa_prf+0x178>
    29a0:	80 e0       	ldi	r24, 0x00	; 0
    29a2:	90 e0       	ldi	r25, 0x00	; 0
    29a4:	03 c0       	rjmp	.+6      	; 0x29ac <dtoa_prf+0x17e>
    29a6:	8a 2d       	mov	r24, r10
    29a8:	90 e0       	ldi	r25, 0x00	; 0
    29aa:	01 96       	adiw	r24, 0x01	; 1
    29ac:	20 e0       	ldi	r18, 0x00	; 0
    29ae:	30 e0       	ldi	r19, 0x00	; 0
    29b0:	aa 23       	and	r26, r26
    29b2:	11 f0       	breq	.+4      	; 0x29b8 <dtoa_prf+0x18a>
    29b4:	21 e0       	ldi	r18, 0x01	; 1
    29b6:	30 e0       	ldi	r19, 0x00	; 0
    29b8:	24 0f       	add	r18, r20
    29ba:	35 1f       	adc	r19, r21
    29bc:	28 0f       	add	r18, r24
    29be:	39 1f       	adc	r19, r25
    29c0:	81 2f       	mov	r24, r17
    29c2:	90 e0       	ldi	r25, 0x00	; 0
    29c4:	28 17       	cp	r18, r24
    29c6:	39 07       	cpc	r19, r25
    29c8:	14 f0       	brlt	.+4      	; 0x29ce <dtoa_prf+0x1a0>
    29ca:	20 e0       	ldi	r18, 0x00	; 0
    29cc:	02 c0       	rjmp	.+4      	; 0x29d2 <dtoa_prf+0x1a4>
    29ce:	12 1b       	sub	r17, r18
    29d0:	21 2f       	mov	r18, r17
    29d2:	4b 2d       	mov	r20, r11
    29d4:	50 e0       	ldi	r21, 0x00	; 0
    29d6:	ca 01       	movw	r24, r20
    29d8:	80 71       	andi	r24, 0x10	; 16
    29da:	90 70       	andi	r25, 0x00	; 0
    29dc:	b4 fc       	sbrc	r11, 4
    29de:	0d c0       	rjmp	.+26     	; 0x29fa <dtoa_prf+0x1cc>
    29e0:	b3 fc       	sbrc	r11, 3
    29e2:	0b c0       	rjmp	.+22     	; 0x29fa <dtoa_prf+0x1cc>
    29e4:	f6 01       	movw	r30, r12
    29e6:	32 2f       	mov	r19, r18
    29e8:	40 e2       	ldi	r20, 0x20	; 32
    29ea:	02 c0       	rjmp	.+4      	; 0x29f0 <dtoa_prf+0x1c2>
    29ec:	41 93       	st	Z+, r20
    29ee:	31 50       	subi	r19, 0x01	; 1
    29f0:	33 23       	and	r19, r19
    29f2:	e1 f7       	brne	.-8      	; 0x29ec <dtoa_prf+0x1be>
    29f4:	c2 0e       	add	r12, r18
    29f6:	d1 1c       	adc	r13, r1
    29f8:	01 c0       	rjmp	.+2      	; 0x29fc <dtoa_prf+0x1ce>
    29fa:	32 2f       	mov	r19, r18
    29fc:	aa 23       	and	r26, r26
    29fe:	19 f0       	breq	.+6      	; 0x2a06 <dtoa_prf+0x1d8>
    2a00:	f6 01       	movw	r30, r12
    2a02:	a1 93       	st	Z+, r26
    2a04:	6f 01       	movw	r12, r30
    2a06:	89 2b       	or	r24, r25
    2a08:	11 f0       	breq	.+4      	; 0x2a0e <dtoa_prf+0x1e0>
    2a0a:	13 2f       	mov	r17, r19
    2a0c:	0a c0       	rjmp	.+20     	; 0x2a22 <dtoa_prf+0x1f4>
    2a0e:	f6 01       	movw	r30, r12
    2a10:	13 2f       	mov	r17, r19
    2a12:	80 e3       	ldi	r24, 0x30	; 48
    2a14:	02 c0       	rjmp	.+4      	; 0x2a1a <dtoa_prf+0x1ec>
    2a16:	81 93       	st	Z+, r24
    2a18:	11 50       	subi	r17, 0x01	; 1
    2a1a:	11 23       	and	r17, r17
    2a1c:	e1 f7       	brne	.-8      	; 0x2a16 <dtoa_prf+0x1e8>
    2a1e:	c3 0e       	add	r12, r19
    2a20:	d1 1c       	adc	r13, r1
    2a22:	09 2d       	mov	r16, r9
    2a24:	06 0f       	add	r16, r22
    2a26:	ba 80       	ldd	r11, Y+2	; 0x02
    2a28:	90 e1       	ldi	r25, 0x10	; 16
    2a2a:	89 2e       	mov	r8, r25
    2a2c:	91 2c       	mov	r9, r1
    2a2e:	8e 20       	and	r8, r14
    2a30:	9f 20       	and	r9, r15
    2a32:	e4 fe       	sbrs	r14, 4
    2a34:	04 c0       	rjmp	.+8      	; 0x2a3e <dtoa_prf+0x210>
    2a36:	f1 e3       	ldi	r31, 0x31	; 49
    2a38:	bf 16       	cp	r11, r31
    2a3a:	09 f4       	brne	.+2      	; 0x2a3e <dtoa_prf+0x210>
    2a3c:	01 50       	subi	r16, 0x01	; 1
    2a3e:	10 16       	cp	r1, r16
    2a40:	14 f0       	brlt	.+4      	; 0x2a46 <dtoa_prf+0x218>
    2a42:	01 e0       	ldi	r16, 0x01	; 1
    2a44:	03 c0       	rjmp	.+6      	; 0x2a4c <dtoa_prf+0x21e>
    2a46:	09 30       	cpi	r16, 0x09	; 9
    2a48:	08 f0       	brcs	.+2      	; 0x2a4c <dtoa_prf+0x21e>
    2a4a:	08 e0       	ldi	r16, 0x08	; 8
    2a4c:	9b 01       	movw	r18, r22
    2a4e:	77 ff       	sbrs	r23, 7
    2a50:	02 c0       	rjmp	.+4      	; 0x2a56 <dtoa_prf+0x228>
    2a52:	20 e0       	ldi	r18, 0x00	; 0
    2a54:	30 e0       	ldi	r19, 0x00	; 0
    2a56:	cb 01       	movw	r24, r22
    2a58:	01 96       	adiw	r24, 0x01	; 1
    2a5a:	82 1b       	sub	r24, r18
    2a5c:	93 0b       	sbc	r25, r19
    2a5e:	fe 01       	movw	r30, r28
    2a60:	31 96       	adiw	r30, 0x01	; 1
    2a62:	e8 0f       	add	r30, r24
    2a64:	f9 1f       	adc	r31, r25
    2a66:	8e e2       	ldi	r24, 0x2E	; 46
    2a68:	f8 2e       	mov	r15, r24
    2a6a:	3b 01       	movw	r6, r22
    2a6c:	60 1a       	sub	r6, r16
    2a6e:	71 08       	sbc	r7, r1
    2a70:	8a 2d       	mov	r24, r10
    2a72:	90 e0       	ldi	r25, 0x00	; 0
    2a74:	44 27       	eor	r20, r20
    2a76:	55 27       	eor	r21, r21
    2a78:	48 1b       	sub	r20, r24
    2a7a:	59 0b       	sbc	r21, r25
    2a7c:	8f ef       	ldi	r24, 0xFF	; 255
    2a7e:	2f 3f       	cpi	r18, 0xFF	; 255
    2a80:	38 07       	cpc	r19, r24
    2a82:	19 f4       	brne	.+6      	; 0x2a8a <dtoa_prf+0x25c>
    2a84:	d6 01       	movw	r26, r12
    2a86:	fd 92       	st	X+, r15
    2a88:	6d 01       	movw	r12, r26
    2a8a:	62 17       	cp	r22, r18
    2a8c:	73 07       	cpc	r23, r19
    2a8e:	2c f0       	brlt	.+10     	; 0x2a9a <dtoa_prf+0x26c>
    2a90:	62 16       	cp	r6, r18
    2a92:	73 06       	cpc	r7, r19
    2a94:	14 f4       	brge	.+4      	; 0x2a9a <dtoa_prf+0x26c>
    2a96:	80 81       	ld	r24, Z
    2a98:	01 c0       	rjmp	.+2      	; 0x2a9c <dtoa_prf+0x26e>
    2a9a:	80 e3       	ldi	r24, 0x30	; 48
    2a9c:	21 50       	subi	r18, 0x01	; 1
    2a9e:	30 40       	sbci	r19, 0x00	; 0
    2aa0:	31 96       	adiw	r30, 0x01	; 1
    2aa2:	24 17       	cp	r18, r20
    2aa4:	35 07       	cpc	r19, r21
    2aa6:	24 f0       	brlt	.+8      	; 0x2ab0 <dtoa_prf+0x282>
    2aa8:	d6 01       	movw	r26, r12
    2aaa:	8d 93       	st	X+, r24
    2aac:	6d 01       	movw	r12, r26
    2aae:	e6 cf       	rjmp	.-52     	; 0x2a7c <dtoa_prf+0x24e>
    2ab0:	26 17       	cp	r18, r22
    2ab2:	37 07       	cpc	r19, r23
    2ab4:	49 f4       	brne	.+18     	; 0x2ac8 <dtoa_prf+0x29a>
    2ab6:	b5 e3       	ldi	r27, 0x35	; 53
    2ab8:	bb 15       	cp	r27, r11
    2aba:	28 f0       	brcs	.+10     	; 0x2ac6 <dtoa_prf+0x298>
    2abc:	bb 16       	cp	r11, r27
    2abe:	21 f4       	brne	.+8      	; 0x2ac8 <dtoa_prf+0x29a>
    2ac0:	81 14       	cp	r8, r1
    2ac2:	91 04       	cpc	r9, r1
    2ac4:	09 f4       	brne	.+2      	; 0x2ac8 <dtoa_prf+0x29a>
    2ac6:	81 e3       	ldi	r24, 0x31	; 49
    2ac8:	f6 01       	movw	r30, r12
    2aca:	81 93       	st	Z+, r24
    2acc:	d6 01       	movw	r26, r12
    2ace:	81 2f       	mov	r24, r17
    2ad0:	90 e2       	ldi	r25, 0x20	; 32
    2ad2:	02 c0       	rjmp	.+4      	; 0x2ad8 <dtoa_prf+0x2aa>
    2ad4:	9c 93       	st	X, r25
    2ad6:	81 50       	subi	r24, 0x01	; 1
    2ad8:	11 96       	adiw	r26, 0x01	; 1
    2ada:	88 23       	and	r24, r24
    2adc:	d9 f7       	brne	.-10     	; 0x2ad4 <dtoa_prf+0x2a6>
    2ade:	e1 0f       	add	r30, r17
    2ae0:	f1 1d       	adc	r31, r1
    2ae2:	10 82       	st	Z, r1
    2ae4:	20 e0       	ldi	r18, 0x00	; 0
    2ae6:	30 e0       	ldi	r19, 0x00	; 0
    2ae8:	c9 01       	movw	r24, r18
    2aea:	29 96       	adiw	r28, 0x09	; 9
    2aec:	ee e0       	ldi	r30, 0x0E	; 14
    2aee:	0c 94 be 13 	jmp	0x277c	; 0x277c <__epilogue_restores__+0x8>

00002af2 <__ftoa_engine>:
    2af2:	28 30       	cpi	r18, 0x08	; 8
    2af4:	08 f0       	brcs	.+2      	; 0x2af8 <__ftoa_engine+0x6>
    2af6:	27 e0       	ldi	r18, 0x07	; 7
    2af8:	33 27       	eor	r19, r19
    2afa:	da 01       	movw	r26, r20
    2afc:	99 0f       	add	r25, r25
    2afe:	31 1d       	adc	r19, r1
    2b00:	87 fd       	sbrc	r24, 7
    2b02:	91 60       	ori	r25, 0x01	; 1
    2b04:	00 96       	adiw	r24, 0x00	; 0
    2b06:	61 05       	cpc	r22, r1
    2b08:	71 05       	cpc	r23, r1
    2b0a:	39 f4       	brne	.+14     	; 0x2b1a <__ftoa_engine+0x28>
    2b0c:	32 60       	ori	r19, 0x02	; 2
    2b0e:	2e 5f       	subi	r18, 0xFE	; 254
    2b10:	3d 93       	st	X+, r19
    2b12:	30 e3       	ldi	r19, 0x30	; 48
    2b14:	2a 95       	dec	r18
    2b16:	e1 f7       	brne	.-8      	; 0x2b10 <__ftoa_engine+0x1e>
    2b18:	08 95       	ret
    2b1a:	9f 3f       	cpi	r25, 0xFF	; 255
    2b1c:	30 f0       	brcs	.+12     	; 0x2b2a <__ftoa_engine+0x38>
    2b1e:	80 38       	cpi	r24, 0x80	; 128
    2b20:	71 05       	cpc	r23, r1
    2b22:	61 05       	cpc	r22, r1
    2b24:	09 f0       	breq	.+2      	; 0x2b28 <__ftoa_engine+0x36>
    2b26:	3c 5f       	subi	r19, 0xFC	; 252
    2b28:	3c 5f       	subi	r19, 0xFC	; 252
    2b2a:	3d 93       	st	X+, r19
    2b2c:	91 30       	cpi	r25, 0x01	; 1
    2b2e:	08 f0       	brcs	.+2      	; 0x2b32 <__ftoa_engine+0x40>
    2b30:	80 68       	ori	r24, 0x80	; 128
    2b32:	91 1d       	adc	r25, r1
    2b34:	df 93       	push	r29
    2b36:	cf 93       	push	r28
    2b38:	1f 93       	push	r17
    2b3a:	0f 93       	push	r16
    2b3c:	ff 92       	push	r15
    2b3e:	ef 92       	push	r14
    2b40:	19 2f       	mov	r17, r25
    2b42:	98 7f       	andi	r25, 0xF8	; 248
    2b44:	96 95       	lsr	r25
    2b46:	e9 2f       	mov	r30, r25
    2b48:	96 95       	lsr	r25
    2b4a:	96 95       	lsr	r25
    2b4c:	e9 0f       	add	r30, r25
    2b4e:	ff 27       	eor	r31, r31
    2b50:	e2 55       	subi	r30, 0x52	; 82
    2b52:	ff 4f       	sbci	r31, 0xFF	; 255
    2b54:	99 27       	eor	r25, r25
    2b56:	33 27       	eor	r19, r19
    2b58:	ee 24       	eor	r14, r14
    2b5a:	ff 24       	eor	r15, r15
    2b5c:	a7 01       	movw	r20, r14
    2b5e:	e7 01       	movw	r28, r14
    2b60:	05 90       	lpm	r0, Z+
    2b62:	08 94       	sec
    2b64:	07 94       	ror	r0
    2b66:	28 f4       	brcc	.+10     	; 0x2b72 <__ftoa_engine+0x80>
    2b68:	36 0f       	add	r19, r22
    2b6a:	e7 1e       	adc	r14, r23
    2b6c:	f8 1e       	adc	r15, r24
    2b6e:	49 1f       	adc	r20, r25
    2b70:	51 1d       	adc	r21, r1
    2b72:	66 0f       	add	r22, r22
    2b74:	77 1f       	adc	r23, r23
    2b76:	88 1f       	adc	r24, r24
    2b78:	99 1f       	adc	r25, r25
    2b7a:	06 94       	lsr	r0
    2b7c:	a1 f7       	brne	.-24     	; 0x2b66 <__ftoa_engine+0x74>
    2b7e:	05 90       	lpm	r0, Z+
    2b80:	07 94       	ror	r0
    2b82:	28 f4       	brcc	.+10     	; 0x2b8e <__ftoa_engine+0x9c>
    2b84:	e7 0e       	add	r14, r23
    2b86:	f8 1e       	adc	r15, r24
    2b88:	49 1f       	adc	r20, r25
    2b8a:	56 1f       	adc	r21, r22
    2b8c:	c1 1d       	adc	r28, r1
    2b8e:	77 0f       	add	r23, r23
    2b90:	88 1f       	adc	r24, r24
    2b92:	99 1f       	adc	r25, r25
    2b94:	66 1f       	adc	r22, r22
    2b96:	06 94       	lsr	r0
    2b98:	a1 f7       	brne	.-24     	; 0x2b82 <__ftoa_engine+0x90>
    2b9a:	05 90       	lpm	r0, Z+
    2b9c:	07 94       	ror	r0
    2b9e:	28 f4       	brcc	.+10     	; 0x2baa <__ftoa_engine+0xb8>
    2ba0:	f8 0e       	add	r15, r24
    2ba2:	49 1f       	adc	r20, r25
    2ba4:	56 1f       	adc	r21, r22
    2ba6:	c7 1f       	adc	r28, r23
    2ba8:	d1 1d       	adc	r29, r1
    2baa:	88 0f       	add	r24, r24
    2bac:	99 1f       	adc	r25, r25
    2bae:	66 1f       	adc	r22, r22
    2bb0:	77 1f       	adc	r23, r23
    2bb2:	06 94       	lsr	r0
    2bb4:	a1 f7       	brne	.-24     	; 0x2b9e <__ftoa_engine+0xac>
    2bb6:	05 90       	lpm	r0, Z+
    2bb8:	07 94       	ror	r0
    2bba:	20 f4       	brcc	.+8      	; 0x2bc4 <__ftoa_engine+0xd2>
    2bbc:	49 0f       	add	r20, r25
    2bbe:	56 1f       	adc	r21, r22
    2bc0:	c7 1f       	adc	r28, r23
    2bc2:	d8 1f       	adc	r29, r24
    2bc4:	99 0f       	add	r25, r25
    2bc6:	66 1f       	adc	r22, r22
    2bc8:	77 1f       	adc	r23, r23
    2bca:	88 1f       	adc	r24, r24
    2bcc:	06 94       	lsr	r0
    2bce:	a9 f7       	brne	.-22     	; 0x2bba <__ftoa_engine+0xc8>
    2bd0:	84 91       	lpm	r24, Z+
    2bd2:	10 95       	com	r17
    2bd4:	17 70       	andi	r17, 0x07	; 7
    2bd6:	41 f0       	breq	.+16     	; 0x2be8 <__ftoa_engine+0xf6>
    2bd8:	d6 95       	lsr	r29
    2bda:	c7 95       	ror	r28
    2bdc:	57 95       	ror	r21
    2bde:	47 95       	ror	r20
    2be0:	f7 94       	ror	r15
    2be2:	e7 94       	ror	r14
    2be4:	1a 95       	dec	r17
    2be6:	c1 f7       	brne	.-16     	; 0x2bd8 <__ftoa_engine+0xe6>
    2be8:	e4 e5       	ldi	r30, 0x54	; 84
    2bea:	f0 e0       	ldi	r31, 0x00	; 0
    2bec:	68 94       	set
    2bee:	15 90       	lpm	r1, Z+
    2bf0:	15 91       	lpm	r17, Z+
    2bf2:	35 91       	lpm	r19, Z+
    2bf4:	65 91       	lpm	r22, Z+
    2bf6:	95 91       	lpm	r25, Z+
    2bf8:	05 90       	lpm	r0, Z+
    2bfa:	7f e2       	ldi	r23, 0x2F	; 47
    2bfc:	73 95       	inc	r23
    2bfe:	e1 18       	sub	r14, r1
    2c00:	f1 0a       	sbc	r15, r17
    2c02:	43 0b       	sbc	r20, r19
    2c04:	56 0b       	sbc	r21, r22
    2c06:	c9 0b       	sbc	r28, r25
    2c08:	d0 09       	sbc	r29, r0
    2c0a:	c0 f7       	brcc	.-16     	; 0x2bfc <__ftoa_engine+0x10a>
    2c0c:	e1 0c       	add	r14, r1
    2c0e:	f1 1e       	adc	r15, r17
    2c10:	43 1f       	adc	r20, r19
    2c12:	56 1f       	adc	r21, r22
    2c14:	c9 1f       	adc	r28, r25
    2c16:	d0 1d       	adc	r29, r0
    2c18:	7e f4       	brtc	.+30     	; 0x2c38 <__ftoa_engine+0x146>
    2c1a:	70 33       	cpi	r23, 0x30	; 48
    2c1c:	11 f4       	brne	.+4      	; 0x2c22 <__ftoa_engine+0x130>
    2c1e:	8a 95       	dec	r24
    2c20:	e6 cf       	rjmp	.-52     	; 0x2bee <__ftoa_engine+0xfc>
    2c22:	e8 94       	clt
    2c24:	01 50       	subi	r16, 0x01	; 1
    2c26:	30 f0       	brcs	.+12     	; 0x2c34 <__ftoa_engine+0x142>
    2c28:	08 0f       	add	r16, r24
    2c2a:	0a f4       	brpl	.+2      	; 0x2c2e <__ftoa_engine+0x13c>
    2c2c:	00 27       	eor	r16, r16
    2c2e:	02 17       	cp	r16, r18
    2c30:	08 f4       	brcc	.+2      	; 0x2c34 <__ftoa_engine+0x142>
    2c32:	20 2f       	mov	r18, r16
    2c34:	23 95       	inc	r18
    2c36:	02 2f       	mov	r16, r18
    2c38:	7a 33       	cpi	r23, 0x3A	; 58
    2c3a:	28 f0       	brcs	.+10     	; 0x2c46 <__ftoa_engine+0x154>
    2c3c:	79 e3       	ldi	r23, 0x39	; 57
    2c3e:	7d 93       	st	X+, r23
    2c40:	2a 95       	dec	r18
    2c42:	e9 f7       	brne	.-6      	; 0x2c3e <__ftoa_engine+0x14c>
    2c44:	10 c0       	rjmp	.+32     	; 0x2c66 <__ftoa_engine+0x174>
    2c46:	7d 93       	st	X+, r23
    2c48:	2a 95       	dec	r18
    2c4a:	89 f6       	brne	.-94     	; 0x2bee <__ftoa_engine+0xfc>
    2c4c:	06 94       	lsr	r0
    2c4e:	97 95       	ror	r25
    2c50:	67 95       	ror	r22
    2c52:	37 95       	ror	r19
    2c54:	17 95       	ror	r17
    2c56:	17 94       	ror	r1
    2c58:	e1 18       	sub	r14, r1
    2c5a:	f1 0a       	sbc	r15, r17
    2c5c:	43 0b       	sbc	r20, r19
    2c5e:	56 0b       	sbc	r21, r22
    2c60:	c9 0b       	sbc	r28, r25
    2c62:	d0 09       	sbc	r29, r0
    2c64:	98 f0       	brcs	.+38     	; 0x2c8c <__ftoa_engine+0x19a>
    2c66:	23 95       	inc	r18
    2c68:	7e 91       	ld	r23, -X
    2c6a:	73 95       	inc	r23
    2c6c:	7a 33       	cpi	r23, 0x3A	; 58
    2c6e:	08 f0       	brcs	.+2      	; 0x2c72 <__ftoa_engine+0x180>
    2c70:	70 e3       	ldi	r23, 0x30	; 48
    2c72:	7c 93       	st	X, r23
    2c74:	20 13       	cpse	r18, r16
    2c76:	b8 f7       	brcc	.-18     	; 0x2c66 <__ftoa_engine+0x174>
    2c78:	7e 91       	ld	r23, -X
    2c7a:	70 61       	ori	r23, 0x10	; 16
    2c7c:	7d 93       	st	X+, r23
    2c7e:	30 f0       	brcs	.+12     	; 0x2c8c <__ftoa_engine+0x19a>
    2c80:	83 95       	inc	r24
    2c82:	71 e3       	ldi	r23, 0x31	; 49
    2c84:	7d 93       	st	X+, r23
    2c86:	70 e3       	ldi	r23, 0x30	; 48
    2c88:	2a 95       	dec	r18
    2c8a:	e1 f7       	brne	.-8      	; 0x2c84 <__ftoa_engine+0x192>
    2c8c:	11 24       	eor	r1, r1
    2c8e:	ef 90       	pop	r14
    2c90:	ff 90       	pop	r15
    2c92:	0f 91       	pop	r16
    2c94:	1f 91       	pop	r17
    2c96:	cf 91       	pop	r28
    2c98:	df 91       	pop	r29
    2c9a:	99 27       	eor	r25, r25
    2c9c:	87 fd       	sbrc	r24, 7
    2c9e:	90 95       	com	r25
    2ca0:	08 95       	ret

00002ca2 <strrev>:
    2ca2:	dc 01       	movw	r26, r24
    2ca4:	fc 01       	movw	r30, r24
    2ca6:	67 2f       	mov	r22, r23
    2ca8:	71 91       	ld	r23, Z+
    2caa:	77 23       	and	r23, r23
    2cac:	e1 f7       	brne	.-8      	; 0x2ca6 <strrev+0x4>
    2cae:	32 97       	sbiw	r30, 0x02	; 2
    2cb0:	04 c0       	rjmp	.+8      	; 0x2cba <strrev+0x18>
    2cb2:	7c 91       	ld	r23, X
    2cb4:	6d 93       	st	X+, r22
    2cb6:	70 83       	st	Z, r23
    2cb8:	62 91       	ld	r22, -Z
    2cba:	ae 17       	cp	r26, r30
    2cbc:	bf 07       	cpc	r27, r31
    2cbe:	c8 f3       	brcs	.-14     	; 0x2cb2 <strrev+0x10>
    2cc0:	08 95       	ret

00002cc2 <__udivmodhi4>:
    2cc2:	aa 1b       	sub	r26, r26
    2cc4:	bb 1b       	sub	r27, r27
    2cc6:	51 e1       	ldi	r21, 0x11	; 17
    2cc8:	07 c0       	rjmp	.+14     	; 0x2cd8 <__udivmodhi4_ep>

00002cca <__udivmodhi4_loop>:
    2cca:	aa 1f       	adc	r26, r26
    2ccc:	bb 1f       	adc	r27, r27
    2cce:	a6 17       	cp	r26, r22
    2cd0:	b7 07       	cpc	r27, r23
    2cd2:	10 f0       	brcs	.+4      	; 0x2cd8 <__udivmodhi4_ep>
    2cd4:	a6 1b       	sub	r26, r22
    2cd6:	b7 0b       	sbc	r27, r23

00002cd8 <__udivmodhi4_ep>:
    2cd8:	88 1f       	adc	r24, r24
    2cda:	99 1f       	adc	r25, r25
    2cdc:	5a 95       	dec	r21
    2cde:	a9 f7       	brne	.-22     	; 0x2cca <__udivmodhi4_loop>
    2ce0:	80 95       	com	r24
    2ce2:	90 95       	com	r25
    2ce4:	bc 01       	movw	r22, r24
    2ce6:	cd 01       	movw	r24, r26
    2ce8:	08 95       	ret

00002cea <_exit>:
    2cea:	f8 94       	cli

00002cec <__stop_program>:
    2cec:	ff cf       	rjmp	.-2      	; 0x2cec <__stop_program>
