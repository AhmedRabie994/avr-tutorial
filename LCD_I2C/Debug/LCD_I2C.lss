
LCD_I2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002982  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00002982  000029f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001d1c  00000000  00000000  00002a0c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000a0a  00000000  00000000  00004728  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  00005132  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  00005292  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  00005421  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  00007466  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  00008567  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  000094ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  0000966c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  0000992e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a1bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e8       	ldi	r30, 0x82	; 130
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 37       	cpi	r26, 0x76	; 118
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 71 14 	call	0x28e2	; 0x28e2 <main>
      7a:	0c 94 bf 14 	jmp	0x297e	; 0x297e <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 88 14 	jmp	0x2910	; 0x2910 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ae e6       	ldi	r26, 0x6E	; 110
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 a4 14 	jmp	0x2948	; 0x2948 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 94 14 	jmp	0x2928	; 0x2928 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 b0 14 	jmp	0x2960	; 0x2960 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 94 14 	jmp	0x2928	; 0x2928 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 b0 14 	jmp	0x2960	; 0x2960 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 88 14 	jmp	0x2910	; 0x2910 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__stack+0x2f>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__stack+0x45>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__stack+0x1d>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__stack+0x2f>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__stack+0x25>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__stack+0x2b>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__stack+0x45>
     484:	8e e6       	ldi	r24, 0x6E	; 110
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__stack+0x1b7>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__stack+0x41>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__stack+0x1b7>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__stack+0x57>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__stack+0x1b7>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__stack+0xc3>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__stack+0xb7>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__stack+0xdf>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__stack+0xf9>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__stack+0x7f>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__stack+0x13d>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__stack+0x131>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__stack+0x10f>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__stack+0x15b>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__stack+0x143>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__stack+0x19d>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__stack+0x19d>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__stack+0x19d>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__stack+0x1a7>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 a4 14 	jmp	0x2948	; 0x2948 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 90 14 	jmp	0x2920	; 0x2920 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	6e e6       	ldi	r22, 0x6E	; 110
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 ac 14 	jmp	0x2958	; 0x2958 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 94 14 	jmp	0x2928	; 0x2928 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 b0 14 	jmp	0x2960	; 0x2960 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 94 14 	jmp	0x2928	; 0x2928 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 b0 14 	jmp	0x2960	; 0x2960 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 94 14 	jmp	0x2928	; 0x2928 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__ltsf2+0x56>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__ltsf2+0x56>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__ltsf2+0x58>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 b0 14 	jmp	0x2960	; 0x2960 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 98 14 	jmp	0x2930	; 0x2930 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 b4 14 	jmp	0x2968	; 0x2968 <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <I2C_Init>:
 *                      Functions Definitions                                  *
 *******************************************************************************/


void I2C_Init()			/* I2C initialize function */
{
     c8e:	0f 93       	push	r16
     c90:	1f 93       	push	r17
     c92:	df 93       	push	r29
     c94:	cf 93       	push	r28
     c96:	cd b7       	in	r28, 0x3d	; 61
     c98:	de b7       	in	r29, 0x3e	; 62
	TWBR =BITRATE(TWSR =0x00);	/* Get bit rate register value by formula */
     c9a:	00 e2       	ldi	r16, 0x20	; 32
     c9c:	10 e0       	ldi	r17, 0x00	; 0
     c9e:	e1 e2       	ldi	r30, 0x21	; 33
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	10 82       	st	Z, r1
     ca4:	20 e0       	ldi	r18, 0x00	; 0
     ca6:	30 e0       	ldi	r19, 0x00	; 0
     ca8:	40 e0       	ldi	r20, 0x00	; 0
     caa:	50 e4       	ldi	r21, 0x40	; 64
     cac:	60 e0       	ldi	r22, 0x00	; 0
     cae:	70 e0       	ldi	r23, 0x00	; 0
     cb0:	80 e8       	ldi	r24, 0x80	; 128
     cb2:	90 e4       	ldi	r25, 0x40	; 64
     cb4:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
     cb8:	dc 01       	movw	r26, r24
     cba:	cb 01       	movw	r24, r22
     cbc:	bc 01       	movw	r22, r24
     cbe:	cd 01       	movw	r24, r26
     cc0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     cc4:	dc 01       	movw	r26, r24
     cc6:	cb 01       	movw	r24, r22
     cc8:	f8 01       	movw	r30, r16
     cca:	80 83       	st	Z, r24
}
     ccc:	cf 91       	pop	r28
     cce:	df 91       	pop	r29
     cd0:	1f 91       	pop	r17
     cd2:	0f 91       	pop	r16
     cd4:	08 95       	ret

00000cd6 <I2C_Start>:


uint8 I2C_Start(uint8 write_address)/* I2C start function */
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	00 d0       	rcall	.+0      	; 0xcdc <I2C_Start+0x6>
     cdc:	0f 92       	push	r0
     cde:	cd b7       	in	r28, 0x3d	; 61
     ce0:	de b7       	in	r29, 0x3e	; 62
     ce2:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t status;		/* Declare variable */
	TWCR=(1<<TWSTA)|(1<<TWEN)|(1<<TWINT); /* Enable TWI, generate START */
     ce4:	e6 e5       	ldi	r30, 0x56	; 86
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	84 ea       	ldi	r24, 0xA4	; 164
     cea:	80 83       	st	Z, r24
	while(!(TWCR&(1<<TWINT)));	/* Wait until TWI finish its current job */
     cec:	e6 e5       	ldi	r30, 0x56	; 86
     cee:	f0 e0       	ldi	r31, 0x00	; 0
     cf0:	80 81       	ld	r24, Z
     cf2:	88 23       	and	r24, r24
     cf4:	dc f7       	brge	.-10     	; 0xcec <I2C_Start+0x16>
	status=TWSR&0xF8;		/* Read TWI status register */
     cf6:	e1 e2       	ldi	r30, 0x21	; 33
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	80 81       	ld	r24, Z
     cfc:	88 7f       	andi	r24, 0xF8	; 248
     cfe:	89 83       	std	Y+1, r24	; 0x01
	if(status!=0x08)		/* Check weather START transmitted or not? */
     d00:	89 81       	ldd	r24, Y+1	; 0x01
     d02:	88 30       	cpi	r24, 0x08	; 8
     d04:	11 f0       	breq	.+4      	; 0xd0a <I2C_Start+0x34>
	return 0;			/* Return 0 to indicate start condition fail */
     d06:	1b 82       	std	Y+3, r1	; 0x03
     d08:	20 c0       	rjmp	.+64     	; 0xd4a <I2C_Start+0x74>
	TWDR=write_address;		/* Write SLA+W in TWI data register */
     d0a:	e3 e2       	ldi	r30, 0x23	; 35
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	8a 81       	ldd	r24, Y+2	; 0x02
     d10:	80 83       	st	Z, r24
	TWCR=(1<<TWEN)|(1<<TWINT);	/* Enable TWI & clear interrupt flag */
     d12:	e6 e5       	ldi	r30, 0x56	; 86
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	84 e8       	ldi	r24, 0x84	; 132
     d18:	80 83       	st	Z, r24
	while(!(TWCR&(1<<TWINT)));	/* Wait until TWI finish its current job */
     d1a:	e6 e5       	ldi	r30, 0x56	; 86
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	80 81       	ld	r24, Z
     d20:	88 23       	and	r24, r24
     d22:	dc f7       	brge	.-10     	; 0xd1a <I2C_Start+0x44>
	status=TWSR&0xF8;		/* Read TWI status register */
     d24:	e1 e2       	ldi	r30, 0x21	; 33
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	80 81       	ld	r24, Z
     d2a:	88 7f       	andi	r24, 0xF8	; 248
     d2c:	89 83       	std	Y+1, r24	; 0x01
	if(status==0x18)		/* Check for SLA+W transmitted &ack received */
     d2e:	89 81       	ldd	r24, Y+1	; 0x01
     d30:	88 31       	cpi	r24, 0x18	; 24
     d32:	19 f4       	brne	.+6      	; 0xd3a <I2C_Start+0x64>
	return 1;			/* Return 1 to indicate ack received */
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	8b 83       	std	Y+3, r24	; 0x03
     d38:	08 c0       	rjmp	.+16     	; 0xd4a <I2C_Start+0x74>
	if(status==0x20)		/* Check for SLA+W transmitted &nack received */
     d3a:	89 81       	ldd	r24, Y+1	; 0x01
     d3c:	80 32       	cpi	r24, 0x20	; 32
     d3e:	19 f4       	brne	.+6      	; 0xd46 <I2C_Start+0x70>
	return 2;			/* Return 2 to indicate nack received */
     d40:	82 e0       	ldi	r24, 0x02	; 2
     d42:	8b 83       	std	Y+3, r24	; 0x03
     d44:	02 c0       	rjmp	.+4      	; 0xd4a <I2C_Start+0x74>
	else
	return 3;			/* Else return 3 to indicate SLA+W failed */
     d46:	83 e0       	ldi	r24, 0x03	; 3
     d48:	8b 83       	std	Y+3, r24	; 0x03
     d4a:	8b 81       	ldd	r24, Y+3	; 0x03
}
     d4c:	0f 90       	pop	r0
     d4e:	0f 90       	pop	r0
     d50:	0f 90       	pop	r0
     d52:	cf 91       	pop	r28
     d54:	df 91       	pop	r29
     d56:	08 95       	ret

00000d58 <I2C_Repeated_Start>:


uint8 I2C_Repeated_Start(uint8 read_address) /* I2C repeated start function */
{
     d58:	df 93       	push	r29
     d5a:	cf 93       	push	r28
     d5c:	00 d0       	rcall	.+0      	; 0xd5e <I2C_Repeated_Start+0x6>
     d5e:	0f 92       	push	r0
     d60:	cd b7       	in	r28, 0x3d	; 61
     d62:	de b7       	in	r29, 0x3e	; 62
     d64:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t status;		/* Declare variable */
	TWCR=(1<<TWSTA)|(1<<TWEN)|(1<<TWINT);/* Enable TWI, generate start */
     d66:	e6 e5       	ldi	r30, 0x56	; 86
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	84 ea       	ldi	r24, 0xA4	; 164
     d6c:	80 83       	st	Z, r24
	while(!(TWCR&(1<<TWINT)));	/* Wait until TWI finish its current job */
     d6e:	e6 e5       	ldi	r30, 0x56	; 86
     d70:	f0 e0       	ldi	r31, 0x00	; 0
     d72:	80 81       	ld	r24, Z
     d74:	88 23       	and	r24, r24
     d76:	dc f7       	brge	.-10     	; 0xd6e <I2C_Repeated_Start+0x16>
	status=TWSR&0xF8;		/* Read TWI status register */
     d78:	e1 e2       	ldi	r30, 0x21	; 33
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	80 81       	ld	r24, Z
     d7e:	88 7f       	andi	r24, 0xF8	; 248
     d80:	89 83       	std	Y+1, r24	; 0x01
	if(status!=0x10)		/* Check for repeated start transmitted */
     d82:	89 81       	ldd	r24, Y+1	; 0x01
     d84:	80 31       	cpi	r24, 0x10	; 16
     d86:	11 f0       	breq	.+4      	; 0xd8c <I2C_Repeated_Start+0x34>
	return 0;			/* Return 0 for repeated start condition fail */
     d88:	1b 82       	std	Y+3, r1	; 0x03
     d8a:	20 c0       	rjmp	.+64     	; 0xdcc <I2C_Repeated_Start+0x74>
	TWDR=read_address;		/* Write SLA+R in TWI data register */
     d8c:	e3 e2       	ldi	r30, 0x23	; 35
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	8a 81       	ldd	r24, Y+2	; 0x02
     d92:	80 83       	st	Z, r24
	TWCR=(1<<TWEN)|(1<<TWINT);	/* Enable TWI and clear interrupt flag */
     d94:	e6 e5       	ldi	r30, 0x56	; 86
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	84 e8       	ldi	r24, 0x84	; 132
     d9a:	80 83       	st	Z, r24
	while(!(TWCR&(1<<TWINT)));	/* Wait until TWI finish its current job */
     d9c:	e6 e5       	ldi	r30, 0x56	; 86
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	80 81       	ld	r24, Z
     da2:	88 23       	and	r24, r24
     da4:	dc f7       	brge	.-10     	; 0xd9c <I2C_Repeated_Start+0x44>
	status=TWSR&0xF8;		/* Read TWI status register */
     da6:	e1 e2       	ldi	r30, 0x21	; 33
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	80 81       	ld	r24, Z
     dac:	88 7f       	andi	r24, 0xF8	; 248
     dae:	89 83       	std	Y+1, r24	; 0x01
	if(status==0x40)		/* Check for SLA+R transmitted &ack received */
     db0:	89 81       	ldd	r24, Y+1	; 0x01
     db2:	80 34       	cpi	r24, 0x40	; 64
     db4:	19 f4       	brne	.+6      	; 0xdbc <I2C_Repeated_Start+0x64>
	return 1;			/* Return 1 to indicate ack received */
     db6:	81 e0       	ldi	r24, 0x01	; 1
     db8:	8b 83       	std	Y+3, r24	; 0x03
     dba:	08 c0       	rjmp	.+16     	; 0xdcc <I2C_Repeated_Start+0x74>
	if(status==0x48)		/* Check for SLA+R transmitted &nack received */
     dbc:	89 81       	ldd	r24, Y+1	; 0x01
     dbe:	88 34       	cpi	r24, 0x48	; 72
     dc0:	19 f4       	brne	.+6      	; 0xdc8 <I2C_Repeated_Start+0x70>
	return 2;			/* Return 2 to indicate nack received */
     dc2:	82 e0       	ldi	r24, 0x02	; 2
     dc4:	8b 83       	std	Y+3, r24	; 0x03
     dc6:	02 c0       	rjmp	.+4      	; 0xdcc <I2C_Repeated_Start+0x74>
	else
	return 3;			/* Else return 3 to indicate SLA+W failed */
     dc8:	83 e0       	ldi	r24, 0x03	; 3
     dca:	8b 83       	std	Y+3, r24	; 0x03
     dcc:	8b 81       	ldd	r24, Y+3	; 0x03
}
     dce:	0f 90       	pop	r0
     dd0:	0f 90       	pop	r0
     dd2:	0f 90       	pop	r0
     dd4:	cf 91       	pop	r28
     dd6:	df 91       	pop	r29
     dd8:	08 95       	ret

00000dda <I2C_Write>:


uint8_t I2C_Write(uint8 data)	/* I2C write function */
{
     dda:	df 93       	push	r29
     ddc:	cf 93       	push	r28
     dde:	00 d0       	rcall	.+0      	; 0xde0 <I2C_Write+0x6>
     de0:	0f 92       	push	r0
     de2:	cd b7       	in	r28, 0x3d	; 61
     de4:	de b7       	in	r29, 0x3e	; 62
     de6:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t status;		/* Declare variable */
	TWDR=data;			/* Copy data in TWI data register */
     de8:	e3 e2       	ldi	r30, 0x23	; 35
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	8a 81       	ldd	r24, Y+2	; 0x02
     dee:	80 83       	st	Z, r24
	TWCR=(1<<TWEN)|(1<<TWINT);	/* Enable TWI and clear interrupt flag */
     df0:	e6 e5       	ldi	r30, 0x56	; 86
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	84 e8       	ldi	r24, 0x84	; 132
     df6:	80 83       	st	Z, r24
	while(!(TWCR&(1<<TWINT)));	/* Wait until TWI finish its current job */
     df8:	e6 e5       	ldi	r30, 0x56	; 86
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	80 81       	ld	r24, Z
     dfe:	88 23       	and	r24, r24
     e00:	dc f7       	brge	.-10     	; 0xdf8 <I2C_Write+0x1e>
	status=TWSR&0xF8;		/* Read TWI status register */
     e02:	e1 e2       	ldi	r30, 0x21	; 33
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	80 81       	ld	r24, Z
     e08:	88 7f       	andi	r24, 0xF8	; 248
     e0a:	89 83       	std	Y+1, r24	; 0x01
	if(status==0x28)		/* Check for data transmitted &ack received */
     e0c:	89 81       	ldd	r24, Y+1	; 0x01
     e0e:	88 32       	cpi	r24, 0x28	; 40
     e10:	11 f4       	brne	.+4      	; 0xe16 <I2C_Write+0x3c>
	return 0;			/* Return 0 to indicate ack received */
     e12:	1b 82       	std	Y+3, r1	; 0x03
     e14:	08 c0       	rjmp	.+16     	; 0xe26 <I2C_Write+0x4c>
	if(status==0x30)		/* Check for data transmitted &nack received */
     e16:	89 81       	ldd	r24, Y+1	; 0x01
     e18:	80 33       	cpi	r24, 0x30	; 48
     e1a:	19 f4       	brne	.+6      	; 0xe22 <I2C_Write+0x48>
	return 1;			/* Return 1 to indicate nack received */
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	8b 83       	std	Y+3, r24	; 0x03
     e20:	02 c0       	rjmp	.+4      	; 0xe26 <I2C_Write+0x4c>
	else
	return 2;			/* Else return 2 for data transmission failure */
     e22:	82 e0       	ldi	r24, 0x02	; 2
     e24:	8b 83       	std	Y+3, r24	; 0x03
     e26:	8b 81       	ldd	r24, Y+3	; 0x03
}
     e28:	0f 90       	pop	r0
     e2a:	0f 90       	pop	r0
     e2c:	0f 90       	pop	r0
     e2e:	cf 91       	pop	r28
     e30:	df 91       	pop	r29
     e32:	08 95       	ret

00000e34 <I2C_Read_Ack>:


uint8 I2C_Read_Ack()		/* I2C read ack function */
{
     e34:	df 93       	push	r29
     e36:	cf 93       	push	r28
     e38:	cd b7       	in	r28, 0x3d	; 61
     e3a:	de b7       	in	r29, 0x3e	; 62
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA); /* Enable TWI, generation of ack */
     e3c:	e6 e5       	ldi	r30, 0x56	; 86
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	84 ec       	ldi	r24, 0xC4	; 196
     e42:	80 83       	st	Z, r24
	while(!(TWCR&(1<<TWINT)));	/* Wait until TWI finish its current job */
     e44:	e6 e5       	ldi	r30, 0x56	; 86
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	80 81       	ld	r24, Z
     e4a:	88 23       	and	r24, r24
     e4c:	dc f7       	brge	.-10     	; 0xe44 <I2C_Read_Ack+0x10>
	return (TWDR);			/* Return received data */
     e4e:	e3 e2       	ldi	r30, 0x23	; 35
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	80 81       	ld	r24, Z
}
     e54:	cf 91       	pop	r28
     e56:	df 91       	pop	r29
     e58:	08 95       	ret

00000e5a <I2C_Read_Nack>:


uint8 I2C_Read_Nack()		/* I2C read nack function */
{
     e5a:	df 93       	push	r29
     e5c:	cf 93       	push	r28
     e5e:	cd b7       	in	r28, 0x3d	; 61
     e60:	de b7       	in	r29, 0x3e	; 62
	TWCR=(1<<TWEN)|(1<<TWINT);	/* Enable TWI and clear interrupt flag */
     e62:	e6 e5       	ldi	r30, 0x56	; 86
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	84 e8       	ldi	r24, 0x84	; 132
     e68:	80 83       	st	Z, r24
	while(!(TWCR&(1<<TWINT)));	/* Wait until TWI finish its current job */
     e6a:	e6 e5       	ldi	r30, 0x56	; 86
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	88 23       	and	r24, r24
     e72:	dc f7       	brge	.-10     	; 0xe6a <I2C_Read_Nack+0x10>
	return (TWDR);		/* Return received data */
     e74:	e3 e2       	ldi	r30, 0x23	; 35
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	80 81       	ld	r24, Z
}
     e7a:	cf 91       	pop	r28
     e7c:	df 91       	pop	r29
     e7e:	08 95       	ret

00000e80 <I2C_Stop>:


void I2C_Stop()			/* I2C stop function */
{
     e80:	df 93       	push	r29
     e82:	cf 93       	push	r28
     e84:	cd b7       	in	r28, 0x3d	; 61
     e86:	de b7       	in	r29, 0x3e	; 62
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);/* Enable TWI, generate stop */
     e88:	e6 e5       	ldi	r30, 0x56	; 86
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	84 e9       	ldi	r24, 0x94	; 148
     e8e:	80 83       	st	Z, r24
	while(TWCR&(1<<TWSTO));	/* Wait until stop condition execution */
     e90:	e6 e5       	ldi	r30, 0x56	; 86
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	88 2f       	mov	r24, r24
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	80 71       	andi	r24, 0x10	; 16
     e9c:	90 70       	andi	r25, 0x00	; 0
     e9e:	00 97       	sbiw	r24, 0x00	; 0
     ea0:	b9 f7       	brne	.-18     	; 0xe90 <I2C_Stop+0x10>
}
     ea2:	cf 91       	pop	r28
     ea4:	df 91       	pop	r29
     ea6:	08 95       	ret

00000ea8 <lcd_command>:
#include "lcd_I2C.h"



//**********************************************************************************************
void lcd_command(unsigned char cmd){
     ea8:	0f 93       	push	r16
     eaa:	1f 93       	push	r17
     eac:	df 93       	push	r29
     eae:	cf 93       	push	r28
     eb0:	cd b7       	in	r28, 0x3d	; 61
     eb2:	de b7       	in	r29, 0x3e	; 62
     eb4:	ca 54       	subi	r28, 0x4A	; 74
     eb6:	d0 40       	sbci	r29, 0x00	; 0
     eb8:	0f b6       	in	r0, 0x3f	; 63
     eba:	f8 94       	cli
     ebc:	de bf       	out	0x3e, r29	; 62
     ebe:	0f be       	out	0x3f, r0	; 63
     ec0:	cd bf       	out	0x3d, r28	; 61
     ec2:	fe 01       	movw	r30, r28
     ec4:	e6 5b       	subi	r30, 0xB6	; 182
     ec6:	ff 4f       	sbci	r31, 0xFF	; 255
     ec8:	80 83       	st	Z, r24
	 unsigned char commed;
	I2C_Start(pcf8574_address);
     eca:	80 e4       	ldi	r24, 0x40	; 64
     ecc:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <I2C_Start>
	commed=(commed & 0x0F)|(cmd & 0xF0);
     ed0:	fe 01       	movw	r30, r28
     ed2:	e7 5b       	subi	r30, 0xB7	; 183
     ed4:	ff 4f       	sbci	r31, 0xFF	; 255
     ed6:	80 81       	ld	r24, Z
     ed8:	98 2f       	mov	r25, r24
     eda:	9f 70       	andi	r25, 0x0F	; 15
     edc:	fe 01       	movw	r30, r28
     ede:	e6 5b       	subi	r30, 0xB6	; 182
     ee0:	ff 4f       	sbci	r31, 0xFF	; 255
     ee2:	80 81       	ld	r24, Z
     ee4:	80 7f       	andi	r24, 0xF0	; 240
     ee6:	89 2b       	or	r24, r25
     ee8:	fe 01       	movw	r30, r28
     eea:	e7 5b       	subi	r30, 0xB7	; 183
     eec:	ff 4f       	sbci	r31, 0xFF	; 255
     eee:	80 83       	st	Z, r24
	commed&=~(1<<lcd_RS);
     ef0:	de 01       	movw	r26, r28
     ef2:	a7 5b       	subi	r26, 0xB7	; 183
     ef4:	bf 4f       	sbci	r27, 0xFF	; 255
     ef6:	fe 01       	movw	r30, r28
     ef8:	e7 5b       	subi	r30, 0xB7	; 183
     efa:	ff 4f       	sbci	r31, 0xFF	; 255
     efc:	80 81       	ld	r24, Z
     efe:	8e 7f       	andi	r24, 0xFE	; 254
     f00:	8c 93       	st	X, r24
	commed&=~(1<<lcd_RW);
     f02:	de 01       	movw	r26, r28
     f04:	a7 5b       	subi	r26, 0xB7	; 183
     f06:	bf 4f       	sbci	r27, 0xFF	; 255
     f08:	fe 01       	movw	r30, r28
     f0a:	e7 5b       	subi	r30, 0xB7	; 183
     f0c:	ff 4f       	sbci	r31, 0xFF	; 255
     f0e:	80 81       	ld	r24, Z
     f10:	8d 7f       	andi	r24, 0xFD	; 253
     f12:	8c 93       	st	X, r24
	commed|=(1<<lcd_EN);
     f14:	de 01       	movw	r26, r28
     f16:	a7 5b       	subi	r26, 0xB7	; 183
     f18:	bf 4f       	sbci	r27, 0xFF	; 255
     f1a:	fe 01       	movw	r30, r28
     f1c:	e7 5b       	subi	r30, 0xB7	; 183
     f1e:	ff 4f       	sbci	r31, 0xFF	; 255
     f20:	80 81       	ld	r24, Z
     f22:	84 60       	ori	r24, 0x04	; 4
     f24:	8c 93       	st	X, r24
	I2C_Write(commed);
     f26:	fe 01       	movw	r30, r28
     f28:	e7 5b       	subi	r30, 0xB7	; 183
     f2a:	ff 4f       	sbci	r31, 0xFF	; 255
     f2c:	80 81       	ld	r24, Z
     f2e:	0e 94 ed 06 	call	0xdda	; 0xdda <I2C_Write>
     f32:	fe 01       	movw	r30, r28
     f34:	eb 5b       	subi	r30, 0xBB	; 187
     f36:	ff 4f       	sbci	r31, 0xFF	; 255
     f38:	80 e0       	ldi	r24, 0x00	; 0
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	a8 e4       	ldi	r26, 0x48	; 72
     f3e:	b2 e4       	ldi	r27, 0x42	; 66
     f40:	80 83       	st	Z, r24
     f42:	91 83       	std	Z+1, r25	; 0x01
     f44:	a2 83       	std	Z+2, r26	; 0x02
     f46:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     f48:	8e 01       	movw	r16, r28
     f4a:	0f 5b       	subi	r16, 0xBF	; 191
     f4c:	1f 4f       	sbci	r17, 0xFF	; 255
     f4e:	fe 01       	movw	r30, r28
     f50:	eb 5b       	subi	r30, 0xBB	; 187
     f52:	ff 4f       	sbci	r31, 0xFF	; 255
     f54:	60 81       	ld	r22, Z
     f56:	71 81       	ldd	r23, Z+1	; 0x01
     f58:	82 81       	ldd	r24, Z+2	; 0x02
     f5a:	93 81       	ldd	r25, Z+3	; 0x03
     f5c:	2b ea       	ldi	r18, 0xAB	; 171
     f5e:	3a ea       	ldi	r19, 0xAA	; 170
     f60:	4a e2       	ldi	r20, 0x2A	; 42
     f62:	50 e4       	ldi	r21, 0x40	; 64
     f64:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f68:	dc 01       	movw	r26, r24
     f6a:	cb 01       	movw	r24, r22
     f6c:	f8 01       	movw	r30, r16
     f6e:	80 83       	st	Z, r24
     f70:	91 83       	std	Z+1, r25	; 0x01
     f72:	a2 83       	std	Z+2, r26	; 0x02
     f74:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     f76:	fe 01       	movw	r30, r28
     f78:	ef 5b       	subi	r30, 0xBF	; 191
     f7a:	ff 4f       	sbci	r31, 0xFF	; 255
     f7c:	60 81       	ld	r22, Z
     f7e:	71 81       	ldd	r23, Z+1	; 0x01
     f80:	82 81       	ldd	r24, Z+2	; 0x02
     f82:	93 81       	ldd	r25, Z+3	; 0x03
     f84:	20 e0       	ldi	r18, 0x00	; 0
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	40 e8       	ldi	r20, 0x80	; 128
     f8a:	5f e3       	ldi	r21, 0x3F	; 63
     f8c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     f90:	88 23       	and	r24, r24
     f92:	34 f4       	brge	.+12     	; 0xfa0 <lcd_command+0xf8>
		__ticks = 1;
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	fe 01       	movw	r30, r28
     f98:	e0 5c       	subi	r30, 0xC0	; 192
     f9a:	ff 4f       	sbci	r31, 0xFF	; 255
     f9c:	80 83       	st	Z, r24
     f9e:	9d c0       	rjmp	.+314    	; 0x10da <lcd_command+0x232>
	else if (__tmp > 255)
     fa0:	fe 01       	movw	r30, r28
     fa2:	ef 5b       	subi	r30, 0xBF	; 191
     fa4:	ff 4f       	sbci	r31, 0xFF	; 255
     fa6:	60 81       	ld	r22, Z
     fa8:	71 81       	ldd	r23, Z+1	; 0x01
     faa:	82 81       	ldd	r24, Z+2	; 0x02
     fac:	93 81       	ldd	r25, Z+3	; 0x03
     fae:	20 e0       	ldi	r18, 0x00	; 0
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	4f e7       	ldi	r20, 0x7F	; 127
     fb4:	53 e4       	ldi	r21, 0x43	; 67
     fb6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     fba:	18 16       	cp	r1, r24
     fbc:	0c f0       	brlt	.+2      	; 0xfc0 <lcd_command+0x118>
     fbe:	7e c0       	rjmp	.+252    	; 0x10bc <lcd_command+0x214>
	{
		_delay_ms(__us / 1000.0);
     fc0:	fe 01       	movw	r30, r28
     fc2:	eb 5b       	subi	r30, 0xBB	; 187
     fc4:	ff 4f       	sbci	r31, 0xFF	; 255
     fc6:	60 81       	ld	r22, Z
     fc8:	71 81       	ldd	r23, Z+1	; 0x01
     fca:	82 81       	ldd	r24, Z+2	; 0x02
     fcc:	93 81       	ldd	r25, Z+3	; 0x03
     fce:	20 e0       	ldi	r18, 0x00	; 0
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	4a e7       	ldi	r20, 0x7A	; 122
     fd4:	54 e4       	ldi	r21, 0x44	; 68
     fd6:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
     fda:	dc 01       	movw	r26, r24
     fdc:	cb 01       	movw	r24, r22
     fde:	8c af       	std	Y+60, r24	; 0x3c
     fe0:	9d af       	std	Y+61, r25	; 0x3d
     fe2:	ae af       	std	Y+62, r26	; 0x3e
     fe4:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fe6:	6c ad       	ldd	r22, Y+60	; 0x3c
     fe8:	7d ad       	ldd	r23, Y+61	; 0x3d
     fea:	8e ad       	ldd	r24, Y+62	; 0x3e
     fec:	9f ad       	ldd	r25, Y+63	; 0x3f
     fee:	20 e0       	ldi	r18, 0x00	; 0
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	4a ef       	ldi	r20, 0xFA	; 250
     ff4:	54 e4       	ldi	r21, 0x44	; 68
     ff6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     ffa:	dc 01       	movw	r26, r24
     ffc:	cb 01       	movw	r24, r22
     ffe:	88 af       	std	Y+56, r24	; 0x38
    1000:	99 af       	std	Y+57, r25	; 0x39
    1002:	aa af       	std	Y+58, r26	; 0x3a
    1004:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    1006:	68 ad       	ldd	r22, Y+56	; 0x38
    1008:	79 ad       	ldd	r23, Y+57	; 0x39
    100a:	8a ad       	ldd	r24, Y+58	; 0x3a
    100c:	9b ad       	ldd	r25, Y+59	; 0x3b
    100e:	20 e0       	ldi	r18, 0x00	; 0
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	40 e8       	ldi	r20, 0x80	; 128
    1014:	5f e3       	ldi	r21, 0x3F	; 63
    1016:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    101a:	88 23       	and	r24, r24
    101c:	2c f4       	brge	.+10     	; 0x1028 <lcd_command+0x180>
		__ticks = 1;
    101e:	81 e0       	ldi	r24, 0x01	; 1
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	9f ab       	std	Y+55, r25	; 0x37
    1024:	8e ab       	std	Y+54, r24	; 0x36
    1026:	3f c0       	rjmp	.+126    	; 0x10a6 <lcd_command+0x1fe>
	else if (__tmp > 65535)
    1028:	68 ad       	ldd	r22, Y+56	; 0x38
    102a:	79 ad       	ldd	r23, Y+57	; 0x39
    102c:	8a ad       	ldd	r24, Y+58	; 0x3a
    102e:	9b ad       	ldd	r25, Y+59	; 0x3b
    1030:	20 e0       	ldi	r18, 0x00	; 0
    1032:	3f ef       	ldi	r19, 0xFF	; 255
    1034:	4f e7       	ldi	r20, 0x7F	; 127
    1036:	57 e4       	ldi	r21, 0x47	; 71
    1038:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    103c:	18 16       	cp	r1, r24
    103e:	4c f5       	brge	.+82     	; 0x1092 <lcd_command+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1040:	6c ad       	ldd	r22, Y+60	; 0x3c
    1042:	7d ad       	ldd	r23, Y+61	; 0x3d
    1044:	8e ad       	ldd	r24, Y+62	; 0x3e
    1046:	9f ad       	ldd	r25, Y+63	; 0x3f
    1048:	20 e0       	ldi	r18, 0x00	; 0
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	40 e2       	ldi	r20, 0x20	; 32
    104e:	51 e4       	ldi	r21, 0x41	; 65
    1050:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1054:	dc 01       	movw	r26, r24
    1056:	cb 01       	movw	r24, r22
    1058:	bc 01       	movw	r22, r24
    105a:	cd 01       	movw	r24, r26
    105c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1060:	dc 01       	movw	r26, r24
    1062:	cb 01       	movw	r24, r22
    1064:	9f ab       	std	Y+55, r25	; 0x37
    1066:	8e ab       	std	Y+54, r24	; 0x36
    1068:	0f c0       	rjmp	.+30     	; 0x1088 <lcd_command+0x1e0>
    106a:	88 ec       	ldi	r24, 0xC8	; 200
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	9d ab       	std	Y+53, r25	; 0x35
    1070:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1072:	8c a9       	ldd	r24, Y+52	; 0x34
    1074:	9d a9       	ldd	r25, Y+53	; 0x35
    1076:	01 97       	sbiw	r24, 0x01	; 1
    1078:	f1 f7       	brne	.-4      	; 0x1076 <lcd_command+0x1ce>
    107a:	9d ab       	std	Y+53, r25	; 0x35
    107c:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    107e:	8e a9       	ldd	r24, Y+54	; 0x36
    1080:	9f a9       	ldd	r25, Y+55	; 0x37
    1082:	01 97       	sbiw	r24, 0x01	; 1
    1084:	9f ab       	std	Y+55, r25	; 0x37
    1086:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1088:	8e a9       	ldd	r24, Y+54	; 0x36
    108a:	9f a9       	ldd	r25, Y+55	; 0x37
    108c:	00 97       	sbiw	r24, 0x00	; 0
    108e:	69 f7       	brne	.-38     	; 0x106a <lcd_command+0x1c2>
    1090:	2d c0       	rjmp	.+90     	; 0x10ec <lcd_command+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1092:	68 ad       	ldd	r22, Y+56	; 0x38
    1094:	79 ad       	ldd	r23, Y+57	; 0x39
    1096:	8a ad       	ldd	r24, Y+58	; 0x3a
    1098:	9b ad       	ldd	r25, Y+59	; 0x3b
    109a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    109e:	dc 01       	movw	r26, r24
    10a0:	cb 01       	movw	r24, r22
    10a2:	9f ab       	std	Y+55, r25	; 0x37
    10a4:	8e ab       	std	Y+54, r24	; 0x36
    10a6:	8e a9       	ldd	r24, Y+54	; 0x36
    10a8:	9f a9       	ldd	r25, Y+55	; 0x37
    10aa:	9b ab       	std	Y+51, r25	; 0x33
    10ac:	8a ab       	std	Y+50, r24	; 0x32
    10ae:	8a a9       	ldd	r24, Y+50	; 0x32
    10b0:	9b a9       	ldd	r25, Y+51	; 0x33
    10b2:	01 97       	sbiw	r24, 0x01	; 1
    10b4:	f1 f7       	brne	.-4      	; 0x10b2 <lcd_command+0x20a>
    10b6:	9b ab       	std	Y+51, r25	; 0x33
    10b8:	8a ab       	std	Y+50, r24	; 0x32
    10ba:	18 c0       	rjmp	.+48     	; 0x10ec <lcd_command+0x244>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    10bc:	fe 01       	movw	r30, r28
    10be:	ef 5b       	subi	r30, 0xBF	; 191
    10c0:	ff 4f       	sbci	r31, 0xFF	; 255
    10c2:	60 81       	ld	r22, Z
    10c4:	71 81       	ldd	r23, Z+1	; 0x01
    10c6:	82 81       	ldd	r24, Z+2	; 0x02
    10c8:	93 81       	ldd	r25, Z+3	; 0x03
    10ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10ce:	dc 01       	movw	r26, r24
    10d0:	cb 01       	movw	r24, r22
    10d2:	fe 01       	movw	r30, r28
    10d4:	e0 5c       	subi	r30, 0xC0	; 192
    10d6:	ff 4f       	sbci	r31, 0xFF	; 255
    10d8:	80 83       	st	Z, r24
    10da:	fe 01       	movw	r30, r28
    10dc:	e0 5c       	subi	r30, 0xC0	; 192
    10de:	ff 4f       	sbci	r31, 0xFF	; 255
    10e0:	80 81       	ld	r24, Z
    10e2:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    10e4:	89 a9       	ldd	r24, Y+49	; 0x31
    10e6:	8a 95       	dec	r24
    10e8:	f1 f7       	brne	.-4      	; 0x10e6 <lcd_command+0x23e>
    10ea:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(50);
	commed&=~(1<<lcd_EN);
    10ec:	de 01       	movw	r26, r28
    10ee:	a7 5b       	subi	r26, 0xB7	; 183
    10f0:	bf 4f       	sbci	r27, 0xFF	; 255
    10f2:	fe 01       	movw	r30, r28
    10f4:	e7 5b       	subi	r30, 0xB7	; 183
    10f6:	ff 4f       	sbci	r31, 0xFF	; 255
    10f8:	80 81       	ld	r24, Z
    10fa:	8b 7f       	andi	r24, 0xFB	; 251
    10fc:	8c 93       	st	X, r24
	I2C_Write(commed);
    10fe:	fe 01       	movw	r30, r28
    1100:	e7 5b       	subi	r30, 0xB7	; 183
    1102:	ff 4f       	sbci	r31, 0xFF	; 255
    1104:	80 81       	ld	r24, Z
    1106:	0e 94 ed 06 	call	0xdda	; 0xdda <I2C_Write>
    110a:	80 e0       	ldi	r24, 0x00	; 0
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	a8 e4       	ldi	r26, 0x48	; 72
    1110:	b2 e4       	ldi	r27, 0x42	; 66
    1112:	8d a7       	std	Y+45, r24	; 0x2d
    1114:	9e a7       	std	Y+46, r25	; 0x2e
    1116:	af a7       	std	Y+47, r26	; 0x2f
    1118:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    111a:	6d a5       	ldd	r22, Y+45	; 0x2d
    111c:	7e a5       	ldd	r23, Y+46	; 0x2e
    111e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1120:	98 a9       	ldd	r25, Y+48	; 0x30
    1122:	2b ea       	ldi	r18, 0xAB	; 171
    1124:	3a ea       	ldi	r19, 0xAA	; 170
    1126:	4a e2       	ldi	r20, 0x2A	; 42
    1128:	50 e4       	ldi	r21, 0x40	; 64
    112a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    112e:	dc 01       	movw	r26, r24
    1130:	cb 01       	movw	r24, r22
    1132:	89 a7       	std	Y+41, r24	; 0x29
    1134:	9a a7       	std	Y+42, r25	; 0x2a
    1136:	ab a7       	std	Y+43, r26	; 0x2b
    1138:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    113a:	69 a5       	ldd	r22, Y+41	; 0x29
    113c:	7a a5       	ldd	r23, Y+42	; 0x2a
    113e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1140:	9c a5       	ldd	r25, Y+44	; 0x2c
    1142:	20 e0       	ldi	r18, 0x00	; 0
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	40 e8       	ldi	r20, 0x80	; 128
    1148:	5f e3       	ldi	r21, 0x3F	; 63
    114a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    114e:	88 23       	and	r24, r24
    1150:	1c f4       	brge	.+6      	; 0x1158 <lcd_command+0x2b0>
		__ticks = 1;
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	88 a7       	std	Y+40, r24	; 0x28
    1156:	91 c0       	rjmp	.+290    	; 0x127a <lcd_command+0x3d2>
	else if (__tmp > 255)
    1158:	69 a5       	ldd	r22, Y+41	; 0x29
    115a:	7a a5       	ldd	r23, Y+42	; 0x2a
    115c:	8b a5       	ldd	r24, Y+43	; 0x2b
    115e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1160:	20 e0       	ldi	r18, 0x00	; 0
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	4f e7       	ldi	r20, 0x7F	; 127
    1166:	53 e4       	ldi	r21, 0x43	; 67
    1168:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    116c:	18 16       	cp	r1, r24
    116e:	0c f0       	brlt	.+2      	; 0x1172 <lcd_command+0x2ca>
    1170:	7b c0       	rjmp	.+246    	; 0x1268 <lcd_command+0x3c0>
	{
		_delay_ms(__us / 1000.0);
    1172:	6d a5       	ldd	r22, Y+45	; 0x2d
    1174:	7e a5       	ldd	r23, Y+46	; 0x2e
    1176:	8f a5       	ldd	r24, Y+47	; 0x2f
    1178:	98 a9       	ldd	r25, Y+48	; 0x30
    117a:	20 e0       	ldi	r18, 0x00	; 0
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	4a e7       	ldi	r20, 0x7A	; 122
    1180:	54 e4       	ldi	r21, 0x44	; 68
    1182:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1186:	dc 01       	movw	r26, r24
    1188:	cb 01       	movw	r24, r22
    118a:	8c a3       	std	Y+36, r24	; 0x24
    118c:	9d a3       	std	Y+37, r25	; 0x25
    118e:	ae a3       	std	Y+38, r26	; 0x26
    1190:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1192:	6c a1       	ldd	r22, Y+36	; 0x24
    1194:	7d a1       	ldd	r23, Y+37	; 0x25
    1196:	8e a1       	ldd	r24, Y+38	; 0x26
    1198:	9f a1       	ldd	r25, Y+39	; 0x27
    119a:	20 e0       	ldi	r18, 0x00	; 0
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	4a ef       	ldi	r20, 0xFA	; 250
    11a0:	54 e4       	ldi	r21, 0x44	; 68
    11a2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11a6:	dc 01       	movw	r26, r24
    11a8:	cb 01       	movw	r24, r22
    11aa:	88 a3       	std	Y+32, r24	; 0x20
    11ac:	99 a3       	std	Y+33, r25	; 0x21
    11ae:	aa a3       	std	Y+34, r26	; 0x22
    11b0:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    11b2:	68 a1       	ldd	r22, Y+32	; 0x20
    11b4:	79 a1       	ldd	r23, Y+33	; 0x21
    11b6:	8a a1       	ldd	r24, Y+34	; 0x22
    11b8:	9b a1       	ldd	r25, Y+35	; 0x23
    11ba:	20 e0       	ldi	r18, 0x00	; 0
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	40 e8       	ldi	r20, 0x80	; 128
    11c0:	5f e3       	ldi	r21, 0x3F	; 63
    11c2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    11c6:	88 23       	and	r24, r24
    11c8:	2c f4       	brge	.+10     	; 0x11d4 <lcd_command+0x32c>
		__ticks = 1;
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	9f 8f       	std	Y+31, r25	; 0x1f
    11d0:	8e 8f       	std	Y+30, r24	; 0x1e
    11d2:	3f c0       	rjmp	.+126    	; 0x1252 <lcd_command+0x3aa>
	else if (__tmp > 65535)
    11d4:	68 a1       	ldd	r22, Y+32	; 0x20
    11d6:	79 a1       	ldd	r23, Y+33	; 0x21
    11d8:	8a a1       	ldd	r24, Y+34	; 0x22
    11da:	9b a1       	ldd	r25, Y+35	; 0x23
    11dc:	20 e0       	ldi	r18, 0x00	; 0
    11de:	3f ef       	ldi	r19, 0xFF	; 255
    11e0:	4f e7       	ldi	r20, 0x7F	; 127
    11e2:	57 e4       	ldi	r21, 0x47	; 71
    11e4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    11e8:	18 16       	cp	r1, r24
    11ea:	4c f5       	brge	.+82     	; 0x123e <lcd_command+0x396>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11ec:	6c a1       	ldd	r22, Y+36	; 0x24
    11ee:	7d a1       	ldd	r23, Y+37	; 0x25
    11f0:	8e a1       	ldd	r24, Y+38	; 0x26
    11f2:	9f a1       	ldd	r25, Y+39	; 0x27
    11f4:	20 e0       	ldi	r18, 0x00	; 0
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	40 e2       	ldi	r20, 0x20	; 32
    11fa:	51 e4       	ldi	r21, 0x41	; 65
    11fc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1200:	dc 01       	movw	r26, r24
    1202:	cb 01       	movw	r24, r22
    1204:	bc 01       	movw	r22, r24
    1206:	cd 01       	movw	r24, r26
    1208:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    120c:	dc 01       	movw	r26, r24
    120e:	cb 01       	movw	r24, r22
    1210:	9f 8f       	std	Y+31, r25	; 0x1f
    1212:	8e 8f       	std	Y+30, r24	; 0x1e
    1214:	0f c0       	rjmp	.+30     	; 0x1234 <lcd_command+0x38c>
    1216:	88 ec       	ldi	r24, 0xC8	; 200
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	9d 8f       	std	Y+29, r25	; 0x1d
    121c:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    121e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1220:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1222:	01 97       	sbiw	r24, 0x01	; 1
    1224:	f1 f7       	brne	.-4      	; 0x1222 <lcd_command+0x37a>
    1226:	9d 8f       	std	Y+29, r25	; 0x1d
    1228:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    122a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    122c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    122e:	01 97       	sbiw	r24, 0x01	; 1
    1230:	9f 8f       	std	Y+31, r25	; 0x1f
    1232:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1234:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1236:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1238:	00 97       	sbiw	r24, 0x00	; 0
    123a:	69 f7       	brne	.-38     	; 0x1216 <lcd_command+0x36e>
    123c:	24 c0       	rjmp	.+72     	; 0x1286 <lcd_command+0x3de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    123e:	68 a1       	ldd	r22, Y+32	; 0x20
    1240:	79 a1       	ldd	r23, Y+33	; 0x21
    1242:	8a a1       	ldd	r24, Y+34	; 0x22
    1244:	9b a1       	ldd	r25, Y+35	; 0x23
    1246:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    124a:	dc 01       	movw	r26, r24
    124c:	cb 01       	movw	r24, r22
    124e:	9f 8f       	std	Y+31, r25	; 0x1f
    1250:	8e 8f       	std	Y+30, r24	; 0x1e
    1252:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1254:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1256:	9b 8f       	std	Y+27, r25	; 0x1b
    1258:	8a 8f       	std	Y+26, r24	; 0x1a
    125a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    125c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    125e:	01 97       	sbiw	r24, 0x01	; 1
    1260:	f1 f7       	brne	.-4      	; 0x125e <lcd_command+0x3b6>
    1262:	9b 8f       	std	Y+27, r25	; 0x1b
    1264:	8a 8f       	std	Y+26, r24	; 0x1a
    1266:	0f c0       	rjmp	.+30     	; 0x1286 <lcd_command+0x3de>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1268:	69 a5       	ldd	r22, Y+41	; 0x29
    126a:	7a a5       	ldd	r23, Y+42	; 0x2a
    126c:	8b a5       	ldd	r24, Y+43	; 0x2b
    126e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1270:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1274:	dc 01       	movw	r26, r24
    1276:	cb 01       	movw	r24, r22
    1278:	88 a7       	std	Y+40, r24	; 0x28
    127a:	88 a5       	ldd	r24, Y+40	; 0x28
    127c:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    127e:	89 8d       	ldd	r24, Y+25	; 0x19
    1280:	8a 95       	dec	r24
    1282:	f1 f7       	brne	.-4      	; 0x1280 <lcd_command+0x3d8>
    1284:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(50);
	commed =(commed & 0x0F)|(cmd<<4);
    1286:	fe 01       	movw	r30, r28
    1288:	e7 5b       	subi	r30, 0xB7	; 183
    128a:	ff 4f       	sbci	r31, 0xFF	; 255
    128c:	80 81       	ld	r24, Z
    128e:	28 2f       	mov	r18, r24
    1290:	2f 70       	andi	r18, 0x0F	; 15
    1292:	fe 01       	movw	r30, r28
    1294:	e6 5b       	subi	r30, 0xB6	; 182
    1296:	ff 4f       	sbci	r31, 0xFF	; 255
    1298:	80 81       	ld	r24, Z
    129a:	88 2f       	mov	r24, r24
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	82 95       	swap	r24
    12a0:	92 95       	swap	r25
    12a2:	90 7f       	andi	r25, 0xF0	; 240
    12a4:	98 27       	eor	r25, r24
    12a6:	80 7f       	andi	r24, 0xF0	; 240
    12a8:	98 27       	eor	r25, r24
    12aa:	82 2b       	or	r24, r18
    12ac:	fe 01       	movw	r30, r28
    12ae:	e7 5b       	subi	r30, 0xB7	; 183
    12b0:	ff 4f       	sbci	r31, 0xFF	; 255
    12b2:	80 83       	st	Z, r24
	commed|=(1<<lcd_EN);
    12b4:	de 01       	movw	r26, r28
    12b6:	a7 5b       	subi	r26, 0xB7	; 183
    12b8:	bf 4f       	sbci	r27, 0xFF	; 255
    12ba:	fe 01       	movw	r30, r28
    12bc:	e7 5b       	subi	r30, 0xB7	; 183
    12be:	ff 4f       	sbci	r31, 0xFF	; 255
    12c0:	80 81       	ld	r24, Z
    12c2:	84 60       	ori	r24, 0x04	; 4
    12c4:	8c 93       	st	X, r24
	I2C_Write(commed);
    12c6:	fe 01       	movw	r30, r28
    12c8:	e7 5b       	subi	r30, 0xB7	; 183
    12ca:	ff 4f       	sbci	r31, 0xFF	; 255
    12cc:	80 81       	ld	r24, Z
    12ce:	0e 94 ed 06 	call	0xdda	; 0xdda <I2C_Write>
    12d2:	80 e0       	ldi	r24, 0x00	; 0
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	a8 e4       	ldi	r26, 0x48	; 72
    12d8:	b2 e4       	ldi	r27, 0x42	; 66
    12da:	8d 8b       	std	Y+21, r24	; 0x15
    12dc:	9e 8b       	std	Y+22, r25	; 0x16
    12de:	af 8b       	std	Y+23, r26	; 0x17
    12e0:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    12e2:	6d 89       	ldd	r22, Y+21	; 0x15
    12e4:	7e 89       	ldd	r23, Y+22	; 0x16
    12e6:	8f 89       	ldd	r24, Y+23	; 0x17
    12e8:	98 8d       	ldd	r25, Y+24	; 0x18
    12ea:	2b ea       	ldi	r18, 0xAB	; 171
    12ec:	3a ea       	ldi	r19, 0xAA	; 170
    12ee:	4a e2       	ldi	r20, 0x2A	; 42
    12f0:	50 e4       	ldi	r21, 0x40	; 64
    12f2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12f6:	dc 01       	movw	r26, r24
    12f8:	cb 01       	movw	r24, r22
    12fa:	89 8b       	std	Y+17, r24	; 0x11
    12fc:	9a 8b       	std	Y+18, r25	; 0x12
    12fe:	ab 8b       	std	Y+19, r26	; 0x13
    1300:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1302:	69 89       	ldd	r22, Y+17	; 0x11
    1304:	7a 89       	ldd	r23, Y+18	; 0x12
    1306:	8b 89       	ldd	r24, Y+19	; 0x13
    1308:	9c 89       	ldd	r25, Y+20	; 0x14
    130a:	20 e0       	ldi	r18, 0x00	; 0
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	40 e8       	ldi	r20, 0x80	; 128
    1310:	5f e3       	ldi	r21, 0x3F	; 63
    1312:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1316:	88 23       	and	r24, r24
    1318:	1c f4       	brge	.+6      	; 0x1320 <lcd_command+0x478>
		__ticks = 1;
    131a:	81 e0       	ldi	r24, 0x01	; 1
    131c:	88 8b       	std	Y+16, r24	; 0x10
    131e:	91 c0       	rjmp	.+290    	; 0x1442 <lcd_command+0x59a>
	else if (__tmp > 255)
    1320:	69 89       	ldd	r22, Y+17	; 0x11
    1322:	7a 89       	ldd	r23, Y+18	; 0x12
    1324:	8b 89       	ldd	r24, Y+19	; 0x13
    1326:	9c 89       	ldd	r25, Y+20	; 0x14
    1328:	20 e0       	ldi	r18, 0x00	; 0
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	4f e7       	ldi	r20, 0x7F	; 127
    132e:	53 e4       	ldi	r21, 0x43	; 67
    1330:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1334:	18 16       	cp	r1, r24
    1336:	0c f0       	brlt	.+2      	; 0x133a <lcd_command+0x492>
    1338:	7b c0       	rjmp	.+246    	; 0x1430 <lcd_command+0x588>
	{
		_delay_ms(__us / 1000.0);
    133a:	6d 89       	ldd	r22, Y+21	; 0x15
    133c:	7e 89       	ldd	r23, Y+22	; 0x16
    133e:	8f 89       	ldd	r24, Y+23	; 0x17
    1340:	98 8d       	ldd	r25, Y+24	; 0x18
    1342:	20 e0       	ldi	r18, 0x00	; 0
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	4a e7       	ldi	r20, 0x7A	; 122
    1348:	54 e4       	ldi	r21, 0x44	; 68
    134a:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    134e:	dc 01       	movw	r26, r24
    1350:	cb 01       	movw	r24, r22
    1352:	8c 87       	std	Y+12, r24	; 0x0c
    1354:	9d 87       	std	Y+13, r25	; 0x0d
    1356:	ae 87       	std	Y+14, r26	; 0x0e
    1358:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    135a:	6c 85       	ldd	r22, Y+12	; 0x0c
    135c:	7d 85       	ldd	r23, Y+13	; 0x0d
    135e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1360:	9f 85       	ldd	r25, Y+15	; 0x0f
    1362:	20 e0       	ldi	r18, 0x00	; 0
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	4a ef       	ldi	r20, 0xFA	; 250
    1368:	54 e4       	ldi	r21, 0x44	; 68
    136a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    136e:	dc 01       	movw	r26, r24
    1370:	cb 01       	movw	r24, r22
    1372:	88 87       	std	Y+8, r24	; 0x08
    1374:	99 87       	std	Y+9, r25	; 0x09
    1376:	aa 87       	std	Y+10, r26	; 0x0a
    1378:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    137a:	68 85       	ldd	r22, Y+8	; 0x08
    137c:	79 85       	ldd	r23, Y+9	; 0x09
    137e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1380:	9b 85       	ldd	r25, Y+11	; 0x0b
    1382:	20 e0       	ldi	r18, 0x00	; 0
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	40 e8       	ldi	r20, 0x80	; 128
    1388:	5f e3       	ldi	r21, 0x3F	; 63
    138a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    138e:	88 23       	and	r24, r24
    1390:	2c f4       	brge	.+10     	; 0x139c <lcd_command+0x4f4>
		__ticks = 1;
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	9f 83       	std	Y+7, r25	; 0x07
    1398:	8e 83       	std	Y+6, r24	; 0x06
    139a:	3f c0       	rjmp	.+126    	; 0x141a <lcd_command+0x572>
	else if (__tmp > 65535)
    139c:	68 85       	ldd	r22, Y+8	; 0x08
    139e:	79 85       	ldd	r23, Y+9	; 0x09
    13a0:	8a 85       	ldd	r24, Y+10	; 0x0a
    13a2:	9b 85       	ldd	r25, Y+11	; 0x0b
    13a4:	20 e0       	ldi	r18, 0x00	; 0
    13a6:	3f ef       	ldi	r19, 0xFF	; 255
    13a8:	4f e7       	ldi	r20, 0x7F	; 127
    13aa:	57 e4       	ldi	r21, 0x47	; 71
    13ac:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    13b0:	18 16       	cp	r1, r24
    13b2:	4c f5       	brge	.+82     	; 0x1406 <lcd_command+0x55e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13b4:	6c 85       	ldd	r22, Y+12	; 0x0c
    13b6:	7d 85       	ldd	r23, Y+13	; 0x0d
    13b8:	8e 85       	ldd	r24, Y+14	; 0x0e
    13ba:	9f 85       	ldd	r25, Y+15	; 0x0f
    13bc:	20 e0       	ldi	r18, 0x00	; 0
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	40 e2       	ldi	r20, 0x20	; 32
    13c2:	51 e4       	ldi	r21, 0x41	; 65
    13c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13c8:	dc 01       	movw	r26, r24
    13ca:	cb 01       	movw	r24, r22
    13cc:	bc 01       	movw	r22, r24
    13ce:	cd 01       	movw	r24, r26
    13d0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13d4:	dc 01       	movw	r26, r24
    13d6:	cb 01       	movw	r24, r22
    13d8:	9f 83       	std	Y+7, r25	; 0x07
    13da:	8e 83       	std	Y+6, r24	; 0x06
    13dc:	0f c0       	rjmp	.+30     	; 0x13fc <lcd_command+0x554>
    13de:	88 ec       	ldi	r24, 0xC8	; 200
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	9d 83       	std	Y+5, r25	; 0x05
    13e4:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13e6:	8c 81       	ldd	r24, Y+4	; 0x04
    13e8:	9d 81       	ldd	r25, Y+5	; 0x05
    13ea:	01 97       	sbiw	r24, 0x01	; 1
    13ec:	f1 f7       	brne	.-4      	; 0x13ea <lcd_command+0x542>
    13ee:	9d 83       	std	Y+5, r25	; 0x05
    13f0:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13f2:	8e 81       	ldd	r24, Y+6	; 0x06
    13f4:	9f 81       	ldd	r25, Y+7	; 0x07
    13f6:	01 97       	sbiw	r24, 0x01	; 1
    13f8:	9f 83       	std	Y+7, r25	; 0x07
    13fa:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13fc:	8e 81       	ldd	r24, Y+6	; 0x06
    13fe:	9f 81       	ldd	r25, Y+7	; 0x07
    1400:	00 97       	sbiw	r24, 0x00	; 0
    1402:	69 f7       	brne	.-38     	; 0x13de <lcd_command+0x536>
    1404:	24 c0       	rjmp	.+72     	; 0x144e <lcd_command+0x5a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1406:	68 85       	ldd	r22, Y+8	; 0x08
    1408:	79 85       	ldd	r23, Y+9	; 0x09
    140a:	8a 85       	ldd	r24, Y+10	; 0x0a
    140c:	9b 85       	ldd	r25, Y+11	; 0x0b
    140e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1412:	dc 01       	movw	r26, r24
    1414:	cb 01       	movw	r24, r22
    1416:	9f 83       	std	Y+7, r25	; 0x07
    1418:	8e 83       	std	Y+6, r24	; 0x06
    141a:	8e 81       	ldd	r24, Y+6	; 0x06
    141c:	9f 81       	ldd	r25, Y+7	; 0x07
    141e:	9b 83       	std	Y+3, r25	; 0x03
    1420:	8a 83       	std	Y+2, r24	; 0x02
    1422:	8a 81       	ldd	r24, Y+2	; 0x02
    1424:	9b 81       	ldd	r25, Y+3	; 0x03
    1426:	01 97       	sbiw	r24, 0x01	; 1
    1428:	f1 f7       	brne	.-4      	; 0x1426 <lcd_command+0x57e>
    142a:	9b 83       	std	Y+3, r25	; 0x03
    142c:	8a 83       	std	Y+2, r24	; 0x02
    142e:	0f c0       	rjmp	.+30     	; 0x144e <lcd_command+0x5a6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1430:	69 89       	ldd	r22, Y+17	; 0x11
    1432:	7a 89       	ldd	r23, Y+18	; 0x12
    1434:	8b 89       	ldd	r24, Y+19	; 0x13
    1436:	9c 89       	ldd	r25, Y+20	; 0x14
    1438:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    143c:	dc 01       	movw	r26, r24
    143e:	cb 01       	movw	r24, r22
    1440:	88 8b       	std	Y+16, r24	; 0x10
    1442:	88 89       	ldd	r24, Y+16	; 0x10
    1444:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1446:	89 81       	ldd	r24, Y+1	; 0x01
    1448:	8a 95       	dec	r24
    144a:	f1 f7       	brne	.-4      	; 0x1448 <lcd_command+0x5a0>
    144c:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(50);
	commed&=~(1<<lcd_EN);
    144e:	de 01       	movw	r26, r28
    1450:	a7 5b       	subi	r26, 0xB7	; 183
    1452:	bf 4f       	sbci	r27, 0xFF	; 255
    1454:	fe 01       	movw	r30, r28
    1456:	e7 5b       	subi	r30, 0xB7	; 183
    1458:	ff 4f       	sbci	r31, 0xFF	; 255
    145a:	80 81       	ld	r24, Z
    145c:	8b 7f       	andi	r24, 0xFB	; 251
    145e:	8c 93       	st	X, r24
	I2C_Write(commed);
    1460:	fe 01       	movw	r30, r28
    1462:	e7 5b       	subi	r30, 0xB7	; 183
    1464:	ff 4f       	sbci	r31, 0xFF	; 255
    1466:	80 81       	ld	r24, Z
    1468:	0e 94 ed 06 	call	0xdda	; 0xdda <I2C_Write>
	I2C_Stop();
    146c:	0e 94 40 07 	call	0xe80	; 0xe80 <I2C_Stop>

}
    1470:	c6 5b       	subi	r28, 0xB6	; 182
    1472:	df 4f       	sbci	r29, 0xFF	; 255
    1474:	0f b6       	in	r0, 0x3f	; 63
    1476:	f8 94       	cli
    1478:	de bf       	out	0x3e, r29	; 62
    147a:	0f be       	out	0x3f, r0	; 63
    147c:	cd bf       	out	0x3d, r28	; 61
    147e:	cf 91       	pop	r28
    1480:	df 91       	pop	r29
    1482:	1f 91       	pop	r17
    1484:	0f 91       	pop	r16
    1486:	08 95       	ret

00001488 <lcd_data>:

//********************************************************************************************
void lcd_data(unsigned char data){
    1488:	0f 93       	push	r16
    148a:	1f 93       	push	r17
    148c:	df 93       	push	r29
    148e:	cf 93       	push	r28
    1490:	cd b7       	in	r28, 0x3d	; 61
    1492:	de b7       	in	r29, 0x3e	; 62
    1494:	ca 54       	subi	r28, 0x4A	; 74
    1496:	d0 40       	sbci	r29, 0x00	; 0
    1498:	0f b6       	in	r0, 0x3f	; 63
    149a:	f8 94       	cli
    149c:	de bf       	out	0x3e, r29	; 62
    149e:	0f be       	out	0x3f, r0	; 63
    14a0:	cd bf       	out	0x3d, r28	; 61
    14a2:	fe 01       	movw	r30, r28
    14a4:	e6 5b       	subi	r30, 0xB6	; 182
    14a6:	ff 4f       	sbci	r31, 0xFF	; 255
    14a8:	80 83       	st	Z, r24
 unsigned char datas;
	I2C_Start(pcf8574_address);
    14aa:	80 e4       	ldi	r24, 0x40	; 64
    14ac:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <I2C_Start>
	datas=(datas & 0x0F)|(data & 0xF0);
    14b0:	fe 01       	movw	r30, r28
    14b2:	e7 5b       	subi	r30, 0xB7	; 183
    14b4:	ff 4f       	sbci	r31, 0xFF	; 255
    14b6:	80 81       	ld	r24, Z
    14b8:	98 2f       	mov	r25, r24
    14ba:	9f 70       	andi	r25, 0x0F	; 15
    14bc:	fe 01       	movw	r30, r28
    14be:	e6 5b       	subi	r30, 0xB6	; 182
    14c0:	ff 4f       	sbci	r31, 0xFF	; 255
    14c2:	80 81       	ld	r24, Z
    14c4:	80 7f       	andi	r24, 0xF0	; 240
    14c6:	89 2b       	or	r24, r25
    14c8:	fe 01       	movw	r30, r28
    14ca:	e7 5b       	subi	r30, 0xB7	; 183
    14cc:	ff 4f       	sbci	r31, 0xFF	; 255
    14ce:	80 83       	st	Z, r24
	datas|=(1<<lcd_RS);
    14d0:	de 01       	movw	r26, r28
    14d2:	a7 5b       	subi	r26, 0xB7	; 183
    14d4:	bf 4f       	sbci	r27, 0xFF	; 255
    14d6:	fe 01       	movw	r30, r28
    14d8:	e7 5b       	subi	r30, 0xB7	; 183
    14da:	ff 4f       	sbci	r31, 0xFF	; 255
    14dc:	80 81       	ld	r24, Z
    14de:	81 60       	ori	r24, 0x01	; 1
    14e0:	8c 93       	st	X, r24
	datas&=~(1<<lcd_RW);
    14e2:	de 01       	movw	r26, r28
    14e4:	a7 5b       	subi	r26, 0xB7	; 183
    14e6:	bf 4f       	sbci	r27, 0xFF	; 255
    14e8:	fe 01       	movw	r30, r28
    14ea:	e7 5b       	subi	r30, 0xB7	; 183
    14ec:	ff 4f       	sbci	r31, 0xFF	; 255
    14ee:	80 81       	ld	r24, Z
    14f0:	8d 7f       	andi	r24, 0xFD	; 253
    14f2:	8c 93       	st	X, r24
	datas|=(1<<lcd_EN);
    14f4:	de 01       	movw	r26, r28
    14f6:	a7 5b       	subi	r26, 0xB7	; 183
    14f8:	bf 4f       	sbci	r27, 0xFF	; 255
    14fa:	fe 01       	movw	r30, r28
    14fc:	e7 5b       	subi	r30, 0xB7	; 183
    14fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1500:	80 81       	ld	r24, Z
    1502:	84 60       	ori	r24, 0x04	; 4
    1504:	8c 93       	st	X, r24
	I2C_Write(datas);
    1506:	fe 01       	movw	r30, r28
    1508:	e7 5b       	subi	r30, 0xB7	; 183
    150a:	ff 4f       	sbci	r31, 0xFF	; 255
    150c:	80 81       	ld	r24, Z
    150e:	0e 94 ed 06 	call	0xdda	; 0xdda <I2C_Write>
    1512:	fe 01       	movw	r30, r28
    1514:	eb 5b       	subi	r30, 0xBB	; 187
    1516:	ff 4f       	sbci	r31, 0xFF	; 255
    1518:	80 e0       	ldi	r24, 0x00	; 0
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	a8 e4       	ldi	r26, 0x48	; 72
    151e:	b2 e4       	ldi	r27, 0x42	; 66
    1520:	80 83       	st	Z, r24
    1522:	91 83       	std	Z+1, r25	; 0x01
    1524:	a2 83       	std	Z+2, r26	; 0x02
    1526:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1528:	8e 01       	movw	r16, r28
    152a:	0f 5b       	subi	r16, 0xBF	; 191
    152c:	1f 4f       	sbci	r17, 0xFF	; 255
    152e:	fe 01       	movw	r30, r28
    1530:	eb 5b       	subi	r30, 0xBB	; 187
    1532:	ff 4f       	sbci	r31, 0xFF	; 255
    1534:	60 81       	ld	r22, Z
    1536:	71 81       	ldd	r23, Z+1	; 0x01
    1538:	82 81       	ldd	r24, Z+2	; 0x02
    153a:	93 81       	ldd	r25, Z+3	; 0x03
    153c:	2b ea       	ldi	r18, 0xAB	; 171
    153e:	3a ea       	ldi	r19, 0xAA	; 170
    1540:	4a e2       	ldi	r20, 0x2A	; 42
    1542:	50 e4       	ldi	r21, 0x40	; 64
    1544:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1548:	dc 01       	movw	r26, r24
    154a:	cb 01       	movw	r24, r22
    154c:	f8 01       	movw	r30, r16
    154e:	80 83       	st	Z, r24
    1550:	91 83       	std	Z+1, r25	; 0x01
    1552:	a2 83       	std	Z+2, r26	; 0x02
    1554:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1556:	fe 01       	movw	r30, r28
    1558:	ef 5b       	subi	r30, 0xBF	; 191
    155a:	ff 4f       	sbci	r31, 0xFF	; 255
    155c:	60 81       	ld	r22, Z
    155e:	71 81       	ldd	r23, Z+1	; 0x01
    1560:	82 81       	ldd	r24, Z+2	; 0x02
    1562:	93 81       	ldd	r25, Z+3	; 0x03
    1564:	20 e0       	ldi	r18, 0x00	; 0
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	40 e8       	ldi	r20, 0x80	; 128
    156a:	5f e3       	ldi	r21, 0x3F	; 63
    156c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1570:	88 23       	and	r24, r24
    1572:	34 f4       	brge	.+12     	; 0x1580 <lcd_data+0xf8>
		__ticks = 1;
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	fe 01       	movw	r30, r28
    1578:	e0 5c       	subi	r30, 0xC0	; 192
    157a:	ff 4f       	sbci	r31, 0xFF	; 255
    157c:	80 83       	st	Z, r24
    157e:	9d c0       	rjmp	.+314    	; 0x16ba <lcd_data+0x232>
	else if (__tmp > 255)
    1580:	fe 01       	movw	r30, r28
    1582:	ef 5b       	subi	r30, 0xBF	; 191
    1584:	ff 4f       	sbci	r31, 0xFF	; 255
    1586:	60 81       	ld	r22, Z
    1588:	71 81       	ldd	r23, Z+1	; 0x01
    158a:	82 81       	ldd	r24, Z+2	; 0x02
    158c:	93 81       	ldd	r25, Z+3	; 0x03
    158e:	20 e0       	ldi	r18, 0x00	; 0
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	4f e7       	ldi	r20, 0x7F	; 127
    1594:	53 e4       	ldi	r21, 0x43	; 67
    1596:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    159a:	18 16       	cp	r1, r24
    159c:	0c f0       	brlt	.+2      	; 0x15a0 <lcd_data+0x118>
    159e:	7e c0       	rjmp	.+252    	; 0x169c <lcd_data+0x214>
	{
		_delay_ms(__us / 1000.0);
    15a0:	fe 01       	movw	r30, r28
    15a2:	eb 5b       	subi	r30, 0xBB	; 187
    15a4:	ff 4f       	sbci	r31, 0xFF	; 255
    15a6:	60 81       	ld	r22, Z
    15a8:	71 81       	ldd	r23, Z+1	; 0x01
    15aa:	82 81       	ldd	r24, Z+2	; 0x02
    15ac:	93 81       	ldd	r25, Z+3	; 0x03
    15ae:	20 e0       	ldi	r18, 0x00	; 0
    15b0:	30 e0       	ldi	r19, 0x00	; 0
    15b2:	4a e7       	ldi	r20, 0x7A	; 122
    15b4:	54 e4       	ldi	r21, 0x44	; 68
    15b6:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    15ba:	dc 01       	movw	r26, r24
    15bc:	cb 01       	movw	r24, r22
    15be:	8c af       	std	Y+60, r24	; 0x3c
    15c0:	9d af       	std	Y+61, r25	; 0x3d
    15c2:	ae af       	std	Y+62, r26	; 0x3e
    15c4:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15c6:	6c ad       	ldd	r22, Y+60	; 0x3c
    15c8:	7d ad       	ldd	r23, Y+61	; 0x3d
    15ca:	8e ad       	ldd	r24, Y+62	; 0x3e
    15cc:	9f ad       	ldd	r25, Y+63	; 0x3f
    15ce:	20 e0       	ldi	r18, 0x00	; 0
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	4a ef       	ldi	r20, 0xFA	; 250
    15d4:	54 e4       	ldi	r21, 0x44	; 68
    15d6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15da:	dc 01       	movw	r26, r24
    15dc:	cb 01       	movw	r24, r22
    15de:	88 af       	std	Y+56, r24	; 0x38
    15e0:	99 af       	std	Y+57, r25	; 0x39
    15e2:	aa af       	std	Y+58, r26	; 0x3a
    15e4:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    15e6:	68 ad       	ldd	r22, Y+56	; 0x38
    15e8:	79 ad       	ldd	r23, Y+57	; 0x39
    15ea:	8a ad       	ldd	r24, Y+58	; 0x3a
    15ec:	9b ad       	ldd	r25, Y+59	; 0x3b
    15ee:	20 e0       	ldi	r18, 0x00	; 0
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	40 e8       	ldi	r20, 0x80	; 128
    15f4:	5f e3       	ldi	r21, 0x3F	; 63
    15f6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    15fa:	88 23       	and	r24, r24
    15fc:	2c f4       	brge	.+10     	; 0x1608 <lcd_data+0x180>
		__ticks = 1;
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	9f ab       	std	Y+55, r25	; 0x37
    1604:	8e ab       	std	Y+54, r24	; 0x36
    1606:	3f c0       	rjmp	.+126    	; 0x1686 <lcd_data+0x1fe>
	else if (__tmp > 65535)
    1608:	68 ad       	ldd	r22, Y+56	; 0x38
    160a:	79 ad       	ldd	r23, Y+57	; 0x39
    160c:	8a ad       	ldd	r24, Y+58	; 0x3a
    160e:	9b ad       	ldd	r25, Y+59	; 0x3b
    1610:	20 e0       	ldi	r18, 0x00	; 0
    1612:	3f ef       	ldi	r19, 0xFF	; 255
    1614:	4f e7       	ldi	r20, 0x7F	; 127
    1616:	57 e4       	ldi	r21, 0x47	; 71
    1618:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    161c:	18 16       	cp	r1, r24
    161e:	4c f5       	brge	.+82     	; 0x1672 <lcd_data+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1620:	6c ad       	ldd	r22, Y+60	; 0x3c
    1622:	7d ad       	ldd	r23, Y+61	; 0x3d
    1624:	8e ad       	ldd	r24, Y+62	; 0x3e
    1626:	9f ad       	ldd	r25, Y+63	; 0x3f
    1628:	20 e0       	ldi	r18, 0x00	; 0
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	40 e2       	ldi	r20, 0x20	; 32
    162e:	51 e4       	ldi	r21, 0x41	; 65
    1630:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1634:	dc 01       	movw	r26, r24
    1636:	cb 01       	movw	r24, r22
    1638:	bc 01       	movw	r22, r24
    163a:	cd 01       	movw	r24, r26
    163c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1640:	dc 01       	movw	r26, r24
    1642:	cb 01       	movw	r24, r22
    1644:	9f ab       	std	Y+55, r25	; 0x37
    1646:	8e ab       	std	Y+54, r24	; 0x36
    1648:	0f c0       	rjmp	.+30     	; 0x1668 <lcd_data+0x1e0>
    164a:	88 ec       	ldi	r24, 0xC8	; 200
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	9d ab       	std	Y+53, r25	; 0x35
    1650:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1652:	8c a9       	ldd	r24, Y+52	; 0x34
    1654:	9d a9       	ldd	r25, Y+53	; 0x35
    1656:	01 97       	sbiw	r24, 0x01	; 1
    1658:	f1 f7       	brne	.-4      	; 0x1656 <lcd_data+0x1ce>
    165a:	9d ab       	std	Y+53, r25	; 0x35
    165c:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    165e:	8e a9       	ldd	r24, Y+54	; 0x36
    1660:	9f a9       	ldd	r25, Y+55	; 0x37
    1662:	01 97       	sbiw	r24, 0x01	; 1
    1664:	9f ab       	std	Y+55, r25	; 0x37
    1666:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1668:	8e a9       	ldd	r24, Y+54	; 0x36
    166a:	9f a9       	ldd	r25, Y+55	; 0x37
    166c:	00 97       	sbiw	r24, 0x00	; 0
    166e:	69 f7       	brne	.-38     	; 0x164a <lcd_data+0x1c2>
    1670:	2d c0       	rjmp	.+90     	; 0x16cc <lcd_data+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1672:	68 ad       	ldd	r22, Y+56	; 0x38
    1674:	79 ad       	ldd	r23, Y+57	; 0x39
    1676:	8a ad       	ldd	r24, Y+58	; 0x3a
    1678:	9b ad       	ldd	r25, Y+59	; 0x3b
    167a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    167e:	dc 01       	movw	r26, r24
    1680:	cb 01       	movw	r24, r22
    1682:	9f ab       	std	Y+55, r25	; 0x37
    1684:	8e ab       	std	Y+54, r24	; 0x36
    1686:	8e a9       	ldd	r24, Y+54	; 0x36
    1688:	9f a9       	ldd	r25, Y+55	; 0x37
    168a:	9b ab       	std	Y+51, r25	; 0x33
    168c:	8a ab       	std	Y+50, r24	; 0x32
    168e:	8a a9       	ldd	r24, Y+50	; 0x32
    1690:	9b a9       	ldd	r25, Y+51	; 0x33
    1692:	01 97       	sbiw	r24, 0x01	; 1
    1694:	f1 f7       	brne	.-4      	; 0x1692 <lcd_data+0x20a>
    1696:	9b ab       	std	Y+51, r25	; 0x33
    1698:	8a ab       	std	Y+50, r24	; 0x32
    169a:	18 c0       	rjmp	.+48     	; 0x16cc <lcd_data+0x244>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    169c:	fe 01       	movw	r30, r28
    169e:	ef 5b       	subi	r30, 0xBF	; 191
    16a0:	ff 4f       	sbci	r31, 0xFF	; 255
    16a2:	60 81       	ld	r22, Z
    16a4:	71 81       	ldd	r23, Z+1	; 0x01
    16a6:	82 81       	ldd	r24, Z+2	; 0x02
    16a8:	93 81       	ldd	r25, Z+3	; 0x03
    16aa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16ae:	dc 01       	movw	r26, r24
    16b0:	cb 01       	movw	r24, r22
    16b2:	fe 01       	movw	r30, r28
    16b4:	e0 5c       	subi	r30, 0xC0	; 192
    16b6:	ff 4f       	sbci	r31, 0xFF	; 255
    16b8:	80 83       	st	Z, r24
    16ba:	fe 01       	movw	r30, r28
    16bc:	e0 5c       	subi	r30, 0xC0	; 192
    16be:	ff 4f       	sbci	r31, 0xFF	; 255
    16c0:	80 81       	ld	r24, Z
    16c2:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    16c4:	89 a9       	ldd	r24, Y+49	; 0x31
    16c6:	8a 95       	dec	r24
    16c8:	f1 f7       	brne	.-4      	; 0x16c6 <lcd_data+0x23e>
    16ca:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(50);
	datas&=~(1<<lcd_EN);
    16cc:	de 01       	movw	r26, r28
    16ce:	a7 5b       	subi	r26, 0xB7	; 183
    16d0:	bf 4f       	sbci	r27, 0xFF	; 255
    16d2:	fe 01       	movw	r30, r28
    16d4:	e7 5b       	subi	r30, 0xB7	; 183
    16d6:	ff 4f       	sbci	r31, 0xFF	; 255
    16d8:	80 81       	ld	r24, Z
    16da:	8b 7f       	andi	r24, 0xFB	; 251
    16dc:	8c 93       	st	X, r24
	I2C_Write(datas);
    16de:	fe 01       	movw	r30, r28
    16e0:	e7 5b       	subi	r30, 0xB7	; 183
    16e2:	ff 4f       	sbci	r31, 0xFF	; 255
    16e4:	80 81       	ld	r24, Z
    16e6:	0e 94 ed 06 	call	0xdda	; 0xdda <I2C_Write>
    16ea:	80 e0       	ldi	r24, 0x00	; 0
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	a8 e4       	ldi	r26, 0x48	; 72
    16f0:	b2 e4       	ldi	r27, 0x42	; 66
    16f2:	8d a7       	std	Y+45, r24	; 0x2d
    16f4:	9e a7       	std	Y+46, r25	; 0x2e
    16f6:	af a7       	std	Y+47, r26	; 0x2f
    16f8:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    16fa:	6d a5       	ldd	r22, Y+45	; 0x2d
    16fc:	7e a5       	ldd	r23, Y+46	; 0x2e
    16fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1700:	98 a9       	ldd	r25, Y+48	; 0x30
    1702:	2b ea       	ldi	r18, 0xAB	; 171
    1704:	3a ea       	ldi	r19, 0xAA	; 170
    1706:	4a e2       	ldi	r20, 0x2A	; 42
    1708:	50 e4       	ldi	r21, 0x40	; 64
    170a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    170e:	dc 01       	movw	r26, r24
    1710:	cb 01       	movw	r24, r22
    1712:	89 a7       	std	Y+41, r24	; 0x29
    1714:	9a a7       	std	Y+42, r25	; 0x2a
    1716:	ab a7       	std	Y+43, r26	; 0x2b
    1718:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    171a:	69 a5       	ldd	r22, Y+41	; 0x29
    171c:	7a a5       	ldd	r23, Y+42	; 0x2a
    171e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1720:	9c a5       	ldd	r25, Y+44	; 0x2c
    1722:	20 e0       	ldi	r18, 0x00	; 0
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	40 e8       	ldi	r20, 0x80	; 128
    1728:	5f e3       	ldi	r21, 0x3F	; 63
    172a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    172e:	88 23       	and	r24, r24
    1730:	1c f4       	brge	.+6      	; 0x1738 <lcd_data+0x2b0>
		__ticks = 1;
    1732:	81 e0       	ldi	r24, 0x01	; 1
    1734:	88 a7       	std	Y+40, r24	; 0x28
    1736:	91 c0       	rjmp	.+290    	; 0x185a <lcd_data+0x3d2>
	else if (__tmp > 255)
    1738:	69 a5       	ldd	r22, Y+41	; 0x29
    173a:	7a a5       	ldd	r23, Y+42	; 0x2a
    173c:	8b a5       	ldd	r24, Y+43	; 0x2b
    173e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1740:	20 e0       	ldi	r18, 0x00	; 0
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	4f e7       	ldi	r20, 0x7F	; 127
    1746:	53 e4       	ldi	r21, 0x43	; 67
    1748:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    174c:	18 16       	cp	r1, r24
    174e:	0c f0       	brlt	.+2      	; 0x1752 <lcd_data+0x2ca>
    1750:	7b c0       	rjmp	.+246    	; 0x1848 <lcd_data+0x3c0>
	{
		_delay_ms(__us / 1000.0);
    1752:	6d a5       	ldd	r22, Y+45	; 0x2d
    1754:	7e a5       	ldd	r23, Y+46	; 0x2e
    1756:	8f a5       	ldd	r24, Y+47	; 0x2f
    1758:	98 a9       	ldd	r25, Y+48	; 0x30
    175a:	20 e0       	ldi	r18, 0x00	; 0
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	4a e7       	ldi	r20, 0x7A	; 122
    1760:	54 e4       	ldi	r21, 0x44	; 68
    1762:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1766:	dc 01       	movw	r26, r24
    1768:	cb 01       	movw	r24, r22
    176a:	8c a3       	std	Y+36, r24	; 0x24
    176c:	9d a3       	std	Y+37, r25	; 0x25
    176e:	ae a3       	std	Y+38, r26	; 0x26
    1770:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1772:	6c a1       	ldd	r22, Y+36	; 0x24
    1774:	7d a1       	ldd	r23, Y+37	; 0x25
    1776:	8e a1       	ldd	r24, Y+38	; 0x26
    1778:	9f a1       	ldd	r25, Y+39	; 0x27
    177a:	20 e0       	ldi	r18, 0x00	; 0
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	4a ef       	ldi	r20, 0xFA	; 250
    1780:	54 e4       	ldi	r21, 0x44	; 68
    1782:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1786:	dc 01       	movw	r26, r24
    1788:	cb 01       	movw	r24, r22
    178a:	88 a3       	std	Y+32, r24	; 0x20
    178c:	99 a3       	std	Y+33, r25	; 0x21
    178e:	aa a3       	std	Y+34, r26	; 0x22
    1790:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1792:	68 a1       	ldd	r22, Y+32	; 0x20
    1794:	79 a1       	ldd	r23, Y+33	; 0x21
    1796:	8a a1       	ldd	r24, Y+34	; 0x22
    1798:	9b a1       	ldd	r25, Y+35	; 0x23
    179a:	20 e0       	ldi	r18, 0x00	; 0
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	40 e8       	ldi	r20, 0x80	; 128
    17a0:	5f e3       	ldi	r21, 0x3F	; 63
    17a2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    17a6:	88 23       	and	r24, r24
    17a8:	2c f4       	brge	.+10     	; 0x17b4 <lcd_data+0x32c>
		__ticks = 1;
    17aa:	81 e0       	ldi	r24, 0x01	; 1
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	9f 8f       	std	Y+31, r25	; 0x1f
    17b0:	8e 8f       	std	Y+30, r24	; 0x1e
    17b2:	3f c0       	rjmp	.+126    	; 0x1832 <lcd_data+0x3aa>
	else if (__tmp > 65535)
    17b4:	68 a1       	ldd	r22, Y+32	; 0x20
    17b6:	79 a1       	ldd	r23, Y+33	; 0x21
    17b8:	8a a1       	ldd	r24, Y+34	; 0x22
    17ba:	9b a1       	ldd	r25, Y+35	; 0x23
    17bc:	20 e0       	ldi	r18, 0x00	; 0
    17be:	3f ef       	ldi	r19, 0xFF	; 255
    17c0:	4f e7       	ldi	r20, 0x7F	; 127
    17c2:	57 e4       	ldi	r21, 0x47	; 71
    17c4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    17c8:	18 16       	cp	r1, r24
    17ca:	4c f5       	brge	.+82     	; 0x181e <lcd_data+0x396>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17cc:	6c a1       	ldd	r22, Y+36	; 0x24
    17ce:	7d a1       	ldd	r23, Y+37	; 0x25
    17d0:	8e a1       	ldd	r24, Y+38	; 0x26
    17d2:	9f a1       	ldd	r25, Y+39	; 0x27
    17d4:	20 e0       	ldi	r18, 0x00	; 0
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	40 e2       	ldi	r20, 0x20	; 32
    17da:	51 e4       	ldi	r21, 0x41	; 65
    17dc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17e0:	dc 01       	movw	r26, r24
    17e2:	cb 01       	movw	r24, r22
    17e4:	bc 01       	movw	r22, r24
    17e6:	cd 01       	movw	r24, r26
    17e8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17ec:	dc 01       	movw	r26, r24
    17ee:	cb 01       	movw	r24, r22
    17f0:	9f 8f       	std	Y+31, r25	; 0x1f
    17f2:	8e 8f       	std	Y+30, r24	; 0x1e
    17f4:	0f c0       	rjmp	.+30     	; 0x1814 <lcd_data+0x38c>
    17f6:	88 ec       	ldi	r24, 0xC8	; 200
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	9d 8f       	std	Y+29, r25	; 0x1d
    17fc:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    17fe:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1800:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1802:	01 97       	sbiw	r24, 0x01	; 1
    1804:	f1 f7       	brne	.-4      	; 0x1802 <lcd_data+0x37a>
    1806:	9d 8f       	std	Y+29, r25	; 0x1d
    1808:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    180a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    180c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    180e:	01 97       	sbiw	r24, 0x01	; 1
    1810:	9f 8f       	std	Y+31, r25	; 0x1f
    1812:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1814:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1816:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1818:	00 97       	sbiw	r24, 0x00	; 0
    181a:	69 f7       	brne	.-38     	; 0x17f6 <lcd_data+0x36e>
    181c:	24 c0       	rjmp	.+72     	; 0x1866 <lcd_data+0x3de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    181e:	68 a1       	ldd	r22, Y+32	; 0x20
    1820:	79 a1       	ldd	r23, Y+33	; 0x21
    1822:	8a a1       	ldd	r24, Y+34	; 0x22
    1824:	9b a1       	ldd	r25, Y+35	; 0x23
    1826:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    182a:	dc 01       	movw	r26, r24
    182c:	cb 01       	movw	r24, r22
    182e:	9f 8f       	std	Y+31, r25	; 0x1f
    1830:	8e 8f       	std	Y+30, r24	; 0x1e
    1832:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1834:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1836:	9b 8f       	std	Y+27, r25	; 0x1b
    1838:	8a 8f       	std	Y+26, r24	; 0x1a
    183a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    183c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    183e:	01 97       	sbiw	r24, 0x01	; 1
    1840:	f1 f7       	brne	.-4      	; 0x183e <lcd_data+0x3b6>
    1842:	9b 8f       	std	Y+27, r25	; 0x1b
    1844:	8a 8f       	std	Y+26, r24	; 0x1a
    1846:	0f c0       	rjmp	.+30     	; 0x1866 <lcd_data+0x3de>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1848:	69 a5       	ldd	r22, Y+41	; 0x29
    184a:	7a a5       	ldd	r23, Y+42	; 0x2a
    184c:	8b a5       	ldd	r24, Y+43	; 0x2b
    184e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1850:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1854:	dc 01       	movw	r26, r24
    1856:	cb 01       	movw	r24, r22
    1858:	88 a7       	std	Y+40, r24	; 0x28
    185a:	88 a5       	ldd	r24, Y+40	; 0x28
    185c:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    185e:	89 8d       	ldd	r24, Y+25	; 0x19
    1860:	8a 95       	dec	r24
    1862:	f1 f7       	brne	.-4      	; 0x1860 <lcd_data+0x3d8>
    1864:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(50);
	datas =(datas & 0x0F)|(data<<4);
    1866:	fe 01       	movw	r30, r28
    1868:	e7 5b       	subi	r30, 0xB7	; 183
    186a:	ff 4f       	sbci	r31, 0xFF	; 255
    186c:	80 81       	ld	r24, Z
    186e:	28 2f       	mov	r18, r24
    1870:	2f 70       	andi	r18, 0x0F	; 15
    1872:	fe 01       	movw	r30, r28
    1874:	e6 5b       	subi	r30, 0xB6	; 182
    1876:	ff 4f       	sbci	r31, 0xFF	; 255
    1878:	80 81       	ld	r24, Z
    187a:	88 2f       	mov	r24, r24
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	82 95       	swap	r24
    1880:	92 95       	swap	r25
    1882:	90 7f       	andi	r25, 0xF0	; 240
    1884:	98 27       	eor	r25, r24
    1886:	80 7f       	andi	r24, 0xF0	; 240
    1888:	98 27       	eor	r25, r24
    188a:	82 2b       	or	r24, r18
    188c:	fe 01       	movw	r30, r28
    188e:	e7 5b       	subi	r30, 0xB7	; 183
    1890:	ff 4f       	sbci	r31, 0xFF	; 255
    1892:	80 83       	st	Z, r24
	datas|=(1<<lcd_EN);
    1894:	de 01       	movw	r26, r28
    1896:	a7 5b       	subi	r26, 0xB7	; 183
    1898:	bf 4f       	sbci	r27, 0xFF	; 255
    189a:	fe 01       	movw	r30, r28
    189c:	e7 5b       	subi	r30, 0xB7	; 183
    189e:	ff 4f       	sbci	r31, 0xFF	; 255
    18a0:	80 81       	ld	r24, Z
    18a2:	84 60       	ori	r24, 0x04	; 4
    18a4:	8c 93       	st	X, r24
	I2C_Write(datas);
    18a6:	fe 01       	movw	r30, r28
    18a8:	e7 5b       	subi	r30, 0xB7	; 183
    18aa:	ff 4f       	sbci	r31, 0xFF	; 255
    18ac:	80 81       	ld	r24, Z
    18ae:	0e 94 ed 06 	call	0xdda	; 0xdda <I2C_Write>
    18b2:	80 e0       	ldi	r24, 0x00	; 0
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	a8 ec       	ldi	r26, 0xC8	; 200
    18b8:	b2 e4       	ldi	r27, 0x42	; 66
    18ba:	8d 8b       	std	Y+21, r24	; 0x15
    18bc:	9e 8b       	std	Y+22, r25	; 0x16
    18be:	af 8b       	std	Y+23, r26	; 0x17
    18c0:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    18c2:	6d 89       	ldd	r22, Y+21	; 0x15
    18c4:	7e 89       	ldd	r23, Y+22	; 0x16
    18c6:	8f 89       	ldd	r24, Y+23	; 0x17
    18c8:	98 8d       	ldd	r25, Y+24	; 0x18
    18ca:	2b ea       	ldi	r18, 0xAB	; 171
    18cc:	3a ea       	ldi	r19, 0xAA	; 170
    18ce:	4a e2       	ldi	r20, 0x2A	; 42
    18d0:	50 e4       	ldi	r21, 0x40	; 64
    18d2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18d6:	dc 01       	movw	r26, r24
    18d8:	cb 01       	movw	r24, r22
    18da:	89 8b       	std	Y+17, r24	; 0x11
    18dc:	9a 8b       	std	Y+18, r25	; 0x12
    18de:	ab 8b       	std	Y+19, r26	; 0x13
    18e0:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    18e2:	69 89       	ldd	r22, Y+17	; 0x11
    18e4:	7a 89       	ldd	r23, Y+18	; 0x12
    18e6:	8b 89       	ldd	r24, Y+19	; 0x13
    18e8:	9c 89       	ldd	r25, Y+20	; 0x14
    18ea:	20 e0       	ldi	r18, 0x00	; 0
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	40 e8       	ldi	r20, 0x80	; 128
    18f0:	5f e3       	ldi	r21, 0x3F	; 63
    18f2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    18f6:	88 23       	and	r24, r24
    18f8:	1c f4       	brge	.+6      	; 0x1900 <lcd_data+0x478>
		__ticks = 1;
    18fa:	81 e0       	ldi	r24, 0x01	; 1
    18fc:	88 8b       	std	Y+16, r24	; 0x10
    18fe:	91 c0       	rjmp	.+290    	; 0x1a22 <lcd_data+0x59a>
	else if (__tmp > 255)
    1900:	69 89       	ldd	r22, Y+17	; 0x11
    1902:	7a 89       	ldd	r23, Y+18	; 0x12
    1904:	8b 89       	ldd	r24, Y+19	; 0x13
    1906:	9c 89       	ldd	r25, Y+20	; 0x14
    1908:	20 e0       	ldi	r18, 0x00	; 0
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	4f e7       	ldi	r20, 0x7F	; 127
    190e:	53 e4       	ldi	r21, 0x43	; 67
    1910:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1914:	18 16       	cp	r1, r24
    1916:	0c f0       	brlt	.+2      	; 0x191a <lcd_data+0x492>
    1918:	7b c0       	rjmp	.+246    	; 0x1a10 <lcd_data+0x588>
	{
		_delay_ms(__us / 1000.0);
    191a:	6d 89       	ldd	r22, Y+21	; 0x15
    191c:	7e 89       	ldd	r23, Y+22	; 0x16
    191e:	8f 89       	ldd	r24, Y+23	; 0x17
    1920:	98 8d       	ldd	r25, Y+24	; 0x18
    1922:	20 e0       	ldi	r18, 0x00	; 0
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	4a e7       	ldi	r20, 0x7A	; 122
    1928:	54 e4       	ldi	r21, 0x44	; 68
    192a:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    192e:	dc 01       	movw	r26, r24
    1930:	cb 01       	movw	r24, r22
    1932:	8c 87       	std	Y+12, r24	; 0x0c
    1934:	9d 87       	std	Y+13, r25	; 0x0d
    1936:	ae 87       	std	Y+14, r26	; 0x0e
    1938:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    193a:	6c 85       	ldd	r22, Y+12	; 0x0c
    193c:	7d 85       	ldd	r23, Y+13	; 0x0d
    193e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1940:	9f 85       	ldd	r25, Y+15	; 0x0f
    1942:	20 e0       	ldi	r18, 0x00	; 0
    1944:	30 e0       	ldi	r19, 0x00	; 0
    1946:	4a ef       	ldi	r20, 0xFA	; 250
    1948:	54 e4       	ldi	r21, 0x44	; 68
    194a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    194e:	dc 01       	movw	r26, r24
    1950:	cb 01       	movw	r24, r22
    1952:	88 87       	std	Y+8, r24	; 0x08
    1954:	99 87       	std	Y+9, r25	; 0x09
    1956:	aa 87       	std	Y+10, r26	; 0x0a
    1958:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    195a:	68 85       	ldd	r22, Y+8	; 0x08
    195c:	79 85       	ldd	r23, Y+9	; 0x09
    195e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1960:	9b 85       	ldd	r25, Y+11	; 0x0b
    1962:	20 e0       	ldi	r18, 0x00	; 0
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	40 e8       	ldi	r20, 0x80	; 128
    1968:	5f e3       	ldi	r21, 0x3F	; 63
    196a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    196e:	88 23       	and	r24, r24
    1970:	2c f4       	brge	.+10     	; 0x197c <lcd_data+0x4f4>
		__ticks = 1;
    1972:	81 e0       	ldi	r24, 0x01	; 1
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	9f 83       	std	Y+7, r25	; 0x07
    1978:	8e 83       	std	Y+6, r24	; 0x06
    197a:	3f c0       	rjmp	.+126    	; 0x19fa <lcd_data+0x572>
	else if (__tmp > 65535)
    197c:	68 85       	ldd	r22, Y+8	; 0x08
    197e:	79 85       	ldd	r23, Y+9	; 0x09
    1980:	8a 85       	ldd	r24, Y+10	; 0x0a
    1982:	9b 85       	ldd	r25, Y+11	; 0x0b
    1984:	20 e0       	ldi	r18, 0x00	; 0
    1986:	3f ef       	ldi	r19, 0xFF	; 255
    1988:	4f e7       	ldi	r20, 0x7F	; 127
    198a:	57 e4       	ldi	r21, 0x47	; 71
    198c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1990:	18 16       	cp	r1, r24
    1992:	4c f5       	brge	.+82     	; 0x19e6 <lcd_data+0x55e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1994:	6c 85       	ldd	r22, Y+12	; 0x0c
    1996:	7d 85       	ldd	r23, Y+13	; 0x0d
    1998:	8e 85       	ldd	r24, Y+14	; 0x0e
    199a:	9f 85       	ldd	r25, Y+15	; 0x0f
    199c:	20 e0       	ldi	r18, 0x00	; 0
    199e:	30 e0       	ldi	r19, 0x00	; 0
    19a0:	40 e2       	ldi	r20, 0x20	; 32
    19a2:	51 e4       	ldi	r21, 0x41	; 65
    19a4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19a8:	dc 01       	movw	r26, r24
    19aa:	cb 01       	movw	r24, r22
    19ac:	bc 01       	movw	r22, r24
    19ae:	cd 01       	movw	r24, r26
    19b0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19b4:	dc 01       	movw	r26, r24
    19b6:	cb 01       	movw	r24, r22
    19b8:	9f 83       	std	Y+7, r25	; 0x07
    19ba:	8e 83       	std	Y+6, r24	; 0x06
    19bc:	0f c0       	rjmp	.+30     	; 0x19dc <lcd_data+0x554>
    19be:	88 ec       	ldi	r24, 0xC8	; 200
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	9d 83       	std	Y+5, r25	; 0x05
    19c4:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    19c6:	8c 81       	ldd	r24, Y+4	; 0x04
    19c8:	9d 81       	ldd	r25, Y+5	; 0x05
    19ca:	01 97       	sbiw	r24, 0x01	; 1
    19cc:	f1 f7       	brne	.-4      	; 0x19ca <lcd_data+0x542>
    19ce:	9d 83       	std	Y+5, r25	; 0x05
    19d0:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19d2:	8e 81       	ldd	r24, Y+6	; 0x06
    19d4:	9f 81       	ldd	r25, Y+7	; 0x07
    19d6:	01 97       	sbiw	r24, 0x01	; 1
    19d8:	9f 83       	std	Y+7, r25	; 0x07
    19da:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19dc:	8e 81       	ldd	r24, Y+6	; 0x06
    19de:	9f 81       	ldd	r25, Y+7	; 0x07
    19e0:	00 97       	sbiw	r24, 0x00	; 0
    19e2:	69 f7       	brne	.-38     	; 0x19be <lcd_data+0x536>
    19e4:	24 c0       	rjmp	.+72     	; 0x1a2e <lcd_data+0x5a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19e6:	68 85       	ldd	r22, Y+8	; 0x08
    19e8:	79 85       	ldd	r23, Y+9	; 0x09
    19ea:	8a 85       	ldd	r24, Y+10	; 0x0a
    19ec:	9b 85       	ldd	r25, Y+11	; 0x0b
    19ee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19f2:	dc 01       	movw	r26, r24
    19f4:	cb 01       	movw	r24, r22
    19f6:	9f 83       	std	Y+7, r25	; 0x07
    19f8:	8e 83       	std	Y+6, r24	; 0x06
    19fa:	8e 81       	ldd	r24, Y+6	; 0x06
    19fc:	9f 81       	ldd	r25, Y+7	; 0x07
    19fe:	9b 83       	std	Y+3, r25	; 0x03
    1a00:	8a 83       	std	Y+2, r24	; 0x02
    1a02:	8a 81       	ldd	r24, Y+2	; 0x02
    1a04:	9b 81       	ldd	r25, Y+3	; 0x03
    1a06:	01 97       	sbiw	r24, 0x01	; 1
    1a08:	f1 f7       	brne	.-4      	; 0x1a06 <lcd_data+0x57e>
    1a0a:	9b 83       	std	Y+3, r25	; 0x03
    1a0c:	8a 83       	std	Y+2, r24	; 0x02
    1a0e:	0f c0       	rjmp	.+30     	; 0x1a2e <lcd_data+0x5a6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1a10:	69 89       	ldd	r22, Y+17	; 0x11
    1a12:	7a 89       	ldd	r23, Y+18	; 0x12
    1a14:	8b 89       	ldd	r24, Y+19	; 0x13
    1a16:	9c 89       	ldd	r25, Y+20	; 0x14
    1a18:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a1c:	dc 01       	movw	r26, r24
    1a1e:	cb 01       	movw	r24, r22
    1a20:	88 8b       	std	Y+16, r24	; 0x10
    1a22:	88 89       	ldd	r24, Y+16	; 0x10
    1a24:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1a26:	89 81       	ldd	r24, Y+1	; 0x01
    1a28:	8a 95       	dec	r24
    1a2a:	f1 f7       	brne	.-4      	; 0x1a28 <lcd_data+0x5a0>
    1a2c:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);
	datas&=~(1<<lcd_EN);
    1a2e:	de 01       	movw	r26, r28
    1a30:	a7 5b       	subi	r26, 0xB7	; 183
    1a32:	bf 4f       	sbci	r27, 0xFF	; 255
    1a34:	fe 01       	movw	r30, r28
    1a36:	e7 5b       	subi	r30, 0xB7	; 183
    1a38:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3a:	80 81       	ld	r24, Z
    1a3c:	8b 7f       	andi	r24, 0xFB	; 251
    1a3e:	8c 93       	st	X, r24
	I2C_Write(datas);
    1a40:	fe 01       	movw	r30, r28
    1a42:	e7 5b       	subi	r30, 0xB7	; 183
    1a44:	ff 4f       	sbci	r31, 0xFF	; 255
    1a46:	80 81       	ld	r24, Z
    1a48:	0e 94 ed 06 	call	0xdda	; 0xdda <I2C_Write>
	I2C_Stop();
    1a4c:	0e 94 40 07 	call	0xe80	; 0xe80 <I2C_Stop>

}
    1a50:	c6 5b       	subi	r28, 0xB6	; 182
    1a52:	df 4f       	sbci	r29, 0xFF	; 255
    1a54:	0f b6       	in	r0, 0x3f	; 63
    1a56:	f8 94       	cli
    1a58:	de bf       	out	0x3e, r29	; 62
    1a5a:	0f be       	out	0x3f, r0	; 63
    1a5c:	cd bf       	out	0x3d, r28	; 61
    1a5e:	cf 91       	pop	r28
    1a60:	df 91       	pop	r29
    1a62:	1f 91       	pop	r17
    1a64:	0f 91       	pop	r16
    1a66:	08 95       	ret

00001a68 <lcd_init>:
//***********************************************************************************************
//function for lcd initialize.
//lcd_init();
void lcd_init(){
    1a68:	0f 93       	push	r16
    1a6a:	1f 93       	push	r17
    1a6c:	df 93       	push	r29
    1a6e:	cf 93       	push	r28
    1a70:	cd b7       	in	r28, 0x3d	; 61
    1a72:	de b7       	in	r29, 0x3e	; 62
    1a74:	c8 57       	subi	r28, 0x78	; 120
    1a76:	d0 40       	sbci	r29, 0x00	; 0
    1a78:	0f b6       	in	r0, 0x3f	; 63
    1a7a:	f8 94       	cli
    1a7c:	de bf       	out	0x3e, r29	; 62
    1a7e:	0f be       	out	0x3f, r0	; 63
    1a80:	cd bf       	out	0x3d, r28	; 61
        I2C_Init();
    1a82:	0e 94 47 06 	call	0xc8e	; 0xc8e <I2C_Init>
	lcd_command(0x33);
    1a86:	83 e3       	ldi	r24, 0x33	; 51
    1a88:	0e 94 54 07 	call	0xea8	; 0xea8 <lcd_command>
    1a8c:	fe 01       	movw	r30, r28
    1a8e:	eb 58       	subi	r30, 0x8B	; 139
    1a90:	ff 4f       	sbci	r31, 0xFF	; 255
    1a92:	80 e0       	ldi	r24, 0x00	; 0
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	a8 e4       	ldi	r26, 0x48	; 72
    1a98:	b2 e4       	ldi	r27, 0x42	; 66
    1a9a:	80 83       	st	Z, r24
    1a9c:	91 83       	std	Z+1, r25	; 0x01
    1a9e:	a2 83       	std	Z+2, r26	; 0x02
    1aa0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1aa2:	8e 01       	movw	r16, r28
    1aa4:	0f 58       	subi	r16, 0x8F	; 143
    1aa6:	1f 4f       	sbci	r17, 0xFF	; 255
    1aa8:	fe 01       	movw	r30, r28
    1aaa:	eb 58       	subi	r30, 0x8B	; 139
    1aac:	ff 4f       	sbci	r31, 0xFF	; 255
    1aae:	60 81       	ld	r22, Z
    1ab0:	71 81       	ldd	r23, Z+1	; 0x01
    1ab2:	82 81       	ldd	r24, Z+2	; 0x02
    1ab4:	93 81       	ldd	r25, Z+3	; 0x03
    1ab6:	2b ea       	ldi	r18, 0xAB	; 171
    1ab8:	3a ea       	ldi	r19, 0xAA	; 170
    1aba:	4a e2       	ldi	r20, 0x2A	; 42
    1abc:	50 e4       	ldi	r21, 0x40	; 64
    1abe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ac2:	dc 01       	movw	r26, r24
    1ac4:	cb 01       	movw	r24, r22
    1ac6:	f8 01       	movw	r30, r16
    1ac8:	80 83       	st	Z, r24
    1aca:	91 83       	std	Z+1, r25	; 0x01
    1acc:	a2 83       	std	Z+2, r26	; 0x02
    1ace:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ad0:	fe 01       	movw	r30, r28
    1ad2:	ef 58       	subi	r30, 0x8F	; 143
    1ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad6:	60 81       	ld	r22, Z
    1ad8:	71 81       	ldd	r23, Z+1	; 0x01
    1ada:	82 81       	ldd	r24, Z+2	; 0x02
    1adc:	93 81       	ldd	r25, Z+3	; 0x03
    1ade:	20 e0       	ldi	r18, 0x00	; 0
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	40 e8       	ldi	r20, 0x80	; 128
    1ae4:	5f e3       	ldi	r21, 0x3F	; 63
    1ae6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1aea:	88 23       	and	r24, r24
    1aec:	34 f4       	brge	.+12     	; 0x1afa <lcd_init+0x92>
		__ticks = 1;
    1aee:	fe 01       	movw	r30, r28
    1af0:	e0 59       	subi	r30, 0x90	; 144
    1af2:	ff 4f       	sbci	r31, 0xFF	; 255
    1af4:	81 e0       	ldi	r24, 0x01	; 1
    1af6:	80 83       	st	Z, r24
    1af8:	e0 c0       	rjmp	.+448    	; 0x1cba <lcd_init+0x252>
	else if (__tmp > 255)
    1afa:	fe 01       	movw	r30, r28
    1afc:	ef 58       	subi	r30, 0x8F	; 143
    1afe:	ff 4f       	sbci	r31, 0xFF	; 255
    1b00:	60 81       	ld	r22, Z
    1b02:	71 81       	ldd	r23, Z+1	; 0x01
    1b04:	82 81       	ldd	r24, Z+2	; 0x02
    1b06:	93 81       	ldd	r25, Z+3	; 0x03
    1b08:	20 e0       	ldi	r18, 0x00	; 0
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	4f e7       	ldi	r20, 0x7F	; 127
    1b0e:	53 e4       	ldi	r21, 0x43	; 67
    1b10:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1b14:	18 16       	cp	r1, r24
    1b16:	0c f0       	brlt	.+2      	; 0x1b1a <lcd_init+0xb2>
    1b18:	c0 c0       	rjmp	.+384    	; 0x1c9a <lcd_init+0x232>
	{
		_delay_ms(__us / 1000.0);
    1b1a:	fe 01       	movw	r30, r28
    1b1c:	eb 58       	subi	r30, 0x8B	; 139
    1b1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b20:	60 81       	ld	r22, Z
    1b22:	71 81       	ldd	r23, Z+1	; 0x01
    1b24:	82 81       	ldd	r24, Z+2	; 0x02
    1b26:	93 81       	ldd	r25, Z+3	; 0x03
    1b28:	20 e0       	ldi	r18, 0x00	; 0
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	4a e7       	ldi	r20, 0x7A	; 122
    1b2e:	54 e4       	ldi	r21, 0x44	; 68
    1b30:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1b34:	dc 01       	movw	r26, r24
    1b36:	cb 01       	movw	r24, r22
    1b38:	fe 01       	movw	r30, r28
    1b3a:	e4 59       	subi	r30, 0x94	; 148
    1b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3e:	80 83       	st	Z, r24
    1b40:	91 83       	std	Z+1, r25	; 0x01
    1b42:	a2 83       	std	Z+2, r26	; 0x02
    1b44:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b46:	8e 01       	movw	r16, r28
    1b48:	08 59       	subi	r16, 0x98	; 152
    1b4a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b4c:	fe 01       	movw	r30, r28
    1b4e:	e4 59       	subi	r30, 0x94	; 148
    1b50:	ff 4f       	sbci	r31, 0xFF	; 255
    1b52:	60 81       	ld	r22, Z
    1b54:	71 81       	ldd	r23, Z+1	; 0x01
    1b56:	82 81       	ldd	r24, Z+2	; 0x02
    1b58:	93 81       	ldd	r25, Z+3	; 0x03
    1b5a:	20 e0       	ldi	r18, 0x00	; 0
    1b5c:	30 e0       	ldi	r19, 0x00	; 0
    1b5e:	4a ef       	ldi	r20, 0xFA	; 250
    1b60:	54 e4       	ldi	r21, 0x44	; 68
    1b62:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b66:	dc 01       	movw	r26, r24
    1b68:	cb 01       	movw	r24, r22
    1b6a:	f8 01       	movw	r30, r16
    1b6c:	80 83       	st	Z, r24
    1b6e:	91 83       	std	Z+1, r25	; 0x01
    1b70:	a2 83       	std	Z+2, r26	; 0x02
    1b72:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b74:	fe 01       	movw	r30, r28
    1b76:	e8 59       	subi	r30, 0x98	; 152
    1b78:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7a:	60 81       	ld	r22, Z
    1b7c:	71 81       	ldd	r23, Z+1	; 0x01
    1b7e:	82 81       	ldd	r24, Z+2	; 0x02
    1b80:	93 81       	ldd	r25, Z+3	; 0x03
    1b82:	20 e0       	ldi	r18, 0x00	; 0
    1b84:	30 e0       	ldi	r19, 0x00	; 0
    1b86:	40 e8       	ldi	r20, 0x80	; 128
    1b88:	5f e3       	ldi	r21, 0x3F	; 63
    1b8a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b8e:	88 23       	and	r24, r24
    1b90:	44 f4       	brge	.+16     	; 0x1ba2 <lcd_init+0x13a>
		__ticks = 1;
    1b92:	fe 01       	movw	r30, r28
    1b94:	ea 59       	subi	r30, 0x9A	; 154
    1b96:	ff 4f       	sbci	r31, 0xFF	; 255
    1b98:	81 e0       	ldi	r24, 0x01	; 1
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	91 83       	std	Z+1, r25	; 0x01
    1b9e:	80 83       	st	Z, r24
    1ba0:	64 c0       	rjmp	.+200    	; 0x1c6a <lcd_init+0x202>
	else if (__tmp > 65535)
    1ba2:	fe 01       	movw	r30, r28
    1ba4:	e8 59       	subi	r30, 0x98	; 152
    1ba6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba8:	60 81       	ld	r22, Z
    1baa:	71 81       	ldd	r23, Z+1	; 0x01
    1bac:	82 81       	ldd	r24, Z+2	; 0x02
    1bae:	93 81       	ldd	r25, Z+3	; 0x03
    1bb0:	20 e0       	ldi	r18, 0x00	; 0
    1bb2:	3f ef       	ldi	r19, 0xFF	; 255
    1bb4:	4f e7       	ldi	r20, 0x7F	; 127
    1bb6:	57 e4       	ldi	r21, 0x47	; 71
    1bb8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1bbc:	18 16       	cp	r1, r24
    1bbe:	0c f0       	brlt	.+2      	; 0x1bc2 <lcd_init+0x15a>
    1bc0:	43 c0       	rjmp	.+134    	; 0x1c48 <lcd_init+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bc2:	fe 01       	movw	r30, r28
    1bc4:	e4 59       	subi	r30, 0x94	; 148
    1bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc8:	60 81       	ld	r22, Z
    1bca:	71 81       	ldd	r23, Z+1	; 0x01
    1bcc:	82 81       	ldd	r24, Z+2	; 0x02
    1bce:	93 81       	ldd	r25, Z+3	; 0x03
    1bd0:	20 e0       	ldi	r18, 0x00	; 0
    1bd2:	30 e0       	ldi	r19, 0x00	; 0
    1bd4:	40 e2       	ldi	r20, 0x20	; 32
    1bd6:	51 e4       	ldi	r21, 0x41	; 65
    1bd8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bdc:	dc 01       	movw	r26, r24
    1bde:	cb 01       	movw	r24, r22
    1be0:	8e 01       	movw	r16, r28
    1be2:	0a 59       	subi	r16, 0x9A	; 154
    1be4:	1f 4f       	sbci	r17, 0xFF	; 255
    1be6:	bc 01       	movw	r22, r24
    1be8:	cd 01       	movw	r24, r26
    1bea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bee:	dc 01       	movw	r26, r24
    1bf0:	cb 01       	movw	r24, r22
    1bf2:	f8 01       	movw	r30, r16
    1bf4:	91 83       	std	Z+1, r25	; 0x01
    1bf6:	80 83       	st	Z, r24
    1bf8:	1f c0       	rjmp	.+62     	; 0x1c38 <lcd_init+0x1d0>
    1bfa:	fe 01       	movw	r30, r28
    1bfc:	ec 59       	subi	r30, 0x9C	; 156
    1bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    1c00:	88 ec       	ldi	r24, 0xC8	; 200
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	91 83       	std	Z+1, r25	; 0x01
    1c06:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c08:	fe 01       	movw	r30, r28
    1c0a:	ec 59       	subi	r30, 0x9C	; 156
    1c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0e:	80 81       	ld	r24, Z
    1c10:	91 81       	ldd	r25, Z+1	; 0x01
    1c12:	01 97       	sbiw	r24, 0x01	; 1
    1c14:	f1 f7       	brne	.-4      	; 0x1c12 <lcd_init+0x1aa>
    1c16:	fe 01       	movw	r30, r28
    1c18:	ec 59       	subi	r30, 0x9C	; 156
    1c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c1c:	91 83       	std	Z+1, r25	; 0x01
    1c1e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c20:	de 01       	movw	r26, r28
    1c22:	aa 59       	subi	r26, 0x9A	; 154
    1c24:	bf 4f       	sbci	r27, 0xFF	; 255
    1c26:	fe 01       	movw	r30, r28
    1c28:	ea 59       	subi	r30, 0x9A	; 154
    1c2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2c:	80 81       	ld	r24, Z
    1c2e:	91 81       	ldd	r25, Z+1	; 0x01
    1c30:	01 97       	sbiw	r24, 0x01	; 1
    1c32:	11 96       	adiw	r26, 0x01	; 1
    1c34:	9c 93       	st	X, r25
    1c36:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c38:	fe 01       	movw	r30, r28
    1c3a:	ea 59       	subi	r30, 0x9A	; 154
    1c3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c3e:	80 81       	ld	r24, Z
    1c40:	91 81       	ldd	r25, Z+1	; 0x01
    1c42:	00 97       	sbiw	r24, 0x00	; 0
    1c44:	d1 f6       	brne	.-76     	; 0x1bfa <lcd_init+0x192>
    1c46:	4b c0       	rjmp	.+150    	; 0x1cde <lcd_init+0x276>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c48:	8e 01       	movw	r16, r28
    1c4a:	0a 59       	subi	r16, 0x9A	; 154
    1c4c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c4e:	fe 01       	movw	r30, r28
    1c50:	e8 59       	subi	r30, 0x98	; 152
    1c52:	ff 4f       	sbci	r31, 0xFF	; 255
    1c54:	60 81       	ld	r22, Z
    1c56:	71 81       	ldd	r23, Z+1	; 0x01
    1c58:	82 81       	ldd	r24, Z+2	; 0x02
    1c5a:	93 81       	ldd	r25, Z+3	; 0x03
    1c5c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c60:	dc 01       	movw	r26, r24
    1c62:	cb 01       	movw	r24, r22
    1c64:	f8 01       	movw	r30, r16
    1c66:	91 83       	std	Z+1, r25	; 0x01
    1c68:	80 83       	st	Z, r24
    1c6a:	de 01       	movw	r26, r28
    1c6c:	ae 59       	subi	r26, 0x9E	; 158
    1c6e:	bf 4f       	sbci	r27, 0xFF	; 255
    1c70:	fe 01       	movw	r30, r28
    1c72:	ea 59       	subi	r30, 0x9A	; 154
    1c74:	ff 4f       	sbci	r31, 0xFF	; 255
    1c76:	80 81       	ld	r24, Z
    1c78:	91 81       	ldd	r25, Z+1	; 0x01
    1c7a:	11 96       	adiw	r26, 0x01	; 1
    1c7c:	9c 93       	st	X, r25
    1c7e:	8e 93       	st	-X, r24
    1c80:	fe 01       	movw	r30, r28
    1c82:	ee 59       	subi	r30, 0x9E	; 158
    1c84:	ff 4f       	sbci	r31, 0xFF	; 255
    1c86:	80 81       	ld	r24, Z
    1c88:	91 81       	ldd	r25, Z+1	; 0x01
    1c8a:	01 97       	sbiw	r24, 0x01	; 1
    1c8c:	f1 f7       	brne	.-4      	; 0x1c8a <lcd_init+0x222>
    1c8e:	fe 01       	movw	r30, r28
    1c90:	ee 59       	subi	r30, 0x9E	; 158
    1c92:	ff 4f       	sbci	r31, 0xFF	; 255
    1c94:	91 83       	std	Z+1, r25	; 0x01
    1c96:	80 83       	st	Z, r24
    1c98:	22 c0       	rjmp	.+68     	; 0x1cde <lcd_init+0x276>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1c9a:	8e 01       	movw	r16, r28
    1c9c:	00 59       	subi	r16, 0x90	; 144
    1c9e:	1f 4f       	sbci	r17, 0xFF	; 255
    1ca0:	fe 01       	movw	r30, r28
    1ca2:	ef 58       	subi	r30, 0x8F	; 143
    1ca4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca6:	60 81       	ld	r22, Z
    1ca8:	71 81       	ldd	r23, Z+1	; 0x01
    1caa:	82 81       	ldd	r24, Z+2	; 0x02
    1cac:	93 81       	ldd	r25, Z+3	; 0x03
    1cae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cb2:	dc 01       	movw	r26, r24
    1cb4:	cb 01       	movw	r24, r22
    1cb6:	f8 01       	movw	r30, r16
    1cb8:	80 83       	st	Z, r24
    1cba:	de 01       	movw	r26, r28
    1cbc:	af 59       	subi	r26, 0x9F	; 159
    1cbe:	bf 4f       	sbci	r27, 0xFF	; 255
    1cc0:	fe 01       	movw	r30, r28
    1cc2:	e0 59       	subi	r30, 0x90	; 144
    1cc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc6:	80 81       	ld	r24, Z
    1cc8:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1cca:	fe 01       	movw	r30, r28
    1ccc:	ef 59       	subi	r30, 0x9F	; 159
    1cce:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd0:	80 81       	ld	r24, Z
    1cd2:	8a 95       	dec	r24
    1cd4:	f1 f7       	brne	.-4      	; 0x1cd2 <lcd_init+0x26a>
    1cd6:	fe 01       	movw	r30, r28
    1cd8:	ef 59       	subi	r30, 0x9F	; 159
    1cda:	ff 4f       	sbci	r31, 0xFF	; 255
    1cdc:	80 83       	st	Z, r24
	_delay_us(50);
	lcd_command(0x32);
    1cde:	82 e3       	ldi	r24, 0x32	; 50
    1ce0:	0e 94 54 07 	call	0xea8	; 0xea8 <lcd_command>
    1ce4:	fe 01       	movw	r30, r28
    1ce6:	e3 5a       	subi	r30, 0xA3	; 163
    1ce8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cea:	80 e0       	ldi	r24, 0x00	; 0
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	a8 e4       	ldi	r26, 0x48	; 72
    1cf0:	b2 e4       	ldi	r27, 0x42	; 66
    1cf2:	80 83       	st	Z, r24
    1cf4:	91 83       	std	Z+1, r25	; 0x01
    1cf6:	a2 83       	std	Z+2, r26	; 0x02
    1cf8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1cfa:	8e 01       	movw	r16, r28
    1cfc:	07 5a       	subi	r16, 0xA7	; 167
    1cfe:	1f 4f       	sbci	r17, 0xFF	; 255
    1d00:	fe 01       	movw	r30, r28
    1d02:	e3 5a       	subi	r30, 0xA3	; 163
    1d04:	ff 4f       	sbci	r31, 0xFF	; 255
    1d06:	60 81       	ld	r22, Z
    1d08:	71 81       	ldd	r23, Z+1	; 0x01
    1d0a:	82 81       	ldd	r24, Z+2	; 0x02
    1d0c:	93 81       	ldd	r25, Z+3	; 0x03
    1d0e:	2b ea       	ldi	r18, 0xAB	; 171
    1d10:	3a ea       	ldi	r19, 0xAA	; 170
    1d12:	4a e2       	ldi	r20, 0x2A	; 42
    1d14:	50 e4       	ldi	r21, 0x40	; 64
    1d16:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d1a:	dc 01       	movw	r26, r24
    1d1c:	cb 01       	movw	r24, r22
    1d1e:	f8 01       	movw	r30, r16
    1d20:	80 83       	st	Z, r24
    1d22:	91 83       	std	Z+1, r25	; 0x01
    1d24:	a2 83       	std	Z+2, r26	; 0x02
    1d26:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d28:	fe 01       	movw	r30, r28
    1d2a:	e7 5a       	subi	r30, 0xA7	; 167
    1d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2e:	60 81       	ld	r22, Z
    1d30:	71 81       	ldd	r23, Z+1	; 0x01
    1d32:	82 81       	ldd	r24, Z+2	; 0x02
    1d34:	93 81       	ldd	r25, Z+3	; 0x03
    1d36:	20 e0       	ldi	r18, 0x00	; 0
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	40 e8       	ldi	r20, 0x80	; 128
    1d3c:	5f e3       	ldi	r21, 0x3F	; 63
    1d3e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d42:	88 23       	and	r24, r24
    1d44:	34 f4       	brge	.+12     	; 0x1d52 <lcd_init+0x2ea>
		__ticks = 1;
    1d46:	fe 01       	movw	r30, r28
    1d48:	e8 5a       	subi	r30, 0xA8	; 168
    1d4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d4c:	81 e0       	ldi	r24, 0x01	; 1
    1d4e:	80 83       	st	Z, r24
    1d50:	e0 c0       	rjmp	.+448    	; 0x1f12 <lcd_init+0x4aa>
	else if (__tmp > 255)
    1d52:	fe 01       	movw	r30, r28
    1d54:	e7 5a       	subi	r30, 0xA7	; 167
    1d56:	ff 4f       	sbci	r31, 0xFF	; 255
    1d58:	60 81       	ld	r22, Z
    1d5a:	71 81       	ldd	r23, Z+1	; 0x01
    1d5c:	82 81       	ldd	r24, Z+2	; 0x02
    1d5e:	93 81       	ldd	r25, Z+3	; 0x03
    1d60:	20 e0       	ldi	r18, 0x00	; 0
    1d62:	30 e0       	ldi	r19, 0x00	; 0
    1d64:	4f e7       	ldi	r20, 0x7F	; 127
    1d66:	53 e4       	ldi	r21, 0x43	; 67
    1d68:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1d6c:	18 16       	cp	r1, r24
    1d6e:	0c f0       	brlt	.+2      	; 0x1d72 <lcd_init+0x30a>
    1d70:	c0 c0       	rjmp	.+384    	; 0x1ef2 <lcd_init+0x48a>
	{
		_delay_ms(__us / 1000.0);
    1d72:	fe 01       	movw	r30, r28
    1d74:	e3 5a       	subi	r30, 0xA3	; 163
    1d76:	ff 4f       	sbci	r31, 0xFF	; 255
    1d78:	60 81       	ld	r22, Z
    1d7a:	71 81       	ldd	r23, Z+1	; 0x01
    1d7c:	82 81       	ldd	r24, Z+2	; 0x02
    1d7e:	93 81       	ldd	r25, Z+3	; 0x03
    1d80:	20 e0       	ldi	r18, 0x00	; 0
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	4a e7       	ldi	r20, 0x7A	; 122
    1d86:	54 e4       	ldi	r21, 0x44	; 68
    1d88:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1d8c:	dc 01       	movw	r26, r24
    1d8e:	cb 01       	movw	r24, r22
    1d90:	fe 01       	movw	r30, r28
    1d92:	ec 5a       	subi	r30, 0xAC	; 172
    1d94:	ff 4f       	sbci	r31, 0xFF	; 255
    1d96:	80 83       	st	Z, r24
    1d98:	91 83       	std	Z+1, r25	; 0x01
    1d9a:	a2 83       	std	Z+2, r26	; 0x02
    1d9c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d9e:	8e 01       	movw	r16, r28
    1da0:	00 5b       	subi	r16, 0xB0	; 176
    1da2:	1f 4f       	sbci	r17, 0xFF	; 255
    1da4:	fe 01       	movw	r30, r28
    1da6:	ec 5a       	subi	r30, 0xAC	; 172
    1da8:	ff 4f       	sbci	r31, 0xFF	; 255
    1daa:	60 81       	ld	r22, Z
    1dac:	71 81       	ldd	r23, Z+1	; 0x01
    1dae:	82 81       	ldd	r24, Z+2	; 0x02
    1db0:	93 81       	ldd	r25, Z+3	; 0x03
    1db2:	20 e0       	ldi	r18, 0x00	; 0
    1db4:	30 e0       	ldi	r19, 0x00	; 0
    1db6:	4a ef       	ldi	r20, 0xFA	; 250
    1db8:	54 e4       	ldi	r21, 0x44	; 68
    1dba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dbe:	dc 01       	movw	r26, r24
    1dc0:	cb 01       	movw	r24, r22
    1dc2:	f8 01       	movw	r30, r16
    1dc4:	80 83       	st	Z, r24
    1dc6:	91 83       	std	Z+1, r25	; 0x01
    1dc8:	a2 83       	std	Z+2, r26	; 0x02
    1dca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1dcc:	fe 01       	movw	r30, r28
    1dce:	e0 5b       	subi	r30, 0xB0	; 176
    1dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd2:	60 81       	ld	r22, Z
    1dd4:	71 81       	ldd	r23, Z+1	; 0x01
    1dd6:	82 81       	ldd	r24, Z+2	; 0x02
    1dd8:	93 81       	ldd	r25, Z+3	; 0x03
    1dda:	20 e0       	ldi	r18, 0x00	; 0
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	40 e8       	ldi	r20, 0x80	; 128
    1de0:	5f e3       	ldi	r21, 0x3F	; 63
    1de2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1de6:	88 23       	and	r24, r24
    1de8:	44 f4       	brge	.+16     	; 0x1dfa <lcd_init+0x392>
		__ticks = 1;
    1dea:	fe 01       	movw	r30, r28
    1dec:	e2 5b       	subi	r30, 0xB2	; 178
    1dee:	ff 4f       	sbci	r31, 0xFF	; 255
    1df0:	81 e0       	ldi	r24, 0x01	; 1
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	91 83       	std	Z+1, r25	; 0x01
    1df6:	80 83       	st	Z, r24
    1df8:	64 c0       	rjmp	.+200    	; 0x1ec2 <lcd_init+0x45a>
	else if (__tmp > 65535)
    1dfa:	fe 01       	movw	r30, r28
    1dfc:	e0 5b       	subi	r30, 0xB0	; 176
    1dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    1e00:	60 81       	ld	r22, Z
    1e02:	71 81       	ldd	r23, Z+1	; 0x01
    1e04:	82 81       	ldd	r24, Z+2	; 0x02
    1e06:	93 81       	ldd	r25, Z+3	; 0x03
    1e08:	20 e0       	ldi	r18, 0x00	; 0
    1e0a:	3f ef       	ldi	r19, 0xFF	; 255
    1e0c:	4f e7       	ldi	r20, 0x7F	; 127
    1e0e:	57 e4       	ldi	r21, 0x47	; 71
    1e10:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1e14:	18 16       	cp	r1, r24
    1e16:	0c f0       	brlt	.+2      	; 0x1e1a <lcd_init+0x3b2>
    1e18:	43 c0       	rjmp	.+134    	; 0x1ea0 <lcd_init+0x438>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e1a:	fe 01       	movw	r30, r28
    1e1c:	ec 5a       	subi	r30, 0xAC	; 172
    1e1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e20:	60 81       	ld	r22, Z
    1e22:	71 81       	ldd	r23, Z+1	; 0x01
    1e24:	82 81       	ldd	r24, Z+2	; 0x02
    1e26:	93 81       	ldd	r25, Z+3	; 0x03
    1e28:	20 e0       	ldi	r18, 0x00	; 0
    1e2a:	30 e0       	ldi	r19, 0x00	; 0
    1e2c:	40 e2       	ldi	r20, 0x20	; 32
    1e2e:	51 e4       	ldi	r21, 0x41	; 65
    1e30:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e34:	dc 01       	movw	r26, r24
    1e36:	cb 01       	movw	r24, r22
    1e38:	8e 01       	movw	r16, r28
    1e3a:	02 5b       	subi	r16, 0xB2	; 178
    1e3c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e3e:	bc 01       	movw	r22, r24
    1e40:	cd 01       	movw	r24, r26
    1e42:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e46:	dc 01       	movw	r26, r24
    1e48:	cb 01       	movw	r24, r22
    1e4a:	f8 01       	movw	r30, r16
    1e4c:	91 83       	std	Z+1, r25	; 0x01
    1e4e:	80 83       	st	Z, r24
    1e50:	1f c0       	rjmp	.+62     	; 0x1e90 <lcd_init+0x428>
    1e52:	fe 01       	movw	r30, r28
    1e54:	e4 5b       	subi	r30, 0xB4	; 180
    1e56:	ff 4f       	sbci	r31, 0xFF	; 255
    1e58:	88 ec       	ldi	r24, 0xC8	; 200
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	91 83       	std	Z+1, r25	; 0x01
    1e5e:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e60:	fe 01       	movw	r30, r28
    1e62:	e4 5b       	subi	r30, 0xB4	; 180
    1e64:	ff 4f       	sbci	r31, 0xFF	; 255
    1e66:	80 81       	ld	r24, Z
    1e68:	91 81       	ldd	r25, Z+1	; 0x01
    1e6a:	01 97       	sbiw	r24, 0x01	; 1
    1e6c:	f1 f7       	brne	.-4      	; 0x1e6a <lcd_init+0x402>
    1e6e:	fe 01       	movw	r30, r28
    1e70:	e4 5b       	subi	r30, 0xB4	; 180
    1e72:	ff 4f       	sbci	r31, 0xFF	; 255
    1e74:	91 83       	std	Z+1, r25	; 0x01
    1e76:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e78:	de 01       	movw	r26, r28
    1e7a:	a2 5b       	subi	r26, 0xB2	; 178
    1e7c:	bf 4f       	sbci	r27, 0xFF	; 255
    1e7e:	fe 01       	movw	r30, r28
    1e80:	e2 5b       	subi	r30, 0xB2	; 178
    1e82:	ff 4f       	sbci	r31, 0xFF	; 255
    1e84:	80 81       	ld	r24, Z
    1e86:	91 81       	ldd	r25, Z+1	; 0x01
    1e88:	01 97       	sbiw	r24, 0x01	; 1
    1e8a:	11 96       	adiw	r26, 0x01	; 1
    1e8c:	9c 93       	st	X, r25
    1e8e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e90:	fe 01       	movw	r30, r28
    1e92:	e2 5b       	subi	r30, 0xB2	; 178
    1e94:	ff 4f       	sbci	r31, 0xFF	; 255
    1e96:	80 81       	ld	r24, Z
    1e98:	91 81       	ldd	r25, Z+1	; 0x01
    1e9a:	00 97       	sbiw	r24, 0x00	; 0
    1e9c:	d1 f6       	brne	.-76     	; 0x1e52 <lcd_init+0x3ea>
    1e9e:	4b c0       	rjmp	.+150    	; 0x1f36 <lcd_init+0x4ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ea0:	8e 01       	movw	r16, r28
    1ea2:	02 5b       	subi	r16, 0xB2	; 178
    1ea4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ea6:	fe 01       	movw	r30, r28
    1ea8:	e0 5b       	subi	r30, 0xB0	; 176
    1eaa:	ff 4f       	sbci	r31, 0xFF	; 255
    1eac:	60 81       	ld	r22, Z
    1eae:	71 81       	ldd	r23, Z+1	; 0x01
    1eb0:	82 81       	ldd	r24, Z+2	; 0x02
    1eb2:	93 81       	ldd	r25, Z+3	; 0x03
    1eb4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1eb8:	dc 01       	movw	r26, r24
    1eba:	cb 01       	movw	r24, r22
    1ebc:	f8 01       	movw	r30, r16
    1ebe:	91 83       	std	Z+1, r25	; 0x01
    1ec0:	80 83       	st	Z, r24
    1ec2:	de 01       	movw	r26, r28
    1ec4:	a6 5b       	subi	r26, 0xB6	; 182
    1ec6:	bf 4f       	sbci	r27, 0xFF	; 255
    1ec8:	fe 01       	movw	r30, r28
    1eca:	e2 5b       	subi	r30, 0xB2	; 178
    1ecc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ece:	80 81       	ld	r24, Z
    1ed0:	91 81       	ldd	r25, Z+1	; 0x01
    1ed2:	11 96       	adiw	r26, 0x01	; 1
    1ed4:	9c 93       	st	X, r25
    1ed6:	8e 93       	st	-X, r24
    1ed8:	fe 01       	movw	r30, r28
    1eda:	e6 5b       	subi	r30, 0xB6	; 182
    1edc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ede:	80 81       	ld	r24, Z
    1ee0:	91 81       	ldd	r25, Z+1	; 0x01
    1ee2:	01 97       	sbiw	r24, 0x01	; 1
    1ee4:	f1 f7       	brne	.-4      	; 0x1ee2 <lcd_init+0x47a>
    1ee6:	fe 01       	movw	r30, r28
    1ee8:	e6 5b       	subi	r30, 0xB6	; 182
    1eea:	ff 4f       	sbci	r31, 0xFF	; 255
    1eec:	91 83       	std	Z+1, r25	; 0x01
    1eee:	80 83       	st	Z, r24
    1ef0:	22 c0       	rjmp	.+68     	; 0x1f36 <lcd_init+0x4ce>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1ef2:	8e 01       	movw	r16, r28
    1ef4:	08 5a       	subi	r16, 0xA8	; 168
    1ef6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ef8:	fe 01       	movw	r30, r28
    1efa:	e7 5a       	subi	r30, 0xA7	; 167
    1efc:	ff 4f       	sbci	r31, 0xFF	; 255
    1efe:	60 81       	ld	r22, Z
    1f00:	71 81       	ldd	r23, Z+1	; 0x01
    1f02:	82 81       	ldd	r24, Z+2	; 0x02
    1f04:	93 81       	ldd	r25, Z+3	; 0x03
    1f06:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f0a:	dc 01       	movw	r26, r24
    1f0c:	cb 01       	movw	r24, r22
    1f0e:	f8 01       	movw	r30, r16
    1f10:	80 83       	st	Z, r24
    1f12:	de 01       	movw	r26, r28
    1f14:	a7 5b       	subi	r26, 0xB7	; 183
    1f16:	bf 4f       	sbci	r27, 0xFF	; 255
    1f18:	fe 01       	movw	r30, r28
    1f1a:	e8 5a       	subi	r30, 0xA8	; 168
    1f1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1e:	80 81       	ld	r24, Z
    1f20:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1f22:	fe 01       	movw	r30, r28
    1f24:	e7 5b       	subi	r30, 0xB7	; 183
    1f26:	ff 4f       	sbci	r31, 0xFF	; 255
    1f28:	80 81       	ld	r24, Z
    1f2a:	8a 95       	dec	r24
    1f2c:	f1 f7       	brne	.-4      	; 0x1f2a <lcd_init+0x4c2>
    1f2e:	fe 01       	movw	r30, r28
    1f30:	e7 5b       	subi	r30, 0xB7	; 183
    1f32:	ff 4f       	sbci	r31, 0xFF	; 255
    1f34:	80 83       	st	Z, r24
	_delay_us(50);
	lcd_command(0x28);
    1f36:	88 e2       	ldi	r24, 0x28	; 40
    1f38:	0e 94 54 07 	call	0xea8	; 0xea8 <lcd_command>
    1f3c:	fe 01       	movw	r30, r28
    1f3e:	eb 5b       	subi	r30, 0xBB	; 187
    1f40:	ff 4f       	sbci	r31, 0xFF	; 255
    1f42:	80 e0       	ldi	r24, 0x00	; 0
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	a8 e4       	ldi	r26, 0x48	; 72
    1f48:	b2 e4       	ldi	r27, 0x42	; 66
    1f4a:	80 83       	st	Z, r24
    1f4c:	91 83       	std	Z+1, r25	; 0x01
    1f4e:	a2 83       	std	Z+2, r26	; 0x02
    1f50:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1f52:	8e 01       	movw	r16, r28
    1f54:	0f 5b       	subi	r16, 0xBF	; 191
    1f56:	1f 4f       	sbci	r17, 0xFF	; 255
    1f58:	fe 01       	movw	r30, r28
    1f5a:	eb 5b       	subi	r30, 0xBB	; 187
    1f5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f5e:	60 81       	ld	r22, Z
    1f60:	71 81       	ldd	r23, Z+1	; 0x01
    1f62:	82 81       	ldd	r24, Z+2	; 0x02
    1f64:	93 81       	ldd	r25, Z+3	; 0x03
    1f66:	2b ea       	ldi	r18, 0xAB	; 171
    1f68:	3a ea       	ldi	r19, 0xAA	; 170
    1f6a:	4a e2       	ldi	r20, 0x2A	; 42
    1f6c:	50 e4       	ldi	r21, 0x40	; 64
    1f6e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f72:	dc 01       	movw	r26, r24
    1f74:	cb 01       	movw	r24, r22
    1f76:	f8 01       	movw	r30, r16
    1f78:	80 83       	st	Z, r24
    1f7a:	91 83       	std	Z+1, r25	; 0x01
    1f7c:	a2 83       	std	Z+2, r26	; 0x02
    1f7e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f80:	fe 01       	movw	r30, r28
    1f82:	ef 5b       	subi	r30, 0xBF	; 191
    1f84:	ff 4f       	sbci	r31, 0xFF	; 255
    1f86:	60 81       	ld	r22, Z
    1f88:	71 81       	ldd	r23, Z+1	; 0x01
    1f8a:	82 81       	ldd	r24, Z+2	; 0x02
    1f8c:	93 81       	ldd	r25, Z+3	; 0x03
    1f8e:	20 e0       	ldi	r18, 0x00	; 0
    1f90:	30 e0       	ldi	r19, 0x00	; 0
    1f92:	40 e8       	ldi	r20, 0x80	; 128
    1f94:	5f e3       	ldi	r21, 0x3F	; 63
    1f96:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1f9a:	88 23       	and	r24, r24
    1f9c:	34 f4       	brge	.+12     	; 0x1faa <lcd_init+0x542>
		__ticks = 1;
    1f9e:	81 e0       	ldi	r24, 0x01	; 1
    1fa0:	fe 01       	movw	r30, r28
    1fa2:	e0 5c       	subi	r30, 0xC0	; 192
    1fa4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa6:	80 83       	st	Z, r24
    1fa8:	9d c0       	rjmp	.+314    	; 0x20e4 <lcd_init+0x67c>
	else if (__tmp > 255)
    1faa:	fe 01       	movw	r30, r28
    1fac:	ef 5b       	subi	r30, 0xBF	; 191
    1fae:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb0:	60 81       	ld	r22, Z
    1fb2:	71 81       	ldd	r23, Z+1	; 0x01
    1fb4:	82 81       	ldd	r24, Z+2	; 0x02
    1fb6:	93 81       	ldd	r25, Z+3	; 0x03
    1fb8:	20 e0       	ldi	r18, 0x00	; 0
    1fba:	30 e0       	ldi	r19, 0x00	; 0
    1fbc:	4f e7       	ldi	r20, 0x7F	; 127
    1fbe:	53 e4       	ldi	r21, 0x43	; 67
    1fc0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1fc4:	18 16       	cp	r1, r24
    1fc6:	0c f0       	brlt	.+2      	; 0x1fca <lcd_init+0x562>
    1fc8:	7e c0       	rjmp	.+252    	; 0x20c6 <lcd_init+0x65e>
	{
		_delay_ms(__us / 1000.0);
    1fca:	fe 01       	movw	r30, r28
    1fcc:	eb 5b       	subi	r30, 0xBB	; 187
    1fce:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd0:	60 81       	ld	r22, Z
    1fd2:	71 81       	ldd	r23, Z+1	; 0x01
    1fd4:	82 81       	ldd	r24, Z+2	; 0x02
    1fd6:	93 81       	ldd	r25, Z+3	; 0x03
    1fd8:	20 e0       	ldi	r18, 0x00	; 0
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	4a e7       	ldi	r20, 0x7A	; 122
    1fde:	54 e4       	ldi	r21, 0x44	; 68
    1fe0:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1fe4:	dc 01       	movw	r26, r24
    1fe6:	cb 01       	movw	r24, r22
    1fe8:	8c af       	std	Y+60, r24	; 0x3c
    1fea:	9d af       	std	Y+61, r25	; 0x3d
    1fec:	ae af       	std	Y+62, r26	; 0x3e
    1fee:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ff0:	6c ad       	ldd	r22, Y+60	; 0x3c
    1ff2:	7d ad       	ldd	r23, Y+61	; 0x3d
    1ff4:	8e ad       	ldd	r24, Y+62	; 0x3e
    1ff6:	9f ad       	ldd	r25, Y+63	; 0x3f
    1ff8:	20 e0       	ldi	r18, 0x00	; 0
    1ffa:	30 e0       	ldi	r19, 0x00	; 0
    1ffc:	4a ef       	ldi	r20, 0xFA	; 250
    1ffe:	54 e4       	ldi	r21, 0x44	; 68
    2000:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2004:	dc 01       	movw	r26, r24
    2006:	cb 01       	movw	r24, r22
    2008:	88 af       	std	Y+56, r24	; 0x38
    200a:	99 af       	std	Y+57, r25	; 0x39
    200c:	aa af       	std	Y+58, r26	; 0x3a
    200e:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    2010:	68 ad       	ldd	r22, Y+56	; 0x38
    2012:	79 ad       	ldd	r23, Y+57	; 0x39
    2014:	8a ad       	ldd	r24, Y+58	; 0x3a
    2016:	9b ad       	ldd	r25, Y+59	; 0x3b
    2018:	20 e0       	ldi	r18, 0x00	; 0
    201a:	30 e0       	ldi	r19, 0x00	; 0
    201c:	40 e8       	ldi	r20, 0x80	; 128
    201e:	5f e3       	ldi	r21, 0x3F	; 63
    2020:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2024:	88 23       	and	r24, r24
    2026:	2c f4       	brge	.+10     	; 0x2032 <lcd_init+0x5ca>
		__ticks = 1;
    2028:	81 e0       	ldi	r24, 0x01	; 1
    202a:	90 e0       	ldi	r25, 0x00	; 0
    202c:	9f ab       	std	Y+55, r25	; 0x37
    202e:	8e ab       	std	Y+54, r24	; 0x36
    2030:	3f c0       	rjmp	.+126    	; 0x20b0 <lcd_init+0x648>
	else if (__tmp > 65535)
    2032:	68 ad       	ldd	r22, Y+56	; 0x38
    2034:	79 ad       	ldd	r23, Y+57	; 0x39
    2036:	8a ad       	ldd	r24, Y+58	; 0x3a
    2038:	9b ad       	ldd	r25, Y+59	; 0x3b
    203a:	20 e0       	ldi	r18, 0x00	; 0
    203c:	3f ef       	ldi	r19, 0xFF	; 255
    203e:	4f e7       	ldi	r20, 0x7F	; 127
    2040:	57 e4       	ldi	r21, 0x47	; 71
    2042:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2046:	18 16       	cp	r1, r24
    2048:	4c f5       	brge	.+82     	; 0x209c <lcd_init+0x634>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    204a:	6c ad       	ldd	r22, Y+60	; 0x3c
    204c:	7d ad       	ldd	r23, Y+61	; 0x3d
    204e:	8e ad       	ldd	r24, Y+62	; 0x3e
    2050:	9f ad       	ldd	r25, Y+63	; 0x3f
    2052:	20 e0       	ldi	r18, 0x00	; 0
    2054:	30 e0       	ldi	r19, 0x00	; 0
    2056:	40 e2       	ldi	r20, 0x20	; 32
    2058:	51 e4       	ldi	r21, 0x41	; 65
    205a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    205e:	dc 01       	movw	r26, r24
    2060:	cb 01       	movw	r24, r22
    2062:	bc 01       	movw	r22, r24
    2064:	cd 01       	movw	r24, r26
    2066:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    206a:	dc 01       	movw	r26, r24
    206c:	cb 01       	movw	r24, r22
    206e:	9f ab       	std	Y+55, r25	; 0x37
    2070:	8e ab       	std	Y+54, r24	; 0x36
    2072:	0f c0       	rjmp	.+30     	; 0x2092 <lcd_init+0x62a>
    2074:	88 ec       	ldi	r24, 0xC8	; 200
    2076:	90 e0       	ldi	r25, 0x00	; 0
    2078:	9d ab       	std	Y+53, r25	; 0x35
    207a:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    207c:	8c a9       	ldd	r24, Y+52	; 0x34
    207e:	9d a9       	ldd	r25, Y+53	; 0x35
    2080:	01 97       	sbiw	r24, 0x01	; 1
    2082:	f1 f7       	brne	.-4      	; 0x2080 <lcd_init+0x618>
    2084:	9d ab       	std	Y+53, r25	; 0x35
    2086:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2088:	8e a9       	ldd	r24, Y+54	; 0x36
    208a:	9f a9       	ldd	r25, Y+55	; 0x37
    208c:	01 97       	sbiw	r24, 0x01	; 1
    208e:	9f ab       	std	Y+55, r25	; 0x37
    2090:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2092:	8e a9       	ldd	r24, Y+54	; 0x36
    2094:	9f a9       	ldd	r25, Y+55	; 0x37
    2096:	00 97       	sbiw	r24, 0x00	; 0
    2098:	69 f7       	brne	.-38     	; 0x2074 <lcd_init+0x60c>
    209a:	2d c0       	rjmp	.+90     	; 0x20f6 <lcd_init+0x68e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    209c:	68 ad       	ldd	r22, Y+56	; 0x38
    209e:	79 ad       	ldd	r23, Y+57	; 0x39
    20a0:	8a ad       	ldd	r24, Y+58	; 0x3a
    20a2:	9b ad       	ldd	r25, Y+59	; 0x3b
    20a4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20a8:	dc 01       	movw	r26, r24
    20aa:	cb 01       	movw	r24, r22
    20ac:	9f ab       	std	Y+55, r25	; 0x37
    20ae:	8e ab       	std	Y+54, r24	; 0x36
    20b0:	8e a9       	ldd	r24, Y+54	; 0x36
    20b2:	9f a9       	ldd	r25, Y+55	; 0x37
    20b4:	9b ab       	std	Y+51, r25	; 0x33
    20b6:	8a ab       	std	Y+50, r24	; 0x32
    20b8:	8a a9       	ldd	r24, Y+50	; 0x32
    20ba:	9b a9       	ldd	r25, Y+51	; 0x33
    20bc:	01 97       	sbiw	r24, 0x01	; 1
    20be:	f1 f7       	brne	.-4      	; 0x20bc <lcd_init+0x654>
    20c0:	9b ab       	std	Y+51, r25	; 0x33
    20c2:	8a ab       	std	Y+50, r24	; 0x32
    20c4:	18 c0       	rjmp	.+48     	; 0x20f6 <lcd_init+0x68e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    20c6:	fe 01       	movw	r30, r28
    20c8:	ef 5b       	subi	r30, 0xBF	; 191
    20ca:	ff 4f       	sbci	r31, 0xFF	; 255
    20cc:	60 81       	ld	r22, Z
    20ce:	71 81       	ldd	r23, Z+1	; 0x01
    20d0:	82 81       	ldd	r24, Z+2	; 0x02
    20d2:	93 81       	ldd	r25, Z+3	; 0x03
    20d4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20d8:	dc 01       	movw	r26, r24
    20da:	cb 01       	movw	r24, r22
    20dc:	fe 01       	movw	r30, r28
    20de:	e0 5c       	subi	r30, 0xC0	; 192
    20e0:	ff 4f       	sbci	r31, 0xFF	; 255
    20e2:	80 83       	st	Z, r24
    20e4:	fe 01       	movw	r30, r28
    20e6:	e0 5c       	subi	r30, 0xC0	; 192
    20e8:	ff 4f       	sbci	r31, 0xFF	; 255
    20ea:	80 81       	ld	r24, Z
    20ec:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    20ee:	89 a9       	ldd	r24, Y+49	; 0x31
    20f0:	8a 95       	dec	r24
    20f2:	f1 f7       	brne	.-4      	; 0x20f0 <lcd_init+0x688>
    20f4:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(50);
	lcd_command(0x0E);
    20f6:	8e e0       	ldi	r24, 0x0E	; 14
    20f8:	0e 94 54 07 	call	0xea8	; 0xea8 <lcd_command>
    20fc:	80 e0       	ldi	r24, 0x00	; 0
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	a8 e4       	ldi	r26, 0x48	; 72
    2102:	b2 e4       	ldi	r27, 0x42	; 66
    2104:	8d a7       	std	Y+45, r24	; 0x2d
    2106:	9e a7       	std	Y+46, r25	; 0x2e
    2108:	af a7       	std	Y+47, r26	; 0x2f
    210a:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    210c:	6d a5       	ldd	r22, Y+45	; 0x2d
    210e:	7e a5       	ldd	r23, Y+46	; 0x2e
    2110:	8f a5       	ldd	r24, Y+47	; 0x2f
    2112:	98 a9       	ldd	r25, Y+48	; 0x30
    2114:	2b ea       	ldi	r18, 0xAB	; 171
    2116:	3a ea       	ldi	r19, 0xAA	; 170
    2118:	4a e2       	ldi	r20, 0x2A	; 42
    211a:	50 e4       	ldi	r21, 0x40	; 64
    211c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2120:	dc 01       	movw	r26, r24
    2122:	cb 01       	movw	r24, r22
    2124:	89 a7       	std	Y+41, r24	; 0x29
    2126:	9a a7       	std	Y+42, r25	; 0x2a
    2128:	ab a7       	std	Y+43, r26	; 0x2b
    212a:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    212c:	69 a5       	ldd	r22, Y+41	; 0x29
    212e:	7a a5       	ldd	r23, Y+42	; 0x2a
    2130:	8b a5       	ldd	r24, Y+43	; 0x2b
    2132:	9c a5       	ldd	r25, Y+44	; 0x2c
    2134:	20 e0       	ldi	r18, 0x00	; 0
    2136:	30 e0       	ldi	r19, 0x00	; 0
    2138:	40 e8       	ldi	r20, 0x80	; 128
    213a:	5f e3       	ldi	r21, 0x3F	; 63
    213c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2140:	88 23       	and	r24, r24
    2142:	1c f4       	brge	.+6      	; 0x214a <lcd_init+0x6e2>
		__ticks = 1;
    2144:	81 e0       	ldi	r24, 0x01	; 1
    2146:	88 a7       	std	Y+40, r24	; 0x28
    2148:	91 c0       	rjmp	.+290    	; 0x226c <lcd_init+0x804>
	else if (__tmp > 255)
    214a:	69 a5       	ldd	r22, Y+41	; 0x29
    214c:	7a a5       	ldd	r23, Y+42	; 0x2a
    214e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2150:	9c a5       	ldd	r25, Y+44	; 0x2c
    2152:	20 e0       	ldi	r18, 0x00	; 0
    2154:	30 e0       	ldi	r19, 0x00	; 0
    2156:	4f e7       	ldi	r20, 0x7F	; 127
    2158:	53 e4       	ldi	r21, 0x43	; 67
    215a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    215e:	18 16       	cp	r1, r24
    2160:	0c f0       	brlt	.+2      	; 0x2164 <lcd_init+0x6fc>
    2162:	7b c0       	rjmp	.+246    	; 0x225a <lcd_init+0x7f2>
	{
		_delay_ms(__us / 1000.0);
    2164:	6d a5       	ldd	r22, Y+45	; 0x2d
    2166:	7e a5       	ldd	r23, Y+46	; 0x2e
    2168:	8f a5       	ldd	r24, Y+47	; 0x2f
    216a:	98 a9       	ldd	r25, Y+48	; 0x30
    216c:	20 e0       	ldi	r18, 0x00	; 0
    216e:	30 e0       	ldi	r19, 0x00	; 0
    2170:	4a e7       	ldi	r20, 0x7A	; 122
    2172:	54 e4       	ldi	r21, 0x44	; 68
    2174:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2178:	dc 01       	movw	r26, r24
    217a:	cb 01       	movw	r24, r22
    217c:	8c a3       	std	Y+36, r24	; 0x24
    217e:	9d a3       	std	Y+37, r25	; 0x25
    2180:	ae a3       	std	Y+38, r26	; 0x26
    2182:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2184:	6c a1       	ldd	r22, Y+36	; 0x24
    2186:	7d a1       	ldd	r23, Y+37	; 0x25
    2188:	8e a1       	ldd	r24, Y+38	; 0x26
    218a:	9f a1       	ldd	r25, Y+39	; 0x27
    218c:	20 e0       	ldi	r18, 0x00	; 0
    218e:	30 e0       	ldi	r19, 0x00	; 0
    2190:	4a ef       	ldi	r20, 0xFA	; 250
    2192:	54 e4       	ldi	r21, 0x44	; 68
    2194:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2198:	dc 01       	movw	r26, r24
    219a:	cb 01       	movw	r24, r22
    219c:	88 a3       	std	Y+32, r24	; 0x20
    219e:	99 a3       	std	Y+33, r25	; 0x21
    21a0:	aa a3       	std	Y+34, r26	; 0x22
    21a2:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    21a4:	68 a1       	ldd	r22, Y+32	; 0x20
    21a6:	79 a1       	ldd	r23, Y+33	; 0x21
    21a8:	8a a1       	ldd	r24, Y+34	; 0x22
    21aa:	9b a1       	ldd	r25, Y+35	; 0x23
    21ac:	20 e0       	ldi	r18, 0x00	; 0
    21ae:	30 e0       	ldi	r19, 0x00	; 0
    21b0:	40 e8       	ldi	r20, 0x80	; 128
    21b2:	5f e3       	ldi	r21, 0x3F	; 63
    21b4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    21b8:	88 23       	and	r24, r24
    21ba:	2c f4       	brge	.+10     	; 0x21c6 <lcd_init+0x75e>
		__ticks = 1;
    21bc:	81 e0       	ldi	r24, 0x01	; 1
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	9f 8f       	std	Y+31, r25	; 0x1f
    21c2:	8e 8f       	std	Y+30, r24	; 0x1e
    21c4:	3f c0       	rjmp	.+126    	; 0x2244 <lcd_init+0x7dc>
	else if (__tmp > 65535)
    21c6:	68 a1       	ldd	r22, Y+32	; 0x20
    21c8:	79 a1       	ldd	r23, Y+33	; 0x21
    21ca:	8a a1       	ldd	r24, Y+34	; 0x22
    21cc:	9b a1       	ldd	r25, Y+35	; 0x23
    21ce:	20 e0       	ldi	r18, 0x00	; 0
    21d0:	3f ef       	ldi	r19, 0xFF	; 255
    21d2:	4f e7       	ldi	r20, 0x7F	; 127
    21d4:	57 e4       	ldi	r21, 0x47	; 71
    21d6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    21da:	18 16       	cp	r1, r24
    21dc:	4c f5       	brge	.+82     	; 0x2230 <lcd_init+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21de:	6c a1       	ldd	r22, Y+36	; 0x24
    21e0:	7d a1       	ldd	r23, Y+37	; 0x25
    21e2:	8e a1       	ldd	r24, Y+38	; 0x26
    21e4:	9f a1       	ldd	r25, Y+39	; 0x27
    21e6:	20 e0       	ldi	r18, 0x00	; 0
    21e8:	30 e0       	ldi	r19, 0x00	; 0
    21ea:	40 e2       	ldi	r20, 0x20	; 32
    21ec:	51 e4       	ldi	r21, 0x41	; 65
    21ee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21f2:	dc 01       	movw	r26, r24
    21f4:	cb 01       	movw	r24, r22
    21f6:	bc 01       	movw	r22, r24
    21f8:	cd 01       	movw	r24, r26
    21fa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21fe:	dc 01       	movw	r26, r24
    2200:	cb 01       	movw	r24, r22
    2202:	9f 8f       	std	Y+31, r25	; 0x1f
    2204:	8e 8f       	std	Y+30, r24	; 0x1e
    2206:	0f c0       	rjmp	.+30     	; 0x2226 <lcd_init+0x7be>
    2208:	88 ec       	ldi	r24, 0xC8	; 200
    220a:	90 e0       	ldi	r25, 0x00	; 0
    220c:	9d 8f       	std	Y+29, r25	; 0x1d
    220e:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2210:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2212:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2214:	01 97       	sbiw	r24, 0x01	; 1
    2216:	f1 f7       	brne	.-4      	; 0x2214 <lcd_init+0x7ac>
    2218:	9d 8f       	std	Y+29, r25	; 0x1d
    221a:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    221c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    221e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2220:	01 97       	sbiw	r24, 0x01	; 1
    2222:	9f 8f       	std	Y+31, r25	; 0x1f
    2224:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2226:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2228:	9f 8d       	ldd	r25, Y+31	; 0x1f
    222a:	00 97       	sbiw	r24, 0x00	; 0
    222c:	69 f7       	brne	.-38     	; 0x2208 <lcd_init+0x7a0>
    222e:	24 c0       	rjmp	.+72     	; 0x2278 <lcd_init+0x810>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2230:	68 a1       	ldd	r22, Y+32	; 0x20
    2232:	79 a1       	ldd	r23, Y+33	; 0x21
    2234:	8a a1       	ldd	r24, Y+34	; 0x22
    2236:	9b a1       	ldd	r25, Y+35	; 0x23
    2238:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    223c:	dc 01       	movw	r26, r24
    223e:	cb 01       	movw	r24, r22
    2240:	9f 8f       	std	Y+31, r25	; 0x1f
    2242:	8e 8f       	std	Y+30, r24	; 0x1e
    2244:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2246:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2248:	9b 8f       	std	Y+27, r25	; 0x1b
    224a:	8a 8f       	std	Y+26, r24	; 0x1a
    224c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    224e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2250:	01 97       	sbiw	r24, 0x01	; 1
    2252:	f1 f7       	brne	.-4      	; 0x2250 <lcd_init+0x7e8>
    2254:	9b 8f       	std	Y+27, r25	; 0x1b
    2256:	8a 8f       	std	Y+26, r24	; 0x1a
    2258:	0f c0       	rjmp	.+30     	; 0x2278 <lcd_init+0x810>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    225a:	69 a5       	ldd	r22, Y+41	; 0x29
    225c:	7a a5       	ldd	r23, Y+42	; 0x2a
    225e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2260:	9c a5       	ldd	r25, Y+44	; 0x2c
    2262:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2266:	dc 01       	movw	r26, r24
    2268:	cb 01       	movw	r24, r22
    226a:	88 a7       	std	Y+40, r24	; 0x28
    226c:	88 a5       	ldd	r24, Y+40	; 0x28
    226e:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2270:	89 8d       	ldd	r24, Y+25	; 0x19
    2272:	8a 95       	dec	r24
    2274:	f1 f7       	brne	.-4      	; 0x2272 <lcd_init+0x80a>
    2276:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(50);
	lcd_command(0x01);
    2278:	81 e0       	ldi	r24, 0x01	; 1
    227a:	0e 94 54 07 	call	0xea8	; 0xea8 <lcd_command>
    227e:	80 e0       	ldi	r24, 0x00	; 0
    2280:	90 e0       	ldi	r25, 0x00	; 0
    2282:	aa ef       	ldi	r26, 0xFA	; 250
    2284:	b4 e4       	ldi	r27, 0x44	; 68
    2286:	8d 8b       	std	Y+21, r24	; 0x15
    2288:	9e 8b       	std	Y+22, r25	; 0x16
    228a:	af 8b       	std	Y+23, r26	; 0x17
    228c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    228e:	6d 89       	ldd	r22, Y+21	; 0x15
    2290:	7e 89       	ldd	r23, Y+22	; 0x16
    2292:	8f 89       	ldd	r24, Y+23	; 0x17
    2294:	98 8d       	ldd	r25, Y+24	; 0x18
    2296:	2b ea       	ldi	r18, 0xAB	; 171
    2298:	3a ea       	ldi	r19, 0xAA	; 170
    229a:	4a e2       	ldi	r20, 0x2A	; 42
    229c:	50 e4       	ldi	r21, 0x40	; 64
    229e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22a2:	dc 01       	movw	r26, r24
    22a4:	cb 01       	movw	r24, r22
    22a6:	89 8b       	std	Y+17, r24	; 0x11
    22a8:	9a 8b       	std	Y+18, r25	; 0x12
    22aa:	ab 8b       	std	Y+19, r26	; 0x13
    22ac:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    22ae:	69 89       	ldd	r22, Y+17	; 0x11
    22b0:	7a 89       	ldd	r23, Y+18	; 0x12
    22b2:	8b 89       	ldd	r24, Y+19	; 0x13
    22b4:	9c 89       	ldd	r25, Y+20	; 0x14
    22b6:	20 e0       	ldi	r18, 0x00	; 0
    22b8:	30 e0       	ldi	r19, 0x00	; 0
    22ba:	40 e8       	ldi	r20, 0x80	; 128
    22bc:	5f e3       	ldi	r21, 0x3F	; 63
    22be:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    22c2:	88 23       	and	r24, r24
    22c4:	1c f4       	brge	.+6      	; 0x22cc <lcd_init+0x864>
		__ticks = 1;
    22c6:	81 e0       	ldi	r24, 0x01	; 1
    22c8:	88 8b       	std	Y+16, r24	; 0x10
    22ca:	91 c0       	rjmp	.+290    	; 0x23ee <lcd_init+0x986>
	else if (__tmp > 255)
    22cc:	69 89       	ldd	r22, Y+17	; 0x11
    22ce:	7a 89       	ldd	r23, Y+18	; 0x12
    22d0:	8b 89       	ldd	r24, Y+19	; 0x13
    22d2:	9c 89       	ldd	r25, Y+20	; 0x14
    22d4:	20 e0       	ldi	r18, 0x00	; 0
    22d6:	30 e0       	ldi	r19, 0x00	; 0
    22d8:	4f e7       	ldi	r20, 0x7F	; 127
    22da:	53 e4       	ldi	r21, 0x43	; 67
    22dc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    22e0:	18 16       	cp	r1, r24
    22e2:	0c f0       	brlt	.+2      	; 0x22e6 <lcd_init+0x87e>
    22e4:	7b c0       	rjmp	.+246    	; 0x23dc <lcd_init+0x974>
	{
		_delay_ms(__us / 1000.0);
    22e6:	6d 89       	ldd	r22, Y+21	; 0x15
    22e8:	7e 89       	ldd	r23, Y+22	; 0x16
    22ea:	8f 89       	ldd	r24, Y+23	; 0x17
    22ec:	98 8d       	ldd	r25, Y+24	; 0x18
    22ee:	20 e0       	ldi	r18, 0x00	; 0
    22f0:	30 e0       	ldi	r19, 0x00	; 0
    22f2:	4a e7       	ldi	r20, 0x7A	; 122
    22f4:	54 e4       	ldi	r21, 0x44	; 68
    22f6:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    22fa:	dc 01       	movw	r26, r24
    22fc:	cb 01       	movw	r24, r22
    22fe:	8c 87       	std	Y+12, r24	; 0x0c
    2300:	9d 87       	std	Y+13, r25	; 0x0d
    2302:	ae 87       	std	Y+14, r26	; 0x0e
    2304:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2306:	6c 85       	ldd	r22, Y+12	; 0x0c
    2308:	7d 85       	ldd	r23, Y+13	; 0x0d
    230a:	8e 85       	ldd	r24, Y+14	; 0x0e
    230c:	9f 85       	ldd	r25, Y+15	; 0x0f
    230e:	20 e0       	ldi	r18, 0x00	; 0
    2310:	30 e0       	ldi	r19, 0x00	; 0
    2312:	4a ef       	ldi	r20, 0xFA	; 250
    2314:	54 e4       	ldi	r21, 0x44	; 68
    2316:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    231a:	dc 01       	movw	r26, r24
    231c:	cb 01       	movw	r24, r22
    231e:	88 87       	std	Y+8, r24	; 0x08
    2320:	99 87       	std	Y+9, r25	; 0x09
    2322:	aa 87       	std	Y+10, r26	; 0x0a
    2324:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2326:	68 85       	ldd	r22, Y+8	; 0x08
    2328:	79 85       	ldd	r23, Y+9	; 0x09
    232a:	8a 85       	ldd	r24, Y+10	; 0x0a
    232c:	9b 85       	ldd	r25, Y+11	; 0x0b
    232e:	20 e0       	ldi	r18, 0x00	; 0
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	40 e8       	ldi	r20, 0x80	; 128
    2334:	5f e3       	ldi	r21, 0x3F	; 63
    2336:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    233a:	88 23       	and	r24, r24
    233c:	2c f4       	brge	.+10     	; 0x2348 <lcd_init+0x8e0>
		__ticks = 1;
    233e:	81 e0       	ldi	r24, 0x01	; 1
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	9f 83       	std	Y+7, r25	; 0x07
    2344:	8e 83       	std	Y+6, r24	; 0x06
    2346:	3f c0       	rjmp	.+126    	; 0x23c6 <lcd_init+0x95e>
	else if (__tmp > 65535)
    2348:	68 85       	ldd	r22, Y+8	; 0x08
    234a:	79 85       	ldd	r23, Y+9	; 0x09
    234c:	8a 85       	ldd	r24, Y+10	; 0x0a
    234e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2350:	20 e0       	ldi	r18, 0x00	; 0
    2352:	3f ef       	ldi	r19, 0xFF	; 255
    2354:	4f e7       	ldi	r20, 0x7F	; 127
    2356:	57 e4       	ldi	r21, 0x47	; 71
    2358:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    235c:	18 16       	cp	r1, r24
    235e:	4c f5       	brge	.+82     	; 0x23b2 <lcd_init+0x94a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2360:	6c 85       	ldd	r22, Y+12	; 0x0c
    2362:	7d 85       	ldd	r23, Y+13	; 0x0d
    2364:	8e 85       	ldd	r24, Y+14	; 0x0e
    2366:	9f 85       	ldd	r25, Y+15	; 0x0f
    2368:	20 e0       	ldi	r18, 0x00	; 0
    236a:	30 e0       	ldi	r19, 0x00	; 0
    236c:	40 e2       	ldi	r20, 0x20	; 32
    236e:	51 e4       	ldi	r21, 0x41	; 65
    2370:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2374:	dc 01       	movw	r26, r24
    2376:	cb 01       	movw	r24, r22
    2378:	bc 01       	movw	r22, r24
    237a:	cd 01       	movw	r24, r26
    237c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2380:	dc 01       	movw	r26, r24
    2382:	cb 01       	movw	r24, r22
    2384:	9f 83       	std	Y+7, r25	; 0x07
    2386:	8e 83       	std	Y+6, r24	; 0x06
    2388:	0f c0       	rjmp	.+30     	; 0x23a8 <lcd_init+0x940>
    238a:	88 ec       	ldi	r24, 0xC8	; 200
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	9d 83       	std	Y+5, r25	; 0x05
    2390:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2392:	8c 81       	ldd	r24, Y+4	; 0x04
    2394:	9d 81       	ldd	r25, Y+5	; 0x05
    2396:	01 97       	sbiw	r24, 0x01	; 1
    2398:	f1 f7       	brne	.-4      	; 0x2396 <lcd_init+0x92e>
    239a:	9d 83       	std	Y+5, r25	; 0x05
    239c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    239e:	8e 81       	ldd	r24, Y+6	; 0x06
    23a0:	9f 81       	ldd	r25, Y+7	; 0x07
    23a2:	01 97       	sbiw	r24, 0x01	; 1
    23a4:	9f 83       	std	Y+7, r25	; 0x07
    23a6:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23a8:	8e 81       	ldd	r24, Y+6	; 0x06
    23aa:	9f 81       	ldd	r25, Y+7	; 0x07
    23ac:	00 97       	sbiw	r24, 0x00	; 0
    23ae:	69 f7       	brne	.-38     	; 0x238a <lcd_init+0x922>
    23b0:	24 c0       	rjmp	.+72     	; 0x23fa <lcd_init+0x992>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23b2:	68 85       	ldd	r22, Y+8	; 0x08
    23b4:	79 85       	ldd	r23, Y+9	; 0x09
    23b6:	8a 85       	ldd	r24, Y+10	; 0x0a
    23b8:	9b 85       	ldd	r25, Y+11	; 0x0b
    23ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23be:	dc 01       	movw	r26, r24
    23c0:	cb 01       	movw	r24, r22
    23c2:	9f 83       	std	Y+7, r25	; 0x07
    23c4:	8e 83       	std	Y+6, r24	; 0x06
    23c6:	8e 81       	ldd	r24, Y+6	; 0x06
    23c8:	9f 81       	ldd	r25, Y+7	; 0x07
    23ca:	9b 83       	std	Y+3, r25	; 0x03
    23cc:	8a 83       	std	Y+2, r24	; 0x02
    23ce:	8a 81       	ldd	r24, Y+2	; 0x02
    23d0:	9b 81       	ldd	r25, Y+3	; 0x03
    23d2:	01 97       	sbiw	r24, 0x01	; 1
    23d4:	f1 f7       	brne	.-4      	; 0x23d2 <lcd_init+0x96a>
    23d6:	9b 83       	std	Y+3, r25	; 0x03
    23d8:	8a 83       	std	Y+2, r24	; 0x02
    23da:	0f c0       	rjmp	.+30     	; 0x23fa <lcd_init+0x992>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    23dc:	69 89       	ldd	r22, Y+17	; 0x11
    23de:	7a 89       	ldd	r23, Y+18	; 0x12
    23e0:	8b 89       	ldd	r24, Y+19	; 0x13
    23e2:	9c 89       	ldd	r25, Y+20	; 0x14
    23e4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23e8:	dc 01       	movw	r26, r24
    23ea:	cb 01       	movw	r24, r22
    23ec:	88 8b       	std	Y+16, r24	; 0x10
    23ee:	88 89       	ldd	r24, Y+16	; 0x10
    23f0:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    23f2:	89 81       	ldd	r24, Y+1	; 0x01
    23f4:	8a 95       	dec	r24
    23f6:	f1 f7       	brne	.-4      	; 0x23f4 <lcd_init+0x98c>
    23f8:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(2000);
	lcd_command(0x06);
    23fa:	86 e0       	ldi	r24, 0x06	; 6
    23fc:	0e 94 54 07 	call	0xea8	; 0xea8 <lcd_command>
}
    2400:	c8 58       	subi	r28, 0x88	; 136
    2402:	df 4f       	sbci	r29, 0xFF	; 255
    2404:	0f b6       	in	r0, 0x3f	; 63
    2406:	f8 94       	cli
    2408:	de bf       	out	0x3e, r29	; 62
    240a:	0f be       	out	0x3f, r0	; 63
    240c:	cd bf       	out	0x3d, r28	; 61
    240e:	cf 91       	pop	r28
    2410:	df 91       	pop	r29
    2412:	1f 91       	pop	r17
    2414:	0f 91       	pop	r16
    2416:	08 95       	ret

00002418 <lcd_goto_xy>:
//function to locate the position.
//lcd_goto_xy(row,columm);
//line 1 of lcd=row 1. ,line2 of lcd=row2
//columm 1 of lcd =columm 1., columm 16 of lcd =columm 16.

void lcd_goto_xy(unsigned char row,unsigned char columm){
    2418:	df 93       	push	r29
    241a:	cf 93       	push	r28
    241c:	cd b7       	in	r28, 0x3d	; 61
    241e:	de b7       	in	r29, 0x3e	; 62
    2420:	6e 97       	sbiw	r28, 0x1e	; 30
    2422:	0f b6       	in	r0, 0x3f	; 63
    2424:	f8 94       	cli
    2426:	de bf       	out	0x3e, r29	; 62
    2428:	0f be       	out	0x3f, r0	; 63
    242a:	cd bf       	out	0x3d, r28	; 61
    242c:	8d 8f       	std	Y+29, r24	; 0x1d
    242e:	6e 8f       	std	Y+30, r22	; 0x1e
	unsigned char fristcharadr[]={0x80,0xC0,0x90,0xD0};
    2430:	80 e8       	ldi	r24, 0x80	; 128
    2432:	89 8f       	std	Y+25, r24	; 0x19
    2434:	80 ec       	ldi	r24, 0xC0	; 192
    2436:	8a 8f       	std	Y+26, r24	; 0x1a
    2438:	80 e9       	ldi	r24, 0x90	; 144
    243a:	8b 8f       	std	Y+27, r24	; 0x1b
    243c:	80 ed       	ldi	r24, 0xD0	; 208
    243e:	8c 8f       	std	Y+28, r24	; 0x1c
		lcd_command(fristcharadr[row-1]+(columm-1));
    2440:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2442:	88 2f       	mov	r24, r24
    2444:	90 e0       	ldi	r25, 0x00	; 0
    2446:	9c 01       	movw	r18, r24
    2448:	21 50       	subi	r18, 0x01	; 1
    244a:	30 40       	sbci	r19, 0x00	; 0
    244c:	ce 01       	movw	r24, r28
    244e:	49 96       	adiw	r24, 0x19	; 25
    2450:	fc 01       	movw	r30, r24
    2452:	e2 0f       	add	r30, r18
    2454:	f3 1f       	adc	r31, r19
    2456:	90 81       	ld	r25, Z
    2458:	8e 8d       	ldd	r24, Y+30	; 0x1e
    245a:	89 0f       	add	r24, r25
    245c:	81 50       	subi	r24, 0x01	; 1
    245e:	0e 94 54 07 	call	0xea8	; 0xea8 <lcd_command>
    2462:	80 e0       	ldi	r24, 0x00	; 0
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	a8 ec       	ldi	r26, 0xC8	; 200
    2468:	b2 e4       	ldi	r27, 0x42	; 66
    246a:	8d 8b       	std	Y+21, r24	; 0x15
    246c:	9e 8b       	std	Y+22, r25	; 0x16
    246e:	af 8b       	std	Y+23, r26	; 0x17
    2470:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2472:	6d 89       	ldd	r22, Y+21	; 0x15
    2474:	7e 89       	ldd	r23, Y+22	; 0x16
    2476:	8f 89       	ldd	r24, Y+23	; 0x17
    2478:	98 8d       	ldd	r25, Y+24	; 0x18
    247a:	2b ea       	ldi	r18, 0xAB	; 171
    247c:	3a ea       	ldi	r19, 0xAA	; 170
    247e:	4a e2       	ldi	r20, 0x2A	; 42
    2480:	50 e4       	ldi	r21, 0x40	; 64
    2482:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2486:	dc 01       	movw	r26, r24
    2488:	cb 01       	movw	r24, r22
    248a:	89 8b       	std	Y+17, r24	; 0x11
    248c:	9a 8b       	std	Y+18, r25	; 0x12
    248e:	ab 8b       	std	Y+19, r26	; 0x13
    2490:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2492:	69 89       	ldd	r22, Y+17	; 0x11
    2494:	7a 89       	ldd	r23, Y+18	; 0x12
    2496:	8b 89       	ldd	r24, Y+19	; 0x13
    2498:	9c 89       	ldd	r25, Y+20	; 0x14
    249a:	20 e0       	ldi	r18, 0x00	; 0
    249c:	30 e0       	ldi	r19, 0x00	; 0
    249e:	40 e8       	ldi	r20, 0x80	; 128
    24a0:	5f e3       	ldi	r21, 0x3F	; 63
    24a2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    24a6:	88 23       	and	r24, r24
    24a8:	1c f4       	brge	.+6      	; 0x24b0 <lcd_goto_xy+0x98>
		__ticks = 1;
    24aa:	81 e0       	ldi	r24, 0x01	; 1
    24ac:	88 8b       	std	Y+16, r24	; 0x10
    24ae:	91 c0       	rjmp	.+290    	; 0x25d2 <lcd_goto_xy+0x1ba>
	else if (__tmp > 255)
    24b0:	69 89       	ldd	r22, Y+17	; 0x11
    24b2:	7a 89       	ldd	r23, Y+18	; 0x12
    24b4:	8b 89       	ldd	r24, Y+19	; 0x13
    24b6:	9c 89       	ldd	r25, Y+20	; 0x14
    24b8:	20 e0       	ldi	r18, 0x00	; 0
    24ba:	30 e0       	ldi	r19, 0x00	; 0
    24bc:	4f e7       	ldi	r20, 0x7F	; 127
    24be:	53 e4       	ldi	r21, 0x43	; 67
    24c0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    24c4:	18 16       	cp	r1, r24
    24c6:	0c f0       	brlt	.+2      	; 0x24ca <lcd_goto_xy+0xb2>
    24c8:	7b c0       	rjmp	.+246    	; 0x25c0 <lcd_goto_xy+0x1a8>
	{
		_delay_ms(__us / 1000.0);
    24ca:	6d 89       	ldd	r22, Y+21	; 0x15
    24cc:	7e 89       	ldd	r23, Y+22	; 0x16
    24ce:	8f 89       	ldd	r24, Y+23	; 0x17
    24d0:	98 8d       	ldd	r25, Y+24	; 0x18
    24d2:	20 e0       	ldi	r18, 0x00	; 0
    24d4:	30 e0       	ldi	r19, 0x00	; 0
    24d6:	4a e7       	ldi	r20, 0x7A	; 122
    24d8:	54 e4       	ldi	r21, 0x44	; 68
    24da:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    24de:	dc 01       	movw	r26, r24
    24e0:	cb 01       	movw	r24, r22
    24e2:	8c 87       	std	Y+12, r24	; 0x0c
    24e4:	9d 87       	std	Y+13, r25	; 0x0d
    24e6:	ae 87       	std	Y+14, r26	; 0x0e
    24e8:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24ea:	6c 85       	ldd	r22, Y+12	; 0x0c
    24ec:	7d 85       	ldd	r23, Y+13	; 0x0d
    24ee:	8e 85       	ldd	r24, Y+14	; 0x0e
    24f0:	9f 85       	ldd	r25, Y+15	; 0x0f
    24f2:	20 e0       	ldi	r18, 0x00	; 0
    24f4:	30 e0       	ldi	r19, 0x00	; 0
    24f6:	4a ef       	ldi	r20, 0xFA	; 250
    24f8:	54 e4       	ldi	r21, 0x44	; 68
    24fa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24fe:	dc 01       	movw	r26, r24
    2500:	cb 01       	movw	r24, r22
    2502:	88 87       	std	Y+8, r24	; 0x08
    2504:	99 87       	std	Y+9, r25	; 0x09
    2506:	aa 87       	std	Y+10, r26	; 0x0a
    2508:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    250a:	68 85       	ldd	r22, Y+8	; 0x08
    250c:	79 85       	ldd	r23, Y+9	; 0x09
    250e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2510:	9b 85       	ldd	r25, Y+11	; 0x0b
    2512:	20 e0       	ldi	r18, 0x00	; 0
    2514:	30 e0       	ldi	r19, 0x00	; 0
    2516:	40 e8       	ldi	r20, 0x80	; 128
    2518:	5f e3       	ldi	r21, 0x3F	; 63
    251a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    251e:	88 23       	and	r24, r24
    2520:	2c f4       	brge	.+10     	; 0x252c <lcd_goto_xy+0x114>
		__ticks = 1;
    2522:	81 e0       	ldi	r24, 0x01	; 1
    2524:	90 e0       	ldi	r25, 0x00	; 0
    2526:	9f 83       	std	Y+7, r25	; 0x07
    2528:	8e 83       	std	Y+6, r24	; 0x06
    252a:	3f c0       	rjmp	.+126    	; 0x25aa <lcd_goto_xy+0x192>
	else if (__tmp > 65535)
    252c:	68 85       	ldd	r22, Y+8	; 0x08
    252e:	79 85       	ldd	r23, Y+9	; 0x09
    2530:	8a 85       	ldd	r24, Y+10	; 0x0a
    2532:	9b 85       	ldd	r25, Y+11	; 0x0b
    2534:	20 e0       	ldi	r18, 0x00	; 0
    2536:	3f ef       	ldi	r19, 0xFF	; 255
    2538:	4f e7       	ldi	r20, 0x7F	; 127
    253a:	57 e4       	ldi	r21, 0x47	; 71
    253c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2540:	18 16       	cp	r1, r24
    2542:	4c f5       	brge	.+82     	; 0x2596 <lcd_goto_xy+0x17e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2544:	6c 85       	ldd	r22, Y+12	; 0x0c
    2546:	7d 85       	ldd	r23, Y+13	; 0x0d
    2548:	8e 85       	ldd	r24, Y+14	; 0x0e
    254a:	9f 85       	ldd	r25, Y+15	; 0x0f
    254c:	20 e0       	ldi	r18, 0x00	; 0
    254e:	30 e0       	ldi	r19, 0x00	; 0
    2550:	40 e2       	ldi	r20, 0x20	; 32
    2552:	51 e4       	ldi	r21, 0x41	; 65
    2554:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2558:	dc 01       	movw	r26, r24
    255a:	cb 01       	movw	r24, r22
    255c:	bc 01       	movw	r22, r24
    255e:	cd 01       	movw	r24, r26
    2560:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2564:	dc 01       	movw	r26, r24
    2566:	cb 01       	movw	r24, r22
    2568:	9f 83       	std	Y+7, r25	; 0x07
    256a:	8e 83       	std	Y+6, r24	; 0x06
    256c:	0f c0       	rjmp	.+30     	; 0x258c <lcd_goto_xy+0x174>
    256e:	88 ec       	ldi	r24, 0xC8	; 200
    2570:	90 e0       	ldi	r25, 0x00	; 0
    2572:	9d 83       	std	Y+5, r25	; 0x05
    2574:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2576:	8c 81       	ldd	r24, Y+4	; 0x04
    2578:	9d 81       	ldd	r25, Y+5	; 0x05
    257a:	01 97       	sbiw	r24, 0x01	; 1
    257c:	f1 f7       	brne	.-4      	; 0x257a <lcd_goto_xy+0x162>
    257e:	9d 83       	std	Y+5, r25	; 0x05
    2580:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2582:	8e 81       	ldd	r24, Y+6	; 0x06
    2584:	9f 81       	ldd	r25, Y+7	; 0x07
    2586:	01 97       	sbiw	r24, 0x01	; 1
    2588:	9f 83       	std	Y+7, r25	; 0x07
    258a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    258c:	8e 81       	ldd	r24, Y+6	; 0x06
    258e:	9f 81       	ldd	r25, Y+7	; 0x07
    2590:	00 97       	sbiw	r24, 0x00	; 0
    2592:	69 f7       	brne	.-38     	; 0x256e <lcd_goto_xy+0x156>
    2594:	24 c0       	rjmp	.+72     	; 0x25de <lcd_goto_xy+0x1c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2596:	68 85       	ldd	r22, Y+8	; 0x08
    2598:	79 85       	ldd	r23, Y+9	; 0x09
    259a:	8a 85       	ldd	r24, Y+10	; 0x0a
    259c:	9b 85       	ldd	r25, Y+11	; 0x0b
    259e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25a2:	dc 01       	movw	r26, r24
    25a4:	cb 01       	movw	r24, r22
    25a6:	9f 83       	std	Y+7, r25	; 0x07
    25a8:	8e 83       	std	Y+6, r24	; 0x06
    25aa:	8e 81       	ldd	r24, Y+6	; 0x06
    25ac:	9f 81       	ldd	r25, Y+7	; 0x07
    25ae:	9b 83       	std	Y+3, r25	; 0x03
    25b0:	8a 83       	std	Y+2, r24	; 0x02
    25b2:	8a 81       	ldd	r24, Y+2	; 0x02
    25b4:	9b 81       	ldd	r25, Y+3	; 0x03
    25b6:	01 97       	sbiw	r24, 0x01	; 1
    25b8:	f1 f7       	brne	.-4      	; 0x25b6 <lcd_goto_xy+0x19e>
    25ba:	9b 83       	std	Y+3, r25	; 0x03
    25bc:	8a 83       	std	Y+2, r24	; 0x02
    25be:	0f c0       	rjmp	.+30     	; 0x25de <lcd_goto_xy+0x1c6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    25c0:	69 89       	ldd	r22, Y+17	; 0x11
    25c2:	7a 89       	ldd	r23, Y+18	; 0x12
    25c4:	8b 89       	ldd	r24, Y+19	; 0x13
    25c6:	9c 89       	ldd	r25, Y+20	; 0x14
    25c8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25cc:	dc 01       	movw	r26, r24
    25ce:	cb 01       	movw	r24, r22
    25d0:	88 8b       	std	Y+16, r24	; 0x10
    25d2:	88 89       	ldd	r24, Y+16	; 0x10
    25d4:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    25d6:	89 81       	ldd	r24, Y+1	; 0x01
    25d8:	8a 95       	dec	r24
    25da:	f1 f7       	brne	.-4      	; 0x25d8 <lcd_goto_xy+0x1c0>
    25dc:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(100);
	}
    25de:	6e 96       	adiw	r28, 0x1e	; 30
    25e0:	0f b6       	in	r0, 0x3f	; 63
    25e2:	f8 94       	cli
    25e4:	de bf       	out	0x3e, r29	; 62
    25e6:	0f be       	out	0x3f, r0	; 63
    25e8:	cd bf       	out	0x3d, r28	; 61
    25ea:	cf 91       	pop	r28
    25ec:	df 91       	pop	r29
    25ee:	08 95       	ret

000025f0 <lcd_print>:
//***********************************************************************************************************
//function to put what u need.
// lcd_print("hallo");
 void lcd_print(char *text){
    25f0:	df 93       	push	r29
    25f2:	cf 93       	push	r28
    25f4:	00 d0       	rcall	.+0      	; 0x25f6 <lcd_print+0x6>
    25f6:	cd b7       	in	r28, 0x3d	; 61
    25f8:	de b7       	in	r29, 0x3e	; 62
    25fa:	9a 83       	std	Y+2, r25	; 0x02
    25fc:	89 83       	std	Y+1, r24	; 0x01
    25fe:	0b c0       	rjmp	.+22     	; 0x2616 <lcd_print+0x26>
	while(*text>0){
		lcd_data(*text++);
    2600:	e9 81       	ldd	r30, Y+1	; 0x01
    2602:	fa 81       	ldd	r31, Y+2	; 0x02
    2604:	20 81       	ld	r18, Z
    2606:	89 81       	ldd	r24, Y+1	; 0x01
    2608:	9a 81       	ldd	r25, Y+2	; 0x02
    260a:	01 96       	adiw	r24, 0x01	; 1
    260c:	9a 83       	std	Y+2, r25	; 0x02
    260e:	89 83       	std	Y+1, r24	; 0x01
    2610:	82 2f       	mov	r24, r18
    2612:	0e 94 44 0a 	call	0x1488	; 0x1488 <lcd_data>
	}
//***********************************************************************************************************
//function to put what u need.
// lcd_print("hallo");
 void lcd_print(char *text){
	while(*text>0){
    2616:	e9 81       	ldd	r30, Y+1	; 0x01
    2618:	fa 81       	ldd	r31, Y+2	; 0x02
    261a:	80 81       	ld	r24, Z
    261c:	88 23       	and	r24, r24
    261e:	81 f7       	brne	.-32     	; 0x2600 <lcd_print+0x10>
		lcd_data(*text++);
	}
}
    2620:	0f 90       	pop	r0
    2622:	0f 90       	pop	r0
    2624:	cf 91       	pop	r28
    2626:	df 91       	pop	r29
    2628:	08 95       	ret

0000262a <lcd_CLEAR>:

//************************************************************************************************************
//function to clear lcd. 
//lcd_CLEAR();.
void lcd_CLEAR(){
    262a:	df 93       	push	r29
    262c:	cf 93       	push	r28
    262e:	cd b7       	in	r28, 0x3d	; 61
    2630:	de b7       	in	r29, 0x3e	; 62
    2632:	2e 97       	sbiw	r28, 0x0e	; 14
    2634:	0f b6       	in	r0, 0x3f	; 63
    2636:	f8 94       	cli
    2638:	de bf       	out	0x3e, r29	; 62
    263a:	0f be       	out	0x3f, r0	; 63
    263c:	cd bf       	out	0x3d, r28	; 61
	lcd_command(0x01);
    263e:	81 e0       	ldi	r24, 0x01	; 1
    2640:	0e 94 54 07 	call	0xea8	; 0xea8 <lcd_command>
    2644:	80 e0       	ldi	r24, 0x00	; 0
    2646:	90 e0       	ldi	r25, 0x00	; 0
    2648:	a0 e0       	ldi	r26, 0x00	; 0
    264a:	b0 e4       	ldi	r27, 0x40	; 64
    264c:	8b 87       	std	Y+11, r24	; 0x0b
    264e:	9c 87       	std	Y+12, r25	; 0x0c
    2650:	ad 87       	std	Y+13, r26	; 0x0d
    2652:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2654:	6b 85       	ldd	r22, Y+11	; 0x0b
    2656:	7c 85       	ldd	r23, Y+12	; 0x0c
    2658:	8d 85       	ldd	r24, Y+13	; 0x0d
    265a:	9e 85       	ldd	r25, Y+14	; 0x0e
    265c:	20 e0       	ldi	r18, 0x00	; 0
    265e:	30 e0       	ldi	r19, 0x00	; 0
    2660:	4a ef       	ldi	r20, 0xFA	; 250
    2662:	54 e4       	ldi	r21, 0x44	; 68
    2664:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2668:	dc 01       	movw	r26, r24
    266a:	cb 01       	movw	r24, r22
    266c:	8f 83       	std	Y+7, r24	; 0x07
    266e:	98 87       	std	Y+8, r25	; 0x08
    2670:	a9 87       	std	Y+9, r26	; 0x09
    2672:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2674:	6f 81       	ldd	r22, Y+7	; 0x07
    2676:	78 85       	ldd	r23, Y+8	; 0x08
    2678:	89 85       	ldd	r24, Y+9	; 0x09
    267a:	9a 85       	ldd	r25, Y+10	; 0x0a
    267c:	20 e0       	ldi	r18, 0x00	; 0
    267e:	30 e0       	ldi	r19, 0x00	; 0
    2680:	40 e8       	ldi	r20, 0x80	; 128
    2682:	5f e3       	ldi	r21, 0x3F	; 63
    2684:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2688:	88 23       	and	r24, r24
    268a:	2c f4       	brge	.+10     	; 0x2696 <lcd_CLEAR+0x6c>
		__ticks = 1;
    268c:	81 e0       	ldi	r24, 0x01	; 1
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	9e 83       	std	Y+6, r25	; 0x06
    2692:	8d 83       	std	Y+5, r24	; 0x05
    2694:	3f c0       	rjmp	.+126    	; 0x2714 <lcd_CLEAR+0xea>
	else if (__tmp > 65535)
    2696:	6f 81       	ldd	r22, Y+7	; 0x07
    2698:	78 85       	ldd	r23, Y+8	; 0x08
    269a:	89 85       	ldd	r24, Y+9	; 0x09
    269c:	9a 85       	ldd	r25, Y+10	; 0x0a
    269e:	20 e0       	ldi	r18, 0x00	; 0
    26a0:	3f ef       	ldi	r19, 0xFF	; 255
    26a2:	4f e7       	ldi	r20, 0x7F	; 127
    26a4:	57 e4       	ldi	r21, 0x47	; 71
    26a6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    26aa:	18 16       	cp	r1, r24
    26ac:	4c f5       	brge	.+82     	; 0x2700 <lcd_CLEAR+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    26b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    26b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    26b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    26b6:	20 e0       	ldi	r18, 0x00	; 0
    26b8:	30 e0       	ldi	r19, 0x00	; 0
    26ba:	40 e2       	ldi	r20, 0x20	; 32
    26bc:	51 e4       	ldi	r21, 0x41	; 65
    26be:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26c2:	dc 01       	movw	r26, r24
    26c4:	cb 01       	movw	r24, r22
    26c6:	bc 01       	movw	r22, r24
    26c8:	cd 01       	movw	r24, r26
    26ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26ce:	dc 01       	movw	r26, r24
    26d0:	cb 01       	movw	r24, r22
    26d2:	9e 83       	std	Y+6, r25	; 0x06
    26d4:	8d 83       	std	Y+5, r24	; 0x05
    26d6:	0f c0       	rjmp	.+30     	; 0x26f6 <lcd_CLEAR+0xcc>
    26d8:	88 ec       	ldi	r24, 0xC8	; 200
    26da:	90 e0       	ldi	r25, 0x00	; 0
    26dc:	9c 83       	std	Y+4, r25	; 0x04
    26de:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    26e0:	8b 81       	ldd	r24, Y+3	; 0x03
    26e2:	9c 81       	ldd	r25, Y+4	; 0x04
    26e4:	01 97       	sbiw	r24, 0x01	; 1
    26e6:	f1 f7       	brne	.-4      	; 0x26e4 <lcd_CLEAR+0xba>
    26e8:	9c 83       	std	Y+4, r25	; 0x04
    26ea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ec:	8d 81       	ldd	r24, Y+5	; 0x05
    26ee:	9e 81       	ldd	r25, Y+6	; 0x06
    26f0:	01 97       	sbiw	r24, 0x01	; 1
    26f2:	9e 83       	std	Y+6, r25	; 0x06
    26f4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26f6:	8d 81       	ldd	r24, Y+5	; 0x05
    26f8:	9e 81       	ldd	r25, Y+6	; 0x06
    26fa:	00 97       	sbiw	r24, 0x00	; 0
    26fc:	69 f7       	brne	.-38     	; 0x26d8 <lcd_CLEAR+0xae>
    26fe:	14 c0       	rjmp	.+40     	; 0x2728 <lcd_CLEAR+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2700:	6f 81       	ldd	r22, Y+7	; 0x07
    2702:	78 85       	ldd	r23, Y+8	; 0x08
    2704:	89 85       	ldd	r24, Y+9	; 0x09
    2706:	9a 85       	ldd	r25, Y+10	; 0x0a
    2708:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    270c:	dc 01       	movw	r26, r24
    270e:	cb 01       	movw	r24, r22
    2710:	9e 83       	std	Y+6, r25	; 0x06
    2712:	8d 83       	std	Y+5, r24	; 0x05
    2714:	8d 81       	ldd	r24, Y+5	; 0x05
    2716:	9e 81       	ldd	r25, Y+6	; 0x06
    2718:	9a 83       	std	Y+2, r25	; 0x02
    271a:	89 83       	std	Y+1, r24	; 0x01
    271c:	89 81       	ldd	r24, Y+1	; 0x01
    271e:	9a 81       	ldd	r25, Y+2	; 0x02
    2720:	01 97       	sbiw	r24, 0x01	; 1
    2722:	f1 f7       	brne	.-4      	; 0x2720 <lcd_CLEAR+0xf6>
    2724:	9a 83       	std	Y+2, r25	; 0x02
    2726:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);}
    2728:	2e 96       	adiw	r28, 0x0e	; 14
    272a:	0f b6       	in	r0, 0x3f	; 63
    272c:	f8 94       	cli
    272e:	de bf       	out	0x3e, r29	; 62
    2730:	0f be       	out	0x3f, r0	; 63
    2732:	cd bf       	out	0x3d, r28	; 61
    2734:	cf 91       	pop	r28
    2736:	df 91       	pop	r29
    2738:	08 95       	ret

0000273a <lcd_curcor_off>:
//*************************************************************************************************************
//function to cancel the cursor.
//lcd_curcor_off();
void lcd_curcor_off(){
    273a:	df 93       	push	r29
    273c:	cf 93       	push	r28
    273e:	cd b7       	in	r28, 0x3d	; 61
    2740:	de b7       	in	r29, 0x3e	; 62
    2742:	68 97       	sbiw	r28, 0x18	; 24
    2744:	0f b6       	in	r0, 0x3f	; 63
    2746:	f8 94       	cli
    2748:	de bf       	out	0x3e, r29	; 62
    274a:	0f be       	out	0x3f, r0	; 63
    274c:	cd bf       	out	0x3d, r28	; 61
	lcd_command(0x0c);
    274e:	8c e0       	ldi	r24, 0x0C	; 12
    2750:	0e 94 54 07 	call	0xea8	; 0xea8 <lcd_command>
    2754:	80 e0       	ldi	r24, 0x00	; 0
    2756:	90 e0       	ldi	r25, 0x00	; 0
    2758:	a8 ec       	ldi	r26, 0xC8	; 200
    275a:	b2 e4       	ldi	r27, 0x42	; 66
    275c:	8d 8b       	std	Y+21, r24	; 0x15
    275e:	9e 8b       	std	Y+22, r25	; 0x16
    2760:	af 8b       	std	Y+23, r26	; 0x17
    2762:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2764:	6d 89       	ldd	r22, Y+21	; 0x15
    2766:	7e 89       	ldd	r23, Y+22	; 0x16
    2768:	8f 89       	ldd	r24, Y+23	; 0x17
    276a:	98 8d       	ldd	r25, Y+24	; 0x18
    276c:	2b ea       	ldi	r18, 0xAB	; 171
    276e:	3a ea       	ldi	r19, 0xAA	; 170
    2770:	4a e2       	ldi	r20, 0x2A	; 42
    2772:	50 e4       	ldi	r21, 0x40	; 64
    2774:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2778:	dc 01       	movw	r26, r24
    277a:	cb 01       	movw	r24, r22
    277c:	89 8b       	std	Y+17, r24	; 0x11
    277e:	9a 8b       	std	Y+18, r25	; 0x12
    2780:	ab 8b       	std	Y+19, r26	; 0x13
    2782:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2784:	69 89       	ldd	r22, Y+17	; 0x11
    2786:	7a 89       	ldd	r23, Y+18	; 0x12
    2788:	8b 89       	ldd	r24, Y+19	; 0x13
    278a:	9c 89       	ldd	r25, Y+20	; 0x14
    278c:	20 e0       	ldi	r18, 0x00	; 0
    278e:	30 e0       	ldi	r19, 0x00	; 0
    2790:	40 e8       	ldi	r20, 0x80	; 128
    2792:	5f e3       	ldi	r21, 0x3F	; 63
    2794:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2798:	88 23       	and	r24, r24
    279a:	1c f4       	brge	.+6      	; 0x27a2 <lcd_curcor_off+0x68>
		__ticks = 1;
    279c:	81 e0       	ldi	r24, 0x01	; 1
    279e:	88 8b       	std	Y+16, r24	; 0x10
    27a0:	91 c0       	rjmp	.+290    	; 0x28c4 <lcd_curcor_off+0x18a>
	else if (__tmp > 255)
    27a2:	69 89       	ldd	r22, Y+17	; 0x11
    27a4:	7a 89       	ldd	r23, Y+18	; 0x12
    27a6:	8b 89       	ldd	r24, Y+19	; 0x13
    27a8:	9c 89       	ldd	r25, Y+20	; 0x14
    27aa:	20 e0       	ldi	r18, 0x00	; 0
    27ac:	30 e0       	ldi	r19, 0x00	; 0
    27ae:	4f e7       	ldi	r20, 0x7F	; 127
    27b0:	53 e4       	ldi	r21, 0x43	; 67
    27b2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    27b6:	18 16       	cp	r1, r24
    27b8:	0c f0       	brlt	.+2      	; 0x27bc <lcd_curcor_off+0x82>
    27ba:	7b c0       	rjmp	.+246    	; 0x28b2 <lcd_curcor_off+0x178>
	{
		_delay_ms(__us / 1000.0);
    27bc:	6d 89       	ldd	r22, Y+21	; 0x15
    27be:	7e 89       	ldd	r23, Y+22	; 0x16
    27c0:	8f 89       	ldd	r24, Y+23	; 0x17
    27c2:	98 8d       	ldd	r25, Y+24	; 0x18
    27c4:	20 e0       	ldi	r18, 0x00	; 0
    27c6:	30 e0       	ldi	r19, 0x00	; 0
    27c8:	4a e7       	ldi	r20, 0x7A	; 122
    27ca:	54 e4       	ldi	r21, 0x44	; 68
    27cc:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    27d0:	dc 01       	movw	r26, r24
    27d2:	cb 01       	movw	r24, r22
    27d4:	8c 87       	std	Y+12, r24	; 0x0c
    27d6:	9d 87       	std	Y+13, r25	; 0x0d
    27d8:	ae 87       	std	Y+14, r26	; 0x0e
    27da:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27dc:	6c 85       	ldd	r22, Y+12	; 0x0c
    27de:	7d 85       	ldd	r23, Y+13	; 0x0d
    27e0:	8e 85       	ldd	r24, Y+14	; 0x0e
    27e2:	9f 85       	ldd	r25, Y+15	; 0x0f
    27e4:	20 e0       	ldi	r18, 0x00	; 0
    27e6:	30 e0       	ldi	r19, 0x00	; 0
    27e8:	4a ef       	ldi	r20, 0xFA	; 250
    27ea:	54 e4       	ldi	r21, 0x44	; 68
    27ec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27f0:	dc 01       	movw	r26, r24
    27f2:	cb 01       	movw	r24, r22
    27f4:	88 87       	std	Y+8, r24	; 0x08
    27f6:	99 87       	std	Y+9, r25	; 0x09
    27f8:	aa 87       	std	Y+10, r26	; 0x0a
    27fa:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    27fc:	68 85       	ldd	r22, Y+8	; 0x08
    27fe:	79 85       	ldd	r23, Y+9	; 0x09
    2800:	8a 85       	ldd	r24, Y+10	; 0x0a
    2802:	9b 85       	ldd	r25, Y+11	; 0x0b
    2804:	20 e0       	ldi	r18, 0x00	; 0
    2806:	30 e0       	ldi	r19, 0x00	; 0
    2808:	40 e8       	ldi	r20, 0x80	; 128
    280a:	5f e3       	ldi	r21, 0x3F	; 63
    280c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2810:	88 23       	and	r24, r24
    2812:	2c f4       	brge	.+10     	; 0x281e <lcd_curcor_off+0xe4>
		__ticks = 1;
    2814:	81 e0       	ldi	r24, 0x01	; 1
    2816:	90 e0       	ldi	r25, 0x00	; 0
    2818:	9f 83       	std	Y+7, r25	; 0x07
    281a:	8e 83       	std	Y+6, r24	; 0x06
    281c:	3f c0       	rjmp	.+126    	; 0x289c <lcd_curcor_off+0x162>
	else if (__tmp > 65535)
    281e:	68 85       	ldd	r22, Y+8	; 0x08
    2820:	79 85       	ldd	r23, Y+9	; 0x09
    2822:	8a 85       	ldd	r24, Y+10	; 0x0a
    2824:	9b 85       	ldd	r25, Y+11	; 0x0b
    2826:	20 e0       	ldi	r18, 0x00	; 0
    2828:	3f ef       	ldi	r19, 0xFF	; 255
    282a:	4f e7       	ldi	r20, 0x7F	; 127
    282c:	57 e4       	ldi	r21, 0x47	; 71
    282e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2832:	18 16       	cp	r1, r24
    2834:	4c f5       	brge	.+82     	; 0x2888 <lcd_curcor_off+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2836:	6c 85       	ldd	r22, Y+12	; 0x0c
    2838:	7d 85       	ldd	r23, Y+13	; 0x0d
    283a:	8e 85       	ldd	r24, Y+14	; 0x0e
    283c:	9f 85       	ldd	r25, Y+15	; 0x0f
    283e:	20 e0       	ldi	r18, 0x00	; 0
    2840:	30 e0       	ldi	r19, 0x00	; 0
    2842:	40 e2       	ldi	r20, 0x20	; 32
    2844:	51 e4       	ldi	r21, 0x41	; 65
    2846:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    284a:	dc 01       	movw	r26, r24
    284c:	cb 01       	movw	r24, r22
    284e:	bc 01       	movw	r22, r24
    2850:	cd 01       	movw	r24, r26
    2852:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2856:	dc 01       	movw	r26, r24
    2858:	cb 01       	movw	r24, r22
    285a:	9f 83       	std	Y+7, r25	; 0x07
    285c:	8e 83       	std	Y+6, r24	; 0x06
    285e:	0f c0       	rjmp	.+30     	; 0x287e <lcd_curcor_off+0x144>
    2860:	88 ec       	ldi	r24, 0xC8	; 200
    2862:	90 e0       	ldi	r25, 0x00	; 0
    2864:	9d 83       	std	Y+5, r25	; 0x05
    2866:	8c 83       	std	Y+4, r24	; 0x04
    2868:	8c 81       	ldd	r24, Y+4	; 0x04
    286a:	9d 81       	ldd	r25, Y+5	; 0x05
    286c:	01 97       	sbiw	r24, 0x01	; 1
    286e:	f1 f7       	brne	.-4      	; 0x286c <lcd_curcor_off+0x132>
    2870:	9d 83       	std	Y+5, r25	; 0x05
    2872:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2874:	8e 81       	ldd	r24, Y+6	; 0x06
    2876:	9f 81       	ldd	r25, Y+7	; 0x07
    2878:	01 97       	sbiw	r24, 0x01	; 1
    287a:	9f 83       	std	Y+7, r25	; 0x07
    287c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    287e:	8e 81       	ldd	r24, Y+6	; 0x06
    2880:	9f 81       	ldd	r25, Y+7	; 0x07
    2882:	00 97       	sbiw	r24, 0x00	; 0
    2884:	69 f7       	brne	.-38     	; 0x2860 <lcd_curcor_off+0x126>
    2886:	24 c0       	rjmp	.+72     	; 0x28d0 <lcd_curcor_off+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2888:	68 85       	ldd	r22, Y+8	; 0x08
    288a:	79 85       	ldd	r23, Y+9	; 0x09
    288c:	8a 85       	ldd	r24, Y+10	; 0x0a
    288e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2890:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2894:	dc 01       	movw	r26, r24
    2896:	cb 01       	movw	r24, r22
    2898:	9f 83       	std	Y+7, r25	; 0x07
    289a:	8e 83       	std	Y+6, r24	; 0x06
    289c:	8e 81       	ldd	r24, Y+6	; 0x06
    289e:	9f 81       	ldd	r25, Y+7	; 0x07
    28a0:	9b 83       	std	Y+3, r25	; 0x03
    28a2:	8a 83       	std	Y+2, r24	; 0x02
    28a4:	8a 81       	ldd	r24, Y+2	; 0x02
    28a6:	9b 81       	ldd	r25, Y+3	; 0x03
    28a8:	01 97       	sbiw	r24, 0x01	; 1
    28aa:	f1 f7       	brne	.-4      	; 0x28a8 <lcd_curcor_off+0x16e>
    28ac:	9b 83       	std	Y+3, r25	; 0x03
    28ae:	8a 83       	std	Y+2, r24	; 0x02
    28b0:	0f c0       	rjmp	.+30     	; 0x28d0 <lcd_curcor_off+0x196>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    28b2:	69 89       	ldd	r22, Y+17	; 0x11
    28b4:	7a 89       	ldd	r23, Y+18	; 0x12
    28b6:	8b 89       	ldd	r24, Y+19	; 0x13
    28b8:	9c 89       	ldd	r25, Y+20	; 0x14
    28ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28be:	dc 01       	movw	r26, r24
    28c0:	cb 01       	movw	r24, r22
    28c2:	88 8b       	std	Y+16, r24	; 0x10
    28c4:	88 89       	ldd	r24, Y+16	; 0x10
    28c6:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    28c8:	89 81       	ldd	r24, Y+1	; 0x01
    28ca:	8a 95       	dec	r24
    28cc:	f1 f7       	brne	.-4      	; 0x28ca <lcd_curcor_off+0x190>
    28ce:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);
}
    28d0:	68 96       	adiw	r28, 0x18	; 24
    28d2:	0f b6       	in	r0, 0x3f	; 63
    28d4:	f8 94       	cli
    28d6:	de bf       	out	0x3e, r29	; 62
    28d8:	0f be       	out	0x3f, r0	; 63
    28da:	cd bf       	out	0x3d, r28	; 61
    28dc:	cf 91       	pop	r28
    28de:	df 91       	pop	r29
    28e0:	08 95       	ret

000028e2 <main>:


#include"lcd_I2C.h"


int main(void){
    28e2:	df 93       	push	r29
    28e4:	cf 93       	push	r28
    28e6:	cd b7       	in	r28, 0x3d	; 61
    28e8:	de b7       	in	r29, 0x3e	; 62
	lcd_init();
    28ea:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <lcd_init>


while(1){
	lcd_goto_xy(1,5);
    28ee:	81 e0       	ldi	r24, 0x01	; 1
    28f0:	65 e0       	ldi	r22, 0x05	; 5
    28f2:	0e 94 0c 12 	call	0x2418	; 0x2418 <lcd_goto_xy>
	lcd_print("hallo ");
    28f6:	80 e6       	ldi	r24, 0x60	; 96
    28f8:	90 e0       	ldi	r25, 0x00	; 0
    28fa:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <lcd_print>
	lcd_goto_xy(2,5);
    28fe:	82 e0       	ldi	r24, 0x02	; 2
    2900:	65 e0       	ldi	r22, 0x05	; 5
    2902:	0e 94 0c 12 	call	0x2418	; 0x2418 <lcd_goto_xy>
	lcd_print("ahmed ");
    2906:	87 e6       	ldi	r24, 0x67	; 103
    2908:	90 e0       	ldi	r25, 0x00	; 0
    290a:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <lcd_print>
    290e:	ef cf       	rjmp	.-34     	; 0x28ee <main+0xc>

00002910 <__prologue_saves__>:
    2910:	2f 92       	push	r2
    2912:	3f 92       	push	r3
    2914:	4f 92       	push	r4
    2916:	5f 92       	push	r5
    2918:	6f 92       	push	r6
    291a:	7f 92       	push	r7
    291c:	8f 92       	push	r8
    291e:	9f 92       	push	r9
    2920:	af 92       	push	r10
    2922:	bf 92       	push	r11
    2924:	cf 92       	push	r12
    2926:	df 92       	push	r13
    2928:	ef 92       	push	r14
    292a:	ff 92       	push	r15
    292c:	0f 93       	push	r16
    292e:	1f 93       	push	r17
    2930:	cf 93       	push	r28
    2932:	df 93       	push	r29
    2934:	cd b7       	in	r28, 0x3d	; 61
    2936:	de b7       	in	r29, 0x3e	; 62
    2938:	ca 1b       	sub	r28, r26
    293a:	db 0b       	sbc	r29, r27
    293c:	0f b6       	in	r0, 0x3f	; 63
    293e:	f8 94       	cli
    2940:	de bf       	out	0x3e, r29	; 62
    2942:	0f be       	out	0x3f, r0	; 63
    2944:	cd bf       	out	0x3d, r28	; 61
    2946:	09 94       	ijmp

00002948 <__epilogue_restores__>:
    2948:	2a 88       	ldd	r2, Y+18	; 0x12
    294a:	39 88       	ldd	r3, Y+17	; 0x11
    294c:	48 88       	ldd	r4, Y+16	; 0x10
    294e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2950:	6e 84       	ldd	r6, Y+14	; 0x0e
    2952:	7d 84       	ldd	r7, Y+13	; 0x0d
    2954:	8c 84       	ldd	r8, Y+12	; 0x0c
    2956:	9b 84       	ldd	r9, Y+11	; 0x0b
    2958:	aa 84       	ldd	r10, Y+10	; 0x0a
    295a:	b9 84       	ldd	r11, Y+9	; 0x09
    295c:	c8 84       	ldd	r12, Y+8	; 0x08
    295e:	df 80       	ldd	r13, Y+7	; 0x07
    2960:	ee 80       	ldd	r14, Y+6	; 0x06
    2962:	fd 80       	ldd	r15, Y+5	; 0x05
    2964:	0c 81       	ldd	r16, Y+4	; 0x04
    2966:	1b 81       	ldd	r17, Y+3	; 0x03
    2968:	aa 81       	ldd	r26, Y+2	; 0x02
    296a:	b9 81       	ldd	r27, Y+1	; 0x01
    296c:	ce 0f       	add	r28, r30
    296e:	d1 1d       	adc	r29, r1
    2970:	0f b6       	in	r0, 0x3f	; 63
    2972:	f8 94       	cli
    2974:	de bf       	out	0x3e, r29	; 62
    2976:	0f be       	out	0x3f, r0	; 63
    2978:	cd bf       	out	0x3d, r28	; 61
    297a:	ed 01       	movw	r28, r26
    297c:	08 95       	ret

0000297e <_exit>:
    297e:	f8 94       	cli

00002980 <__stop_program>:
    2980:	ff cf       	rjmp	.-2      	; 0x2980 <__stop_program>
