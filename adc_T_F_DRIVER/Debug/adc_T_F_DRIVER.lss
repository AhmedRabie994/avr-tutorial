
adc_T_F_DRIVER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000039f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  000039f6  00003a8a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800076  00800076  00003aa0  2**0
                  ALLOC
  3 .stab         00001fec  00000000  00000000  00003aa0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000bc3  00000000  00000000  00005a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000664f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  000067af  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000693e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00008983  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00009a84  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000aa08  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000ab88  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000ae4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b6d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__ctors_end>
       4:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       8:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      10:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      14:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      18:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      1c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      20:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      24:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      28:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      2c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      30:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      34:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      38:	0c 94 cc 06 	jmp	0xd98	; 0xd98 <__vector_14>
      3c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      40:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      44:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      48:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      4c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      50:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      54:	00 40       	sbci	r16, 0x00	; 0
      56:	7a 10       	cpse	r7, r10
      58:	f3 5a       	subi	r31, 0xA3	; 163
      5a:	00 a0       	ldd	r0, Z+32	; 0x20
      5c:	72 4e       	sbci	r23, 0xE2	; 226
      5e:	18 09       	sbc	r17, r8
      60:	00 10       	cpse	r0, r0
      62:	a5 d4       	rcall	.+2378   	; 0x9ae <__fixsfsi+0xa>
      64:	e8 00       	.word	0x00e8	; ????
      66:	00 e8       	ldi	r16, 0x80	; 128
      68:	76 48       	sbci	r23, 0x86	; 134
      6a:	17 00       	.word	0x0017	; ????
      6c:	00 e4       	ldi	r16, 0x40	; 64
      6e:	0b 54       	subi	r16, 0x4B	; 75
      70:	02 00       	.word	0x0002	; ????
      72:	00 ca       	rjmp	.-3072   	; 0xfffff474 <__eeprom_end+0xff7ef474>
      74:	9a 3b       	cpi	r25, 0xBA	; 186
      76:	00 00       	nop
      78:	00 e1       	ldi	r16, 0x10	; 16
      7a:	f5 05       	cpc	r31, r5
      7c:	00 00       	nop
      7e:	80 96       	adiw	r24, 0x20	; 32
      80:	98 00       	.word	0x0098	; ????
      82:	00 00       	nop
      84:	40 42       	sbci	r20, 0x20	; 32
      86:	0f 00       	.word	0x000f	; ????
      88:	00 00       	nop
      8a:	a0 86       	std	Z+8, r10	; 0x08
      8c:	01 00       	.word	0x0001	; ????
      8e:	00 00       	nop
      90:	10 27       	eor	r17, r16
      92:	00 00       	nop
      94:	00 00       	nop
      96:	e8 03       	fmulsu	r22, r16
      98:	00 00       	nop
      9a:	00 00       	nop
      9c:	64 00       	.word	0x0064	; ????
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	0a 00       	.word	0x000a	; ????
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	01 00       	.word	0x0001	; ????
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	2c 76       	andi	r18, 0x6C	; 108
      b0:	d8 88       	ldd	r13, Y+16	; 0x10
      b2:	dc 67       	ori	r29, 0x7C	; 124
      b4:	4f 08       	sbc	r4, r15
      b6:	23 df       	rcall	.-442    	; 0xfffffefe <__eeprom_end+0xff7efefe>
      b8:	c1 df       	rcall	.-126    	; 0x3c <__CCP__+0x8>
      ba:	ae 59       	subi	r26, 0x9E	; 158
      bc:	e1 b1       	in	r30, 0x01	; 1
      be:	b7 96       	adiw	r30, 0x27	; 39
      c0:	e5 e3       	ldi	r30, 0x35	; 53
      c2:	e4 53       	subi	r30, 0x34	; 52
      c4:	c6 3a       	cpi	r28, 0xA6	; 166
      c6:	e6 51       	subi	r30, 0x16	; 22
      c8:	99 76       	andi	r25, 0x69	; 105
      ca:	96 e8       	ldi	r25, 0x86	; 134
      cc:	e6 c2       	rjmp	.+1484   	; 0x69a <__mulsf3+0x162>
      ce:	84 26       	eor	r8, r20
      d0:	eb 89       	ldd	r30, Y+19	; 0x13
      d2:	8c 9b       	sbis	0x11, 4	; 17
      d4:	62 ed       	ldi	r22, 0xD2	; 210
      d6:	40 7c       	andi	r20, 0xC0	; 192
      d8:	6f fc       	.word	0xfc6f	; ????
      da:	ef bc       	out	0x2f, r14	; 47
      dc:	9c 9f       	mul	r25, r28
      de:	40 f2       	brcs	.-112    	; 0x70 <__SREG__+0x31>
      e0:	ba a5       	ldd	r27, Y+42	; 0x2a
      e2:	6f a5       	ldd	r22, Y+47	; 0x2f
      e4:	f4 90       	lpm	r15, Z+
      e6:	05 5a       	subi	r16, 0xA5	; 165
      e8:	2a f7       	brpl	.-54     	; 0xb4 <__SREG__+0x75>
      ea:	5c 93       	st	X, r21
      ec:	6b 6c       	ori	r22, 0xCB	; 203
      ee:	f9 67       	ori	r31, 0x79	; 121
      f0:	6d c1       	rjmp	.+730    	; 0x3cc <_fpadd_parts+0x1e8>
      f2:	1b fc       	.word	0xfc1b	; ????
      f4:	e0 e4       	ldi	r30, 0x40	; 64
      f6:	0d 47       	sbci	r16, 0x7D	; 125
      f8:	fe f5       	brtc	.+126    	; 0x178 <.do_clear_bss_loop>
      fa:	20 e6       	ldi	r18, 0x60	; 96
      fc:	b5 00       	.word	0x00b5	; ????
      fe:	d0 ed       	ldi	r29, 0xD0	; 208
     100:	90 2e       	mov	r9, r16
     102:	03 00       	.word	0x0003	; ????
     104:	94 35       	cpi	r25, 0x54	; 84
     106:	77 05       	cpc	r23, r7
     108:	00 80       	ld	r0, Z
     10a:	84 1e       	adc	r8, r20
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 20       	and	r0, r0
     110:	4e 0a       	sbc	r4, r30
     112:	00 00       	nop
     114:	00 c8       	rjmp	.-4096   	; 0xfffff116 <__eeprom_end+0xff7ef116>
     116:	0c 33       	cpi	r16, 0x3C	; 60
     118:	33 33       	cpi	r19, 0x33	; 51
     11a:	33 0f       	add	r19, r19
     11c:	98 6e       	ori	r25, 0xE8	; 232
     11e:	12 83       	std	Z+2, r17	; 0x02
     120:	11 41       	sbci	r17, 0x11	; 17
     122:	ef 8d       	ldd	r30, Y+31	; 0x1f
     124:	21 14       	cp	r2, r1
     126:	89 3b       	cpi	r24, 0xB9	; 185
     128:	e6 55       	subi	r30, 0x56	; 86
     12a:	16 cf       	rjmp	.-468    	; 0xffffff58 <__eeprom_end+0xff7eff58>
     12c:	fe e6       	ldi	r31, 0x6E	; 110
     12e:	db 18       	sub	r13, r11
     130:	d1 84       	ldd	r13, Z+9	; 0x09
     132:	4b 38       	cpi	r20, 0x8B	; 139
     134:	1b f7       	brvc	.-58     	; 0xfc <__SREG__+0xbd>
     136:	7c 1d       	adc	r23, r12
     138:	90 1d       	adc	r25, r0
     13a:	a4 bb       	out	0x14, r26	; 20
     13c:	e4 24       	eor	r14, r4
     13e:	20 32       	cpi	r18, 0x20	; 32
     140:	84 72       	andi	r24, 0x24	; 36
     142:	5e 22       	and	r5, r30
     144:	81 00       	.word	0x0081	; ????
     146:	c9 f1       	breq	.+114    	; 0x1ba <__fixunssfsi+0x2e>
     148:	24 ec       	ldi	r18, 0xC4	; 196
     14a:	a1 e5       	ldi	r26, 0x51	; 81
     14c:	3d 27       	eor	r19, r29

0000014e <__ctors_end>:
     14e:	11 24       	eor	r1, r1
     150:	1f be       	out	0x3f, r1	; 63
     152:	cf e5       	ldi	r28, 0x5F	; 95
     154:	d4 e0       	ldi	r29, 0x04	; 4
     156:	de bf       	out	0x3e, r29	; 62
     158:	cd bf       	out	0x3d, r28	; 61

0000015a <__do_copy_data>:
     15a:	10 e0       	ldi	r17, 0x00	; 0
     15c:	a0 e6       	ldi	r26, 0x60	; 96
     15e:	b0 e0       	ldi	r27, 0x00	; 0
     160:	e6 ef       	ldi	r30, 0xF6	; 246
     162:	f9 e3       	ldi	r31, 0x39	; 57
     164:	02 c0       	rjmp	.+4      	; 0x16a <.do_copy_data_start>

00000166 <.do_copy_data_loop>:
     166:	05 90       	lpm	r0, Z+
     168:	0d 92       	st	X+, r0

0000016a <.do_copy_data_start>:
     16a:	a6 37       	cpi	r26, 0x76	; 118
     16c:	b1 07       	cpc	r27, r17
     16e:	d9 f7       	brne	.-10     	; 0x166 <.do_copy_data_loop>

00000170 <__do_clear_bss>:
     170:	10 e0       	ldi	r17, 0x00	; 0
     172:	a6 e7       	ldi	r26, 0x76	; 118
     174:	b0 e0       	ldi	r27, 0x00	; 0
     176:	01 c0       	rjmp	.+2      	; 0x17a <.do_clear_bss_start>

00000178 <.do_clear_bss_loop>:
     178:	1d 92       	st	X+, r1

0000017a <.do_clear_bss_start>:
     17a:	a8 37       	cpi	r26, 0x78	; 120
     17c:	b1 07       	cpc	r27, r17
     17e:	e1 f7       	brne	.-8      	; 0x178 <.do_clear_bss_loop>
     180:	0e 94 5d 19 	call	0x32ba	; 0x32ba <main>
     184:	0c 94 f9 1c 	jmp	0x39f2	; 0x39f2 <_exit>

00000188 <__bad_interrupt>:
     188:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000018c <__fixunssfsi>:
     18c:	ef 92       	push	r14
     18e:	ff 92       	push	r15
     190:	0f 93       	push	r16
     192:	1f 93       	push	r17
     194:	7b 01       	movw	r14, r22
     196:	8c 01       	movw	r16, r24
     198:	20 e0       	ldi	r18, 0x00	; 0
     19a:	30 e0       	ldi	r19, 0x00	; 0
     19c:	40 e0       	ldi	r20, 0x00	; 0
     19e:	5f e4       	ldi	r21, 0x4F	; 79
     1a0:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gesf2>
     1a4:	88 23       	and	r24, r24
     1a6:	8c f0       	brlt	.+34     	; 0x1ca <__fixunssfsi+0x3e>
     1a8:	c8 01       	movw	r24, r16
     1aa:	b7 01       	movw	r22, r14
     1ac:	20 e0       	ldi	r18, 0x00	; 0
     1ae:	30 e0       	ldi	r19, 0x00	; 0
     1b0:	40 e0       	ldi	r20, 0x00	; 0
     1b2:	5f e4       	ldi	r21, 0x4F	; 79
     1b4:	0e 94 3e 02 	call	0x47c	; 0x47c <__subsf3>
     1b8:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__fixsfsi>
     1bc:	9b 01       	movw	r18, r22
     1be:	ac 01       	movw	r20, r24
     1c0:	20 50       	subi	r18, 0x00	; 0
     1c2:	30 40       	sbci	r19, 0x00	; 0
     1c4:	40 40       	sbci	r20, 0x00	; 0
     1c6:	50 48       	sbci	r21, 0x80	; 128
     1c8:	06 c0       	rjmp	.+12     	; 0x1d6 <__fixunssfsi+0x4a>
     1ca:	c8 01       	movw	r24, r16
     1cc:	b7 01       	movw	r22, r14
     1ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__fixsfsi>
     1d2:	9b 01       	movw	r18, r22
     1d4:	ac 01       	movw	r20, r24
     1d6:	b9 01       	movw	r22, r18
     1d8:	ca 01       	movw	r24, r20
     1da:	1f 91       	pop	r17
     1dc:	0f 91       	pop	r16
     1de:	ff 90       	pop	r15
     1e0:	ef 90       	pop	r14
     1e2:	08 95       	ret

000001e4 <_fpadd_parts>:
     1e4:	a0 e0       	ldi	r26, 0x00	; 0
     1e6:	b0 e0       	ldi	r27, 0x00	; 0
     1e8:	e8 ef       	ldi	r30, 0xF8	; 248
     1ea:	f0 e0       	ldi	r31, 0x00	; 0
     1ec:	0c 94 22 1a 	jmp	0x3444	; 0x3444 <__prologue_saves__>
     1f0:	dc 01       	movw	r26, r24
     1f2:	2b 01       	movw	r4, r22
     1f4:	fa 01       	movw	r30, r20
     1f6:	9c 91       	ld	r25, X
     1f8:	92 30       	cpi	r25, 0x02	; 2
     1fa:	08 f4       	brcc	.+2      	; 0x1fe <_fpadd_parts+0x1a>
     1fc:	39 c1       	rjmp	.+626    	; 0x470 <__stack+0x11>
     1fe:	eb 01       	movw	r28, r22
     200:	88 81       	ld	r24, Y
     202:	82 30       	cpi	r24, 0x02	; 2
     204:	08 f4       	brcc	.+2      	; 0x208 <_fpadd_parts+0x24>
     206:	33 c1       	rjmp	.+614    	; 0x46e <__stack+0xf>
     208:	94 30       	cpi	r25, 0x04	; 4
     20a:	69 f4       	brne	.+26     	; 0x226 <_fpadd_parts+0x42>
     20c:	84 30       	cpi	r24, 0x04	; 4
     20e:	09 f0       	breq	.+2      	; 0x212 <_fpadd_parts+0x2e>
     210:	2f c1       	rjmp	.+606    	; 0x470 <__stack+0x11>
     212:	11 96       	adiw	r26, 0x01	; 1
     214:	9c 91       	ld	r25, X
     216:	11 97       	sbiw	r26, 0x01	; 1
     218:	89 81       	ldd	r24, Y+1	; 0x01
     21a:	98 17       	cp	r25, r24
     21c:	09 f4       	brne	.+2      	; 0x220 <_fpadd_parts+0x3c>
     21e:	28 c1       	rjmp	.+592    	; 0x470 <__stack+0x11>
     220:	ab e6       	ldi	r26, 0x6B	; 107
     222:	b0 e0       	ldi	r27, 0x00	; 0
     224:	25 c1       	rjmp	.+586    	; 0x470 <__stack+0x11>
     226:	84 30       	cpi	r24, 0x04	; 4
     228:	09 f4       	brne	.+2      	; 0x22c <_fpadd_parts+0x48>
     22a:	21 c1       	rjmp	.+578    	; 0x46e <__stack+0xf>
     22c:	82 30       	cpi	r24, 0x02	; 2
     22e:	a9 f4       	brne	.+42     	; 0x25a <_fpadd_parts+0x76>
     230:	92 30       	cpi	r25, 0x02	; 2
     232:	09 f0       	breq	.+2      	; 0x236 <_fpadd_parts+0x52>
     234:	1d c1       	rjmp	.+570    	; 0x470 <__stack+0x11>
     236:	9a 01       	movw	r18, r20
     238:	ad 01       	movw	r20, r26
     23a:	88 e0       	ldi	r24, 0x08	; 8
     23c:	ea 01       	movw	r28, r20
     23e:	09 90       	ld	r0, Y+
     240:	ae 01       	movw	r20, r28
     242:	e9 01       	movw	r28, r18
     244:	09 92       	st	Y+, r0
     246:	9e 01       	movw	r18, r28
     248:	81 50       	subi	r24, 0x01	; 1
     24a:	c1 f7       	brne	.-16     	; 0x23c <_fpadd_parts+0x58>
     24c:	e2 01       	movw	r28, r4
     24e:	89 81       	ldd	r24, Y+1	; 0x01
     250:	11 96       	adiw	r26, 0x01	; 1
     252:	9c 91       	ld	r25, X
     254:	89 23       	and	r24, r25
     256:	81 83       	std	Z+1, r24	; 0x01
     258:	08 c1       	rjmp	.+528    	; 0x46a <__stack+0xb>
     25a:	92 30       	cpi	r25, 0x02	; 2
     25c:	09 f4       	brne	.+2      	; 0x260 <_fpadd_parts+0x7c>
     25e:	07 c1       	rjmp	.+526    	; 0x46e <__stack+0xf>
     260:	12 96       	adiw	r26, 0x02	; 2
     262:	2d 90       	ld	r2, X+
     264:	3c 90       	ld	r3, X
     266:	13 97       	sbiw	r26, 0x03	; 3
     268:	eb 01       	movw	r28, r22
     26a:	8a 81       	ldd	r24, Y+2	; 0x02
     26c:	9b 81       	ldd	r25, Y+3	; 0x03
     26e:	14 96       	adiw	r26, 0x04	; 4
     270:	ad 90       	ld	r10, X+
     272:	bd 90       	ld	r11, X+
     274:	cd 90       	ld	r12, X+
     276:	dc 90       	ld	r13, X
     278:	17 97       	sbiw	r26, 0x07	; 7
     27a:	ec 80       	ldd	r14, Y+4	; 0x04
     27c:	fd 80       	ldd	r15, Y+5	; 0x05
     27e:	0e 81       	ldd	r16, Y+6	; 0x06
     280:	1f 81       	ldd	r17, Y+7	; 0x07
     282:	91 01       	movw	r18, r2
     284:	28 1b       	sub	r18, r24
     286:	39 0b       	sbc	r19, r25
     288:	b9 01       	movw	r22, r18
     28a:	37 ff       	sbrs	r19, 7
     28c:	04 c0       	rjmp	.+8      	; 0x296 <_fpadd_parts+0xb2>
     28e:	66 27       	eor	r22, r22
     290:	77 27       	eor	r23, r23
     292:	62 1b       	sub	r22, r18
     294:	73 0b       	sbc	r23, r19
     296:	60 32       	cpi	r22, 0x20	; 32
     298:	71 05       	cpc	r23, r1
     29a:	0c f0       	brlt	.+2      	; 0x29e <_fpadd_parts+0xba>
     29c:	61 c0       	rjmp	.+194    	; 0x360 <_fpadd_parts+0x17c>
     29e:	12 16       	cp	r1, r18
     2a0:	13 06       	cpc	r1, r19
     2a2:	6c f5       	brge	.+90     	; 0x2fe <_fpadd_parts+0x11a>
     2a4:	37 01       	movw	r6, r14
     2a6:	48 01       	movw	r8, r16
     2a8:	06 2e       	mov	r0, r22
     2aa:	04 c0       	rjmp	.+8      	; 0x2b4 <_fpadd_parts+0xd0>
     2ac:	96 94       	lsr	r9
     2ae:	87 94       	ror	r8
     2b0:	77 94       	ror	r7
     2b2:	67 94       	ror	r6
     2b4:	0a 94       	dec	r0
     2b6:	d2 f7       	brpl	.-12     	; 0x2ac <_fpadd_parts+0xc8>
     2b8:	21 e0       	ldi	r18, 0x01	; 1
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	40 e0       	ldi	r20, 0x00	; 0
     2be:	50 e0       	ldi	r21, 0x00	; 0
     2c0:	04 c0       	rjmp	.+8      	; 0x2ca <_fpadd_parts+0xe6>
     2c2:	22 0f       	add	r18, r18
     2c4:	33 1f       	adc	r19, r19
     2c6:	44 1f       	adc	r20, r20
     2c8:	55 1f       	adc	r21, r21
     2ca:	6a 95       	dec	r22
     2cc:	d2 f7       	brpl	.-12     	; 0x2c2 <_fpadd_parts+0xde>
     2ce:	21 50       	subi	r18, 0x01	; 1
     2d0:	30 40       	sbci	r19, 0x00	; 0
     2d2:	40 40       	sbci	r20, 0x00	; 0
     2d4:	50 40       	sbci	r21, 0x00	; 0
     2d6:	2e 21       	and	r18, r14
     2d8:	3f 21       	and	r19, r15
     2da:	40 23       	and	r20, r16
     2dc:	51 23       	and	r21, r17
     2de:	21 15       	cp	r18, r1
     2e0:	31 05       	cpc	r19, r1
     2e2:	41 05       	cpc	r20, r1
     2e4:	51 05       	cpc	r21, r1
     2e6:	21 f0       	breq	.+8      	; 0x2f0 <_fpadd_parts+0x10c>
     2e8:	21 e0       	ldi	r18, 0x01	; 1
     2ea:	30 e0       	ldi	r19, 0x00	; 0
     2ec:	40 e0       	ldi	r20, 0x00	; 0
     2ee:	50 e0       	ldi	r21, 0x00	; 0
     2f0:	79 01       	movw	r14, r18
     2f2:	8a 01       	movw	r16, r20
     2f4:	e6 28       	or	r14, r6
     2f6:	f7 28       	or	r15, r7
     2f8:	08 29       	or	r16, r8
     2fa:	19 29       	or	r17, r9
     2fc:	3c c0       	rjmp	.+120    	; 0x376 <_fpadd_parts+0x192>
     2fe:	23 2b       	or	r18, r19
     300:	d1 f1       	breq	.+116    	; 0x376 <_fpadd_parts+0x192>
     302:	26 0e       	add	r2, r22
     304:	37 1e       	adc	r3, r23
     306:	35 01       	movw	r6, r10
     308:	46 01       	movw	r8, r12
     30a:	06 2e       	mov	r0, r22
     30c:	04 c0       	rjmp	.+8      	; 0x316 <_fpadd_parts+0x132>
     30e:	96 94       	lsr	r9
     310:	87 94       	ror	r8
     312:	77 94       	ror	r7
     314:	67 94       	ror	r6
     316:	0a 94       	dec	r0
     318:	d2 f7       	brpl	.-12     	; 0x30e <_fpadd_parts+0x12a>
     31a:	21 e0       	ldi	r18, 0x01	; 1
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	40 e0       	ldi	r20, 0x00	; 0
     320:	50 e0       	ldi	r21, 0x00	; 0
     322:	04 c0       	rjmp	.+8      	; 0x32c <_fpadd_parts+0x148>
     324:	22 0f       	add	r18, r18
     326:	33 1f       	adc	r19, r19
     328:	44 1f       	adc	r20, r20
     32a:	55 1f       	adc	r21, r21
     32c:	6a 95       	dec	r22
     32e:	d2 f7       	brpl	.-12     	; 0x324 <_fpadd_parts+0x140>
     330:	21 50       	subi	r18, 0x01	; 1
     332:	30 40       	sbci	r19, 0x00	; 0
     334:	40 40       	sbci	r20, 0x00	; 0
     336:	50 40       	sbci	r21, 0x00	; 0
     338:	2a 21       	and	r18, r10
     33a:	3b 21       	and	r19, r11
     33c:	4c 21       	and	r20, r12
     33e:	5d 21       	and	r21, r13
     340:	21 15       	cp	r18, r1
     342:	31 05       	cpc	r19, r1
     344:	41 05       	cpc	r20, r1
     346:	51 05       	cpc	r21, r1
     348:	21 f0       	breq	.+8      	; 0x352 <_fpadd_parts+0x16e>
     34a:	21 e0       	ldi	r18, 0x01	; 1
     34c:	30 e0       	ldi	r19, 0x00	; 0
     34e:	40 e0       	ldi	r20, 0x00	; 0
     350:	50 e0       	ldi	r21, 0x00	; 0
     352:	59 01       	movw	r10, r18
     354:	6a 01       	movw	r12, r20
     356:	a6 28       	or	r10, r6
     358:	b7 28       	or	r11, r7
     35a:	c8 28       	or	r12, r8
     35c:	d9 28       	or	r13, r9
     35e:	0b c0       	rjmp	.+22     	; 0x376 <_fpadd_parts+0x192>
     360:	82 15       	cp	r24, r2
     362:	93 05       	cpc	r25, r3
     364:	2c f0       	brlt	.+10     	; 0x370 <_fpadd_parts+0x18c>
     366:	1c 01       	movw	r2, r24
     368:	aa 24       	eor	r10, r10
     36a:	bb 24       	eor	r11, r11
     36c:	65 01       	movw	r12, r10
     36e:	03 c0       	rjmp	.+6      	; 0x376 <_fpadd_parts+0x192>
     370:	ee 24       	eor	r14, r14
     372:	ff 24       	eor	r15, r15
     374:	87 01       	movw	r16, r14
     376:	11 96       	adiw	r26, 0x01	; 1
     378:	9c 91       	ld	r25, X
     37a:	d2 01       	movw	r26, r4
     37c:	11 96       	adiw	r26, 0x01	; 1
     37e:	8c 91       	ld	r24, X
     380:	98 17       	cp	r25, r24
     382:	09 f4       	brne	.+2      	; 0x386 <_fpadd_parts+0x1a2>
     384:	45 c0       	rjmp	.+138    	; 0x410 <_fpadd_parts+0x22c>
     386:	99 23       	and	r25, r25
     388:	39 f0       	breq	.+14     	; 0x398 <_fpadd_parts+0x1b4>
     38a:	a8 01       	movw	r20, r16
     38c:	97 01       	movw	r18, r14
     38e:	2a 19       	sub	r18, r10
     390:	3b 09       	sbc	r19, r11
     392:	4c 09       	sbc	r20, r12
     394:	5d 09       	sbc	r21, r13
     396:	06 c0       	rjmp	.+12     	; 0x3a4 <_fpadd_parts+0x1c0>
     398:	a6 01       	movw	r20, r12
     39a:	95 01       	movw	r18, r10
     39c:	2e 19       	sub	r18, r14
     39e:	3f 09       	sbc	r19, r15
     3a0:	40 0b       	sbc	r20, r16
     3a2:	51 0b       	sbc	r21, r17
     3a4:	57 fd       	sbrc	r21, 7
     3a6:	08 c0       	rjmp	.+16     	; 0x3b8 <_fpadd_parts+0x1d4>
     3a8:	11 82       	std	Z+1, r1	; 0x01
     3aa:	33 82       	std	Z+3, r3	; 0x03
     3ac:	22 82       	std	Z+2, r2	; 0x02
     3ae:	24 83       	std	Z+4, r18	; 0x04
     3b0:	35 83       	std	Z+5, r19	; 0x05
     3b2:	46 83       	std	Z+6, r20	; 0x06
     3b4:	57 83       	std	Z+7, r21	; 0x07
     3b6:	1d c0       	rjmp	.+58     	; 0x3f2 <_fpadd_parts+0x20e>
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	81 83       	std	Z+1, r24	; 0x01
     3bc:	33 82       	std	Z+3, r3	; 0x03
     3be:	22 82       	std	Z+2, r2	; 0x02
     3c0:	88 27       	eor	r24, r24
     3c2:	99 27       	eor	r25, r25
     3c4:	dc 01       	movw	r26, r24
     3c6:	82 1b       	sub	r24, r18
     3c8:	93 0b       	sbc	r25, r19
     3ca:	a4 0b       	sbc	r26, r20
     3cc:	b5 0b       	sbc	r27, r21
     3ce:	84 83       	std	Z+4, r24	; 0x04
     3d0:	95 83       	std	Z+5, r25	; 0x05
     3d2:	a6 83       	std	Z+6, r26	; 0x06
     3d4:	b7 83       	std	Z+7, r27	; 0x07
     3d6:	0d c0       	rjmp	.+26     	; 0x3f2 <_fpadd_parts+0x20e>
     3d8:	22 0f       	add	r18, r18
     3da:	33 1f       	adc	r19, r19
     3dc:	44 1f       	adc	r20, r20
     3de:	55 1f       	adc	r21, r21
     3e0:	24 83       	std	Z+4, r18	; 0x04
     3e2:	35 83       	std	Z+5, r19	; 0x05
     3e4:	46 83       	std	Z+6, r20	; 0x06
     3e6:	57 83       	std	Z+7, r21	; 0x07
     3e8:	82 81       	ldd	r24, Z+2	; 0x02
     3ea:	93 81       	ldd	r25, Z+3	; 0x03
     3ec:	01 97       	sbiw	r24, 0x01	; 1
     3ee:	93 83       	std	Z+3, r25	; 0x03
     3f0:	82 83       	std	Z+2, r24	; 0x02
     3f2:	24 81       	ldd	r18, Z+4	; 0x04
     3f4:	35 81       	ldd	r19, Z+5	; 0x05
     3f6:	46 81       	ldd	r20, Z+6	; 0x06
     3f8:	57 81       	ldd	r21, Z+7	; 0x07
     3fa:	da 01       	movw	r26, r20
     3fc:	c9 01       	movw	r24, r18
     3fe:	01 97       	sbiw	r24, 0x01	; 1
     400:	a1 09       	sbc	r26, r1
     402:	b1 09       	sbc	r27, r1
     404:	8f 5f       	subi	r24, 0xFF	; 255
     406:	9f 4f       	sbci	r25, 0xFF	; 255
     408:	af 4f       	sbci	r26, 0xFF	; 255
     40a:	bf 43       	sbci	r27, 0x3F	; 63
     40c:	28 f3       	brcs	.-54     	; 0x3d8 <_fpadd_parts+0x1f4>
     40e:	0b c0       	rjmp	.+22     	; 0x426 <_fpadd_parts+0x242>
     410:	91 83       	std	Z+1, r25	; 0x01
     412:	33 82       	std	Z+3, r3	; 0x03
     414:	22 82       	std	Z+2, r2	; 0x02
     416:	ea 0c       	add	r14, r10
     418:	fb 1c       	adc	r15, r11
     41a:	0c 1d       	adc	r16, r12
     41c:	1d 1d       	adc	r17, r13
     41e:	e4 82       	std	Z+4, r14	; 0x04
     420:	f5 82       	std	Z+5, r15	; 0x05
     422:	06 83       	std	Z+6, r16	; 0x06
     424:	17 83       	std	Z+7, r17	; 0x07
     426:	83 e0       	ldi	r24, 0x03	; 3
     428:	80 83       	st	Z, r24
     42a:	24 81       	ldd	r18, Z+4	; 0x04
     42c:	35 81       	ldd	r19, Z+5	; 0x05
     42e:	46 81       	ldd	r20, Z+6	; 0x06
     430:	57 81       	ldd	r21, Z+7	; 0x07
     432:	57 ff       	sbrs	r21, 7
     434:	1a c0       	rjmp	.+52     	; 0x46a <__stack+0xb>
     436:	c9 01       	movw	r24, r18
     438:	aa 27       	eor	r26, r26
     43a:	97 fd       	sbrc	r25, 7
     43c:	a0 95       	com	r26
     43e:	ba 2f       	mov	r27, r26
     440:	81 70       	andi	r24, 0x01	; 1
     442:	90 70       	andi	r25, 0x00	; 0
     444:	a0 70       	andi	r26, 0x00	; 0
     446:	b0 70       	andi	r27, 0x00	; 0
     448:	56 95       	lsr	r21
     44a:	47 95       	ror	r20
     44c:	37 95       	ror	r19
     44e:	27 95       	ror	r18
     450:	82 2b       	or	r24, r18
     452:	93 2b       	or	r25, r19
     454:	a4 2b       	or	r26, r20
     456:	b5 2b       	or	r27, r21
     458:	84 83       	std	Z+4, r24	; 0x04
     45a:	95 83       	std	Z+5, r25	; 0x05
     45c:	a6 83       	std	Z+6, r26	; 0x06
     45e:	b7 83       	std	Z+7, r27	; 0x07
     460:	82 81       	ldd	r24, Z+2	; 0x02
     462:	93 81       	ldd	r25, Z+3	; 0x03
     464:	01 96       	adiw	r24, 0x01	; 1
     466:	93 83       	std	Z+3, r25	; 0x03
     468:	82 83       	std	Z+2, r24	; 0x02
     46a:	df 01       	movw	r26, r30
     46c:	01 c0       	rjmp	.+2      	; 0x470 <__stack+0x11>
     46e:	d2 01       	movw	r26, r4
     470:	cd 01       	movw	r24, r26
     472:	cd b7       	in	r28, 0x3d	; 61
     474:	de b7       	in	r29, 0x3e	; 62
     476:	e2 e1       	ldi	r30, 0x12	; 18
     478:	0c 94 3e 1a 	jmp	0x347c	; 0x347c <__epilogue_restores__>

0000047c <__subsf3>:
     47c:	a0 e2       	ldi	r26, 0x20	; 32
     47e:	b0 e0       	ldi	r27, 0x00	; 0
     480:	e4 e4       	ldi	r30, 0x44	; 68
     482:	f2 e0       	ldi	r31, 0x02	; 2
     484:	0c 94 2e 1a 	jmp	0x345c	; 0x345c <__prologue_saves__+0x18>
     488:	69 83       	std	Y+1, r22	; 0x01
     48a:	7a 83       	std	Y+2, r23	; 0x02
     48c:	8b 83       	std	Y+3, r24	; 0x03
     48e:	9c 83       	std	Y+4, r25	; 0x04
     490:	2d 83       	std	Y+5, r18	; 0x05
     492:	3e 83       	std	Y+6, r19	; 0x06
     494:	4f 83       	std	Y+7, r20	; 0x07
     496:	58 87       	std	Y+8, r21	; 0x08
     498:	e9 e0       	ldi	r30, 0x09	; 9
     49a:	ee 2e       	mov	r14, r30
     49c:	f1 2c       	mov	r15, r1
     49e:	ec 0e       	add	r14, r28
     4a0:	fd 1e       	adc	r15, r29
     4a2:	ce 01       	movw	r24, r28
     4a4:	01 96       	adiw	r24, 0x01	; 1
     4a6:	b7 01       	movw	r22, r14
     4a8:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__unpack_f>
     4ac:	8e 01       	movw	r16, r28
     4ae:	0f 5e       	subi	r16, 0xEF	; 239
     4b0:	1f 4f       	sbci	r17, 0xFF	; 255
     4b2:	ce 01       	movw	r24, r28
     4b4:	05 96       	adiw	r24, 0x05	; 5
     4b6:	b8 01       	movw	r22, r16
     4b8:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__unpack_f>
     4bc:	8a 89       	ldd	r24, Y+18	; 0x12
     4be:	91 e0       	ldi	r25, 0x01	; 1
     4c0:	89 27       	eor	r24, r25
     4c2:	8a 8b       	std	Y+18, r24	; 0x12
     4c4:	c7 01       	movw	r24, r14
     4c6:	b8 01       	movw	r22, r16
     4c8:	ae 01       	movw	r20, r28
     4ca:	47 5e       	subi	r20, 0xE7	; 231
     4cc:	5f 4f       	sbci	r21, 0xFF	; 255
     4ce:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_fpadd_parts>
     4d2:	0e 94 26 05 	call	0xa4c	; 0xa4c <__pack_f>
     4d6:	a0 96       	adiw	r28, 0x20	; 32
     4d8:	e6 e0       	ldi	r30, 0x06	; 6
     4da:	0c 94 4a 1a 	jmp	0x3494	; 0x3494 <__epilogue_restores__+0x18>

000004de <__addsf3>:
     4de:	a0 e2       	ldi	r26, 0x20	; 32
     4e0:	b0 e0       	ldi	r27, 0x00	; 0
     4e2:	e5 e7       	ldi	r30, 0x75	; 117
     4e4:	f2 e0       	ldi	r31, 0x02	; 2
     4e6:	0c 94 2e 1a 	jmp	0x345c	; 0x345c <__prologue_saves__+0x18>
     4ea:	69 83       	std	Y+1, r22	; 0x01
     4ec:	7a 83       	std	Y+2, r23	; 0x02
     4ee:	8b 83       	std	Y+3, r24	; 0x03
     4f0:	9c 83       	std	Y+4, r25	; 0x04
     4f2:	2d 83       	std	Y+5, r18	; 0x05
     4f4:	3e 83       	std	Y+6, r19	; 0x06
     4f6:	4f 83       	std	Y+7, r20	; 0x07
     4f8:	58 87       	std	Y+8, r21	; 0x08
     4fa:	f9 e0       	ldi	r31, 0x09	; 9
     4fc:	ef 2e       	mov	r14, r31
     4fe:	f1 2c       	mov	r15, r1
     500:	ec 0e       	add	r14, r28
     502:	fd 1e       	adc	r15, r29
     504:	ce 01       	movw	r24, r28
     506:	01 96       	adiw	r24, 0x01	; 1
     508:	b7 01       	movw	r22, r14
     50a:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__unpack_f>
     50e:	8e 01       	movw	r16, r28
     510:	0f 5e       	subi	r16, 0xEF	; 239
     512:	1f 4f       	sbci	r17, 0xFF	; 255
     514:	ce 01       	movw	r24, r28
     516:	05 96       	adiw	r24, 0x05	; 5
     518:	b8 01       	movw	r22, r16
     51a:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__unpack_f>
     51e:	c7 01       	movw	r24, r14
     520:	b8 01       	movw	r22, r16
     522:	ae 01       	movw	r20, r28
     524:	47 5e       	subi	r20, 0xE7	; 231
     526:	5f 4f       	sbci	r21, 0xFF	; 255
     528:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_fpadd_parts>
     52c:	0e 94 26 05 	call	0xa4c	; 0xa4c <__pack_f>
     530:	a0 96       	adiw	r28, 0x20	; 32
     532:	e6 e0       	ldi	r30, 0x06	; 6
     534:	0c 94 4a 1a 	jmp	0x3494	; 0x3494 <__epilogue_restores__+0x18>

00000538 <__mulsf3>:
     538:	a0 e2       	ldi	r26, 0x20	; 32
     53a:	b0 e0       	ldi	r27, 0x00	; 0
     53c:	e2 ea       	ldi	r30, 0xA2	; 162
     53e:	f2 e0       	ldi	r31, 0x02	; 2
     540:	0c 94 22 1a 	jmp	0x3444	; 0x3444 <__prologue_saves__>
     544:	69 83       	std	Y+1, r22	; 0x01
     546:	7a 83       	std	Y+2, r23	; 0x02
     548:	8b 83       	std	Y+3, r24	; 0x03
     54a:	9c 83       	std	Y+4, r25	; 0x04
     54c:	2d 83       	std	Y+5, r18	; 0x05
     54e:	3e 83       	std	Y+6, r19	; 0x06
     550:	4f 83       	std	Y+7, r20	; 0x07
     552:	58 87       	std	Y+8, r21	; 0x08
     554:	ce 01       	movw	r24, r28
     556:	01 96       	adiw	r24, 0x01	; 1
     558:	be 01       	movw	r22, r28
     55a:	67 5f       	subi	r22, 0xF7	; 247
     55c:	7f 4f       	sbci	r23, 0xFF	; 255
     55e:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__unpack_f>
     562:	ce 01       	movw	r24, r28
     564:	05 96       	adiw	r24, 0x05	; 5
     566:	be 01       	movw	r22, r28
     568:	6f 5e       	subi	r22, 0xEF	; 239
     56a:	7f 4f       	sbci	r23, 0xFF	; 255
     56c:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__unpack_f>
     570:	99 85       	ldd	r25, Y+9	; 0x09
     572:	92 30       	cpi	r25, 0x02	; 2
     574:	88 f0       	brcs	.+34     	; 0x598 <__mulsf3+0x60>
     576:	89 89       	ldd	r24, Y+17	; 0x11
     578:	82 30       	cpi	r24, 0x02	; 2
     57a:	c8 f0       	brcs	.+50     	; 0x5ae <__mulsf3+0x76>
     57c:	94 30       	cpi	r25, 0x04	; 4
     57e:	19 f4       	brne	.+6      	; 0x586 <__mulsf3+0x4e>
     580:	82 30       	cpi	r24, 0x02	; 2
     582:	51 f4       	brne	.+20     	; 0x598 <__mulsf3+0x60>
     584:	04 c0       	rjmp	.+8      	; 0x58e <__mulsf3+0x56>
     586:	84 30       	cpi	r24, 0x04	; 4
     588:	29 f4       	brne	.+10     	; 0x594 <__mulsf3+0x5c>
     58a:	92 30       	cpi	r25, 0x02	; 2
     58c:	81 f4       	brne	.+32     	; 0x5ae <__mulsf3+0x76>
     58e:	8b e6       	ldi	r24, 0x6B	; 107
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	c6 c0       	rjmp	.+396    	; 0x720 <__mulsf3+0x1e8>
     594:	92 30       	cpi	r25, 0x02	; 2
     596:	49 f4       	brne	.+18     	; 0x5aa <__mulsf3+0x72>
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	9a 85       	ldd	r25, Y+10	; 0x0a
     59c:	8a 89       	ldd	r24, Y+18	; 0x12
     59e:	98 13       	cpse	r25, r24
     5a0:	21 e0       	ldi	r18, 0x01	; 1
     5a2:	2a 87       	std	Y+10, r18	; 0x0a
     5a4:	ce 01       	movw	r24, r28
     5a6:	09 96       	adiw	r24, 0x09	; 9
     5a8:	bb c0       	rjmp	.+374    	; 0x720 <__mulsf3+0x1e8>
     5aa:	82 30       	cpi	r24, 0x02	; 2
     5ac:	49 f4       	brne	.+18     	; 0x5c0 <__mulsf3+0x88>
     5ae:	20 e0       	ldi	r18, 0x00	; 0
     5b0:	9a 85       	ldd	r25, Y+10	; 0x0a
     5b2:	8a 89       	ldd	r24, Y+18	; 0x12
     5b4:	98 13       	cpse	r25, r24
     5b6:	21 e0       	ldi	r18, 0x01	; 1
     5b8:	2a 8b       	std	Y+18, r18	; 0x12
     5ba:	ce 01       	movw	r24, r28
     5bc:	41 96       	adiw	r24, 0x11	; 17
     5be:	b0 c0       	rjmp	.+352    	; 0x720 <__mulsf3+0x1e8>
     5c0:	2d 84       	ldd	r2, Y+13	; 0x0d
     5c2:	3e 84       	ldd	r3, Y+14	; 0x0e
     5c4:	4f 84       	ldd	r4, Y+15	; 0x0f
     5c6:	58 88       	ldd	r5, Y+16	; 0x10
     5c8:	6d 88       	ldd	r6, Y+21	; 0x15
     5ca:	7e 88       	ldd	r7, Y+22	; 0x16
     5cc:	8f 88       	ldd	r8, Y+23	; 0x17
     5ce:	98 8c       	ldd	r9, Y+24	; 0x18
     5d0:	ee 24       	eor	r14, r14
     5d2:	ff 24       	eor	r15, r15
     5d4:	87 01       	movw	r16, r14
     5d6:	aa 24       	eor	r10, r10
     5d8:	bb 24       	eor	r11, r11
     5da:	65 01       	movw	r12, r10
     5dc:	40 e0       	ldi	r20, 0x00	; 0
     5de:	50 e0       	ldi	r21, 0x00	; 0
     5e0:	60 e0       	ldi	r22, 0x00	; 0
     5e2:	70 e0       	ldi	r23, 0x00	; 0
     5e4:	e0 e0       	ldi	r30, 0x00	; 0
     5e6:	f0 e0       	ldi	r31, 0x00	; 0
     5e8:	c1 01       	movw	r24, r2
     5ea:	81 70       	andi	r24, 0x01	; 1
     5ec:	90 70       	andi	r25, 0x00	; 0
     5ee:	89 2b       	or	r24, r25
     5f0:	e9 f0       	breq	.+58     	; 0x62c <__mulsf3+0xf4>
     5f2:	e6 0c       	add	r14, r6
     5f4:	f7 1c       	adc	r15, r7
     5f6:	08 1d       	adc	r16, r8
     5f8:	19 1d       	adc	r17, r9
     5fa:	9a 01       	movw	r18, r20
     5fc:	ab 01       	movw	r20, r22
     5fe:	2a 0d       	add	r18, r10
     600:	3b 1d       	adc	r19, r11
     602:	4c 1d       	adc	r20, r12
     604:	5d 1d       	adc	r21, r13
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	a0 e0       	ldi	r26, 0x00	; 0
     60c:	b0 e0       	ldi	r27, 0x00	; 0
     60e:	e6 14       	cp	r14, r6
     610:	f7 04       	cpc	r15, r7
     612:	08 05       	cpc	r16, r8
     614:	19 05       	cpc	r17, r9
     616:	20 f4       	brcc	.+8      	; 0x620 <__mulsf3+0xe8>
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	a0 e0       	ldi	r26, 0x00	; 0
     61e:	b0 e0       	ldi	r27, 0x00	; 0
     620:	ba 01       	movw	r22, r20
     622:	a9 01       	movw	r20, r18
     624:	48 0f       	add	r20, r24
     626:	59 1f       	adc	r21, r25
     628:	6a 1f       	adc	r22, r26
     62a:	7b 1f       	adc	r23, r27
     62c:	aa 0c       	add	r10, r10
     62e:	bb 1c       	adc	r11, r11
     630:	cc 1c       	adc	r12, r12
     632:	dd 1c       	adc	r13, r13
     634:	97 fe       	sbrs	r9, 7
     636:	08 c0       	rjmp	.+16     	; 0x648 <__mulsf3+0x110>
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	a0 e0       	ldi	r26, 0x00	; 0
     63e:	b0 e0       	ldi	r27, 0x00	; 0
     640:	a8 2a       	or	r10, r24
     642:	b9 2a       	or	r11, r25
     644:	ca 2a       	or	r12, r26
     646:	db 2a       	or	r13, r27
     648:	31 96       	adiw	r30, 0x01	; 1
     64a:	e0 32       	cpi	r30, 0x20	; 32
     64c:	f1 05       	cpc	r31, r1
     64e:	49 f0       	breq	.+18     	; 0x662 <__mulsf3+0x12a>
     650:	66 0c       	add	r6, r6
     652:	77 1c       	adc	r7, r7
     654:	88 1c       	adc	r8, r8
     656:	99 1c       	adc	r9, r9
     658:	56 94       	lsr	r5
     65a:	47 94       	ror	r4
     65c:	37 94       	ror	r3
     65e:	27 94       	ror	r2
     660:	c3 cf       	rjmp	.-122    	; 0x5e8 <__mulsf3+0xb0>
     662:	fa 85       	ldd	r31, Y+10	; 0x0a
     664:	ea 89       	ldd	r30, Y+18	; 0x12
     666:	2b 89       	ldd	r18, Y+19	; 0x13
     668:	3c 89       	ldd	r19, Y+20	; 0x14
     66a:	8b 85       	ldd	r24, Y+11	; 0x0b
     66c:	9c 85       	ldd	r25, Y+12	; 0x0c
     66e:	28 0f       	add	r18, r24
     670:	39 1f       	adc	r19, r25
     672:	2e 5f       	subi	r18, 0xFE	; 254
     674:	3f 4f       	sbci	r19, 0xFF	; 255
     676:	17 c0       	rjmp	.+46     	; 0x6a6 <__mulsf3+0x16e>
     678:	ca 01       	movw	r24, r20
     67a:	81 70       	andi	r24, 0x01	; 1
     67c:	90 70       	andi	r25, 0x00	; 0
     67e:	89 2b       	or	r24, r25
     680:	61 f0       	breq	.+24     	; 0x69a <__mulsf3+0x162>
     682:	16 95       	lsr	r17
     684:	07 95       	ror	r16
     686:	f7 94       	ror	r15
     688:	e7 94       	ror	r14
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	a0 e0       	ldi	r26, 0x00	; 0
     690:	b0 e8       	ldi	r27, 0x80	; 128
     692:	e8 2a       	or	r14, r24
     694:	f9 2a       	or	r15, r25
     696:	0a 2b       	or	r16, r26
     698:	1b 2b       	or	r17, r27
     69a:	76 95       	lsr	r23
     69c:	67 95       	ror	r22
     69e:	57 95       	ror	r21
     6a0:	47 95       	ror	r20
     6a2:	2f 5f       	subi	r18, 0xFF	; 255
     6a4:	3f 4f       	sbci	r19, 0xFF	; 255
     6a6:	77 fd       	sbrc	r23, 7
     6a8:	e7 cf       	rjmp	.-50     	; 0x678 <__mulsf3+0x140>
     6aa:	0c c0       	rjmp	.+24     	; 0x6c4 <__mulsf3+0x18c>
     6ac:	44 0f       	add	r20, r20
     6ae:	55 1f       	adc	r21, r21
     6b0:	66 1f       	adc	r22, r22
     6b2:	77 1f       	adc	r23, r23
     6b4:	17 fd       	sbrc	r17, 7
     6b6:	41 60       	ori	r20, 0x01	; 1
     6b8:	ee 0c       	add	r14, r14
     6ba:	ff 1c       	adc	r15, r15
     6bc:	00 1f       	adc	r16, r16
     6be:	11 1f       	adc	r17, r17
     6c0:	21 50       	subi	r18, 0x01	; 1
     6c2:	30 40       	sbci	r19, 0x00	; 0
     6c4:	40 30       	cpi	r20, 0x00	; 0
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	59 07       	cpc	r21, r25
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	69 07       	cpc	r22, r25
     6ce:	90 e4       	ldi	r25, 0x40	; 64
     6d0:	79 07       	cpc	r23, r25
     6d2:	60 f3       	brcs	.-40     	; 0x6ac <__mulsf3+0x174>
     6d4:	2b 8f       	std	Y+27, r18	; 0x1b
     6d6:	3c 8f       	std	Y+28, r19	; 0x1c
     6d8:	db 01       	movw	r26, r22
     6da:	ca 01       	movw	r24, r20
     6dc:	8f 77       	andi	r24, 0x7F	; 127
     6de:	90 70       	andi	r25, 0x00	; 0
     6e0:	a0 70       	andi	r26, 0x00	; 0
     6e2:	b0 70       	andi	r27, 0x00	; 0
     6e4:	80 34       	cpi	r24, 0x40	; 64
     6e6:	91 05       	cpc	r25, r1
     6e8:	a1 05       	cpc	r26, r1
     6ea:	b1 05       	cpc	r27, r1
     6ec:	61 f4       	brne	.+24     	; 0x706 <__mulsf3+0x1ce>
     6ee:	47 fd       	sbrc	r20, 7
     6f0:	0a c0       	rjmp	.+20     	; 0x706 <__mulsf3+0x1ce>
     6f2:	e1 14       	cp	r14, r1
     6f4:	f1 04       	cpc	r15, r1
     6f6:	01 05       	cpc	r16, r1
     6f8:	11 05       	cpc	r17, r1
     6fa:	29 f0       	breq	.+10     	; 0x706 <__mulsf3+0x1ce>
     6fc:	40 5c       	subi	r20, 0xC0	; 192
     6fe:	5f 4f       	sbci	r21, 0xFF	; 255
     700:	6f 4f       	sbci	r22, 0xFF	; 255
     702:	7f 4f       	sbci	r23, 0xFF	; 255
     704:	40 78       	andi	r20, 0x80	; 128
     706:	1a 8e       	std	Y+26, r1	; 0x1a
     708:	fe 17       	cp	r31, r30
     70a:	11 f0       	breq	.+4      	; 0x710 <__mulsf3+0x1d8>
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	8a 8f       	std	Y+26, r24	; 0x1a
     710:	4d 8f       	std	Y+29, r20	; 0x1d
     712:	5e 8f       	std	Y+30, r21	; 0x1e
     714:	6f 8f       	std	Y+31, r22	; 0x1f
     716:	78 a3       	std	Y+32, r23	; 0x20
     718:	83 e0       	ldi	r24, 0x03	; 3
     71a:	89 8f       	std	Y+25, r24	; 0x19
     71c:	ce 01       	movw	r24, r28
     71e:	49 96       	adiw	r24, 0x19	; 25
     720:	0e 94 26 05 	call	0xa4c	; 0xa4c <__pack_f>
     724:	a0 96       	adiw	r28, 0x20	; 32
     726:	e2 e1       	ldi	r30, 0x12	; 18
     728:	0c 94 3e 1a 	jmp	0x347c	; 0x347c <__epilogue_restores__>

0000072c <__divsf3>:
     72c:	a8 e1       	ldi	r26, 0x18	; 24
     72e:	b0 e0       	ldi	r27, 0x00	; 0
     730:	ec e9       	ldi	r30, 0x9C	; 156
     732:	f3 e0       	ldi	r31, 0x03	; 3
     734:	0c 94 2a 1a 	jmp	0x3454	; 0x3454 <__prologue_saves__+0x10>
     738:	69 83       	std	Y+1, r22	; 0x01
     73a:	7a 83       	std	Y+2, r23	; 0x02
     73c:	8b 83       	std	Y+3, r24	; 0x03
     73e:	9c 83       	std	Y+4, r25	; 0x04
     740:	2d 83       	std	Y+5, r18	; 0x05
     742:	3e 83       	std	Y+6, r19	; 0x06
     744:	4f 83       	std	Y+7, r20	; 0x07
     746:	58 87       	std	Y+8, r21	; 0x08
     748:	b9 e0       	ldi	r27, 0x09	; 9
     74a:	eb 2e       	mov	r14, r27
     74c:	f1 2c       	mov	r15, r1
     74e:	ec 0e       	add	r14, r28
     750:	fd 1e       	adc	r15, r29
     752:	ce 01       	movw	r24, r28
     754:	01 96       	adiw	r24, 0x01	; 1
     756:	b7 01       	movw	r22, r14
     758:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__unpack_f>
     75c:	8e 01       	movw	r16, r28
     75e:	0f 5e       	subi	r16, 0xEF	; 239
     760:	1f 4f       	sbci	r17, 0xFF	; 255
     762:	ce 01       	movw	r24, r28
     764:	05 96       	adiw	r24, 0x05	; 5
     766:	b8 01       	movw	r22, r16
     768:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__unpack_f>
     76c:	29 85       	ldd	r18, Y+9	; 0x09
     76e:	22 30       	cpi	r18, 0x02	; 2
     770:	08 f4       	brcc	.+2      	; 0x774 <__divsf3+0x48>
     772:	7e c0       	rjmp	.+252    	; 0x870 <__divsf3+0x144>
     774:	39 89       	ldd	r19, Y+17	; 0x11
     776:	32 30       	cpi	r19, 0x02	; 2
     778:	10 f4       	brcc	.+4      	; 0x77e <__divsf3+0x52>
     77a:	b8 01       	movw	r22, r16
     77c:	7c c0       	rjmp	.+248    	; 0x876 <__divsf3+0x14a>
     77e:	8a 85       	ldd	r24, Y+10	; 0x0a
     780:	9a 89       	ldd	r25, Y+18	; 0x12
     782:	89 27       	eor	r24, r25
     784:	8a 87       	std	Y+10, r24	; 0x0a
     786:	24 30       	cpi	r18, 0x04	; 4
     788:	11 f0       	breq	.+4      	; 0x78e <__divsf3+0x62>
     78a:	22 30       	cpi	r18, 0x02	; 2
     78c:	31 f4       	brne	.+12     	; 0x79a <__divsf3+0x6e>
     78e:	23 17       	cp	r18, r19
     790:	09 f0       	breq	.+2      	; 0x794 <__divsf3+0x68>
     792:	6e c0       	rjmp	.+220    	; 0x870 <__divsf3+0x144>
     794:	6b e6       	ldi	r22, 0x6B	; 107
     796:	70 e0       	ldi	r23, 0x00	; 0
     798:	6e c0       	rjmp	.+220    	; 0x876 <__divsf3+0x14a>
     79a:	34 30       	cpi	r19, 0x04	; 4
     79c:	39 f4       	brne	.+14     	; 0x7ac <__divsf3+0x80>
     79e:	1d 86       	std	Y+13, r1	; 0x0d
     7a0:	1e 86       	std	Y+14, r1	; 0x0e
     7a2:	1f 86       	std	Y+15, r1	; 0x0f
     7a4:	18 8a       	std	Y+16, r1	; 0x10
     7a6:	1c 86       	std	Y+12, r1	; 0x0c
     7a8:	1b 86       	std	Y+11, r1	; 0x0b
     7aa:	04 c0       	rjmp	.+8      	; 0x7b4 <__divsf3+0x88>
     7ac:	32 30       	cpi	r19, 0x02	; 2
     7ae:	21 f4       	brne	.+8      	; 0x7b8 <__divsf3+0x8c>
     7b0:	84 e0       	ldi	r24, 0x04	; 4
     7b2:	89 87       	std	Y+9, r24	; 0x09
     7b4:	b7 01       	movw	r22, r14
     7b6:	5f c0       	rjmp	.+190    	; 0x876 <__divsf3+0x14a>
     7b8:	2b 85       	ldd	r18, Y+11	; 0x0b
     7ba:	3c 85       	ldd	r19, Y+12	; 0x0c
     7bc:	8b 89       	ldd	r24, Y+19	; 0x13
     7be:	9c 89       	ldd	r25, Y+20	; 0x14
     7c0:	28 1b       	sub	r18, r24
     7c2:	39 0b       	sbc	r19, r25
     7c4:	3c 87       	std	Y+12, r19	; 0x0c
     7c6:	2b 87       	std	Y+11, r18	; 0x0b
     7c8:	ed 84       	ldd	r14, Y+13	; 0x0d
     7ca:	fe 84       	ldd	r15, Y+14	; 0x0e
     7cc:	0f 85       	ldd	r16, Y+15	; 0x0f
     7ce:	18 89       	ldd	r17, Y+16	; 0x10
     7d0:	ad 88       	ldd	r10, Y+21	; 0x15
     7d2:	be 88       	ldd	r11, Y+22	; 0x16
     7d4:	cf 88       	ldd	r12, Y+23	; 0x17
     7d6:	d8 8c       	ldd	r13, Y+24	; 0x18
     7d8:	ea 14       	cp	r14, r10
     7da:	fb 04       	cpc	r15, r11
     7dc:	0c 05       	cpc	r16, r12
     7de:	1d 05       	cpc	r17, r13
     7e0:	40 f4       	brcc	.+16     	; 0x7f2 <__divsf3+0xc6>
     7e2:	ee 0c       	add	r14, r14
     7e4:	ff 1c       	adc	r15, r15
     7e6:	00 1f       	adc	r16, r16
     7e8:	11 1f       	adc	r17, r17
     7ea:	21 50       	subi	r18, 0x01	; 1
     7ec:	30 40       	sbci	r19, 0x00	; 0
     7ee:	3c 87       	std	Y+12, r19	; 0x0c
     7f0:	2b 87       	std	Y+11, r18	; 0x0b
     7f2:	20 e0       	ldi	r18, 0x00	; 0
     7f4:	30 e0       	ldi	r19, 0x00	; 0
     7f6:	40 e0       	ldi	r20, 0x00	; 0
     7f8:	50 e0       	ldi	r21, 0x00	; 0
     7fa:	80 e0       	ldi	r24, 0x00	; 0
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	a0 e0       	ldi	r26, 0x00	; 0
     800:	b0 e4       	ldi	r27, 0x40	; 64
     802:	60 e0       	ldi	r22, 0x00	; 0
     804:	70 e0       	ldi	r23, 0x00	; 0
     806:	ea 14       	cp	r14, r10
     808:	fb 04       	cpc	r15, r11
     80a:	0c 05       	cpc	r16, r12
     80c:	1d 05       	cpc	r17, r13
     80e:	40 f0       	brcs	.+16     	; 0x820 <__divsf3+0xf4>
     810:	28 2b       	or	r18, r24
     812:	39 2b       	or	r19, r25
     814:	4a 2b       	or	r20, r26
     816:	5b 2b       	or	r21, r27
     818:	ea 18       	sub	r14, r10
     81a:	fb 08       	sbc	r15, r11
     81c:	0c 09       	sbc	r16, r12
     81e:	1d 09       	sbc	r17, r13
     820:	b6 95       	lsr	r27
     822:	a7 95       	ror	r26
     824:	97 95       	ror	r25
     826:	87 95       	ror	r24
     828:	ee 0c       	add	r14, r14
     82a:	ff 1c       	adc	r15, r15
     82c:	00 1f       	adc	r16, r16
     82e:	11 1f       	adc	r17, r17
     830:	6f 5f       	subi	r22, 0xFF	; 255
     832:	7f 4f       	sbci	r23, 0xFF	; 255
     834:	6f 31       	cpi	r22, 0x1F	; 31
     836:	71 05       	cpc	r23, r1
     838:	31 f7       	brne	.-52     	; 0x806 <__divsf3+0xda>
     83a:	da 01       	movw	r26, r20
     83c:	c9 01       	movw	r24, r18
     83e:	8f 77       	andi	r24, 0x7F	; 127
     840:	90 70       	andi	r25, 0x00	; 0
     842:	a0 70       	andi	r26, 0x00	; 0
     844:	b0 70       	andi	r27, 0x00	; 0
     846:	80 34       	cpi	r24, 0x40	; 64
     848:	91 05       	cpc	r25, r1
     84a:	a1 05       	cpc	r26, r1
     84c:	b1 05       	cpc	r27, r1
     84e:	61 f4       	brne	.+24     	; 0x868 <__divsf3+0x13c>
     850:	27 fd       	sbrc	r18, 7
     852:	0a c0       	rjmp	.+20     	; 0x868 <__divsf3+0x13c>
     854:	e1 14       	cp	r14, r1
     856:	f1 04       	cpc	r15, r1
     858:	01 05       	cpc	r16, r1
     85a:	11 05       	cpc	r17, r1
     85c:	29 f0       	breq	.+10     	; 0x868 <__divsf3+0x13c>
     85e:	20 5c       	subi	r18, 0xC0	; 192
     860:	3f 4f       	sbci	r19, 0xFF	; 255
     862:	4f 4f       	sbci	r20, 0xFF	; 255
     864:	5f 4f       	sbci	r21, 0xFF	; 255
     866:	20 78       	andi	r18, 0x80	; 128
     868:	2d 87       	std	Y+13, r18	; 0x0d
     86a:	3e 87       	std	Y+14, r19	; 0x0e
     86c:	4f 87       	std	Y+15, r20	; 0x0f
     86e:	58 8b       	std	Y+16, r21	; 0x10
     870:	be 01       	movw	r22, r28
     872:	67 5f       	subi	r22, 0xF7	; 247
     874:	7f 4f       	sbci	r23, 0xFF	; 255
     876:	cb 01       	movw	r24, r22
     878:	0e 94 26 05 	call	0xa4c	; 0xa4c <__pack_f>
     87c:	68 96       	adiw	r28, 0x18	; 24
     87e:	ea e0       	ldi	r30, 0x0A	; 10
     880:	0c 94 46 1a 	jmp	0x348c	; 0x348c <__epilogue_restores__+0x10>

00000884 <__gtsf2>:
     884:	a8 e1       	ldi	r26, 0x18	; 24
     886:	b0 e0       	ldi	r27, 0x00	; 0
     888:	e8 e4       	ldi	r30, 0x48	; 72
     88a:	f4 e0       	ldi	r31, 0x04	; 4
     88c:	0c 94 2e 1a 	jmp	0x345c	; 0x345c <__prologue_saves__+0x18>
     890:	69 83       	std	Y+1, r22	; 0x01
     892:	7a 83       	std	Y+2, r23	; 0x02
     894:	8b 83       	std	Y+3, r24	; 0x03
     896:	9c 83       	std	Y+4, r25	; 0x04
     898:	2d 83       	std	Y+5, r18	; 0x05
     89a:	3e 83       	std	Y+6, r19	; 0x06
     89c:	4f 83       	std	Y+7, r20	; 0x07
     89e:	58 87       	std	Y+8, r21	; 0x08
     8a0:	89 e0       	ldi	r24, 0x09	; 9
     8a2:	e8 2e       	mov	r14, r24
     8a4:	f1 2c       	mov	r15, r1
     8a6:	ec 0e       	add	r14, r28
     8a8:	fd 1e       	adc	r15, r29
     8aa:	ce 01       	movw	r24, r28
     8ac:	01 96       	adiw	r24, 0x01	; 1
     8ae:	b7 01       	movw	r22, r14
     8b0:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__unpack_f>
     8b4:	8e 01       	movw	r16, r28
     8b6:	0f 5e       	subi	r16, 0xEF	; 239
     8b8:	1f 4f       	sbci	r17, 0xFF	; 255
     8ba:	ce 01       	movw	r24, r28
     8bc:	05 96       	adiw	r24, 0x05	; 5
     8be:	b8 01       	movw	r22, r16
     8c0:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__unpack_f>
     8c4:	89 85       	ldd	r24, Y+9	; 0x09
     8c6:	82 30       	cpi	r24, 0x02	; 2
     8c8:	40 f0       	brcs	.+16     	; 0x8da <__gtsf2+0x56>
     8ca:	89 89       	ldd	r24, Y+17	; 0x11
     8cc:	82 30       	cpi	r24, 0x02	; 2
     8ce:	28 f0       	brcs	.+10     	; 0x8da <__gtsf2+0x56>
     8d0:	c7 01       	movw	r24, r14
     8d2:	b8 01       	movw	r22, r16
     8d4:	0e 94 73 06 	call	0xce6	; 0xce6 <__fpcmp_parts_f>
     8d8:	01 c0       	rjmp	.+2      	; 0x8dc <__gtsf2+0x58>
     8da:	8f ef       	ldi	r24, 0xFF	; 255
     8dc:	68 96       	adiw	r28, 0x18	; 24
     8de:	e6 e0       	ldi	r30, 0x06	; 6
     8e0:	0c 94 4a 1a 	jmp	0x3494	; 0x3494 <__epilogue_restores__+0x18>

000008e4 <__gesf2>:
     8e4:	a8 e1       	ldi	r26, 0x18	; 24
     8e6:	b0 e0       	ldi	r27, 0x00	; 0
     8e8:	e8 e7       	ldi	r30, 0x78	; 120
     8ea:	f4 e0       	ldi	r31, 0x04	; 4
     8ec:	0c 94 2e 1a 	jmp	0x345c	; 0x345c <__prologue_saves__+0x18>
     8f0:	69 83       	std	Y+1, r22	; 0x01
     8f2:	7a 83       	std	Y+2, r23	; 0x02
     8f4:	8b 83       	std	Y+3, r24	; 0x03
     8f6:	9c 83       	std	Y+4, r25	; 0x04
     8f8:	2d 83       	std	Y+5, r18	; 0x05
     8fa:	3e 83       	std	Y+6, r19	; 0x06
     8fc:	4f 83       	std	Y+7, r20	; 0x07
     8fe:	58 87       	std	Y+8, r21	; 0x08
     900:	89 e0       	ldi	r24, 0x09	; 9
     902:	e8 2e       	mov	r14, r24
     904:	f1 2c       	mov	r15, r1
     906:	ec 0e       	add	r14, r28
     908:	fd 1e       	adc	r15, r29
     90a:	ce 01       	movw	r24, r28
     90c:	01 96       	adiw	r24, 0x01	; 1
     90e:	b7 01       	movw	r22, r14
     910:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__unpack_f>
     914:	8e 01       	movw	r16, r28
     916:	0f 5e       	subi	r16, 0xEF	; 239
     918:	1f 4f       	sbci	r17, 0xFF	; 255
     91a:	ce 01       	movw	r24, r28
     91c:	05 96       	adiw	r24, 0x05	; 5
     91e:	b8 01       	movw	r22, r16
     920:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__unpack_f>
     924:	89 85       	ldd	r24, Y+9	; 0x09
     926:	82 30       	cpi	r24, 0x02	; 2
     928:	40 f0       	brcs	.+16     	; 0x93a <__gesf2+0x56>
     92a:	89 89       	ldd	r24, Y+17	; 0x11
     92c:	82 30       	cpi	r24, 0x02	; 2
     92e:	28 f0       	brcs	.+10     	; 0x93a <__gesf2+0x56>
     930:	c7 01       	movw	r24, r14
     932:	b8 01       	movw	r22, r16
     934:	0e 94 73 06 	call	0xce6	; 0xce6 <__fpcmp_parts_f>
     938:	01 c0       	rjmp	.+2      	; 0x93c <__gesf2+0x58>
     93a:	8f ef       	ldi	r24, 0xFF	; 255
     93c:	68 96       	adiw	r28, 0x18	; 24
     93e:	e6 e0       	ldi	r30, 0x06	; 6
     940:	0c 94 4a 1a 	jmp	0x3494	; 0x3494 <__epilogue_restores__+0x18>

00000944 <__ltsf2>:
     944:	a8 e1       	ldi	r26, 0x18	; 24
     946:	b0 e0       	ldi	r27, 0x00	; 0
     948:	e8 ea       	ldi	r30, 0xA8	; 168
     94a:	f4 e0       	ldi	r31, 0x04	; 4
     94c:	0c 94 2e 1a 	jmp	0x345c	; 0x345c <__prologue_saves__+0x18>
     950:	69 83       	std	Y+1, r22	; 0x01
     952:	7a 83       	std	Y+2, r23	; 0x02
     954:	8b 83       	std	Y+3, r24	; 0x03
     956:	9c 83       	std	Y+4, r25	; 0x04
     958:	2d 83       	std	Y+5, r18	; 0x05
     95a:	3e 83       	std	Y+6, r19	; 0x06
     95c:	4f 83       	std	Y+7, r20	; 0x07
     95e:	58 87       	std	Y+8, r21	; 0x08
     960:	89 e0       	ldi	r24, 0x09	; 9
     962:	e8 2e       	mov	r14, r24
     964:	f1 2c       	mov	r15, r1
     966:	ec 0e       	add	r14, r28
     968:	fd 1e       	adc	r15, r29
     96a:	ce 01       	movw	r24, r28
     96c:	01 96       	adiw	r24, 0x01	; 1
     96e:	b7 01       	movw	r22, r14
     970:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__unpack_f>
     974:	8e 01       	movw	r16, r28
     976:	0f 5e       	subi	r16, 0xEF	; 239
     978:	1f 4f       	sbci	r17, 0xFF	; 255
     97a:	ce 01       	movw	r24, r28
     97c:	05 96       	adiw	r24, 0x05	; 5
     97e:	b8 01       	movw	r22, r16
     980:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__unpack_f>
     984:	89 85       	ldd	r24, Y+9	; 0x09
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	40 f0       	brcs	.+16     	; 0x99a <__ltsf2+0x56>
     98a:	89 89       	ldd	r24, Y+17	; 0x11
     98c:	82 30       	cpi	r24, 0x02	; 2
     98e:	28 f0       	brcs	.+10     	; 0x99a <__ltsf2+0x56>
     990:	c7 01       	movw	r24, r14
     992:	b8 01       	movw	r22, r16
     994:	0e 94 73 06 	call	0xce6	; 0xce6 <__fpcmp_parts_f>
     998:	01 c0       	rjmp	.+2      	; 0x99c <__ltsf2+0x58>
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	68 96       	adiw	r28, 0x18	; 24
     99e:	e6 e0       	ldi	r30, 0x06	; 6
     9a0:	0c 94 4a 1a 	jmp	0x3494	; 0x3494 <__epilogue_restores__+0x18>

000009a4 <__fixsfsi>:
     9a4:	ac e0       	ldi	r26, 0x0C	; 12
     9a6:	b0 e0       	ldi	r27, 0x00	; 0
     9a8:	e8 ed       	ldi	r30, 0xD8	; 216
     9aa:	f4 e0       	ldi	r31, 0x04	; 4
     9ac:	0c 94 32 1a 	jmp	0x3464	; 0x3464 <__prologue_saves__+0x20>
     9b0:	69 83       	std	Y+1, r22	; 0x01
     9b2:	7a 83       	std	Y+2, r23	; 0x02
     9b4:	8b 83       	std	Y+3, r24	; 0x03
     9b6:	9c 83       	std	Y+4, r25	; 0x04
     9b8:	ce 01       	movw	r24, r28
     9ba:	01 96       	adiw	r24, 0x01	; 1
     9bc:	be 01       	movw	r22, r28
     9be:	6b 5f       	subi	r22, 0xFB	; 251
     9c0:	7f 4f       	sbci	r23, 0xFF	; 255
     9c2:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__unpack_f>
     9c6:	8d 81       	ldd	r24, Y+5	; 0x05
     9c8:	82 30       	cpi	r24, 0x02	; 2
     9ca:	61 f1       	breq	.+88     	; 0xa24 <__fixsfsi+0x80>
     9cc:	82 30       	cpi	r24, 0x02	; 2
     9ce:	50 f1       	brcs	.+84     	; 0xa24 <__fixsfsi+0x80>
     9d0:	84 30       	cpi	r24, 0x04	; 4
     9d2:	21 f4       	brne	.+8      	; 0x9dc <__fixsfsi+0x38>
     9d4:	8e 81       	ldd	r24, Y+6	; 0x06
     9d6:	88 23       	and	r24, r24
     9d8:	51 f1       	breq	.+84     	; 0xa2e <__fixsfsi+0x8a>
     9da:	2e c0       	rjmp	.+92     	; 0xa38 <__fixsfsi+0x94>
     9dc:	2f 81       	ldd	r18, Y+7	; 0x07
     9de:	38 85       	ldd	r19, Y+8	; 0x08
     9e0:	37 fd       	sbrc	r19, 7
     9e2:	20 c0       	rjmp	.+64     	; 0xa24 <__fixsfsi+0x80>
     9e4:	6e 81       	ldd	r22, Y+6	; 0x06
     9e6:	2f 31       	cpi	r18, 0x1F	; 31
     9e8:	31 05       	cpc	r19, r1
     9ea:	1c f0       	brlt	.+6      	; 0x9f2 <__fixsfsi+0x4e>
     9ec:	66 23       	and	r22, r22
     9ee:	f9 f0       	breq	.+62     	; 0xa2e <__fixsfsi+0x8a>
     9f0:	23 c0       	rjmp	.+70     	; 0xa38 <__fixsfsi+0x94>
     9f2:	8e e1       	ldi	r24, 0x1E	; 30
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	82 1b       	sub	r24, r18
     9f8:	93 0b       	sbc	r25, r19
     9fa:	29 85       	ldd	r18, Y+9	; 0x09
     9fc:	3a 85       	ldd	r19, Y+10	; 0x0a
     9fe:	4b 85       	ldd	r20, Y+11	; 0x0b
     a00:	5c 85       	ldd	r21, Y+12	; 0x0c
     a02:	04 c0       	rjmp	.+8      	; 0xa0c <__fixsfsi+0x68>
     a04:	56 95       	lsr	r21
     a06:	47 95       	ror	r20
     a08:	37 95       	ror	r19
     a0a:	27 95       	ror	r18
     a0c:	8a 95       	dec	r24
     a0e:	d2 f7       	brpl	.-12     	; 0xa04 <__fixsfsi+0x60>
     a10:	66 23       	and	r22, r22
     a12:	b1 f0       	breq	.+44     	; 0xa40 <__fixsfsi+0x9c>
     a14:	50 95       	com	r21
     a16:	40 95       	com	r20
     a18:	30 95       	com	r19
     a1a:	21 95       	neg	r18
     a1c:	3f 4f       	sbci	r19, 0xFF	; 255
     a1e:	4f 4f       	sbci	r20, 0xFF	; 255
     a20:	5f 4f       	sbci	r21, 0xFF	; 255
     a22:	0e c0       	rjmp	.+28     	; 0xa40 <__fixsfsi+0x9c>
     a24:	20 e0       	ldi	r18, 0x00	; 0
     a26:	30 e0       	ldi	r19, 0x00	; 0
     a28:	40 e0       	ldi	r20, 0x00	; 0
     a2a:	50 e0       	ldi	r21, 0x00	; 0
     a2c:	09 c0       	rjmp	.+18     	; 0xa40 <__fixsfsi+0x9c>
     a2e:	2f ef       	ldi	r18, 0xFF	; 255
     a30:	3f ef       	ldi	r19, 0xFF	; 255
     a32:	4f ef       	ldi	r20, 0xFF	; 255
     a34:	5f e7       	ldi	r21, 0x7F	; 127
     a36:	04 c0       	rjmp	.+8      	; 0xa40 <__fixsfsi+0x9c>
     a38:	20 e0       	ldi	r18, 0x00	; 0
     a3a:	30 e0       	ldi	r19, 0x00	; 0
     a3c:	40 e0       	ldi	r20, 0x00	; 0
     a3e:	50 e8       	ldi	r21, 0x80	; 128
     a40:	b9 01       	movw	r22, r18
     a42:	ca 01       	movw	r24, r20
     a44:	2c 96       	adiw	r28, 0x0c	; 12
     a46:	e2 e0       	ldi	r30, 0x02	; 2
     a48:	0c 94 4e 1a 	jmp	0x349c	; 0x349c <__epilogue_restores__+0x20>

00000a4c <__pack_f>:
     a4c:	df 92       	push	r13
     a4e:	ef 92       	push	r14
     a50:	ff 92       	push	r15
     a52:	0f 93       	push	r16
     a54:	1f 93       	push	r17
     a56:	fc 01       	movw	r30, r24
     a58:	e4 80       	ldd	r14, Z+4	; 0x04
     a5a:	f5 80       	ldd	r15, Z+5	; 0x05
     a5c:	06 81       	ldd	r16, Z+6	; 0x06
     a5e:	17 81       	ldd	r17, Z+7	; 0x07
     a60:	d1 80       	ldd	r13, Z+1	; 0x01
     a62:	80 81       	ld	r24, Z
     a64:	82 30       	cpi	r24, 0x02	; 2
     a66:	48 f4       	brcc	.+18     	; 0xa7a <__pack_f+0x2e>
     a68:	80 e0       	ldi	r24, 0x00	; 0
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	a0 e1       	ldi	r26, 0x10	; 16
     a6e:	b0 e0       	ldi	r27, 0x00	; 0
     a70:	e8 2a       	or	r14, r24
     a72:	f9 2a       	or	r15, r25
     a74:	0a 2b       	or	r16, r26
     a76:	1b 2b       	or	r17, r27
     a78:	a5 c0       	rjmp	.+330    	; 0xbc4 <__pack_f+0x178>
     a7a:	84 30       	cpi	r24, 0x04	; 4
     a7c:	09 f4       	brne	.+2      	; 0xa80 <__pack_f+0x34>
     a7e:	9f c0       	rjmp	.+318    	; 0xbbe <__pack_f+0x172>
     a80:	82 30       	cpi	r24, 0x02	; 2
     a82:	21 f4       	brne	.+8      	; 0xa8c <__pack_f+0x40>
     a84:	ee 24       	eor	r14, r14
     a86:	ff 24       	eor	r15, r15
     a88:	87 01       	movw	r16, r14
     a8a:	05 c0       	rjmp	.+10     	; 0xa96 <__pack_f+0x4a>
     a8c:	e1 14       	cp	r14, r1
     a8e:	f1 04       	cpc	r15, r1
     a90:	01 05       	cpc	r16, r1
     a92:	11 05       	cpc	r17, r1
     a94:	19 f4       	brne	.+6      	; 0xa9c <__pack_f+0x50>
     a96:	e0 e0       	ldi	r30, 0x00	; 0
     a98:	f0 e0       	ldi	r31, 0x00	; 0
     a9a:	96 c0       	rjmp	.+300    	; 0xbc8 <__pack_f+0x17c>
     a9c:	62 81       	ldd	r22, Z+2	; 0x02
     a9e:	73 81       	ldd	r23, Z+3	; 0x03
     aa0:	9f ef       	ldi	r25, 0xFF	; 255
     aa2:	62 38       	cpi	r22, 0x82	; 130
     aa4:	79 07       	cpc	r23, r25
     aa6:	0c f0       	brlt	.+2      	; 0xaaa <__pack_f+0x5e>
     aa8:	5b c0       	rjmp	.+182    	; 0xb60 <__pack_f+0x114>
     aaa:	22 e8       	ldi	r18, 0x82	; 130
     aac:	3f ef       	ldi	r19, 0xFF	; 255
     aae:	26 1b       	sub	r18, r22
     ab0:	37 0b       	sbc	r19, r23
     ab2:	2a 31       	cpi	r18, 0x1A	; 26
     ab4:	31 05       	cpc	r19, r1
     ab6:	2c f0       	brlt	.+10     	; 0xac2 <__pack_f+0x76>
     ab8:	20 e0       	ldi	r18, 0x00	; 0
     aba:	30 e0       	ldi	r19, 0x00	; 0
     abc:	40 e0       	ldi	r20, 0x00	; 0
     abe:	50 e0       	ldi	r21, 0x00	; 0
     ac0:	2a c0       	rjmp	.+84     	; 0xb16 <__pack_f+0xca>
     ac2:	b8 01       	movw	r22, r16
     ac4:	a7 01       	movw	r20, r14
     ac6:	02 2e       	mov	r0, r18
     ac8:	04 c0       	rjmp	.+8      	; 0xad2 <__pack_f+0x86>
     aca:	76 95       	lsr	r23
     acc:	67 95       	ror	r22
     ace:	57 95       	ror	r21
     ad0:	47 95       	ror	r20
     ad2:	0a 94       	dec	r0
     ad4:	d2 f7       	brpl	.-12     	; 0xaca <__pack_f+0x7e>
     ad6:	81 e0       	ldi	r24, 0x01	; 1
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	a0 e0       	ldi	r26, 0x00	; 0
     adc:	b0 e0       	ldi	r27, 0x00	; 0
     ade:	04 c0       	rjmp	.+8      	; 0xae8 <__pack_f+0x9c>
     ae0:	88 0f       	add	r24, r24
     ae2:	99 1f       	adc	r25, r25
     ae4:	aa 1f       	adc	r26, r26
     ae6:	bb 1f       	adc	r27, r27
     ae8:	2a 95       	dec	r18
     aea:	d2 f7       	brpl	.-12     	; 0xae0 <__pack_f+0x94>
     aec:	01 97       	sbiw	r24, 0x01	; 1
     aee:	a1 09       	sbc	r26, r1
     af0:	b1 09       	sbc	r27, r1
     af2:	8e 21       	and	r24, r14
     af4:	9f 21       	and	r25, r15
     af6:	a0 23       	and	r26, r16
     af8:	b1 23       	and	r27, r17
     afa:	00 97       	sbiw	r24, 0x00	; 0
     afc:	a1 05       	cpc	r26, r1
     afe:	b1 05       	cpc	r27, r1
     b00:	21 f0       	breq	.+8      	; 0xb0a <__pack_f+0xbe>
     b02:	81 e0       	ldi	r24, 0x01	; 1
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	a0 e0       	ldi	r26, 0x00	; 0
     b08:	b0 e0       	ldi	r27, 0x00	; 0
     b0a:	9a 01       	movw	r18, r20
     b0c:	ab 01       	movw	r20, r22
     b0e:	28 2b       	or	r18, r24
     b10:	39 2b       	or	r19, r25
     b12:	4a 2b       	or	r20, r26
     b14:	5b 2b       	or	r21, r27
     b16:	da 01       	movw	r26, r20
     b18:	c9 01       	movw	r24, r18
     b1a:	8f 77       	andi	r24, 0x7F	; 127
     b1c:	90 70       	andi	r25, 0x00	; 0
     b1e:	a0 70       	andi	r26, 0x00	; 0
     b20:	b0 70       	andi	r27, 0x00	; 0
     b22:	80 34       	cpi	r24, 0x40	; 64
     b24:	91 05       	cpc	r25, r1
     b26:	a1 05       	cpc	r26, r1
     b28:	b1 05       	cpc	r27, r1
     b2a:	39 f4       	brne	.+14     	; 0xb3a <__pack_f+0xee>
     b2c:	27 ff       	sbrs	r18, 7
     b2e:	09 c0       	rjmp	.+18     	; 0xb42 <__pack_f+0xf6>
     b30:	20 5c       	subi	r18, 0xC0	; 192
     b32:	3f 4f       	sbci	r19, 0xFF	; 255
     b34:	4f 4f       	sbci	r20, 0xFF	; 255
     b36:	5f 4f       	sbci	r21, 0xFF	; 255
     b38:	04 c0       	rjmp	.+8      	; 0xb42 <__pack_f+0xf6>
     b3a:	21 5c       	subi	r18, 0xC1	; 193
     b3c:	3f 4f       	sbci	r19, 0xFF	; 255
     b3e:	4f 4f       	sbci	r20, 0xFF	; 255
     b40:	5f 4f       	sbci	r21, 0xFF	; 255
     b42:	e0 e0       	ldi	r30, 0x00	; 0
     b44:	f0 e0       	ldi	r31, 0x00	; 0
     b46:	20 30       	cpi	r18, 0x00	; 0
     b48:	a0 e0       	ldi	r26, 0x00	; 0
     b4a:	3a 07       	cpc	r19, r26
     b4c:	a0 e0       	ldi	r26, 0x00	; 0
     b4e:	4a 07       	cpc	r20, r26
     b50:	a0 e4       	ldi	r26, 0x40	; 64
     b52:	5a 07       	cpc	r21, r26
     b54:	10 f0       	brcs	.+4      	; 0xb5a <__pack_f+0x10e>
     b56:	e1 e0       	ldi	r30, 0x01	; 1
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	79 01       	movw	r14, r18
     b5c:	8a 01       	movw	r16, r20
     b5e:	27 c0       	rjmp	.+78     	; 0xbae <__pack_f+0x162>
     b60:	60 38       	cpi	r22, 0x80	; 128
     b62:	71 05       	cpc	r23, r1
     b64:	64 f5       	brge	.+88     	; 0xbbe <__pack_f+0x172>
     b66:	fb 01       	movw	r30, r22
     b68:	e1 58       	subi	r30, 0x81	; 129
     b6a:	ff 4f       	sbci	r31, 0xFF	; 255
     b6c:	d8 01       	movw	r26, r16
     b6e:	c7 01       	movw	r24, r14
     b70:	8f 77       	andi	r24, 0x7F	; 127
     b72:	90 70       	andi	r25, 0x00	; 0
     b74:	a0 70       	andi	r26, 0x00	; 0
     b76:	b0 70       	andi	r27, 0x00	; 0
     b78:	80 34       	cpi	r24, 0x40	; 64
     b7a:	91 05       	cpc	r25, r1
     b7c:	a1 05       	cpc	r26, r1
     b7e:	b1 05       	cpc	r27, r1
     b80:	39 f4       	brne	.+14     	; 0xb90 <__pack_f+0x144>
     b82:	e7 fe       	sbrs	r14, 7
     b84:	0d c0       	rjmp	.+26     	; 0xba0 <__pack_f+0x154>
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	a0 e0       	ldi	r26, 0x00	; 0
     b8c:	b0 e0       	ldi	r27, 0x00	; 0
     b8e:	04 c0       	rjmp	.+8      	; 0xb98 <__pack_f+0x14c>
     b90:	8f e3       	ldi	r24, 0x3F	; 63
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	a0 e0       	ldi	r26, 0x00	; 0
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e8 0e       	add	r14, r24
     b9a:	f9 1e       	adc	r15, r25
     b9c:	0a 1f       	adc	r16, r26
     b9e:	1b 1f       	adc	r17, r27
     ba0:	17 ff       	sbrs	r17, 7
     ba2:	05 c0       	rjmp	.+10     	; 0xbae <__pack_f+0x162>
     ba4:	16 95       	lsr	r17
     ba6:	07 95       	ror	r16
     ba8:	f7 94       	ror	r15
     baa:	e7 94       	ror	r14
     bac:	31 96       	adiw	r30, 0x01	; 1
     bae:	87 e0       	ldi	r24, 0x07	; 7
     bb0:	16 95       	lsr	r17
     bb2:	07 95       	ror	r16
     bb4:	f7 94       	ror	r15
     bb6:	e7 94       	ror	r14
     bb8:	8a 95       	dec	r24
     bba:	d1 f7       	brne	.-12     	; 0xbb0 <__pack_f+0x164>
     bbc:	05 c0       	rjmp	.+10     	; 0xbc8 <__pack_f+0x17c>
     bbe:	ee 24       	eor	r14, r14
     bc0:	ff 24       	eor	r15, r15
     bc2:	87 01       	movw	r16, r14
     bc4:	ef ef       	ldi	r30, 0xFF	; 255
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	6e 2f       	mov	r22, r30
     bca:	67 95       	ror	r22
     bcc:	66 27       	eor	r22, r22
     bce:	67 95       	ror	r22
     bd0:	90 2f       	mov	r25, r16
     bd2:	9f 77       	andi	r25, 0x7F	; 127
     bd4:	d7 94       	ror	r13
     bd6:	dd 24       	eor	r13, r13
     bd8:	d7 94       	ror	r13
     bda:	8e 2f       	mov	r24, r30
     bdc:	86 95       	lsr	r24
     bde:	49 2f       	mov	r20, r25
     be0:	46 2b       	or	r20, r22
     be2:	58 2f       	mov	r21, r24
     be4:	5d 29       	or	r21, r13
     be6:	b7 01       	movw	r22, r14
     be8:	ca 01       	movw	r24, r20
     bea:	1f 91       	pop	r17
     bec:	0f 91       	pop	r16
     bee:	ff 90       	pop	r15
     bf0:	ef 90       	pop	r14
     bf2:	df 90       	pop	r13
     bf4:	08 95       	ret

00000bf6 <__unpack_f>:
     bf6:	fc 01       	movw	r30, r24
     bf8:	db 01       	movw	r26, r22
     bfa:	40 81       	ld	r20, Z
     bfc:	51 81       	ldd	r21, Z+1	; 0x01
     bfe:	22 81       	ldd	r18, Z+2	; 0x02
     c00:	62 2f       	mov	r22, r18
     c02:	6f 77       	andi	r22, 0x7F	; 127
     c04:	70 e0       	ldi	r23, 0x00	; 0
     c06:	22 1f       	adc	r18, r18
     c08:	22 27       	eor	r18, r18
     c0a:	22 1f       	adc	r18, r18
     c0c:	93 81       	ldd	r25, Z+3	; 0x03
     c0e:	89 2f       	mov	r24, r25
     c10:	88 0f       	add	r24, r24
     c12:	82 2b       	or	r24, r18
     c14:	28 2f       	mov	r18, r24
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	99 1f       	adc	r25, r25
     c1a:	99 27       	eor	r25, r25
     c1c:	99 1f       	adc	r25, r25
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	9c 93       	st	X, r25
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	21 15       	cp	r18, r1
     c26:	31 05       	cpc	r19, r1
     c28:	a9 f5       	brne	.+106    	; 0xc94 <__unpack_f+0x9e>
     c2a:	41 15       	cp	r20, r1
     c2c:	51 05       	cpc	r21, r1
     c2e:	61 05       	cpc	r22, r1
     c30:	71 05       	cpc	r23, r1
     c32:	11 f4       	brne	.+4      	; 0xc38 <__unpack_f+0x42>
     c34:	82 e0       	ldi	r24, 0x02	; 2
     c36:	37 c0       	rjmp	.+110    	; 0xca6 <__unpack_f+0xb0>
     c38:	82 e8       	ldi	r24, 0x82	; 130
     c3a:	9f ef       	ldi	r25, 0xFF	; 255
     c3c:	13 96       	adiw	r26, 0x03	; 3
     c3e:	9c 93       	st	X, r25
     c40:	8e 93       	st	-X, r24
     c42:	12 97       	sbiw	r26, 0x02	; 2
     c44:	9a 01       	movw	r18, r20
     c46:	ab 01       	movw	r20, r22
     c48:	67 e0       	ldi	r22, 0x07	; 7
     c4a:	22 0f       	add	r18, r18
     c4c:	33 1f       	adc	r19, r19
     c4e:	44 1f       	adc	r20, r20
     c50:	55 1f       	adc	r21, r21
     c52:	6a 95       	dec	r22
     c54:	d1 f7       	brne	.-12     	; 0xc4a <__unpack_f+0x54>
     c56:	83 e0       	ldi	r24, 0x03	; 3
     c58:	8c 93       	st	X, r24
     c5a:	0d c0       	rjmp	.+26     	; 0xc76 <__unpack_f+0x80>
     c5c:	22 0f       	add	r18, r18
     c5e:	33 1f       	adc	r19, r19
     c60:	44 1f       	adc	r20, r20
     c62:	55 1f       	adc	r21, r21
     c64:	12 96       	adiw	r26, 0x02	; 2
     c66:	8d 91       	ld	r24, X+
     c68:	9c 91       	ld	r25, X
     c6a:	13 97       	sbiw	r26, 0x03	; 3
     c6c:	01 97       	sbiw	r24, 0x01	; 1
     c6e:	13 96       	adiw	r26, 0x03	; 3
     c70:	9c 93       	st	X, r25
     c72:	8e 93       	st	-X, r24
     c74:	12 97       	sbiw	r26, 0x02	; 2
     c76:	20 30       	cpi	r18, 0x00	; 0
     c78:	80 e0       	ldi	r24, 0x00	; 0
     c7a:	38 07       	cpc	r19, r24
     c7c:	80 e0       	ldi	r24, 0x00	; 0
     c7e:	48 07       	cpc	r20, r24
     c80:	80 e4       	ldi	r24, 0x40	; 64
     c82:	58 07       	cpc	r21, r24
     c84:	58 f3       	brcs	.-42     	; 0xc5c <__unpack_f+0x66>
     c86:	14 96       	adiw	r26, 0x04	; 4
     c88:	2d 93       	st	X+, r18
     c8a:	3d 93       	st	X+, r19
     c8c:	4d 93       	st	X+, r20
     c8e:	5c 93       	st	X, r21
     c90:	17 97       	sbiw	r26, 0x07	; 7
     c92:	08 95       	ret
     c94:	2f 3f       	cpi	r18, 0xFF	; 255
     c96:	31 05       	cpc	r19, r1
     c98:	79 f4       	brne	.+30     	; 0xcb8 <__unpack_f+0xc2>
     c9a:	41 15       	cp	r20, r1
     c9c:	51 05       	cpc	r21, r1
     c9e:	61 05       	cpc	r22, r1
     ca0:	71 05       	cpc	r23, r1
     ca2:	19 f4       	brne	.+6      	; 0xcaa <__unpack_f+0xb4>
     ca4:	84 e0       	ldi	r24, 0x04	; 4
     ca6:	8c 93       	st	X, r24
     ca8:	08 95       	ret
     caa:	64 ff       	sbrs	r22, 4
     cac:	03 c0       	rjmp	.+6      	; 0xcb4 <__unpack_f+0xbe>
     cae:	81 e0       	ldi	r24, 0x01	; 1
     cb0:	8c 93       	st	X, r24
     cb2:	12 c0       	rjmp	.+36     	; 0xcd8 <__unpack_f+0xe2>
     cb4:	1c 92       	st	X, r1
     cb6:	10 c0       	rjmp	.+32     	; 0xcd8 <__unpack_f+0xe2>
     cb8:	2f 57       	subi	r18, 0x7F	; 127
     cba:	30 40       	sbci	r19, 0x00	; 0
     cbc:	13 96       	adiw	r26, 0x03	; 3
     cbe:	3c 93       	st	X, r19
     cc0:	2e 93       	st	-X, r18
     cc2:	12 97       	sbiw	r26, 0x02	; 2
     cc4:	83 e0       	ldi	r24, 0x03	; 3
     cc6:	8c 93       	st	X, r24
     cc8:	87 e0       	ldi	r24, 0x07	; 7
     cca:	44 0f       	add	r20, r20
     ccc:	55 1f       	adc	r21, r21
     cce:	66 1f       	adc	r22, r22
     cd0:	77 1f       	adc	r23, r23
     cd2:	8a 95       	dec	r24
     cd4:	d1 f7       	brne	.-12     	; 0xcca <__unpack_f+0xd4>
     cd6:	70 64       	ori	r23, 0x40	; 64
     cd8:	14 96       	adiw	r26, 0x04	; 4
     cda:	4d 93       	st	X+, r20
     cdc:	5d 93       	st	X+, r21
     cde:	6d 93       	st	X+, r22
     ce0:	7c 93       	st	X, r23
     ce2:	17 97       	sbiw	r26, 0x07	; 7
     ce4:	08 95       	ret

00000ce6 <__fpcmp_parts_f>:
     ce6:	1f 93       	push	r17
     ce8:	dc 01       	movw	r26, r24
     cea:	fb 01       	movw	r30, r22
     cec:	9c 91       	ld	r25, X
     cee:	92 30       	cpi	r25, 0x02	; 2
     cf0:	08 f4       	brcc	.+2      	; 0xcf4 <__fpcmp_parts_f+0xe>
     cf2:	47 c0       	rjmp	.+142    	; 0xd82 <__fpcmp_parts_f+0x9c>
     cf4:	80 81       	ld	r24, Z
     cf6:	82 30       	cpi	r24, 0x02	; 2
     cf8:	08 f4       	brcc	.+2      	; 0xcfc <__fpcmp_parts_f+0x16>
     cfa:	43 c0       	rjmp	.+134    	; 0xd82 <__fpcmp_parts_f+0x9c>
     cfc:	94 30       	cpi	r25, 0x04	; 4
     cfe:	51 f4       	brne	.+20     	; 0xd14 <__fpcmp_parts_f+0x2e>
     d00:	11 96       	adiw	r26, 0x01	; 1
     d02:	1c 91       	ld	r17, X
     d04:	84 30       	cpi	r24, 0x04	; 4
     d06:	99 f5       	brne	.+102    	; 0xd6e <__fpcmp_parts_f+0x88>
     d08:	81 81       	ldd	r24, Z+1	; 0x01
     d0a:	68 2f       	mov	r22, r24
     d0c:	70 e0       	ldi	r23, 0x00	; 0
     d0e:	61 1b       	sub	r22, r17
     d10:	71 09       	sbc	r23, r1
     d12:	3f c0       	rjmp	.+126    	; 0xd92 <__fpcmp_parts_f+0xac>
     d14:	84 30       	cpi	r24, 0x04	; 4
     d16:	21 f0       	breq	.+8      	; 0xd20 <__fpcmp_parts_f+0x3a>
     d18:	92 30       	cpi	r25, 0x02	; 2
     d1a:	31 f4       	brne	.+12     	; 0xd28 <__fpcmp_parts_f+0x42>
     d1c:	82 30       	cpi	r24, 0x02	; 2
     d1e:	b9 f1       	breq	.+110    	; 0xd8e <__fpcmp_parts_f+0xa8>
     d20:	81 81       	ldd	r24, Z+1	; 0x01
     d22:	88 23       	and	r24, r24
     d24:	89 f1       	breq	.+98     	; 0xd88 <__fpcmp_parts_f+0xa2>
     d26:	2d c0       	rjmp	.+90     	; 0xd82 <__fpcmp_parts_f+0x9c>
     d28:	11 96       	adiw	r26, 0x01	; 1
     d2a:	1c 91       	ld	r17, X
     d2c:	11 97       	sbiw	r26, 0x01	; 1
     d2e:	82 30       	cpi	r24, 0x02	; 2
     d30:	f1 f0       	breq	.+60     	; 0xd6e <__fpcmp_parts_f+0x88>
     d32:	81 81       	ldd	r24, Z+1	; 0x01
     d34:	18 17       	cp	r17, r24
     d36:	d9 f4       	brne	.+54     	; 0xd6e <__fpcmp_parts_f+0x88>
     d38:	12 96       	adiw	r26, 0x02	; 2
     d3a:	2d 91       	ld	r18, X+
     d3c:	3c 91       	ld	r19, X
     d3e:	13 97       	sbiw	r26, 0x03	; 3
     d40:	82 81       	ldd	r24, Z+2	; 0x02
     d42:	93 81       	ldd	r25, Z+3	; 0x03
     d44:	82 17       	cp	r24, r18
     d46:	93 07       	cpc	r25, r19
     d48:	94 f0       	brlt	.+36     	; 0xd6e <__fpcmp_parts_f+0x88>
     d4a:	28 17       	cp	r18, r24
     d4c:	39 07       	cpc	r19, r25
     d4e:	bc f0       	brlt	.+46     	; 0xd7e <__fpcmp_parts_f+0x98>
     d50:	14 96       	adiw	r26, 0x04	; 4
     d52:	8d 91       	ld	r24, X+
     d54:	9d 91       	ld	r25, X+
     d56:	0d 90       	ld	r0, X+
     d58:	bc 91       	ld	r27, X
     d5a:	a0 2d       	mov	r26, r0
     d5c:	24 81       	ldd	r18, Z+4	; 0x04
     d5e:	35 81       	ldd	r19, Z+5	; 0x05
     d60:	46 81       	ldd	r20, Z+6	; 0x06
     d62:	57 81       	ldd	r21, Z+7	; 0x07
     d64:	28 17       	cp	r18, r24
     d66:	39 07       	cpc	r19, r25
     d68:	4a 07       	cpc	r20, r26
     d6a:	5b 07       	cpc	r21, r27
     d6c:	18 f4       	brcc	.+6      	; 0xd74 <__fpcmp_parts_f+0x8e>
     d6e:	11 23       	and	r17, r17
     d70:	41 f0       	breq	.+16     	; 0xd82 <__fpcmp_parts_f+0x9c>
     d72:	0a c0       	rjmp	.+20     	; 0xd88 <__fpcmp_parts_f+0xa2>
     d74:	82 17       	cp	r24, r18
     d76:	93 07       	cpc	r25, r19
     d78:	a4 07       	cpc	r26, r20
     d7a:	b5 07       	cpc	r27, r21
     d7c:	40 f4       	brcc	.+16     	; 0xd8e <__fpcmp_parts_f+0xa8>
     d7e:	11 23       	and	r17, r17
     d80:	19 f0       	breq	.+6      	; 0xd88 <__fpcmp_parts_f+0xa2>
     d82:	61 e0       	ldi	r22, 0x01	; 1
     d84:	70 e0       	ldi	r23, 0x00	; 0
     d86:	05 c0       	rjmp	.+10     	; 0xd92 <__fpcmp_parts_f+0xac>
     d88:	6f ef       	ldi	r22, 0xFF	; 255
     d8a:	7f ef       	ldi	r23, 0xFF	; 255
     d8c:	02 c0       	rjmp	.+4      	; 0xd92 <__fpcmp_parts_f+0xac>
     d8e:	60 e0       	ldi	r22, 0x00	; 0
     d90:	70 e0       	ldi	r23, 0x00	; 0
     d92:	cb 01       	movw	r24, r22
     d94:	1f 91       	pop	r17
     d96:	08 95       	ret

00000d98 <__vector_14>:

/*******************************************************************************
 *                          ISR's Definitions                                  *
 *******************************************************************************/
ISR(ADC_vect)
{
     d98:	1f 92       	push	r1
     d9a:	0f 92       	push	r0
     d9c:	0f b6       	in	r0, 0x3f	; 63
     d9e:	0f 92       	push	r0
     da0:	11 24       	eor	r1, r1
     da2:	8f 93       	push	r24
     da4:	9f 93       	push	r25
     da6:	ef 93       	push	r30
     da8:	ff 93       	push	r31
     daa:	df 93       	push	r29
     dac:	cf 93       	push	r28
     dae:	cd b7       	in	r28, 0x3d	; 61
     db0:	de b7       	in	r29, 0x3e	; 62
	/* Read ADC Data after conversion complete */
	G_AdcResult = ADC;
     db2:	e4 e2       	ldi	r30, 0x24	; 36
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	80 81       	ld	r24, Z
     db8:	91 81       	ldd	r25, Z+1	; 0x01
     dba:	90 93 77 00 	sts	0x0077, r25
     dbe:	80 93 76 00 	sts	0x0076, r24
}
     dc2:	cf 91       	pop	r28
     dc4:	df 91       	pop	r29
     dc6:	ff 91       	pop	r31
     dc8:	ef 91       	pop	r30
     dca:	9f 91       	pop	r25
     dcc:	8f 91       	pop	r24
     dce:	0f 90       	pop	r0
     dd0:	0f be       	out	0x3f, r0	; 63
     dd2:	0f 90       	pop	r0
     dd4:	1f 90       	pop	r1
     dd6:	18 95       	reti

00000dd8 <ADC_init>:
/*******************************************************************************
 *                          Functions Definitions                              *
 *******************************************************************************/
void ADC_init(const ADC_ConfigType * Config_Ptr){
     dd8:	df 93       	push	r29
     dda:	cf 93       	push	r28
     ddc:	00 d0       	rcall	.+0      	; 0xdde <ADC_init+0x6>
     dde:	0f 92       	push	r0
     de0:	cd b7       	in	r28, 0x3d	; 61
     de2:	de b7       	in	r29, 0x3e	; 62
     de4:	9a 83       	std	Y+2, r25	; 0x02
     de6:	89 83       	std	Y+1, r24	; 0x01
	DDRA =0x00;
     de8:	ea e3       	ldi	r30, 0x3A	; 58
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	10 82       	st	Z, r1
	/* ADMUX Register Bits Description:
	 * insert the required  voltage reference value in the Last two bits (REFS1:0)
	 * ADLAR   = 0 right adjusted
	 * MUX4:0  = 00000 to choose channel 0 as initialization
	 */
	ADMUX =(ADMUX&0x00)|((Config_Ptr->REF)<<REFS0);
     dee:	e7 e2       	ldi	r30, 0x27	; 39
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	80 81       	ld	r24, Z
     df4:	a7 e2       	ldi	r26, 0x27	; 39
     df6:	b0 e0       	ldi	r27, 0x00	; 0
     df8:	e9 81       	ldd	r30, Y+1	; 0x01
     dfa:	fa 81       	ldd	r31, Y+2	; 0x02
     dfc:	80 81       	ld	r24, Z
     dfe:	88 2f       	mov	r24, r24
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	00 24       	eor	r0, r0
     e04:	96 95       	lsr	r25
     e06:	87 95       	ror	r24
     e08:	07 94       	ror	r0
     e0a:	96 95       	lsr	r25
     e0c:	87 95       	ror	r24
     e0e:	07 94       	ror	r0
     e10:	98 2f       	mov	r25, r24
     e12:	80 2d       	mov	r24, r0
     e14:	8c 93       	st	X, r24
	/* ADCSRA Register Bits Description:
	 * ADEN    = 1 Enable ADC
	 * ADIE    = insert the required type of adc( enable enterrupt or not).
	 * ADPS2:0 = insert the required clock for ADC.
	 */
	ADCSRA = (1<<ADEN)|((Config_Ptr->TYPE)<<ADIE)|((Config_Ptr->CLOCK)<<ADPS0);
     e16:	a6 e2       	ldi	r26, 0x26	; 38
     e18:	b0 e0       	ldi	r27, 0x00	; 0
     e1a:	e9 81       	ldd	r30, Y+1	; 0x01
     e1c:	fa 81       	ldd	r31, Y+2	; 0x02
     e1e:	82 81       	ldd	r24, Z+2	; 0x02
     e20:	88 2f       	mov	r24, r24
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	88 0f       	add	r24, r24
     e26:	99 1f       	adc	r25, r25
     e28:	88 0f       	add	r24, r24
     e2a:	99 1f       	adc	r25, r25
     e2c:	88 0f       	add	r24, r24
     e2e:	99 1f       	adc	r25, r25
     e30:	98 2f       	mov	r25, r24
     e32:	90 68       	ori	r25, 0x80	; 128
     e34:	e9 81       	ldd	r30, Y+1	; 0x01
     e36:	fa 81       	ldd	r31, Y+2	; 0x02
     e38:	81 81       	ldd	r24, Z+1	; 0x01
     e3a:	89 2b       	or	r24, r25
     e3c:	8c 93       	st	X, r24
}
     e3e:	0f 90       	pop	r0
     e40:	0f 90       	pop	r0
     e42:	0f 90       	pop	r0
     e44:	cf 91       	pop	r28
     e46:	df 91       	pop	r29
     e48:	08 95       	ret

00000e4a <ADC_readChannel>:
uint16 ADC_readChannel(uint8 channel_num){
     e4a:	df 93       	push	r29
     e4c:	cf 93       	push	r28
     e4e:	0f 92       	push	r0
     e50:	cd b7       	in	r28, 0x3d	; 61
     e52:	de b7       	in	r29, 0x3e	; 62
     e54:	89 83       	std	Y+1, r24	; 0x01

	channel_num &= 0x07; /* channel number must be from 0 --> 7 */
     e56:	89 81       	ldd	r24, Y+1	; 0x01
     e58:	87 70       	andi	r24, 0x07	; 7
     e5a:	89 83       	std	Y+1, r24	; 0x01
		ADMUX &= 0xE0; /* clear first 5 bits in the ADMUX (channel number MUX4:0 bits) before set the required channel */
     e5c:	a7 e2       	ldi	r26, 0x27	; 39
     e5e:	b0 e0       	ldi	r27, 0x00	; 0
     e60:	e7 e2       	ldi	r30, 0x27	; 39
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	80 81       	ld	r24, Z
     e66:	80 7e       	andi	r24, 0xE0	; 224
     e68:	8c 93       	st	X, r24
		ADMUX = ADMUX | channel_num; /* choose the correct channel by setting the channel number in MUX4:0 bits */
     e6a:	a7 e2       	ldi	r26, 0x27	; 39
     e6c:	b0 e0       	ldi	r27, 0x00	; 0
     e6e:	e7 e2       	ldi	r30, 0x27	; 39
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	90 81       	ld	r25, Z
     e74:	89 81       	ldd	r24, Y+1	; 0x01
     e76:	89 2b       	or	r24, r25
     e78:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADSC); /* start conversion write '1' to ADSC */
     e7a:	a6 e2       	ldi	r26, 0x26	; 38
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	e6 e2       	ldi	r30, 0x26	; 38
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	80 81       	ld	r24, Z
     e84:	80 64       	ori	r24, 0x40	; 64
     e86:	8c 93       	st	X, r24
		while(BIT_IS_CLEAR(ADCSRA,ADIF)); /* wait for conversion to complete ADIF becomes '1' */
     e88:	e6 e2       	ldi	r30, 0x26	; 38
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	80 81       	ld	r24, Z
     e8e:	88 2f       	mov	r24, r24
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	80 71       	andi	r24, 0x10	; 16
     e94:	90 70       	andi	r25, 0x00	; 0
     e96:	00 97       	sbiw	r24, 0x00	; 0
     e98:	b9 f3       	breq	.-18     	; 0xe88 <ADC_readChannel+0x3e>
		SET_BIT(ADCSRA,ADIF); /* clear ADIF by write '1' to it :) */
     e9a:	a6 e2       	ldi	r26, 0x26	; 38
     e9c:	b0 e0       	ldi	r27, 0x00	; 0
     e9e:	e6 e2       	ldi	r30, 0x26	; 38
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	80 61       	ori	r24, 0x10	; 16
     ea6:	8c 93       	st	X, r24
		return (ADC); /* return the data register */
     ea8:	e4 e2       	ldi	r30, 0x24	; 36
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	80 81       	ld	r24, Z
     eae:	91 81       	ldd	r25, Z+1	; 0x01
}
     eb0:	0f 90       	pop	r0
     eb2:	cf 91       	pop	r28
     eb4:	df 91       	pop	r29
     eb6:	08 95       	ret

00000eb8 <ADC_readChannel_Interrupt>:
void ADC_readChannel_Interrupt(uint8 channel_num){
     eb8:	df 93       	push	r29
     eba:	cf 93       	push	r28
     ebc:	0f 92       	push	r0
     ebe:	cd b7       	in	r28, 0x3d	; 61
     ec0:	de b7       	in	r29, 0x3e	; 62
     ec2:	89 83       	std	Y+1, r24	; 0x01

		channel_num &= 0x07; /* channel number must be from 0 --> 7 */
     ec4:	89 81       	ldd	r24, Y+1	; 0x01
     ec6:	87 70       	andi	r24, 0x07	; 7
     ec8:	89 83       	std	Y+1, r24	; 0x01
				ADMUX &= 0xE0; /* clear first 5 bits in the ADMUX (channel number MUX4:0 bits) before set the required channel */
     eca:	a7 e2       	ldi	r26, 0x27	; 39
     ecc:	b0 e0       	ldi	r27, 0x00	; 0
     ece:	e7 e2       	ldi	r30, 0x27	; 39
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	80 81       	ld	r24, Z
     ed4:	80 7e       	andi	r24, 0xE0	; 224
     ed6:	8c 93       	st	X, r24
				ADMUX = ADMUX | channel_num; /* choose the correct channel by setting the channel number in MUX4:0 bits */
     ed8:	a7 e2       	ldi	r26, 0x27	; 39
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	e7 e2       	ldi	r30, 0x27	; 39
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	90 81       	ld	r25, Z
     ee2:	89 81       	ldd	r24, Y+1	; 0x01
     ee4:	89 2b       	or	r24, r25
     ee6:	8c 93       	st	X, r24
				SET_BIT(ADCSRA,ADSC); /* start conversion write '1' to ADSC */
     ee8:	a6 e2       	ldi	r26, 0x26	; 38
     eea:	b0 e0       	ldi	r27, 0x00	; 0
     eec:	e6 e2       	ldi	r30, 0x26	; 38
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	80 81       	ld	r24, Z
     ef2:	80 64       	ori	r24, 0x40	; 64
     ef4:	8c 93       	st	X, r24

}
     ef6:	0f 90       	pop	r0
     ef8:	cf 91       	pop	r28
     efa:	df 91       	pop	r29
     efc:	08 95       	ret

00000efe <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
     efe:	df 93       	push	r29
     f00:	cf 93       	push	r28
     f02:	cd b7       	in	r28, 0x3d	; 61
     f04:	de b7       	in	r29, 0x3e	; 62
     f06:	e1 97       	sbiw	r28, 0x31	; 49
     f08:	0f b6       	in	r0, 0x3f	; 63
     f0a:	f8 94       	cli
     f0c:	de bf       	out	0x3e, r29	; 62
     f0e:	0f be       	out	0x3f, r0	; 63
     f10:	cd bf       	out	0x3d, r28	; 61
#if DATA_BITS_MODE == 4
	LCD_DIR|=0xFF;
     f12:	e4 e3       	ldi	r30, 0x34	; 52
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	e4 e3       	ldi	r30, 0x34	; 52
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	8f ef       	ldi	r24, 0xFF	; 255
     f1e:	80 83       	st	Z, r24
	LCD_PORT&=~(1<<EN);
     f20:	a5 e3       	ldi	r26, 0x35	; 53
     f22:	b0 e0       	ldi	r27, 0x00	; 0
     f24:	e5 e3       	ldi	r30, 0x35	; 53
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	80 81       	ld	r24, Z
     f2a:	8b 7f       	andi	r24, 0xFB	; 251
     f2c:	8c 93       	st	X, r24
     f2e:	80 e0       	ldi	r24, 0x00	; 0
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	aa ef       	ldi	r26, 0xFA	; 250
     f34:	b4 e4       	ldi	r27, 0x44	; 68
     f36:	8d a7       	std	Y+45, r24	; 0x2d
     f38:	9e a7       	std	Y+46, r25	; 0x2e
     f3a:	af a7       	std	Y+47, r26	; 0x2f
     f3c:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     f3e:	6d a5       	ldd	r22, Y+45	; 0x2d
     f40:	7e a5       	ldd	r23, Y+46	; 0x2e
     f42:	8f a5       	ldd	r24, Y+47	; 0x2f
     f44:	98 a9       	ldd	r25, Y+48	; 0x30
     f46:	2b ea       	ldi	r18, 0xAB	; 171
     f48:	3a ea       	ldi	r19, 0xAA	; 170
     f4a:	4a ea       	ldi	r20, 0xAA	; 170
     f4c:	5e e3       	ldi	r21, 0x3E	; 62
     f4e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
     f52:	dc 01       	movw	r26, r24
     f54:	cb 01       	movw	r24, r22
     f56:	89 a7       	std	Y+41, r24	; 0x29
     f58:	9a a7       	std	Y+42, r25	; 0x2a
     f5a:	ab a7       	std	Y+43, r26	; 0x2b
     f5c:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
     f5e:	69 a5       	ldd	r22, Y+41	; 0x29
     f60:	7a a5       	ldd	r23, Y+42	; 0x2a
     f62:	8b a5       	ldd	r24, Y+43	; 0x2b
     f64:	9c a5       	ldd	r25, Y+44	; 0x2c
     f66:	20 e0       	ldi	r18, 0x00	; 0
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	40 e8       	ldi	r20, 0x80	; 128
     f6c:	5f e3       	ldi	r21, 0x3F	; 63
     f6e:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
     f72:	88 23       	and	r24, r24
     f74:	1c f4       	brge	.+6      	; 0xf7c <LCD_init+0x7e>
		__ticks = 1;
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	88 a7       	std	Y+40, r24	; 0x28
     f7a:	91 c0       	rjmp	.+290    	; 0x109e <LCD_init+0x1a0>
	else if (__tmp > 255)
     f7c:	69 a5       	ldd	r22, Y+41	; 0x29
     f7e:	7a a5       	ldd	r23, Y+42	; 0x2a
     f80:	8b a5       	ldd	r24, Y+43	; 0x2b
     f82:	9c a5       	ldd	r25, Y+44	; 0x2c
     f84:	20 e0       	ldi	r18, 0x00	; 0
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	4f e7       	ldi	r20, 0x7F	; 127
     f8a:	53 e4       	ldi	r21, 0x43	; 67
     f8c:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
     f90:	18 16       	cp	r1, r24
     f92:	0c f0       	brlt	.+2      	; 0xf96 <LCD_init+0x98>
     f94:	7b c0       	rjmp	.+246    	; 0x108c <LCD_init+0x18e>
	{
		_delay_ms(__us / 1000.0);
     f96:	6d a5       	ldd	r22, Y+45	; 0x2d
     f98:	7e a5       	ldd	r23, Y+46	; 0x2e
     f9a:	8f a5       	ldd	r24, Y+47	; 0x2f
     f9c:	98 a9       	ldd	r25, Y+48	; 0x30
     f9e:	20 e0       	ldi	r18, 0x00	; 0
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	4a e7       	ldi	r20, 0x7A	; 122
     fa4:	54 e4       	ldi	r21, 0x44	; 68
     fa6:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
     faa:	dc 01       	movw	r26, r24
     fac:	cb 01       	movw	r24, r22
     fae:	8c a3       	std	Y+36, r24	; 0x24
     fb0:	9d a3       	std	Y+37, r25	; 0x25
     fb2:	ae a3       	std	Y+38, r26	; 0x26
     fb4:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fb6:	6c a1       	ldd	r22, Y+36	; 0x24
     fb8:	7d a1       	ldd	r23, Y+37	; 0x25
     fba:	8e a1       	ldd	r24, Y+38	; 0x26
     fbc:	9f a1       	ldd	r25, Y+39	; 0x27
     fbe:	20 e0       	ldi	r18, 0x00	; 0
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	4a e7       	ldi	r20, 0x7A	; 122
     fc4:	53 e4       	ldi	r21, 0x43	; 67
     fc6:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
     fca:	dc 01       	movw	r26, r24
     fcc:	cb 01       	movw	r24, r22
     fce:	88 a3       	std	Y+32, r24	; 0x20
     fd0:	99 a3       	std	Y+33, r25	; 0x21
     fd2:	aa a3       	std	Y+34, r26	; 0x22
     fd4:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
     fd6:	68 a1       	ldd	r22, Y+32	; 0x20
     fd8:	79 a1       	ldd	r23, Y+33	; 0x21
     fda:	8a a1       	ldd	r24, Y+34	; 0x22
     fdc:	9b a1       	ldd	r25, Y+35	; 0x23
     fde:	20 e0       	ldi	r18, 0x00	; 0
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	40 e8       	ldi	r20, 0x80	; 128
     fe4:	5f e3       	ldi	r21, 0x3F	; 63
     fe6:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
     fea:	88 23       	and	r24, r24
     fec:	2c f4       	brge	.+10     	; 0xff8 <LCD_init+0xfa>
		__ticks = 1;
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	9f 8f       	std	Y+31, r25	; 0x1f
     ff4:	8e 8f       	std	Y+30, r24	; 0x1e
     ff6:	3f c0       	rjmp	.+126    	; 0x1076 <LCD_init+0x178>
	else if (__tmp > 65535)
     ff8:	68 a1       	ldd	r22, Y+32	; 0x20
     ffa:	79 a1       	ldd	r23, Y+33	; 0x21
     ffc:	8a a1       	ldd	r24, Y+34	; 0x22
     ffe:	9b a1       	ldd	r25, Y+35	; 0x23
    1000:	20 e0       	ldi	r18, 0x00	; 0
    1002:	3f ef       	ldi	r19, 0xFF	; 255
    1004:	4f e7       	ldi	r20, 0x7F	; 127
    1006:	57 e4       	ldi	r21, 0x47	; 71
    1008:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    100c:	18 16       	cp	r1, r24
    100e:	4c f5       	brge	.+82     	; 0x1062 <LCD_init+0x164>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1010:	6c a1       	ldd	r22, Y+36	; 0x24
    1012:	7d a1       	ldd	r23, Y+37	; 0x25
    1014:	8e a1       	ldd	r24, Y+38	; 0x26
    1016:	9f a1       	ldd	r25, Y+39	; 0x27
    1018:	20 e0       	ldi	r18, 0x00	; 0
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	40 e2       	ldi	r20, 0x20	; 32
    101e:	51 e4       	ldi	r21, 0x41	; 65
    1020:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1024:	dc 01       	movw	r26, r24
    1026:	cb 01       	movw	r24, r22
    1028:	bc 01       	movw	r22, r24
    102a:	cd 01       	movw	r24, r26
    102c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1030:	dc 01       	movw	r26, r24
    1032:	cb 01       	movw	r24, r22
    1034:	9f 8f       	std	Y+31, r25	; 0x1f
    1036:	8e 8f       	std	Y+30, r24	; 0x1e
    1038:	0f c0       	rjmp	.+30     	; 0x1058 <LCD_init+0x15a>
    103a:	89 e1       	ldi	r24, 0x19	; 25
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	9d 8f       	std	Y+29, r25	; 0x1d
    1040:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1042:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1044:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1046:	01 97       	sbiw	r24, 0x01	; 1
    1048:	f1 f7       	brne	.-4      	; 0x1046 <LCD_init+0x148>
    104a:	9d 8f       	std	Y+29, r25	; 0x1d
    104c:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    104e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1050:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1052:	01 97       	sbiw	r24, 0x01	; 1
    1054:	9f 8f       	std	Y+31, r25	; 0x1f
    1056:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1058:	8e 8d       	ldd	r24, Y+30	; 0x1e
    105a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    105c:	00 97       	sbiw	r24, 0x00	; 0
    105e:	69 f7       	brne	.-38     	; 0x103a <LCD_init+0x13c>
    1060:	24 c0       	rjmp	.+72     	; 0x10aa <LCD_init+0x1ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1062:	68 a1       	ldd	r22, Y+32	; 0x20
    1064:	79 a1       	ldd	r23, Y+33	; 0x21
    1066:	8a a1       	ldd	r24, Y+34	; 0x22
    1068:	9b a1       	ldd	r25, Y+35	; 0x23
    106a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    106e:	dc 01       	movw	r26, r24
    1070:	cb 01       	movw	r24, r22
    1072:	9f 8f       	std	Y+31, r25	; 0x1f
    1074:	8e 8f       	std	Y+30, r24	; 0x1e
    1076:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1078:	9f 8d       	ldd	r25, Y+31	; 0x1f
    107a:	9b 8f       	std	Y+27, r25	; 0x1b
    107c:	8a 8f       	std	Y+26, r24	; 0x1a
    107e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1080:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1082:	01 97       	sbiw	r24, 0x01	; 1
    1084:	f1 f7       	brne	.-4      	; 0x1082 <LCD_init+0x184>
    1086:	9b 8f       	std	Y+27, r25	; 0x1b
    1088:	8a 8f       	std	Y+26, r24	; 0x1a
    108a:	0f c0       	rjmp	.+30     	; 0x10aa <LCD_init+0x1ac>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    108c:	69 a5       	ldd	r22, Y+41	; 0x29
    108e:	7a a5       	ldd	r23, Y+42	; 0x2a
    1090:	8b a5       	ldd	r24, Y+43	; 0x2b
    1092:	9c a5       	ldd	r25, Y+44	; 0x2c
    1094:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1098:	dc 01       	movw	r26, r24
    109a:	cb 01       	movw	r24, r22
    109c:	88 a7       	std	Y+40, r24	; 0x28
    109e:	88 a5       	ldd	r24, Y+40	; 0x28
    10a0:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    10a2:	89 8d       	ldd	r24, Y+25	; 0x19
    10a4:	8a 95       	dec	r24
    10a6:	f1 f7       	brne	.-4      	; 0x10a4 <LCD_init+0x1a6>
    10a8:	89 8f       	std	Y+25, r24	; 0x19
		_delay_us(2000);
		LCD_sendCommand(FOUR_BITS_DATA_MODE);
    10aa:	82 e0       	ldi	r24, 0x02	; 2
    10ac:	0e 94 28 09 	call	0x1250	; 0x1250 <LCD_sendCommand>
    10b0:	80 e0       	ldi	r24, 0x00	; 0
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	a8 ec       	ldi	r26, 0xC8	; 200
    10b6:	b2 e4       	ldi	r27, 0x42	; 66
    10b8:	8d 8b       	std	Y+21, r24	; 0x15
    10ba:	9e 8b       	std	Y+22, r25	; 0x16
    10bc:	af 8b       	std	Y+23, r26	; 0x17
    10be:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    10c0:	6d 89       	ldd	r22, Y+21	; 0x15
    10c2:	7e 89       	ldd	r23, Y+22	; 0x16
    10c4:	8f 89       	ldd	r24, Y+23	; 0x17
    10c6:	98 8d       	ldd	r25, Y+24	; 0x18
    10c8:	2b ea       	ldi	r18, 0xAB	; 171
    10ca:	3a ea       	ldi	r19, 0xAA	; 170
    10cc:	4a ea       	ldi	r20, 0xAA	; 170
    10ce:	5e e3       	ldi	r21, 0x3E	; 62
    10d0:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    10d4:	dc 01       	movw	r26, r24
    10d6:	cb 01       	movw	r24, r22
    10d8:	89 8b       	std	Y+17, r24	; 0x11
    10da:	9a 8b       	std	Y+18, r25	; 0x12
    10dc:	ab 8b       	std	Y+19, r26	; 0x13
    10de:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    10e0:	69 89       	ldd	r22, Y+17	; 0x11
    10e2:	7a 89       	ldd	r23, Y+18	; 0x12
    10e4:	8b 89       	ldd	r24, Y+19	; 0x13
    10e6:	9c 89       	ldd	r25, Y+20	; 0x14
    10e8:	20 e0       	ldi	r18, 0x00	; 0
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	40 e8       	ldi	r20, 0x80	; 128
    10ee:	5f e3       	ldi	r21, 0x3F	; 63
    10f0:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    10f4:	88 23       	and	r24, r24
    10f6:	1c f4       	brge	.+6      	; 0x10fe <LCD_init+0x200>
		__ticks = 1;
    10f8:	81 e0       	ldi	r24, 0x01	; 1
    10fa:	88 8b       	std	Y+16, r24	; 0x10
    10fc:	91 c0       	rjmp	.+290    	; 0x1220 <LCD_init+0x322>
	else if (__tmp > 255)
    10fe:	69 89       	ldd	r22, Y+17	; 0x11
    1100:	7a 89       	ldd	r23, Y+18	; 0x12
    1102:	8b 89       	ldd	r24, Y+19	; 0x13
    1104:	9c 89       	ldd	r25, Y+20	; 0x14
    1106:	20 e0       	ldi	r18, 0x00	; 0
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	4f e7       	ldi	r20, 0x7F	; 127
    110c:	53 e4       	ldi	r21, 0x43	; 67
    110e:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1112:	18 16       	cp	r1, r24
    1114:	0c f0       	brlt	.+2      	; 0x1118 <LCD_init+0x21a>
    1116:	7b c0       	rjmp	.+246    	; 0x120e <LCD_init+0x310>
	{
		_delay_ms(__us / 1000.0);
    1118:	6d 89       	ldd	r22, Y+21	; 0x15
    111a:	7e 89       	ldd	r23, Y+22	; 0x16
    111c:	8f 89       	ldd	r24, Y+23	; 0x17
    111e:	98 8d       	ldd	r25, Y+24	; 0x18
    1120:	20 e0       	ldi	r18, 0x00	; 0
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	4a e7       	ldi	r20, 0x7A	; 122
    1126:	54 e4       	ldi	r21, 0x44	; 68
    1128:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    112c:	dc 01       	movw	r26, r24
    112e:	cb 01       	movw	r24, r22
    1130:	8c 87       	std	Y+12, r24	; 0x0c
    1132:	9d 87       	std	Y+13, r25	; 0x0d
    1134:	ae 87       	std	Y+14, r26	; 0x0e
    1136:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1138:	6c 85       	ldd	r22, Y+12	; 0x0c
    113a:	7d 85       	ldd	r23, Y+13	; 0x0d
    113c:	8e 85       	ldd	r24, Y+14	; 0x0e
    113e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1140:	20 e0       	ldi	r18, 0x00	; 0
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	4a e7       	ldi	r20, 0x7A	; 122
    1146:	53 e4       	ldi	r21, 0x43	; 67
    1148:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    114c:	dc 01       	movw	r26, r24
    114e:	cb 01       	movw	r24, r22
    1150:	88 87       	std	Y+8, r24	; 0x08
    1152:	99 87       	std	Y+9, r25	; 0x09
    1154:	aa 87       	std	Y+10, r26	; 0x0a
    1156:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1158:	68 85       	ldd	r22, Y+8	; 0x08
    115a:	79 85       	ldd	r23, Y+9	; 0x09
    115c:	8a 85       	ldd	r24, Y+10	; 0x0a
    115e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1160:	20 e0       	ldi	r18, 0x00	; 0
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	40 e8       	ldi	r20, 0x80	; 128
    1166:	5f e3       	ldi	r21, 0x3F	; 63
    1168:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    116c:	88 23       	and	r24, r24
    116e:	2c f4       	brge	.+10     	; 0x117a <LCD_init+0x27c>
		__ticks = 1;
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	9f 83       	std	Y+7, r25	; 0x07
    1176:	8e 83       	std	Y+6, r24	; 0x06
    1178:	3f c0       	rjmp	.+126    	; 0x11f8 <LCD_init+0x2fa>
	else if (__tmp > 65535)
    117a:	68 85       	ldd	r22, Y+8	; 0x08
    117c:	79 85       	ldd	r23, Y+9	; 0x09
    117e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1180:	9b 85       	ldd	r25, Y+11	; 0x0b
    1182:	20 e0       	ldi	r18, 0x00	; 0
    1184:	3f ef       	ldi	r19, 0xFF	; 255
    1186:	4f e7       	ldi	r20, 0x7F	; 127
    1188:	57 e4       	ldi	r21, 0x47	; 71
    118a:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    118e:	18 16       	cp	r1, r24
    1190:	4c f5       	brge	.+82     	; 0x11e4 <LCD_init+0x2e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1192:	6c 85       	ldd	r22, Y+12	; 0x0c
    1194:	7d 85       	ldd	r23, Y+13	; 0x0d
    1196:	8e 85       	ldd	r24, Y+14	; 0x0e
    1198:	9f 85       	ldd	r25, Y+15	; 0x0f
    119a:	20 e0       	ldi	r18, 0x00	; 0
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	40 e2       	ldi	r20, 0x20	; 32
    11a0:	51 e4       	ldi	r21, 0x41	; 65
    11a2:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    11a6:	dc 01       	movw	r26, r24
    11a8:	cb 01       	movw	r24, r22
    11aa:	bc 01       	movw	r22, r24
    11ac:	cd 01       	movw	r24, r26
    11ae:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    11b2:	dc 01       	movw	r26, r24
    11b4:	cb 01       	movw	r24, r22
    11b6:	9f 83       	std	Y+7, r25	; 0x07
    11b8:	8e 83       	std	Y+6, r24	; 0x06
    11ba:	0f c0       	rjmp	.+30     	; 0x11da <LCD_init+0x2dc>
    11bc:	89 e1       	ldi	r24, 0x19	; 25
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	9d 83       	std	Y+5, r25	; 0x05
    11c2:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    11c4:	8c 81       	ldd	r24, Y+4	; 0x04
    11c6:	9d 81       	ldd	r25, Y+5	; 0x05
    11c8:	01 97       	sbiw	r24, 0x01	; 1
    11ca:	f1 f7       	brne	.-4      	; 0x11c8 <LCD_init+0x2ca>
    11cc:	9d 83       	std	Y+5, r25	; 0x05
    11ce:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11d0:	8e 81       	ldd	r24, Y+6	; 0x06
    11d2:	9f 81       	ldd	r25, Y+7	; 0x07
    11d4:	01 97       	sbiw	r24, 0x01	; 1
    11d6:	9f 83       	std	Y+7, r25	; 0x07
    11d8:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11da:	8e 81       	ldd	r24, Y+6	; 0x06
    11dc:	9f 81       	ldd	r25, Y+7	; 0x07
    11de:	00 97       	sbiw	r24, 0x00	; 0
    11e0:	69 f7       	brne	.-38     	; 0x11bc <LCD_init+0x2be>
    11e2:	24 c0       	rjmp	.+72     	; 0x122c <LCD_init+0x32e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11e4:	68 85       	ldd	r22, Y+8	; 0x08
    11e6:	79 85       	ldd	r23, Y+9	; 0x09
    11e8:	8a 85       	ldd	r24, Y+10	; 0x0a
    11ea:	9b 85       	ldd	r25, Y+11	; 0x0b
    11ec:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    11f0:	dc 01       	movw	r26, r24
    11f2:	cb 01       	movw	r24, r22
    11f4:	9f 83       	std	Y+7, r25	; 0x07
    11f6:	8e 83       	std	Y+6, r24	; 0x06
    11f8:	8e 81       	ldd	r24, Y+6	; 0x06
    11fa:	9f 81       	ldd	r25, Y+7	; 0x07
    11fc:	9b 83       	std	Y+3, r25	; 0x03
    11fe:	8a 83       	std	Y+2, r24	; 0x02
    1200:	8a 81       	ldd	r24, Y+2	; 0x02
    1202:	9b 81       	ldd	r25, Y+3	; 0x03
    1204:	01 97       	sbiw	r24, 0x01	; 1
    1206:	f1 f7       	brne	.-4      	; 0x1204 <LCD_init+0x306>
    1208:	9b 83       	std	Y+3, r25	; 0x03
    120a:	8a 83       	std	Y+2, r24	; 0x02
    120c:	0f c0       	rjmp	.+30     	; 0x122c <LCD_init+0x32e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    120e:	69 89       	ldd	r22, Y+17	; 0x11
    1210:	7a 89       	ldd	r23, Y+18	; 0x12
    1212:	8b 89       	ldd	r24, Y+19	; 0x13
    1214:	9c 89       	ldd	r25, Y+20	; 0x14
    1216:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    121a:	dc 01       	movw	r26, r24
    121c:	cb 01       	movw	r24, r22
    121e:	88 8b       	std	Y+16, r24	; 0x10
    1220:	88 89       	ldd	r24, Y+16	; 0x10
    1222:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1224:	89 81       	ldd	r24, Y+1	; 0x01
    1226:	8a 95       	dec	r24
    1228:	f1 f7       	brne	.-4      	; 0x1226 <LCD_init+0x328>
    122a:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(100);
		LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE);
    122c:	88 e2       	ldi	r24, 0x28	; 40
    122e:	0e 94 28 09 	call	0x1250	; 0x1250 <LCD_sendCommand>
		LCD_DIR|=(1<<EN)|(1<<RS)|(1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
		LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */
		LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
#endif

	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    1232:	8c e0       	ldi	r24, 0x0C	; 12
    1234:	0e 94 28 09 	call	0x1250	; 0x1250 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	0e 94 28 09 	call	0x1250	; 0x1250 <LCD_sendCommand>
	}
    123e:	e1 96       	adiw	r28, 0x31	; 49
    1240:	0f b6       	in	r0, 0x3f	; 63
    1242:	f8 94       	cli
    1244:	de bf       	out	0x3e, r29	; 62
    1246:	0f be       	out	0x3f, r0	; 63
    1248:	cd bf       	out	0x3d, r28	; 61
    124a:	cf 91       	pop	r28
    124c:	df 91       	pop	r29
    124e:	08 95       	ret

00001250 <LCD_sendCommand>:
void LCD_sendCommand(uint8 command){
    1250:	0f 93       	push	r16
    1252:	1f 93       	push	r17
    1254:	df 93       	push	r29
    1256:	cf 93       	push	r28
    1258:	cd b7       	in	r28, 0x3d	; 61
    125a:	de b7       	in	r29, 0x3e	; 62
    125c:	c9 5a       	subi	r28, 0xA9	; 169
    125e:	d0 40       	sbci	r29, 0x00	; 0
    1260:	0f b6       	in	r0, 0x3f	; 63
    1262:	f8 94       	cli
    1264:	de bf       	out	0x3e, r29	; 62
    1266:	0f be       	out	0x3f, r0	; 63
    1268:	cd bf       	out	0x3d, r28	; 61
    126a:	fe 01       	movw	r30, r28
    126c:	e7 55       	subi	r30, 0x57	; 87
    126e:	ff 4f       	sbci	r31, 0xFF	; 255
    1270:	80 83       	st	Z, r24
	CLEAR_BIT(LCD_PORT,RS); /* Instruction Mode RS=0 */
    1272:	a5 e3       	ldi	r26, 0x35	; 53
    1274:	b0 e0       	ldi	r27, 0x00	; 0
    1276:	e5 e3       	ldi	r30, 0x35	; 53
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	80 81       	ld	r24, Z
    127c:	8e 7f       	andi	r24, 0xFE	; 254
    127e:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_PORT,RW); /* write data to LCD so RW=0 */
    1280:	a5 e3       	ldi	r26, 0x35	; 53
    1282:	b0 e0       	ldi	r27, 0x00	; 0
    1284:	e5 e3       	ldi	r30, 0x35	; 53
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	80 81       	ld	r24, Z
    128a:	8d 7f       	andi	r24, 0xFD	; 253
    128c:	8c 93       	st	X, r24
    128e:	fe 01       	movw	r30, r28
    1290:	eb 55       	subi	r30, 0x5B	; 91
    1292:	ff 4f       	sbci	r31, 0xFF	; 255
    1294:	80 e0       	ldi	r24, 0x00	; 0
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	a8 ec       	ldi	r26, 0xC8	; 200
    129a:	b2 e4       	ldi	r27, 0x42	; 66
    129c:	80 83       	st	Z, r24
    129e:	91 83       	std	Z+1, r25	; 0x01
    12a0:	a2 83       	std	Z+2, r26	; 0x02
    12a2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    12a4:	8e 01       	movw	r16, r28
    12a6:	0f 55       	subi	r16, 0x5F	; 95
    12a8:	1f 4f       	sbci	r17, 0xFF	; 255
    12aa:	fe 01       	movw	r30, r28
    12ac:	eb 55       	subi	r30, 0x5B	; 91
    12ae:	ff 4f       	sbci	r31, 0xFF	; 255
    12b0:	60 81       	ld	r22, Z
    12b2:	71 81       	ldd	r23, Z+1	; 0x01
    12b4:	82 81       	ldd	r24, Z+2	; 0x02
    12b6:	93 81       	ldd	r25, Z+3	; 0x03
    12b8:	2b ea       	ldi	r18, 0xAB	; 171
    12ba:	3a ea       	ldi	r19, 0xAA	; 170
    12bc:	4a ea       	ldi	r20, 0xAA	; 170
    12be:	5e e3       	ldi	r21, 0x3E	; 62
    12c0:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    12c4:	dc 01       	movw	r26, r24
    12c6:	cb 01       	movw	r24, r22
    12c8:	f8 01       	movw	r30, r16
    12ca:	80 83       	st	Z, r24
    12cc:	91 83       	std	Z+1, r25	; 0x01
    12ce:	a2 83       	std	Z+2, r26	; 0x02
    12d0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    12d2:	fe 01       	movw	r30, r28
    12d4:	ef 55       	subi	r30, 0x5F	; 95
    12d6:	ff 4f       	sbci	r31, 0xFF	; 255
    12d8:	60 81       	ld	r22, Z
    12da:	71 81       	ldd	r23, Z+1	; 0x01
    12dc:	82 81       	ldd	r24, Z+2	; 0x02
    12de:	93 81       	ldd	r25, Z+3	; 0x03
    12e0:	20 e0       	ldi	r18, 0x00	; 0
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	40 e8       	ldi	r20, 0x80	; 128
    12e6:	5f e3       	ldi	r21, 0x3F	; 63
    12e8:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    12ec:	88 23       	and	r24, r24
    12ee:	34 f4       	brge	.+12     	; 0x12fc <LCD_sendCommand+0xac>
		__ticks = 1;
    12f0:	fe 01       	movw	r30, r28
    12f2:	e0 56       	subi	r30, 0x60	; 96
    12f4:	ff 4f       	sbci	r31, 0xFF	; 255
    12f6:	81 e0       	ldi	r24, 0x01	; 1
    12f8:	80 83       	st	Z, r24
    12fa:	e0 c0       	rjmp	.+448    	; 0x14bc <LCD_sendCommand+0x26c>
	else if (__tmp > 255)
    12fc:	fe 01       	movw	r30, r28
    12fe:	ef 55       	subi	r30, 0x5F	; 95
    1300:	ff 4f       	sbci	r31, 0xFF	; 255
    1302:	60 81       	ld	r22, Z
    1304:	71 81       	ldd	r23, Z+1	; 0x01
    1306:	82 81       	ldd	r24, Z+2	; 0x02
    1308:	93 81       	ldd	r25, Z+3	; 0x03
    130a:	20 e0       	ldi	r18, 0x00	; 0
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	4f e7       	ldi	r20, 0x7F	; 127
    1310:	53 e4       	ldi	r21, 0x43	; 67
    1312:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1316:	18 16       	cp	r1, r24
    1318:	0c f0       	brlt	.+2      	; 0x131c <LCD_sendCommand+0xcc>
    131a:	c0 c0       	rjmp	.+384    	; 0x149c <LCD_sendCommand+0x24c>
	{
		_delay_ms(__us / 1000.0);
    131c:	fe 01       	movw	r30, r28
    131e:	eb 55       	subi	r30, 0x5B	; 91
    1320:	ff 4f       	sbci	r31, 0xFF	; 255
    1322:	60 81       	ld	r22, Z
    1324:	71 81       	ldd	r23, Z+1	; 0x01
    1326:	82 81       	ldd	r24, Z+2	; 0x02
    1328:	93 81       	ldd	r25, Z+3	; 0x03
    132a:	20 e0       	ldi	r18, 0x00	; 0
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	4a e7       	ldi	r20, 0x7A	; 122
    1330:	54 e4       	ldi	r21, 0x44	; 68
    1332:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    1336:	dc 01       	movw	r26, r24
    1338:	cb 01       	movw	r24, r22
    133a:	fe 01       	movw	r30, r28
    133c:	e4 56       	subi	r30, 0x64	; 100
    133e:	ff 4f       	sbci	r31, 0xFF	; 255
    1340:	80 83       	st	Z, r24
    1342:	91 83       	std	Z+1, r25	; 0x01
    1344:	a2 83       	std	Z+2, r26	; 0x02
    1346:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1348:	8e 01       	movw	r16, r28
    134a:	08 56       	subi	r16, 0x68	; 104
    134c:	1f 4f       	sbci	r17, 0xFF	; 255
    134e:	fe 01       	movw	r30, r28
    1350:	e4 56       	subi	r30, 0x64	; 100
    1352:	ff 4f       	sbci	r31, 0xFF	; 255
    1354:	60 81       	ld	r22, Z
    1356:	71 81       	ldd	r23, Z+1	; 0x01
    1358:	82 81       	ldd	r24, Z+2	; 0x02
    135a:	93 81       	ldd	r25, Z+3	; 0x03
    135c:	20 e0       	ldi	r18, 0x00	; 0
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	4a e7       	ldi	r20, 0x7A	; 122
    1362:	53 e4       	ldi	r21, 0x43	; 67
    1364:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1368:	dc 01       	movw	r26, r24
    136a:	cb 01       	movw	r24, r22
    136c:	f8 01       	movw	r30, r16
    136e:	80 83       	st	Z, r24
    1370:	91 83       	std	Z+1, r25	; 0x01
    1372:	a2 83       	std	Z+2, r26	; 0x02
    1374:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1376:	fe 01       	movw	r30, r28
    1378:	e8 56       	subi	r30, 0x68	; 104
    137a:	ff 4f       	sbci	r31, 0xFF	; 255
    137c:	60 81       	ld	r22, Z
    137e:	71 81       	ldd	r23, Z+1	; 0x01
    1380:	82 81       	ldd	r24, Z+2	; 0x02
    1382:	93 81       	ldd	r25, Z+3	; 0x03
    1384:	20 e0       	ldi	r18, 0x00	; 0
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	40 e8       	ldi	r20, 0x80	; 128
    138a:	5f e3       	ldi	r21, 0x3F	; 63
    138c:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1390:	88 23       	and	r24, r24
    1392:	44 f4       	brge	.+16     	; 0x13a4 <LCD_sendCommand+0x154>
		__ticks = 1;
    1394:	fe 01       	movw	r30, r28
    1396:	ea 56       	subi	r30, 0x6A	; 106
    1398:	ff 4f       	sbci	r31, 0xFF	; 255
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	91 83       	std	Z+1, r25	; 0x01
    13a0:	80 83       	st	Z, r24
    13a2:	64 c0       	rjmp	.+200    	; 0x146c <LCD_sendCommand+0x21c>
	else if (__tmp > 65535)
    13a4:	fe 01       	movw	r30, r28
    13a6:	e8 56       	subi	r30, 0x68	; 104
    13a8:	ff 4f       	sbci	r31, 0xFF	; 255
    13aa:	60 81       	ld	r22, Z
    13ac:	71 81       	ldd	r23, Z+1	; 0x01
    13ae:	82 81       	ldd	r24, Z+2	; 0x02
    13b0:	93 81       	ldd	r25, Z+3	; 0x03
    13b2:	20 e0       	ldi	r18, 0x00	; 0
    13b4:	3f ef       	ldi	r19, 0xFF	; 255
    13b6:	4f e7       	ldi	r20, 0x7F	; 127
    13b8:	57 e4       	ldi	r21, 0x47	; 71
    13ba:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    13be:	18 16       	cp	r1, r24
    13c0:	0c f0       	brlt	.+2      	; 0x13c4 <LCD_sendCommand+0x174>
    13c2:	43 c0       	rjmp	.+134    	; 0x144a <LCD_sendCommand+0x1fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13c4:	fe 01       	movw	r30, r28
    13c6:	e4 56       	subi	r30, 0x64	; 100
    13c8:	ff 4f       	sbci	r31, 0xFF	; 255
    13ca:	60 81       	ld	r22, Z
    13cc:	71 81       	ldd	r23, Z+1	; 0x01
    13ce:	82 81       	ldd	r24, Z+2	; 0x02
    13d0:	93 81       	ldd	r25, Z+3	; 0x03
    13d2:	20 e0       	ldi	r18, 0x00	; 0
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	40 e2       	ldi	r20, 0x20	; 32
    13d8:	51 e4       	ldi	r21, 0x41	; 65
    13da:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    13de:	dc 01       	movw	r26, r24
    13e0:	cb 01       	movw	r24, r22
    13e2:	8e 01       	movw	r16, r28
    13e4:	0a 56       	subi	r16, 0x6A	; 106
    13e6:	1f 4f       	sbci	r17, 0xFF	; 255
    13e8:	bc 01       	movw	r22, r24
    13ea:	cd 01       	movw	r24, r26
    13ec:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    13f0:	dc 01       	movw	r26, r24
    13f2:	cb 01       	movw	r24, r22
    13f4:	f8 01       	movw	r30, r16
    13f6:	91 83       	std	Z+1, r25	; 0x01
    13f8:	80 83       	st	Z, r24
    13fa:	1f c0       	rjmp	.+62     	; 0x143a <LCD_sendCommand+0x1ea>
    13fc:	fe 01       	movw	r30, r28
    13fe:	ec 56       	subi	r30, 0x6C	; 108
    1400:	ff 4f       	sbci	r31, 0xFF	; 255
    1402:	89 e1       	ldi	r24, 0x19	; 25
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	91 83       	std	Z+1, r25	; 0x01
    1408:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    140a:	fe 01       	movw	r30, r28
    140c:	ec 56       	subi	r30, 0x6C	; 108
    140e:	ff 4f       	sbci	r31, 0xFF	; 255
    1410:	80 81       	ld	r24, Z
    1412:	91 81       	ldd	r25, Z+1	; 0x01
    1414:	01 97       	sbiw	r24, 0x01	; 1
    1416:	f1 f7       	brne	.-4      	; 0x1414 <LCD_sendCommand+0x1c4>
    1418:	fe 01       	movw	r30, r28
    141a:	ec 56       	subi	r30, 0x6C	; 108
    141c:	ff 4f       	sbci	r31, 0xFF	; 255
    141e:	91 83       	std	Z+1, r25	; 0x01
    1420:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1422:	de 01       	movw	r26, r28
    1424:	aa 56       	subi	r26, 0x6A	; 106
    1426:	bf 4f       	sbci	r27, 0xFF	; 255
    1428:	fe 01       	movw	r30, r28
    142a:	ea 56       	subi	r30, 0x6A	; 106
    142c:	ff 4f       	sbci	r31, 0xFF	; 255
    142e:	80 81       	ld	r24, Z
    1430:	91 81       	ldd	r25, Z+1	; 0x01
    1432:	01 97       	sbiw	r24, 0x01	; 1
    1434:	11 96       	adiw	r26, 0x01	; 1
    1436:	9c 93       	st	X, r25
    1438:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    143a:	fe 01       	movw	r30, r28
    143c:	ea 56       	subi	r30, 0x6A	; 106
    143e:	ff 4f       	sbci	r31, 0xFF	; 255
    1440:	80 81       	ld	r24, Z
    1442:	91 81       	ldd	r25, Z+1	; 0x01
    1444:	00 97       	sbiw	r24, 0x00	; 0
    1446:	d1 f6       	brne	.-76     	; 0x13fc <LCD_sendCommand+0x1ac>
    1448:	4b c0       	rjmp	.+150    	; 0x14e0 <LCD_sendCommand+0x290>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    144a:	8e 01       	movw	r16, r28
    144c:	0a 56       	subi	r16, 0x6A	; 106
    144e:	1f 4f       	sbci	r17, 0xFF	; 255
    1450:	fe 01       	movw	r30, r28
    1452:	e8 56       	subi	r30, 0x68	; 104
    1454:	ff 4f       	sbci	r31, 0xFF	; 255
    1456:	60 81       	ld	r22, Z
    1458:	71 81       	ldd	r23, Z+1	; 0x01
    145a:	82 81       	ldd	r24, Z+2	; 0x02
    145c:	93 81       	ldd	r25, Z+3	; 0x03
    145e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1462:	dc 01       	movw	r26, r24
    1464:	cb 01       	movw	r24, r22
    1466:	f8 01       	movw	r30, r16
    1468:	91 83       	std	Z+1, r25	; 0x01
    146a:	80 83       	st	Z, r24
    146c:	de 01       	movw	r26, r28
    146e:	ae 56       	subi	r26, 0x6E	; 110
    1470:	bf 4f       	sbci	r27, 0xFF	; 255
    1472:	fe 01       	movw	r30, r28
    1474:	ea 56       	subi	r30, 0x6A	; 106
    1476:	ff 4f       	sbci	r31, 0xFF	; 255
    1478:	80 81       	ld	r24, Z
    147a:	91 81       	ldd	r25, Z+1	; 0x01
    147c:	11 96       	adiw	r26, 0x01	; 1
    147e:	9c 93       	st	X, r25
    1480:	8e 93       	st	-X, r24
    1482:	fe 01       	movw	r30, r28
    1484:	ee 56       	subi	r30, 0x6E	; 110
    1486:	ff 4f       	sbci	r31, 0xFF	; 255
    1488:	80 81       	ld	r24, Z
    148a:	91 81       	ldd	r25, Z+1	; 0x01
    148c:	01 97       	sbiw	r24, 0x01	; 1
    148e:	f1 f7       	brne	.-4      	; 0x148c <LCD_sendCommand+0x23c>
    1490:	fe 01       	movw	r30, r28
    1492:	ee 56       	subi	r30, 0x6E	; 110
    1494:	ff 4f       	sbci	r31, 0xFF	; 255
    1496:	91 83       	std	Z+1, r25	; 0x01
    1498:	80 83       	st	Z, r24
    149a:	22 c0       	rjmp	.+68     	; 0x14e0 <LCD_sendCommand+0x290>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    149c:	8e 01       	movw	r16, r28
    149e:	00 56       	subi	r16, 0x60	; 96
    14a0:	1f 4f       	sbci	r17, 0xFF	; 255
    14a2:	fe 01       	movw	r30, r28
    14a4:	ef 55       	subi	r30, 0x5F	; 95
    14a6:	ff 4f       	sbci	r31, 0xFF	; 255
    14a8:	60 81       	ld	r22, Z
    14aa:	71 81       	ldd	r23, Z+1	; 0x01
    14ac:	82 81       	ldd	r24, Z+2	; 0x02
    14ae:	93 81       	ldd	r25, Z+3	; 0x03
    14b0:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    14b4:	dc 01       	movw	r26, r24
    14b6:	cb 01       	movw	r24, r22
    14b8:	f8 01       	movw	r30, r16
    14ba:	80 83       	st	Z, r24
    14bc:	de 01       	movw	r26, r28
    14be:	af 56       	subi	r26, 0x6F	; 111
    14c0:	bf 4f       	sbci	r27, 0xFF	; 255
    14c2:	fe 01       	movw	r30, r28
    14c4:	e0 56       	subi	r30, 0x60	; 96
    14c6:	ff 4f       	sbci	r31, 0xFF	; 255
    14c8:	80 81       	ld	r24, Z
    14ca:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    14cc:	fe 01       	movw	r30, r28
    14ce:	ef 56       	subi	r30, 0x6F	; 111
    14d0:	ff 4f       	sbci	r31, 0xFF	; 255
    14d2:	80 81       	ld	r24, Z
    14d4:	8a 95       	dec	r24
    14d6:	f1 f7       	brne	.-4      	; 0x14d4 <LCD_sendCommand+0x284>
    14d8:	fe 01       	movw	r30, r28
    14da:	ef 56       	subi	r30, 0x6F	; 111
    14dc:	ff 4f       	sbci	r31, 0xFF	; 255
    14de:	80 83       	st	Z, r24
		_delay_us(100); /* delay for processing Tas = 50ns */
		SET_BIT(LCD_PORT,EN); /* Enable LCD E=1 */
    14e0:	a5 e3       	ldi	r26, 0x35	; 53
    14e2:	b0 e0       	ldi	r27, 0x00	; 0
    14e4:	e5 e3       	ldi	r30, 0x35	; 53
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	80 81       	ld	r24, Z
    14ea:	84 60       	ori	r24, 0x04	; 4
    14ec:	8c 93       	st	X, r24
    14ee:	fe 01       	movw	r30, r28
    14f0:	e3 57       	subi	r30, 0x73	; 115
    14f2:	ff 4f       	sbci	r31, 0xFF	; 255
    14f4:	80 e0       	ldi	r24, 0x00	; 0
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	a8 ec       	ldi	r26, 0xC8	; 200
    14fa:	b2 e4       	ldi	r27, 0x42	; 66
    14fc:	80 83       	st	Z, r24
    14fe:	91 83       	std	Z+1, r25	; 0x01
    1500:	a2 83       	std	Z+2, r26	; 0x02
    1502:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1504:	8e 01       	movw	r16, r28
    1506:	07 57       	subi	r16, 0x77	; 119
    1508:	1f 4f       	sbci	r17, 0xFF	; 255
    150a:	fe 01       	movw	r30, r28
    150c:	e3 57       	subi	r30, 0x73	; 115
    150e:	ff 4f       	sbci	r31, 0xFF	; 255
    1510:	60 81       	ld	r22, Z
    1512:	71 81       	ldd	r23, Z+1	; 0x01
    1514:	82 81       	ldd	r24, Z+2	; 0x02
    1516:	93 81       	ldd	r25, Z+3	; 0x03
    1518:	2b ea       	ldi	r18, 0xAB	; 171
    151a:	3a ea       	ldi	r19, 0xAA	; 170
    151c:	4a ea       	ldi	r20, 0xAA	; 170
    151e:	5e e3       	ldi	r21, 0x3E	; 62
    1520:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1524:	dc 01       	movw	r26, r24
    1526:	cb 01       	movw	r24, r22
    1528:	f8 01       	movw	r30, r16
    152a:	80 83       	st	Z, r24
    152c:	91 83       	std	Z+1, r25	; 0x01
    152e:	a2 83       	std	Z+2, r26	; 0x02
    1530:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1532:	fe 01       	movw	r30, r28
    1534:	e7 57       	subi	r30, 0x77	; 119
    1536:	ff 4f       	sbci	r31, 0xFF	; 255
    1538:	60 81       	ld	r22, Z
    153a:	71 81       	ldd	r23, Z+1	; 0x01
    153c:	82 81       	ldd	r24, Z+2	; 0x02
    153e:	93 81       	ldd	r25, Z+3	; 0x03
    1540:	20 e0       	ldi	r18, 0x00	; 0
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	40 e8       	ldi	r20, 0x80	; 128
    1546:	5f e3       	ldi	r21, 0x3F	; 63
    1548:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    154c:	88 23       	and	r24, r24
    154e:	34 f4       	brge	.+12     	; 0x155c <LCD_sendCommand+0x30c>
		__ticks = 1;
    1550:	fe 01       	movw	r30, r28
    1552:	e8 57       	subi	r30, 0x78	; 120
    1554:	ff 4f       	sbci	r31, 0xFF	; 255
    1556:	81 e0       	ldi	r24, 0x01	; 1
    1558:	80 83       	st	Z, r24
    155a:	e0 c0       	rjmp	.+448    	; 0x171c <LCD_sendCommand+0x4cc>
	else if (__tmp > 255)
    155c:	fe 01       	movw	r30, r28
    155e:	e7 57       	subi	r30, 0x77	; 119
    1560:	ff 4f       	sbci	r31, 0xFF	; 255
    1562:	60 81       	ld	r22, Z
    1564:	71 81       	ldd	r23, Z+1	; 0x01
    1566:	82 81       	ldd	r24, Z+2	; 0x02
    1568:	93 81       	ldd	r25, Z+3	; 0x03
    156a:	20 e0       	ldi	r18, 0x00	; 0
    156c:	30 e0       	ldi	r19, 0x00	; 0
    156e:	4f e7       	ldi	r20, 0x7F	; 127
    1570:	53 e4       	ldi	r21, 0x43	; 67
    1572:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1576:	18 16       	cp	r1, r24
    1578:	0c f0       	brlt	.+2      	; 0x157c <LCD_sendCommand+0x32c>
    157a:	c0 c0       	rjmp	.+384    	; 0x16fc <LCD_sendCommand+0x4ac>
	{
		_delay_ms(__us / 1000.0);
    157c:	fe 01       	movw	r30, r28
    157e:	e3 57       	subi	r30, 0x73	; 115
    1580:	ff 4f       	sbci	r31, 0xFF	; 255
    1582:	60 81       	ld	r22, Z
    1584:	71 81       	ldd	r23, Z+1	; 0x01
    1586:	82 81       	ldd	r24, Z+2	; 0x02
    1588:	93 81       	ldd	r25, Z+3	; 0x03
    158a:	20 e0       	ldi	r18, 0x00	; 0
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	4a e7       	ldi	r20, 0x7A	; 122
    1590:	54 e4       	ldi	r21, 0x44	; 68
    1592:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    1596:	dc 01       	movw	r26, r24
    1598:	cb 01       	movw	r24, r22
    159a:	fe 01       	movw	r30, r28
    159c:	ec 57       	subi	r30, 0x7C	; 124
    159e:	ff 4f       	sbci	r31, 0xFF	; 255
    15a0:	80 83       	st	Z, r24
    15a2:	91 83       	std	Z+1, r25	; 0x01
    15a4:	a2 83       	std	Z+2, r26	; 0x02
    15a6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15a8:	8e 01       	movw	r16, r28
    15aa:	00 58       	subi	r16, 0x80	; 128
    15ac:	1f 4f       	sbci	r17, 0xFF	; 255
    15ae:	fe 01       	movw	r30, r28
    15b0:	ec 57       	subi	r30, 0x7C	; 124
    15b2:	ff 4f       	sbci	r31, 0xFF	; 255
    15b4:	60 81       	ld	r22, Z
    15b6:	71 81       	ldd	r23, Z+1	; 0x01
    15b8:	82 81       	ldd	r24, Z+2	; 0x02
    15ba:	93 81       	ldd	r25, Z+3	; 0x03
    15bc:	20 e0       	ldi	r18, 0x00	; 0
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	4a e7       	ldi	r20, 0x7A	; 122
    15c2:	53 e4       	ldi	r21, 0x43	; 67
    15c4:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    15c8:	dc 01       	movw	r26, r24
    15ca:	cb 01       	movw	r24, r22
    15cc:	f8 01       	movw	r30, r16
    15ce:	80 83       	st	Z, r24
    15d0:	91 83       	std	Z+1, r25	; 0x01
    15d2:	a2 83       	std	Z+2, r26	; 0x02
    15d4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    15d6:	fe 01       	movw	r30, r28
    15d8:	e0 58       	subi	r30, 0x80	; 128
    15da:	ff 4f       	sbci	r31, 0xFF	; 255
    15dc:	60 81       	ld	r22, Z
    15de:	71 81       	ldd	r23, Z+1	; 0x01
    15e0:	82 81       	ldd	r24, Z+2	; 0x02
    15e2:	93 81       	ldd	r25, Z+3	; 0x03
    15e4:	20 e0       	ldi	r18, 0x00	; 0
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	40 e8       	ldi	r20, 0x80	; 128
    15ea:	5f e3       	ldi	r21, 0x3F	; 63
    15ec:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    15f0:	88 23       	and	r24, r24
    15f2:	44 f4       	brge	.+16     	; 0x1604 <LCD_sendCommand+0x3b4>
		__ticks = 1;
    15f4:	fe 01       	movw	r30, r28
    15f6:	e2 58       	subi	r30, 0x82	; 130
    15f8:	ff 4f       	sbci	r31, 0xFF	; 255
    15fa:	81 e0       	ldi	r24, 0x01	; 1
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	91 83       	std	Z+1, r25	; 0x01
    1600:	80 83       	st	Z, r24
    1602:	64 c0       	rjmp	.+200    	; 0x16cc <LCD_sendCommand+0x47c>
	else if (__tmp > 65535)
    1604:	fe 01       	movw	r30, r28
    1606:	e0 58       	subi	r30, 0x80	; 128
    1608:	ff 4f       	sbci	r31, 0xFF	; 255
    160a:	60 81       	ld	r22, Z
    160c:	71 81       	ldd	r23, Z+1	; 0x01
    160e:	82 81       	ldd	r24, Z+2	; 0x02
    1610:	93 81       	ldd	r25, Z+3	; 0x03
    1612:	20 e0       	ldi	r18, 0x00	; 0
    1614:	3f ef       	ldi	r19, 0xFF	; 255
    1616:	4f e7       	ldi	r20, 0x7F	; 127
    1618:	57 e4       	ldi	r21, 0x47	; 71
    161a:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    161e:	18 16       	cp	r1, r24
    1620:	0c f0       	brlt	.+2      	; 0x1624 <LCD_sendCommand+0x3d4>
    1622:	43 c0       	rjmp	.+134    	; 0x16aa <LCD_sendCommand+0x45a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1624:	fe 01       	movw	r30, r28
    1626:	ec 57       	subi	r30, 0x7C	; 124
    1628:	ff 4f       	sbci	r31, 0xFF	; 255
    162a:	60 81       	ld	r22, Z
    162c:	71 81       	ldd	r23, Z+1	; 0x01
    162e:	82 81       	ldd	r24, Z+2	; 0x02
    1630:	93 81       	ldd	r25, Z+3	; 0x03
    1632:	20 e0       	ldi	r18, 0x00	; 0
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	40 e2       	ldi	r20, 0x20	; 32
    1638:	51 e4       	ldi	r21, 0x41	; 65
    163a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    163e:	dc 01       	movw	r26, r24
    1640:	cb 01       	movw	r24, r22
    1642:	8e 01       	movw	r16, r28
    1644:	02 58       	subi	r16, 0x82	; 130
    1646:	1f 4f       	sbci	r17, 0xFF	; 255
    1648:	bc 01       	movw	r22, r24
    164a:	cd 01       	movw	r24, r26
    164c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1650:	dc 01       	movw	r26, r24
    1652:	cb 01       	movw	r24, r22
    1654:	f8 01       	movw	r30, r16
    1656:	91 83       	std	Z+1, r25	; 0x01
    1658:	80 83       	st	Z, r24
    165a:	1f c0       	rjmp	.+62     	; 0x169a <LCD_sendCommand+0x44a>
    165c:	fe 01       	movw	r30, r28
    165e:	e4 58       	subi	r30, 0x84	; 132
    1660:	ff 4f       	sbci	r31, 0xFF	; 255
    1662:	89 e1       	ldi	r24, 0x19	; 25
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	91 83       	std	Z+1, r25	; 0x01
    1668:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    166a:	fe 01       	movw	r30, r28
    166c:	e4 58       	subi	r30, 0x84	; 132
    166e:	ff 4f       	sbci	r31, 0xFF	; 255
    1670:	80 81       	ld	r24, Z
    1672:	91 81       	ldd	r25, Z+1	; 0x01
    1674:	01 97       	sbiw	r24, 0x01	; 1
    1676:	f1 f7       	brne	.-4      	; 0x1674 <LCD_sendCommand+0x424>
    1678:	fe 01       	movw	r30, r28
    167a:	e4 58       	subi	r30, 0x84	; 132
    167c:	ff 4f       	sbci	r31, 0xFF	; 255
    167e:	91 83       	std	Z+1, r25	; 0x01
    1680:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1682:	de 01       	movw	r26, r28
    1684:	a2 58       	subi	r26, 0x82	; 130
    1686:	bf 4f       	sbci	r27, 0xFF	; 255
    1688:	fe 01       	movw	r30, r28
    168a:	e2 58       	subi	r30, 0x82	; 130
    168c:	ff 4f       	sbci	r31, 0xFF	; 255
    168e:	80 81       	ld	r24, Z
    1690:	91 81       	ldd	r25, Z+1	; 0x01
    1692:	01 97       	sbiw	r24, 0x01	; 1
    1694:	11 96       	adiw	r26, 0x01	; 1
    1696:	9c 93       	st	X, r25
    1698:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    169a:	fe 01       	movw	r30, r28
    169c:	e2 58       	subi	r30, 0x82	; 130
    169e:	ff 4f       	sbci	r31, 0xFF	; 255
    16a0:	80 81       	ld	r24, Z
    16a2:	91 81       	ldd	r25, Z+1	; 0x01
    16a4:	00 97       	sbiw	r24, 0x00	; 0
    16a6:	d1 f6       	brne	.-76     	; 0x165c <LCD_sendCommand+0x40c>
    16a8:	4b c0       	rjmp	.+150    	; 0x1740 <LCD_sendCommand+0x4f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16aa:	8e 01       	movw	r16, r28
    16ac:	02 58       	subi	r16, 0x82	; 130
    16ae:	1f 4f       	sbci	r17, 0xFF	; 255
    16b0:	fe 01       	movw	r30, r28
    16b2:	e0 58       	subi	r30, 0x80	; 128
    16b4:	ff 4f       	sbci	r31, 0xFF	; 255
    16b6:	60 81       	ld	r22, Z
    16b8:	71 81       	ldd	r23, Z+1	; 0x01
    16ba:	82 81       	ldd	r24, Z+2	; 0x02
    16bc:	93 81       	ldd	r25, Z+3	; 0x03
    16be:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    16c2:	dc 01       	movw	r26, r24
    16c4:	cb 01       	movw	r24, r22
    16c6:	f8 01       	movw	r30, r16
    16c8:	91 83       	std	Z+1, r25	; 0x01
    16ca:	80 83       	st	Z, r24
    16cc:	de 01       	movw	r26, r28
    16ce:	a6 58       	subi	r26, 0x86	; 134
    16d0:	bf 4f       	sbci	r27, 0xFF	; 255
    16d2:	fe 01       	movw	r30, r28
    16d4:	e2 58       	subi	r30, 0x82	; 130
    16d6:	ff 4f       	sbci	r31, 0xFF	; 255
    16d8:	80 81       	ld	r24, Z
    16da:	91 81       	ldd	r25, Z+1	; 0x01
    16dc:	11 96       	adiw	r26, 0x01	; 1
    16de:	9c 93       	st	X, r25
    16e0:	8e 93       	st	-X, r24
    16e2:	fe 01       	movw	r30, r28
    16e4:	e6 58       	subi	r30, 0x86	; 134
    16e6:	ff 4f       	sbci	r31, 0xFF	; 255
    16e8:	80 81       	ld	r24, Z
    16ea:	91 81       	ldd	r25, Z+1	; 0x01
    16ec:	01 97       	sbiw	r24, 0x01	; 1
    16ee:	f1 f7       	brne	.-4      	; 0x16ec <LCD_sendCommand+0x49c>
    16f0:	fe 01       	movw	r30, r28
    16f2:	e6 58       	subi	r30, 0x86	; 134
    16f4:	ff 4f       	sbci	r31, 0xFF	; 255
    16f6:	91 83       	std	Z+1, r25	; 0x01
    16f8:	80 83       	st	Z, r24
    16fa:	22 c0       	rjmp	.+68     	; 0x1740 <LCD_sendCommand+0x4f0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    16fc:	8e 01       	movw	r16, r28
    16fe:	08 57       	subi	r16, 0x78	; 120
    1700:	1f 4f       	sbci	r17, 0xFF	; 255
    1702:	fe 01       	movw	r30, r28
    1704:	e7 57       	subi	r30, 0x77	; 119
    1706:	ff 4f       	sbci	r31, 0xFF	; 255
    1708:	60 81       	ld	r22, Z
    170a:	71 81       	ldd	r23, Z+1	; 0x01
    170c:	82 81       	ldd	r24, Z+2	; 0x02
    170e:	93 81       	ldd	r25, Z+3	; 0x03
    1710:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1714:	dc 01       	movw	r26, r24
    1716:	cb 01       	movw	r24, r22
    1718:	f8 01       	movw	r30, r16
    171a:	80 83       	st	Z, r24
    171c:	de 01       	movw	r26, r28
    171e:	a7 58       	subi	r26, 0x87	; 135
    1720:	bf 4f       	sbci	r27, 0xFF	; 255
    1722:	fe 01       	movw	r30, r28
    1724:	e8 57       	subi	r30, 0x78	; 120
    1726:	ff 4f       	sbci	r31, 0xFF	; 255
    1728:	80 81       	ld	r24, Z
    172a:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    172c:	fe 01       	movw	r30, r28
    172e:	e7 58       	subi	r30, 0x87	; 135
    1730:	ff 4f       	sbci	r31, 0xFF	; 255
    1732:	80 81       	ld	r24, Z
    1734:	8a 95       	dec	r24
    1736:	f1 f7       	brne	.-4      	; 0x1734 <LCD_sendCommand+0x4e4>
    1738:	fe 01       	movw	r30, r28
    173a:	e7 58       	subi	r30, 0x87	; 135
    173c:	ff 4f       	sbci	r31, 0xFF	; 255
    173e:	80 83       	st	Z, r24
		_delay_us(100); /* delay for processing Tpw - Tdws = 190ns */
#if DATA_BITS_MODE == 4
		LCD_PORT = (LCD_PORT & 0x0F) | (command & 0xF0);
    1740:	a5 e3       	ldi	r26, 0x35	; 53
    1742:	b0 e0       	ldi	r27, 0x00	; 0
    1744:	e5 e3       	ldi	r30, 0x35	; 53
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	80 81       	ld	r24, Z
    174a:	98 2f       	mov	r25, r24
    174c:	9f 70       	andi	r25, 0x0F	; 15
    174e:	fe 01       	movw	r30, r28
    1750:	e7 55       	subi	r30, 0x57	; 87
    1752:	ff 4f       	sbci	r31, 0xFF	; 255
    1754:	80 81       	ld	r24, Z
    1756:	80 7f       	andi	r24, 0xF0	; 240
    1758:	89 2b       	or	r24, r25
    175a:	8c 93       	st	X, r24
    175c:	fe 01       	movw	r30, r28
    175e:	eb 58       	subi	r30, 0x8B	; 139
    1760:	ff 4f       	sbci	r31, 0xFF	; 255
    1762:	80 e0       	ldi	r24, 0x00	; 0
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	a8 ec       	ldi	r26, 0xC8	; 200
    1768:	b2 e4       	ldi	r27, 0x42	; 66
    176a:	80 83       	st	Z, r24
    176c:	91 83       	std	Z+1, r25	; 0x01
    176e:	a2 83       	std	Z+2, r26	; 0x02
    1770:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1772:	8e 01       	movw	r16, r28
    1774:	0f 58       	subi	r16, 0x8F	; 143
    1776:	1f 4f       	sbci	r17, 0xFF	; 255
    1778:	fe 01       	movw	r30, r28
    177a:	eb 58       	subi	r30, 0x8B	; 139
    177c:	ff 4f       	sbci	r31, 0xFF	; 255
    177e:	60 81       	ld	r22, Z
    1780:	71 81       	ldd	r23, Z+1	; 0x01
    1782:	82 81       	ldd	r24, Z+2	; 0x02
    1784:	93 81       	ldd	r25, Z+3	; 0x03
    1786:	2b ea       	ldi	r18, 0xAB	; 171
    1788:	3a ea       	ldi	r19, 0xAA	; 170
    178a:	4a ea       	ldi	r20, 0xAA	; 170
    178c:	5e e3       	ldi	r21, 0x3E	; 62
    178e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1792:	dc 01       	movw	r26, r24
    1794:	cb 01       	movw	r24, r22
    1796:	f8 01       	movw	r30, r16
    1798:	80 83       	st	Z, r24
    179a:	91 83       	std	Z+1, r25	; 0x01
    179c:	a2 83       	std	Z+2, r26	; 0x02
    179e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    17a0:	fe 01       	movw	r30, r28
    17a2:	ef 58       	subi	r30, 0x8F	; 143
    17a4:	ff 4f       	sbci	r31, 0xFF	; 255
    17a6:	60 81       	ld	r22, Z
    17a8:	71 81       	ldd	r23, Z+1	; 0x01
    17aa:	82 81       	ldd	r24, Z+2	; 0x02
    17ac:	93 81       	ldd	r25, Z+3	; 0x03
    17ae:	20 e0       	ldi	r18, 0x00	; 0
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	40 e8       	ldi	r20, 0x80	; 128
    17b4:	5f e3       	ldi	r21, 0x3F	; 63
    17b6:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    17ba:	88 23       	and	r24, r24
    17bc:	34 f4       	brge	.+12     	; 0x17ca <LCD_sendCommand+0x57a>
		__ticks = 1;
    17be:	fe 01       	movw	r30, r28
    17c0:	e0 59       	subi	r30, 0x90	; 144
    17c2:	ff 4f       	sbci	r31, 0xFF	; 255
    17c4:	81 e0       	ldi	r24, 0x01	; 1
    17c6:	80 83       	st	Z, r24
    17c8:	e0 c0       	rjmp	.+448    	; 0x198a <LCD_sendCommand+0x73a>
	else if (__tmp > 255)
    17ca:	fe 01       	movw	r30, r28
    17cc:	ef 58       	subi	r30, 0x8F	; 143
    17ce:	ff 4f       	sbci	r31, 0xFF	; 255
    17d0:	60 81       	ld	r22, Z
    17d2:	71 81       	ldd	r23, Z+1	; 0x01
    17d4:	82 81       	ldd	r24, Z+2	; 0x02
    17d6:	93 81       	ldd	r25, Z+3	; 0x03
    17d8:	20 e0       	ldi	r18, 0x00	; 0
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	4f e7       	ldi	r20, 0x7F	; 127
    17de:	53 e4       	ldi	r21, 0x43	; 67
    17e0:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    17e4:	18 16       	cp	r1, r24
    17e6:	0c f0       	brlt	.+2      	; 0x17ea <LCD_sendCommand+0x59a>
    17e8:	c0 c0       	rjmp	.+384    	; 0x196a <LCD_sendCommand+0x71a>
	{
		_delay_ms(__us / 1000.0);
    17ea:	fe 01       	movw	r30, r28
    17ec:	eb 58       	subi	r30, 0x8B	; 139
    17ee:	ff 4f       	sbci	r31, 0xFF	; 255
    17f0:	60 81       	ld	r22, Z
    17f2:	71 81       	ldd	r23, Z+1	; 0x01
    17f4:	82 81       	ldd	r24, Z+2	; 0x02
    17f6:	93 81       	ldd	r25, Z+3	; 0x03
    17f8:	20 e0       	ldi	r18, 0x00	; 0
    17fa:	30 e0       	ldi	r19, 0x00	; 0
    17fc:	4a e7       	ldi	r20, 0x7A	; 122
    17fe:	54 e4       	ldi	r21, 0x44	; 68
    1800:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    1804:	dc 01       	movw	r26, r24
    1806:	cb 01       	movw	r24, r22
    1808:	fe 01       	movw	r30, r28
    180a:	e4 59       	subi	r30, 0x94	; 148
    180c:	ff 4f       	sbci	r31, 0xFF	; 255
    180e:	80 83       	st	Z, r24
    1810:	91 83       	std	Z+1, r25	; 0x01
    1812:	a2 83       	std	Z+2, r26	; 0x02
    1814:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1816:	8e 01       	movw	r16, r28
    1818:	08 59       	subi	r16, 0x98	; 152
    181a:	1f 4f       	sbci	r17, 0xFF	; 255
    181c:	fe 01       	movw	r30, r28
    181e:	e4 59       	subi	r30, 0x94	; 148
    1820:	ff 4f       	sbci	r31, 0xFF	; 255
    1822:	60 81       	ld	r22, Z
    1824:	71 81       	ldd	r23, Z+1	; 0x01
    1826:	82 81       	ldd	r24, Z+2	; 0x02
    1828:	93 81       	ldd	r25, Z+3	; 0x03
    182a:	20 e0       	ldi	r18, 0x00	; 0
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	4a e7       	ldi	r20, 0x7A	; 122
    1830:	53 e4       	ldi	r21, 0x43	; 67
    1832:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1836:	dc 01       	movw	r26, r24
    1838:	cb 01       	movw	r24, r22
    183a:	f8 01       	movw	r30, r16
    183c:	80 83       	st	Z, r24
    183e:	91 83       	std	Z+1, r25	; 0x01
    1840:	a2 83       	std	Z+2, r26	; 0x02
    1842:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1844:	fe 01       	movw	r30, r28
    1846:	e8 59       	subi	r30, 0x98	; 152
    1848:	ff 4f       	sbci	r31, 0xFF	; 255
    184a:	60 81       	ld	r22, Z
    184c:	71 81       	ldd	r23, Z+1	; 0x01
    184e:	82 81       	ldd	r24, Z+2	; 0x02
    1850:	93 81       	ldd	r25, Z+3	; 0x03
    1852:	20 e0       	ldi	r18, 0x00	; 0
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	40 e8       	ldi	r20, 0x80	; 128
    1858:	5f e3       	ldi	r21, 0x3F	; 63
    185a:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    185e:	88 23       	and	r24, r24
    1860:	44 f4       	brge	.+16     	; 0x1872 <LCD_sendCommand+0x622>
		__ticks = 1;
    1862:	fe 01       	movw	r30, r28
    1864:	ea 59       	subi	r30, 0x9A	; 154
    1866:	ff 4f       	sbci	r31, 0xFF	; 255
    1868:	81 e0       	ldi	r24, 0x01	; 1
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	91 83       	std	Z+1, r25	; 0x01
    186e:	80 83       	st	Z, r24
    1870:	64 c0       	rjmp	.+200    	; 0x193a <LCD_sendCommand+0x6ea>
	else if (__tmp > 65535)
    1872:	fe 01       	movw	r30, r28
    1874:	e8 59       	subi	r30, 0x98	; 152
    1876:	ff 4f       	sbci	r31, 0xFF	; 255
    1878:	60 81       	ld	r22, Z
    187a:	71 81       	ldd	r23, Z+1	; 0x01
    187c:	82 81       	ldd	r24, Z+2	; 0x02
    187e:	93 81       	ldd	r25, Z+3	; 0x03
    1880:	20 e0       	ldi	r18, 0x00	; 0
    1882:	3f ef       	ldi	r19, 0xFF	; 255
    1884:	4f e7       	ldi	r20, 0x7F	; 127
    1886:	57 e4       	ldi	r21, 0x47	; 71
    1888:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    188c:	18 16       	cp	r1, r24
    188e:	0c f0       	brlt	.+2      	; 0x1892 <LCD_sendCommand+0x642>
    1890:	43 c0       	rjmp	.+134    	; 0x1918 <LCD_sendCommand+0x6c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1892:	fe 01       	movw	r30, r28
    1894:	e4 59       	subi	r30, 0x94	; 148
    1896:	ff 4f       	sbci	r31, 0xFF	; 255
    1898:	60 81       	ld	r22, Z
    189a:	71 81       	ldd	r23, Z+1	; 0x01
    189c:	82 81       	ldd	r24, Z+2	; 0x02
    189e:	93 81       	ldd	r25, Z+3	; 0x03
    18a0:	20 e0       	ldi	r18, 0x00	; 0
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	40 e2       	ldi	r20, 0x20	; 32
    18a6:	51 e4       	ldi	r21, 0x41	; 65
    18a8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    18ac:	dc 01       	movw	r26, r24
    18ae:	cb 01       	movw	r24, r22
    18b0:	8e 01       	movw	r16, r28
    18b2:	0a 59       	subi	r16, 0x9A	; 154
    18b4:	1f 4f       	sbci	r17, 0xFF	; 255
    18b6:	bc 01       	movw	r22, r24
    18b8:	cd 01       	movw	r24, r26
    18ba:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    18be:	dc 01       	movw	r26, r24
    18c0:	cb 01       	movw	r24, r22
    18c2:	f8 01       	movw	r30, r16
    18c4:	91 83       	std	Z+1, r25	; 0x01
    18c6:	80 83       	st	Z, r24
    18c8:	1f c0       	rjmp	.+62     	; 0x1908 <LCD_sendCommand+0x6b8>
    18ca:	fe 01       	movw	r30, r28
    18cc:	ec 59       	subi	r30, 0x9C	; 156
    18ce:	ff 4f       	sbci	r31, 0xFF	; 255
    18d0:	89 e1       	ldi	r24, 0x19	; 25
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	91 83       	std	Z+1, r25	; 0x01
    18d6:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    18d8:	fe 01       	movw	r30, r28
    18da:	ec 59       	subi	r30, 0x9C	; 156
    18dc:	ff 4f       	sbci	r31, 0xFF	; 255
    18de:	80 81       	ld	r24, Z
    18e0:	91 81       	ldd	r25, Z+1	; 0x01
    18e2:	01 97       	sbiw	r24, 0x01	; 1
    18e4:	f1 f7       	brne	.-4      	; 0x18e2 <LCD_sendCommand+0x692>
    18e6:	fe 01       	movw	r30, r28
    18e8:	ec 59       	subi	r30, 0x9C	; 156
    18ea:	ff 4f       	sbci	r31, 0xFF	; 255
    18ec:	91 83       	std	Z+1, r25	; 0x01
    18ee:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18f0:	de 01       	movw	r26, r28
    18f2:	aa 59       	subi	r26, 0x9A	; 154
    18f4:	bf 4f       	sbci	r27, 0xFF	; 255
    18f6:	fe 01       	movw	r30, r28
    18f8:	ea 59       	subi	r30, 0x9A	; 154
    18fa:	ff 4f       	sbci	r31, 0xFF	; 255
    18fc:	80 81       	ld	r24, Z
    18fe:	91 81       	ldd	r25, Z+1	; 0x01
    1900:	01 97       	sbiw	r24, 0x01	; 1
    1902:	11 96       	adiw	r26, 0x01	; 1
    1904:	9c 93       	st	X, r25
    1906:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1908:	fe 01       	movw	r30, r28
    190a:	ea 59       	subi	r30, 0x9A	; 154
    190c:	ff 4f       	sbci	r31, 0xFF	; 255
    190e:	80 81       	ld	r24, Z
    1910:	91 81       	ldd	r25, Z+1	; 0x01
    1912:	00 97       	sbiw	r24, 0x00	; 0
    1914:	d1 f6       	brne	.-76     	; 0x18ca <LCD_sendCommand+0x67a>
    1916:	4b c0       	rjmp	.+150    	; 0x19ae <LCD_sendCommand+0x75e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1918:	8e 01       	movw	r16, r28
    191a:	0a 59       	subi	r16, 0x9A	; 154
    191c:	1f 4f       	sbci	r17, 0xFF	; 255
    191e:	fe 01       	movw	r30, r28
    1920:	e8 59       	subi	r30, 0x98	; 152
    1922:	ff 4f       	sbci	r31, 0xFF	; 255
    1924:	60 81       	ld	r22, Z
    1926:	71 81       	ldd	r23, Z+1	; 0x01
    1928:	82 81       	ldd	r24, Z+2	; 0x02
    192a:	93 81       	ldd	r25, Z+3	; 0x03
    192c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1930:	dc 01       	movw	r26, r24
    1932:	cb 01       	movw	r24, r22
    1934:	f8 01       	movw	r30, r16
    1936:	91 83       	std	Z+1, r25	; 0x01
    1938:	80 83       	st	Z, r24
    193a:	de 01       	movw	r26, r28
    193c:	ae 59       	subi	r26, 0x9E	; 158
    193e:	bf 4f       	sbci	r27, 0xFF	; 255
    1940:	fe 01       	movw	r30, r28
    1942:	ea 59       	subi	r30, 0x9A	; 154
    1944:	ff 4f       	sbci	r31, 0xFF	; 255
    1946:	80 81       	ld	r24, Z
    1948:	91 81       	ldd	r25, Z+1	; 0x01
    194a:	11 96       	adiw	r26, 0x01	; 1
    194c:	9c 93       	st	X, r25
    194e:	8e 93       	st	-X, r24
    1950:	fe 01       	movw	r30, r28
    1952:	ee 59       	subi	r30, 0x9E	; 158
    1954:	ff 4f       	sbci	r31, 0xFF	; 255
    1956:	80 81       	ld	r24, Z
    1958:	91 81       	ldd	r25, Z+1	; 0x01
    195a:	01 97       	sbiw	r24, 0x01	; 1
    195c:	f1 f7       	brne	.-4      	; 0x195a <LCD_sendCommand+0x70a>
    195e:	fe 01       	movw	r30, r28
    1960:	ee 59       	subi	r30, 0x9E	; 158
    1962:	ff 4f       	sbci	r31, 0xFF	; 255
    1964:	91 83       	std	Z+1, r25	; 0x01
    1966:	80 83       	st	Z, r24
    1968:	22 c0       	rjmp	.+68     	; 0x19ae <LCD_sendCommand+0x75e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    196a:	8e 01       	movw	r16, r28
    196c:	00 59       	subi	r16, 0x90	; 144
    196e:	1f 4f       	sbci	r17, 0xFF	; 255
    1970:	fe 01       	movw	r30, r28
    1972:	ef 58       	subi	r30, 0x8F	; 143
    1974:	ff 4f       	sbci	r31, 0xFF	; 255
    1976:	60 81       	ld	r22, Z
    1978:	71 81       	ldd	r23, Z+1	; 0x01
    197a:	82 81       	ldd	r24, Z+2	; 0x02
    197c:	93 81       	ldd	r25, Z+3	; 0x03
    197e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1982:	dc 01       	movw	r26, r24
    1984:	cb 01       	movw	r24, r22
    1986:	f8 01       	movw	r30, r16
    1988:	80 83       	st	Z, r24
    198a:	de 01       	movw	r26, r28
    198c:	af 59       	subi	r26, 0x9F	; 159
    198e:	bf 4f       	sbci	r27, 0xFF	; 255
    1990:	fe 01       	movw	r30, r28
    1992:	e0 59       	subi	r30, 0x90	; 144
    1994:	ff 4f       	sbci	r31, 0xFF	; 255
    1996:	80 81       	ld	r24, Z
    1998:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    199a:	fe 01       	movw	r30, r28
    199c:	ef 59       	subi	r30, 0x9F	; 159
    199e:	ff 4f       	sbci	r31, 0xFF	; 255
    19a0:	80 81       	ld	r24, Z
    19a2:	8a 95       	dec	r24
    19a4:	f1 f7       	brne	.-4      	; 0x19a2 <LCD_sendCommand+0x752>
    19a6:	fe 01       	movw	r30, r28
    19a8:	ef 59       	subi	r30, 0x9F	; 159
    19aa:	ff 4f       	sbci	r31, 0xFF	; 255
    19ac:	80 83       	st	Z, r24
		_delay_us(100); /* delay for processing Tdsw = 100ns */
			CLEAR_BIT(LCD_PORT,EN); /* disable LCD E=0 */
    19ae:	a5 e3       	ldi	r26, 0x35	; 53
    19b0:	b0 e0       	ldi	r27, 0x00	; 0
    19b2:	e5 e3       	ldi	r30, 0x35	; 53
    19b4:	f0 e0       	ldi	r31, 0x00	; 0
    19b6:	80 81       	ld	r24, Z
    19b8:	8b 7f       	andi	r24, 0xFB	; 251
    19ba:	8c 93       	st	X, r24
    19bc:	fe 01       	movw	r30, r28
    19be:	e3 5a       	subi	r30, 0xA3	; 163
    19c0:	ff 4f       	sbci	r31, 0xFF	; 255
    19c2:	80 e0       	ldi	r24, 0x00	; 0
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	a8 ec       	ldi	r26, 0xC8	; 200
    19c8:	b2 e4       	ldi	r27, 0x42	; 66
    19ca:	80 83       	st	Z, r24
    19cc:	91 83       	std	Z+1, r25	; 0x01
    19ce:	a2 83       	std	Z+2, r26	; 0x02
    19d0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    19d2:	8e 01       	movw	r16, r28
    19d4:	07 5a       	subi	r16, 0xA7	; 167
    19d6:	1f 4f       	sbci	r17, 0xFF	; 255
    19d8:	fe 01       	movw	r30, r28
    19da:	e3 5a       	subi	r30, 0xA3	; 163
    19dc:	ff 4f       	sbci	r31, 0xFF	; 255
    19de:	60 81       	ld	r22, Z
    19e0:	71 81       	ldd	r23, Z+1	; 0x01
    19e2:	82 81       	ldd	r24, Z+2	; 0x02
    19e4:	93 81       	ldd	r25, Z+3	; 0x03
    19e6:	2b ea       	ldi	r18, 0xAB	; 171
    19e8:	3a ea       	ldi	r19, 0xAA	; 170
    19ea:	4a ea       	ldi	r20, 0xAA	; 170
    19ec:	5e e3       	ldi	r21, 0x3E	; 62
    19ee:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    19f2:	dc 01       	movw	r26, r24
    19f4:	cb 01       	movw	r24, r22
    19f6:	f8 01       	movw	r30, r16
    19f8:	80 83       	st	Z, r24
    19fa:	91 83       	std	Z+1, r25	; 0x01
    19fc:	a2 83       	std	Z+2, r26	; 0x02
    19fe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a00:	fe 01       	movw	r30, r28
    1a02:	e7 5a       	subi	r30, 0xA7	; 167
    1a04:	ff 4f       	sbci	r31, 0xFF	; 255
    1a06:	60 81       	ld	r22, Z
    1a08:	71 81       	ldd	r23, Z+1	; 0x01
    1a0a:	82 81       	ldd	r24, Z+2	; 0x02
    1a0c:	93 81       	ldd	r25, Z+3	; 0x03
    1a0e:	20 e0       	ldi	r18, 0x00	; 0
    1a10:	30 e0       	ldi	r19, 0x00	; 0
    1a12:	40 e8       	ldi	r20, 0x80	; 128
    1a14:	5f e3       	ldi	r21, 0x3F	; 63
    1a16:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1a1a:	88 23       	and	r24, r24
    1a1c:	34 f4       	brge	.+12     	; 0x1a2a <LCD_sendCommand+0x7da>
		__ticks = 1;
    1a1e:	fe 01       	movw	r30, r28
    1a20:	e8 5a       	subi	r30, 0xA8	; 168
    1a22:	ff 4f       	sbci	r31, 0xFF	; 255
    1a24:	81 e0       	ldi	r24, 0x01	; 1
    1a26:	80 83       	st	Z, r24
    1a28:	e0 c0       	rjmp	.+448    	; 0x1bea <LCD_sendCommand+0x99a>
	else if (__tmp > 255)
    1a2a:	fe 01       	movw	r30, r28
    1a2c:	e7 5a       	subi	r30, 0xA7	; 167
    1a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a30:	60 81       	ld	r22, Z
    1a32:	71 81       	ldd	r23, Z+1	; 0x01
    1a34:	82 81       	ldd	r24, Z+2	; 0x02
    1a36:	93 81       	ldd	r25, Z+3	; 0x03
    1a38:	20 e0       	ldi	r18, 0x00	; 0
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	4f e7       	ldi	r20, 0x7F	; 127
    1a3e:	53 e4       	ldi	r21, 0x43	; 67
    1a40:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1a44:	18 16       	cp	r1, r24
    1a46:	0c f0       	brlt	.+2      	; 0x1a4a <LCD_sendCommand+0x7fa>
    1a48:	c0 c0       	rjmp	.+384    	; 0x1bca <LCD_sendCommand+0x97a>
	{
		_delay_ms(__us / 1000.0);
    1a4a:	fe 01       	movw	r30, r28
    1a4c:	e3 5a       	subi	r30, 0xA3	; 163
    1a4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a50:	60 81       	ld	r22, Z
    1a52:	71 81       	ldd	r23, Z+1	; 0x01
    1a54:	82 81       	ldd	r24, Z+2	; 0x02
    1a56:	93 81       	ldd	r25, Z+3	; 0x03
    1a58:	20 e0       	ldi	r18, 0x00	; 0
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	4a e7       	ldi	r20, 0x7A	; 122
    1a5e:	54 e4       	ldi	r21, 0x44	; 68
    1a60:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    1a64:	dc 01       	movw	r26, r24
    1a66:	cb 01       	movw	r24, r22
    1a68:	fe 01       	movw	r30, r28
    1a6a:	ec 5a       	subi	r30, 0xAC	; 172
    1a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a6e:	80 83       	st	Z, r24
    1a70:	91 83       	std	Z+1, r25	; 0x01
    1a72:	a2 83       	std	Z+2, r26	; 0x02
    1a74:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a76:	8e 01       	movw	r16, r28
    1a78:	00 5b       	subi	r16, 0xB0	; 176
    1a7a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a7c:	fe 01       	movw	r30, r28
    1a7e:	ec 5a       	subi	r30, 0xAC	; 172
    1a80:	ff 4f       	sbci	r31, 0xFF	; 255
    1a82:	60 81       	ld	r22, Z
    1a84:	71 81       	ldd	r23, Z+1	; 0x01
    1a86:	82 81       	ldd	r24, Z+2	; 0x02
    1a88:	93 81       	ldd	r25, Z+3	; 0x03
    1a8a:	20 e0       	ldi	r18, 0x00	; 0
    1a8c:	30 e0       	ldi	r19, 0x00	; 0
    1a8e:	4a e7       	ldi	r20, 0x7A	; 122
    1a90:	53 e4       	ldi	r21, 0x43	; 67
    1a92:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1a96:	dc 01       	movw	r26, r24
    1a98:	cb 01       	movw	r24, r22
    1a9a:	f8 01       	movw	r30, r16
    1a9c:	80 83       	st	Z, r24
    1a9e:	91 83       	std	Z+1, r25	; 0x01
    1aa0:	a2 83       	std	Z+2, r26	; 0x02
    1aa2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1aa4:	fe 01       	movw	r30, r28
    1aa6:	e0 5b       	subi	r30, 0xB0	; 176
    1aa8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aaa:	60 81       	ld	r22, Z
    1aac:	71 81       	ldd	r23, Z+1	; 0x01
    1aae:	82 81       	ldd	r24, Z+2	; 0x02
    1ab0:	93 81       	ldd	r25, Z+3	; 0x03
    1ab2:	20 e0       	ldi	r18, 0x00	; 0
    1ab4:	30 e0       	ldi	r19, 0x00	; 0
    1ab6:	40 e8       	ldi	r20, 0x80	; 128
    1ab8:	5f e3       	ldi	r21, 0x3F	; 63
    1aba:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1abe:	88 23       	and	r24, r24
    1ac0:	44 f4       	brge	.+16     	; 0x1ad2 <LCD_sendCommand+0x882>
		__ticks = 1;
    1ac2:	fe 01       	movw	r30, r28
    1ac4:	e2 5b       	subi	r30, 0xB2	; 178
    1ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac8:	81 e0       	ldi	r24, 0x01	; 1
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	91 83       	std	Z+1, r25	; 0x01
    1ace:	80 83       	st	Z, r24
    1ad0:	64 c0       	rjmp	.+200    	; 0x1b9a <LCD_sendCommand+0x94a>
	else if (__tmp > 65535)
    1ad2:	fe 01       	movw	r30, r28
    1ad4:	e0 5b       	subi	r30, 0xB0	; 176
    1ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad8:	60 81       	ld	r22, Z
    1ada:	71 81       	ldd	r23, Z+1	; 0x01
    1adc:	82 81       	ldd	r24, Z+2	; 0x02
    1ade:	93 81       	ldd	r25, Z+3	; 0x03
    1ae0:	20 e0       	ldi	r18, 0x00	; 0
    1ae2:	3f ef       	ldi	r19, 0xFF	; 255
    1ae4:	4f e7       	ldi	r20, 0x7F	; 127
    1ae6:	57 e4       	ldi	r21, 0x47	; 71
    1ae8:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1aec:	18 16       	cp	r1, r24
    1aee:	0c f0       	brlt	.+2      	; 0x1af2 <LCD_sendCommand+0x8a2>
    1af0:	43 c0       	rjmp	.+134    	; 0x1b78 <LCD_sendCommand+0x928>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1af2:	fe 01       	movw	r30, r28
    1af4:	ec 5a       	subi	r30, 0xAC	; 172
    1af6:	ff 4f       	sbci	r31, 0xFF	; 255
    1af8:	60 81       	ld	r22, Z
    1afa:	71 81       	ldd	r23, Z+1	; 0x01
    1afc:	82 81       	ldd	r24, Z+2	; 0x02
    1afe:	93 81       	ldd	r25, Z+3	; 0x03
    1b00:	20 e0       	ldi	r18, 0x00	; 0
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	40 e2       	ldi	r20, 0x20	; 32
    1b06:	51 e4       	ldi	r21, 0x41	; 65
    1b08:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1b0c:	dc 01       	movw	r26, r24
    1b0e:	cb 01       	movw	r24, r22
    1b10:	8e 01       	movw	r16, r28
    1b12:	02 5b       	subi	r16, 0xB2	; 178
    1b14:	1f 4f       	sbci	r17, 0xFF	; 255
    1b16:	bc 01       	movw	r22, r24
    1b18:	cd 01       	movw	r24, r26
    1b1a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1b1e:	dc 01       	movw	r26, r24
    1b20:	cb 01       	movw	r24, r22
    1b22:	f8 01       	movw	r30, r16
    1b24:	91 83       	std	Z+1, r25	; 0x01
    1b26:	80 83       	st	Z, r24
    1b28:	1f c0       	rjmp	.+62     	; 0x1b68 <LCD_sendCommand+0x918>
    1b2a:	fe 01       	movw	r30, r28
    1b2c:	e4 5b       	subi	r30, 0xB4	; 180
    1b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b30:	89 e1       	ldi	r24, 0x19	; 25
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	91 83       	std	Z+1, r25	; 0x01
    1b36:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b38:	fe 01       	movw	r30, r28
    1b3a:	e4 5b       	subi	r30, 0xB4	; 180
    1b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3e:	80 81       	ld	r24, Z
    1b40:	91 81       	ldd	r25, Z+1	; 0x01
    1b42:	01 97       	sbiw	r24, 0x01	; 1
    1b44:	f1 f7       	brne	.-4      	; 0x1b42 <LCD_sendCommand+0x8f2>
    1b46:	fe 01       	movw	r30, r28
    1b48:	e4 5b       	subi	r30, 0xB4	; 180
    1b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4c:	91 83       	std	Z+1, r25	; 0x01
    1b4e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b50:	de 01       	movw	r26, r28
    1b52:	a2 5b       	subi	r26, 0xB2	; 178
    1b54:	bf 4f       	sbci	r27, 0xFF	; 255
    1b56:	fe 01       	movw	r30, r28
    1b58:	e2 5b       	subi	r30, 0xB2	; 178
    1b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5c:	80 81       	ld	r24, Z
    1b5e:	91 81       	ldd	r25, Z+1	; 0x01
    1b60:	01 97       	sbiw	r24, 0x01	; 1
    1b62:	11 96       	adiw	r26, 0x01	; 1
    1b64:	9c 93       	st	X, r25
    1b66:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b68:	fe 01       	movw	r30, r28
    1b6a:	e2 5b       	subi	r30, 0xB2	; 178
    1b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6e:	80 81       	ld	r24, Z
    1b70:	91 81       	ldd	r25, Z+1	; 0x01
    1b72:	00 97       	sbiw	r24, 0x00	; 0
    1b74:	d1 f6       	brne	.-76     	; 0x1b2a <LCD_sendCommand+0x8da>
    1b76:	4b c0       	rjmp	.+150    	; 0x1c0e <LCD_sendCommand+0x9be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b78:	8e 01       	movw	r16, r28
    1b7a:	02 5b       	subi	r16, 0xB2	; 178
    1b7c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b7e:	fe 01       	movw	r30, r28
    1b80:	e0 5b       	subi	r30, 0xB0	; 176
    1b82:	ff 4f       	sbci	r31, 0xFF	; 255
    1b84:	60 81       	ld	r22, Z
    1b86:	71 81       	ldd	r23, Z+1	; 0x01
    1b88:	82 81       	ldd	r24, Z+2	; 0x02
    1b8a:	93 81       	ldd	r25, Z+3	; 0x03
    1b8c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1b90:	dc 01       	movw	r26, r24
    1b92:	cb 01       	movw	r24, r22
    1b94:	f8 01       	movw	r30, r16
    1b96:	91 83       	std	Z+1, r25	; 0x01
    1b98:	80 83       	st	Z, r24
    1b9a:	de 01       	movw	r26, r28
    1b9c:	a6 5b       	subi	r26, 0xB6	; 182
    1b9e:	bf 4f       	sbci	r27, 0xFF	; 255
    1ba0:	fe 01       	movw	r30, r28
    1ba2:	e2 5b       	subi	r30, 0xB2	; 178
    1ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba6:	80 81       	ld	r24, Z
    1ba8:	91 81       	ldd	r25, Z+1	; 0x01
    1baa:	11 96       	adiw	r26, 0x01	; 1
    1bac:	9c 93       	st	X, r25
    1bae:	8e 93       	st	-X, r24
    1bb0:	fe 01       	movw	r30, r28
    1bb2:	e6 5b       	subi	r30, 0xB6	; 182
    1bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb6:	80 81       	ld	r24, Z
    1bb8:	91 81       	ldd	r25, Z+1	; 0x01
    1bba:	01 97       	sbiw	r24, 0x01	; 1
    1bbc:	f1 f7       	brne	.-4      	; 0x1bba <LCD_sendCommand+0x96a>
    1bbe:	fe 01       	movw	r30, r28
    1bc0:	e6 5b       	subi	r30, 0xB6	; 182
    1bc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc4:	91 83       	std	Z+1, r25	; 0x01
    1bc6:	80 83       	st	Z, r24
    1bc8:	22 c0       	rjmp	.+68     	; 0x1c0e <LCD_sendCommand+0x9be>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1bca:	8e 01       	movw	r16, r28
    1bcc:	08 5a       	subi	r16, 0xA8	; 168
    1bce:	1f 4f       	sbci	r17, 0xFF	; 255
    1bd0:	fe 01       	movw	r30, r28
    1bd2:	e7 5a       	subi	r30, 0xA7	; 167
    1bd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd6:	60 81       	ld	r22, Z
    1bd8:	71 81       	ldd	r23, Z+1	; 0x01
    1bda:	82 81       	ldd	r24, Z+2	; 0x02
    1bdc:	93 81       	ldd	r25, Z+3	; 0x03
    1bde:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1be2:	dc 01       	movw	r26, r24
    1be4:	cb 01       	movw	r24, r22
    1be6:	f8 01       	movw	r30, r16
    1be8:	80 83       	st	Z, r24
    1bea:	de 01       	movw	r26, r28
    1bec:	a7 5b       	subi	r26, 0xB7	; 183
    1bee:	bf 4f       	sbci	r27, 0xFF	; 255
    1bf0:	fe 01       	movw	r30, r28
    1bf2:	e8 5a       	subi	r30, 0xA8	; 168
    1bf4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf6:	80 81       	ld	r24, Z
    1bf8:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1bfa:	fe 01       	movw	r30, r28
    1bfc:	e7 5b       	subi	r30, 0xB7	; 183
    1bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    1c00:	80 81       	ld	r24, Z
    1c02:	8a 95       	dec	r24
    1c04:	f1 f7       	brne	.-4      	; 0x1c02 <LCD_sendCommand+0x9b2>
    1c06:	fe 01       	movw	r30, r28
    1c08:	e7 5b       	subi	r30, 0xB7	; 183
    1c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0c:	80 83       	st	Z, r24
			_delay_us(100); /* delay for processing Th = 13ns */
			SET_BIT(LCD_PORT,EN); /* Enable LCD E=1 */
    1c0e:	a5 e3       	ldi	r26, 0x35	; 53
    1c10:	b0 e0       	ldi	r27, 0x00	; 0
    1c12:	e5 e3       	ldi	r30, 0x35	; 53
    1c14:	f0 e0       	ldi	r31, 0x00	; 0
    1c16:	80 81       	ld	r24, Z
    1c18:	84 60       	ori	r24, 0x04	; 4
    1c1a:	8c 93       	st	X, r24
    1c1c:	fe 01       	movw	r30, r28
    1c1e:	eb 5b       	subi	r30, 0xBB	; 187
    1c20:	ff 4f       	sbci	r31, 0xFF	; 255
    1c22:	80 e0       	ldi	r24, 0x00	; 0
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	a8 ec       	ldi	r26, 0xC8	; 200
    1c28:	b2 e4       	ldi	r27, 0x42	; 66
    1c2a:	80 83       	st	Z, r24
    1c2c:	91 83       	std	Z+1, r25	; 0x01
    1c2e:	a2 83       	std	Z+2, r26	; 0x02
    1c30:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1c32:	8e 01       	movw	r16, r28
    1c34:	0f 5b       	subi	r16, 0xBF	; 191
    1c36:	1f 4f       	sbci	r17, 0xFF	; 255
    1c38:	fe 01       	movw	r30, r28
    1c3a:	eb 5b       	subi	r30, 0xBB	; 187
    1c3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c3e:	60 81       	ld	r22, Z
    1c40:	71 81       	ldd	r23, Z+1	; 0x01
    1c42:	82 81       	ldd	r24, Z+2	; 0x02
    1c44:	93 81       	ldd	r25, Z+3	; 0x03
    1c46:	2b ea       	ldi	r18, 0xAB	; 171
    1c48:	3a ea       	ldi	r19, 0xAA	; 170
    1c4a:	4a ea       	ldi	r20, 0xAA	; 170
    1c4c:	5e e3       	ldi	r21, 0x3E	; 62
    1c4e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1c52:	dc 01       	movw	r26, r24
    1c54:	cb 01       	movw	r24, r22
    1c56:	f8 01       	movw	r30, r16
    1c58:	80 83       	st	Z, r24
    1c5a:	91 83       	std	Z+1, r25	; 0x01
    1c5c:	a2 83       	std	Z+2, r26	; 0x02
    1c5e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c60:	fe 01       	movw	r30, r28
    1c62:	ef 5b       	subi	r30, 0xBF	; 191
    1c64:	ff 4f       	sbci	r31, 0xFF	; 255
    1c66:	60 81       	ld	r22, Z
    1c68:	71 81       	ldd	r23, Z+1	; 0x01
    1c6a:	82 81       	ldd	r24, Z+2	; 0x02
    1c6c:	93 81       	ldd	r25, Z+3	; 0x03
    1c6e:	20 e0       	ldi	r18, 0x00	; 0
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	40 e8       	ldi	r20, 0x80	; 128
    1c74:	5f e3       	ldi	r21, 0x3F	; 63
    1c76:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1c7a:	88 23       	and	r24, r24
    1c7c:	34 f4       	brge	.+12     	; 0x1c8a <LCD_sendCommand+0xa3a>
		__ticks = 1;
    1c7e:	81 e0       	ldi	r24, 0x01	; 1
    1c80:	fe 01       	movw	r30, r28
    1c82:	e0 5c       	subi	r30, 0xC0	; 192
    1c84:	ff 4f       	sbci	r31, 0xFF	; 255
    1c86:	80 83       	st	Z, r24
    1c88:	9d c0       	rjmp	.+314    	; 0x1dc4 <LCD_sendCommand+0xb74>
	else if (__tmp > 255)
    1c8a:	fe 01       	movw	r30, r28
    1c8c:	ef 5b       	subi	r30, 0xBF	; 191
    1c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c90:	60 81       	ld	r22, Z
    1c92:	71 81       	ldd	r23, Z+1	; 0x01
    1c94:	82 81       	ldd	r24, Z+2	; 0x02
    1c96:	93 81       	ldd	r25, Z+3	; 0x03
    1c98:	20 e0       	ldi	r18, 0x00	; 0
    1c9a:	30 e0       	ldi	r19, 0x00	; 0
    1c9c:	4f e7       	ldi	r20, 0x7F	; 127
    1c9e:	53 e4       	ldi	r21, 0x43	; 67
    1ca0:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1ca4:	18 16       	cp	r1, r24
    1ca6:	0c f0       	brlt	.+2      	; 0x1caa <LCD_sendCommand+0xa5a>
    1ca8:	7e c0       	rjmp	.+252    	; 0x1da6 <LCD_sendCommand+0xb56>
	{
		_delay_ms(__us / 1000.0);
    1caa:	fe 01       	movw	r30, r28
    1cac:	eb 5b       	subi	r30, 0xBB	; 187
    1cae:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb0:	60 81       	ld	r22, Z
    1cb2:	71 81       	ldd	r23, Z+1	; 0x01
    1cb4:	82 81       	ldd	r24, Z+2	; 0x02
    1cb6:	93 81       	ldd	r25, Z+3	; 0x03
    1cb8:	20 e0       	ldi	r18, 0x00	; 0
    1cba:	30 e0       	ldi	r19, 0x00	; 0
    1cbc:	4a e7       	ldi	r20, 0x7A	; 122
    1cbe:	54 e4       	ldi	r21, 0x44	; 68
    1cc0:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    1cc4:	dc 01       	movw	r26, r24
    1cc6:	cb 01       	movw	r24, r22
    1cc8:	8c af       	std	Y+60, r24	; 0x3c
    1cca:	9d af       	std	Y+61, r25	; 0x3d
    1ccc:	ae af       	std	Y+62, r26	; 0x3e
    1cce:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cd0:	6c ad       	ldd	r22, Y+60	; 0x3c
    1cd2:	7d ad       	ldd	r23, Y+61	; 0x3d
    1cd4:	8e ad       	ldd	r24, Y+62	; 0x3e
    1cd6:	9f ad       	ldd	r25, Y+63	; 0x3f
    1cd8:	20 e0       	ldi	r18, 0x00	; 0
    1cda:	30 e0       	ldi	r19, 0x00	; 0
    1cdc:	4a e7       	ldi	r20, 0x7A	; 122
    1cde:	53 e4       	ldi	r21, 0x43	; 67
    1ce0:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1ce4:	dc 01       	movw	r26, r24
    1ce6:	cb 01       	movw	r24, r22
    1ce8:	88 af       	std	Y+56, r24	; 0x38
    1cea:	99 af       	std	Y+57, r25	; 0x39
    1cec:	aa af       	std	Y+58, r26	; 0x3a
    1cee:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    1cf0:	68 ad       	ldd	r22, Y+56	; 0x38
    1cf2:	79 ad       	ldd	r23, Y+57	; 0x39
    1cf4:	8a ad       	ldd	r24, Y+58	; 0x3a
    1cf6:	9b ad       	ldd	r25, Y+59	; 0x3b
    1cf8:	20 e0       	ldi	r18, 0x00	; 0
    1cfa:	30 e0       	ldi	r19, 0x00	; 0
    1cfc:	40 e8       	ldi	r20, 0x80	; 128
    1cfe:	5f e3       	ldi	r21, 0x3F	; 63
    1d00:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1d04:	88 23       	and	r24, r24
    1d06:	2c f4       	brge	.+10     	; 0x1d12 <LCD_sendCommand+0xac2>
		__ticks = 1;
    1d08:	81 e0       	ldi	r24, 0x01	; 1
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	9f ab       	std	Y+55, r25	; 0x37
    1d0e:	8e ab       	std	Y+54, r24	; 0x36
    1d10:	3f c0       	rjmp	.+126    	; 0x1d90 <LCD_sendCommand+0xb40>
	else if (__tmp > 65535)
    1d12:	68 ad       	ldd	r22, Y+56	; 0x38
    1d14:	79 ad       	ldd	r23, Y+57	; 0x39
    1d16:	8a ad       	ldd	r24, Y+58	; 0x3a
    1d18:	9b ad       	ldd	r25, Y+59	; 0x3b
    1d1a:	20 e0       	ldi	r18, 0x00	; 0
    1d1c:	3f ef       	ldi	r19, 0xFF	; 255
    1d1e:	4f e7       	ldi	r20, 0x7F	; 127
    1d20:	57 e4       	ldi	r21, 0x47	; 71
    1d22:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1d26:	18 16       	cp	r1, r24
    1d28:	4c f5       	brge	.+82     	; 0x1d7c <LCD_sendCommand+0xb2c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d2a:	6c ad       	ldd	r22, Y+60	; 0x3c
    1d2c:	7d ad       	ldd	r23, Y+61	; 0x3d
    1d2e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1d30:	9f ad       	ldd	r25, Y+63	; 0x3f
    1d32:	20 e0       	ldi	r18, 0x00	; 0
    1d34:	30 e0       	ldi	r19, 0x00	; 0
    1d36:	40 e2       	ldi	r20, 0x20	; 32
    1d38:	51 e4       	ldi	r21, 0x41	; 65
    1d3a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1d3e:	dc 01       	movw	r26, r24
    1d40:	cb 01       	movw	r24, r22
    1d42:	bc 01       	movw	r22, r24
    1d44:	cd 01       	movw	r24, r26
    1d46:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1d4a:	dc 01       	movw	r26, r24
    1d4c:	cb 01       	movw	r24, r22
    1d4e:	9f ab       	std	Y+55, r25	; 0x37
    1d50:	8e ab       	std	Y+54, r24	; 0x36
    1d52:	0f c0       	rjmp	.+30     	; 0x1d72 <LCD_sendCommand+0xb22>
    1d54:	89 e1       	ldi	r24, 0x19	; 25
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	9d ab       	std	Y+53, r25	; 0x35
    1d5a:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d5c:	8c a9       	ldd	r24, Y+52	; 0x34
    1d5e:	9d a9       	ldd	r25, Y+53	; 0x35
    1d60:	01 97       	sbiw	r24, 0x01	; 1
    1d62:	f1 f7       	brne	.-4      	; 0x1d60 <LCD_sendCommand+0xb10>
    1d64:	9d ab       	std	Y+53, r25	; 0x35
    1d66:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d68:	8e a9       	ldd	r24, Y+54	; 0x36
    1d6a:	9f a9       	ldd	r25, Y+55	; 0x37
    1d6c:	01 97       	sbiw	r24, 0x01	; 1
    1d6e:	9f ab       	std	Y+55, r25	; 0x37
    1d70:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d72:	8e a9       	ldd	r24, Y+54	; 0x36
    1d74:	9f a9       	ldd	r25, Y+55	; 0x37
    1d76:	00 97       	sbiw	r24, 0x00	; 0
    1d78:	69 f7       	brne	.-38     	; 0x1d54 <LCD_sendCommand+0xb04>
    1d7a:	2d c0       	rjmp	.+90     	; 0x1dd6 <LCD_sendCommand+0xb86>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d7c:	68 ad       	ldd	r22, Y+56	; 0x38
    1d7e:	79 ad       	ldd	r23, Y+57	; 0x39
    1d80:	8a ad       	ldd	r24, Y+58	; 0x3a
    1d82:	9b ad       	ldd	r25, Y+59	; 0x3b
    1d84:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1d88:	dc 01       	movw	r26, r24
    1d8a:	cb 01       	movw	r24, r22
    1d8c:	9f ab       	std	Y+55, r25	; 0x37
    1d8e:	8e ab       	std	Y+54, r24	; 0x36
    1d90:	8e a9       	ldd	r24, Y+54	; 0x36
    1d92:	9f a9       	ldd	r25, Y+55	; 0x37
    1d94:	9b ab       	std	Y+51, r25	; 0x33
    1d96:	8a ab       	std	Y+50, r24	; 0x32
    1d98:	8a a9       	ldd	r24, Y+50	; 0x32
    1d9a:	9b a9       	ldd	r25, Y+51	; 0x33
    1d9c:	01 97       	sbiw	r24, 0x01	; 1
    1d9e:	f1 f7       	brne	.-4      	; 0x1d9c <LCD_sendCommand+0xb4c>
    1da0:	9b ab       	std	Y+51, r25	; 0x33
    1da2:	8a ab       	std	Y+50, r24	; 0x32
    1da4:	18 c0       	rjmp	.+48     	; 0x1dd6 <LCD_sendCommand+0xb86>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1da6:	fe 01       	movw	r30, r28
    1da8:	ef 5b       	subi	r30, 0xBF	; 191
    1daa:	ff 4f       	sbci	r31, 0xFF	; 255
    1dac:	60 81       	ld	r22, Z
    1dae:	71 81       	ldd	r23, Z+1	; 0x01
    1db0:	82 81       	ldd	r24, Z+2	; 0x02
    1db2:	93 81       	ldd	r25, Z+3	; 0x03
    1db4:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1db8:	dc 01       	movw	r26, r24
    1dba:	cb 01       	movw	r24, r22
    1dbc:	fe 01       	movw	r30, r28
    1dbe:	e0 5c       	subi	r30, 0xC0	; 192
    1dc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc2:	80 83       	st	Z, r24
    1dc4:	fe 01       	movw	r30, r28
    1dc6:	e0 5c       	subi	r30, 0xC0	; 192
    1dc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dca:	80 81       	ld	r24, Z
    1dcc:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1dce:	89 a9       	ldd	r24, Y+49	; 0x31
    1dd0:	8a 95       	dec	r24
    1dd2:	f1 f7       	brne	.-4      	; 0x1dd0 <LCD_sendCommand+0xb80>
    1dd4:	89 ab       	std	Y+49, r24	; 0x31
			_delay_us(100); /* delay for processing Tpw - Tdws = 190ns */
			LCD_PORT = (LCD_PORT & 0x0F) | ((command & 0x0F) << 4);
    1dd6:	a5 e3       	ldi	r26, 0x35	; 53
    1dd8:	b0 e0       	ldi	r27, 0x00	; 0
    1dda:	e5 e3       	ldi	r30, 0x35	; 53
    1ddc:	f0 e0       	ldi	r31, 0x00	; 0
    1dde:	80 81       	ld	r24, Z
    1de0:	28 2f       	mov	r18, r24
    1de2:	2f 70       	andi	r18, 0x0F	; 15
    1de4:	fe 01       	movw	r30, r28
    1de6:	e7 55       	subi	r30, 0x57	; 87
    1de8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dea:	80 81       	ld	r24, Z
    1dec:	88 2f       	mov	r24, r24
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	82 95       	swap	r24
    1df2:	92 95       	swap	r25
    1df4:	90 7f       	andi	r25, 0xF0	; 240
    1df6:	98 27       	eor	r25, r24
    1df8:	80 7f       	andi	r24, 0xF0	; 240
    1dfa:	98 27       	eor	r25, r24
    1dfc:	82 2b       	or	r24, r18
    1dfe:	8c 93       	st	X, r24
    1e00:	80 e0       	ldi	r24, 0x00	; 0
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	a8 ec       	ldi	r26, 0xC8	; 200
    1e06:	b2 e4       	ldi	r27, 0x42	; 66
    1e08:	8d a7       	std	Y+45, r24	; 0x2d
    1e0a:	9e a7       	std	Y+46, r25	; 0x2e
    1e0c:	af a7       	std	Y+47, r26	; 0x2f
    1e0e:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e10:	6d a5       	ldd	r22, Y+45	; 0x2d
    1e12:	7e a5       	ldd	r23, Y+46	; 0x2e
    1e14:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e16:	98 a9       	ldd	r25, Y+48	; 0x30
    1e18:	2b ea       	ldi	r18, 0xAB	; 171
    1e1a:	3a ea       	ldi	r19, 0xAA	; 170
    1e1c:	4a ea       	ldi	r20, 0xAA	; 170
    1e1e:	5e e3       	ldi	r21, 0x3E	; 62
    1e20:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1e24:	dc 01       	movw	r26, r24
    1e26:	cb 01       	movw	r24, r22
    1e28:	89 a7       	std	Y+41, r24	; 0x29
    1e2a:	9a a7       	std	Y+42, r25	; 0x2a
    1e2c:	ab a7       	std	Y+43, r26	; 0x2b
    1e2e:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1e30:	69 a5       	ldd	r22, Y+41	; 0x29
    1e32:	7a a5       	ldd	r23, Y+42	; 0x2a
    1e34:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e36:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e38:	20 e0       	ldi	r18, 0x00	; 0
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	40 e8       	ldi	r20, 0x80	; 128
    1e3e:	5f e3       	ldi	r21, 0x3F	; 63
    1e40:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1e44:	88 23       	and	r24, r24
    1e46:	1c f4       	brge	.+6      	; 0x1e4e <LCD_sendCommand+0xbfe>
		__ticks = 1;
    1e48:	81 e0       	ldi	r24, 0x01	; 1
    1e4a:	88 a7       	std	Y+40, r24	; 0x28
    1e4c:	91 c0       	rjmp	.+290    	; 0x1f70 <LCD_sendCommand+0xd20>
	else if (__tmp > 255)
    1e4e:	69 a5       	ldd	r22, Y+41	; 0x29
    1e50:	7a a5       	ldd	r23, Y+42	; 0x2a
    1e52:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e54:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e56:	20 e0       	ldi	r18, 0x00	; 0
    1e58:	30 e0       	ldi	r19, 0x00	; 0
    1e5a:	4f e7       	ldi	r20, 0x7F	; 127
    1e5c:	53 e4       	ldi	r21, 0x43	; 67
    1e5e:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1e62:	18 16       	cp	r1, r24
    1e64:	0c f0       	brlt	.+2      	; 0x1e68 <LCD_sendCommand+0xc18>
    1e66:	7b c0       	rjmp	.+246    	; 0x1f5e <LCD_sendCommand+0xd0e>
	{
		_delay_ms(__us / 1000.0);
    1e68:	6d a5       	ldd	r22, Y+45	; 0x2d
    1e6a:	7e a5       	ldd	r23, Y+46	; 0x2e
    1e6c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e6e:	98 a9       	ldd	r25, Y+48	; 0x30
    1e70:	20 e0       	ldi	r18, 0x00	; 0
    1e72:	30 e0       	ldi	r19, 0x00	; 0
    1e74:	4a e7       	ldi	r20, 0x7A	; 122
    1e76:	54 e4       	ldi	r21, 0x44	; 68
    1e78:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    1e7c:	dc 01       	movw	r26, r24
    1e7e:	cb 01       	movw	r24, r22
    1e80:	8c a3       	std	Y+36, r24	; 0x24
    1e82:	9d a3       	std	Y+37, r25	; 0x25
    1e84:	ae a3       	std	Y+38, r26	; 0x26
    1e86:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e88:	6c a1       	ldd	r22, Y+36	; 0x24
    1e8a:	7d a1       	ldd	r23, Y+37	; 0x25
    1e8c:	8e a1       	ldd	r24, Y+38	; 0x26
    1e8e:	9f a1       	ldd	r25, Y+39	; 0x27
    1e90:	20 e0       	ldi	r18, 0x00	; 0
    1e92:	30 e0       	ldi	r19, 0x00	; 0
    1e94:	4a e7       	ldi	r20, 0x7A	; 122
    1e96:	53 e4       	ldi	r21, 0x43	; 67
    1e98:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1e9c:	dc 01       	movw	r26, r24
    1e9e:	cb 01       	movw	r24, r22
    1ea0:	88 a3       	std	Y+32, r24	; 0x20
    1ea2:	99 a3       	std	Y+33, r25	; 0x21
    1ea4:	aa a3       	std	Y+34, r26	; 0x22
    1ea6:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1ea8:	68 a1       	ldd	r22, Y+32	; 0x20
    1eaa:	79 a1       	ldd	r23, Y+33	; 0x21
    1eac:	8a a1       	ldd	r24, Y+34	; 0x22
    1eae:	9b a1       	ldd	r25, Y+35	; 0x23
    1eb0:	20 e0       	ldi	r18, 0x00	; 0
    1eb2:	30 e0       	ldi	r19, 0x00	; 0
    1eb4:	40 e8       	ldi	r20, 0x80	; 128
    1eb6:	5f e3       	ldi	r21, 0x3F	; 63
    1eb8:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1ebc:	88 23       	and	r24, r24
    1ebe:	2c f4       	brge	.+10     	; 0x1eca <LCD_sendCommand+0xc7a>
		__ticks = 1;
    1ec0:	81 e0       	ldi	r24, 0x01	; 1
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	9f 8f       	std	Y+31, r25	; 0x1f
    1ec6:	8e 8f       	std	Y+30, r24	; 0x1e
    1ec8:	3f c0       	rjmp	.+126    	; 0x1f48 <LCD_sendCommand+0xcf8>
	else if (__tmp > 65535)
    1eca:	68 a1       	ldd	r22, Y+32	; 0x20
    1ecc:	79 a1       	ldd	r23, Y+33	; 0x21
    1ece:	8a a1       	ldd	r24, Y+34	; 0x22
    1ed0:	9b a1       	ldd	r25, Y+35	; 0x23
    1ed2:	20 e0       	ldi	r18, 0x00	; 0
    1ed4:	3f ef       	ldi	r19, 0xFF	; 255
    1ed6:	4f e7       	ldi	r20, 0x7F	; 127
    1ed8:	57 e4       	ldi	r21, 0x47	; 71
    1eda:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1ede:	18 16       	cp	r1, r24
    1ee0:	4c f5       	brge	.+82     	; 0x1f34 <LCD_sendCommand+0xce4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ee2:	6c a1       	ldd	r22, Y+36	; 0x24
    1ee4:	7d a1       	ldd	r23, Y+37	; 0x25
    1ee6:	8e a1       	ldd	r24, Y+38	; 0x26
    1ee8:	9f a1       	ldd	r25, Y+39	; 0x27
    1eea:	20 e0       	ldi	r18, 0x00	; 0
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	40 e2       	ldi	r20, 0x20	; 32
    1ef0:	51 e4       	ldi	r21, 0x41	; 65
    1ef2:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1ef6:	dc 01       	movw	r26, r24
    1ef8:	cb 01       	movw	r24, r22
    1efa:	bc 01       	movw	r22, r24
    1efc:	cd 01       	movw	r24, r26
    1efe:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1f02:	dc 01       	movw	r26, r24
    1f04:	cb 01       	movw	r24, r22
    1f06:	9f 8f       	std	Y+31, r25	; 0x1f
    1f08:	8e 8f       	std	Y+30, r24	; 0x1e
    1f0a:	0f c0       	rjmp	.+30     	; 0x1f2a <LCD_sendCommand+0xcda>
    1f0c:	89 e1       	ldi	r24, 0x19	; 25
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	9d 8f       	std	Y+29, r25	; 0x1d
    1f12:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f14:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1f16:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1f18:	01 97       	sbiw	r24, 0x01	; 1
    1f1a:	f1 f7       	brne	.-4      	; 0x1f18 <LCD_sendCommand+0xcc8>
    1f1c:	9d 8f       	std	Y+29, r25	; 0x1d
    1f1e:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f20:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f22:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1f24:	01 97       	sbiw	r24, 0x01	; 1
    1f26:	9f 8f       	std	Y+31, r25	; 0x1f
    1f28:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f2a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f2c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1f2e:	00 97       	sbiw	r24, 0x00	; 0
    1f30:	69 f7       	brne	.-38     	; 0x1f0c <LCD_sendCommand+0xcbc>
    1f32:	24 c0       	rjmp	.+72     	; 0x1f7c <LCD_sendCommand+0xd2c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f34:	68 a1       	ldd	r22, Y+32	; 0x20
    1f36:	79 a1       	ldd	r23, Y+33	; 0x21
    1f38:	8a a1       	ldd	r24, Y+34	; 0x22
    1f3a:	9b a1       	ldd	r25, Y+35	; 0x23
    1f3c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1f40:	dc 01       	movw	r26, r24
    1f42:	cb 01       	movw	r24, r22
    1f44:	9f 8f       	std	Y+31, r25	; 0x1f
    1f46:	8e 8f       	std	Y+30, r24	; 0x1e
    1f48:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f4a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1f4c:	9b 8f       	std	Y+27, r25	; 0x1b
    1f4e:	8a 8f       	std	Y+26, r24	; 0x1a
    1f50:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1f52:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1f54:	01 97       	sbiw	r24, 0x01	; 1
    1f56:	f1 f7       	brne	.-4      	; 0x1f54 <LCD_sendCommand+0xd04>
    1f58:	9b 8f       	std	Y+27, r25	; 0x1b
    1f5a:	8a 8f       	std	Y+26, r24	; 0x1a
    1f5c:	0f c0       	rjmp	.+30     	; 0x1f7c <LCD_sendCommand+0xd2c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f5e:	69 a5       	ldd	r22, Y+41	; 0x29
    1f60:	7a a5       	ldd	r23, Y+42	; 0x2a
    1f62:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f64:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f66:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1f6a:	dc 01       	movw	r26, r24
    1f6c:	cb 01       	movw	r24, r22
    1f6e:	88 a7       	std	Y+40, r24	; 0x28
    1f70:	88 a5       	ldd	r24, Y+40	; 0x28
    1f72:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1f74:	89 8d       	ldd	r24, Y+25	; 0x19
    1f76:	8a 95       	dec	r24
    1f78:	f1 f7       	brne	.-4      	; 0x1f76 <LCD_sendCommand+0xd26>
    1f7a:	89 8f       	std	Y+25, r24	; 0x19
			_delay_us(100); /* delay for processing Tdsw = 100ns */
				CLEAR_BIT(LCD_PORT,EN); /* disable LCD E=0 */
    1f7c:	a5 e3       	ldi	r26, 0x35	; 53
    1f7e:	b0 e0       	ldi	r27, 0x00	; 0
    1f80:	e5 e3       	ldi	r30, 0x35	; 53
    1f82:	f0 e0       	ldi	r31, 0x00	; 0
    1f84:	80 81       	ld	r24, Z
    1f86:	8b 7f       	andi	r24, 0xFB	; 251
    1f88:	8c 93       	st	X, r24
    1f8a:	80 e0       	ldi	r24, 0x00	; 0
    1f8c:	90 e0       	ldi	r25, 0x00	; 0
    1f8e:	a8 ec       	ldi	r26, 0xC8	; 200
    1f90:	b2 e4       	ldi	r27, 0x42	; 66
    1f92:	8d 8b       	std	Y+21, r24	; 0x15
    1f94:	9e 8b       	std	Y+22, r25	; 0x16
    1f96:	af 8b       	std	Y+23, r26	; 0x17
    1f98:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1f9a:	6d 89       	ldd	r22, Y+21	; 0x15
    1f9c:	7e 89       	ldd	r23, Y+22	; 0x16
    1f9e:	8f 89       	ldd	r24, Y+23	; 0x17
    1fa0:	98 8d       	ldd	r25, Y+24	; 0x18
    1fa2:	2b ea       	ldi	r18, 0xAB	; 171
    1fa4:	3a ea       	ldi	r19, 0xAA	; 170
    1fa6:	4a ea       	ldi	r20, 0xAA	; 170
    1fa8:	5e e3       	ldi	r21, 0x3E	; 62
    1faa:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1fae:	dc 01       	movw	r26, r24
    1fb0:	cb 01       	movw	r24, r22
    1fb2:	89 8b       	std	Y+17, r24	; 0x11
    1fb4:	9a 8b       	std	Y+18, r25	; 0x12
    1fb6:	ab 8b       	std	Y+19, r26	; 0x13
    1fb8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1fba:	69 89       	ldd	r22, Y+17	; 0x11
    1fbc:	7a 89       	ldd	r23, Y+18	; 0x12
    1fbe:	8b 89       	ldd	r24, Y+19	; 0x13
    1fc0:	9c 89       	ldd	r25, Y+20	; 0x14
    1fc2:	20 e0       	ldi	r18, 0x00	; 0
    1fc4:	30 e0       	ldi	r19, 0x00	; 0
    1fc6:	40 e8       	ldi	r20, 0x80	; 128
    1fc8:	5f e3       	ldi	r21, 0x3F	; 63
    1fca:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1fce:	88 23       	and	r24, r24
    1fd0:	1c f4       	brge	.+6      	; 0x1fd8 <LCD_sendCommand+0xd88>
		__ticks = 1;
    1fd2:	81 e0       	ldi	r24, 0x01	; 1
    1fd4:	88 8b       	std	Y+16, r24	; 0x10
    1fd6:	91 c0       	rjmp	.+290    	; 0x20fa <LCD_sendCommand+0xeaa>
	else if (__tmp > 255)
    1fd8:	69 89       	ldd	r22, Y+17	; 0x11
    1fda:	7a 89       	ldd	r23, Y+18	; 0x12
    1fdc:	8b 89       	ldd	r24, Y+19	; 0x13
    1fde:	9c 89       	ldd	r25, Y+20	; 0x14
    1fe0:	20 e0       	ldi	r18, 0x00	; 0
    1fe2:	30 e0       	ldi	r19, 0x00	; 0
    1fe4:	4f e7       	ldi	r20, 0x7F	; 127
    1fe6:	53 e4       	ldi	r21, 0x43	; 67
    1fe8:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1fec:	18 16       	cp	r1, r24
    1fee:	0c f0       	brlt	.+2      	; 0x1ff2 <LCD_sendCommand+0xda2>
    1ff0:	7b c0       	rjmp	.+246    	; 0x20e8 <LCD_sendCommand+0xe98>
	{
		_delay_ms(__us / 1000.0);
    1ff2:	6d 89       	ldd	r22, Y+21	; 0x15
    1ff4:	7e 89       	ldd	r23, Y+22	; 0x16
    1ff6:	8f 89       	ldd	r24, Y+23	; 0x17
    1ff8:	98 8d       	ldd	r25, Y+24	; 0x18
    1ffa:	20 e0       	ldi	r18, 0x00	; 0
    1ffc:	30 e0       	ldi	r19, 0x00	; 0
    1ffe:	4a e7       	ldi	r20, 0x7A	; 122
    2000:	54 e4       	ldi	r21, 0x44	; 68
    2002:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    2006:	dc 01       	movw	r26, r24
    2008:	cb 01       	movw	r24, r22
    200a:	8c 87       	std	Y+12, r24	; 0x0c
    200c:	9d 87       	std	Y+13, r25	; 0x0d
    200e:	ae 87       	std	Y+14, r26	; 0x0e
    2010:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2012:	6c 85       	ldd	r22, Y+12	; 0x0c
    2014:	7d 85       	ldd	r23, Y+13	; 0x0d
    2016:	8e 85       	ldd	r24, Y+14	; 0x0e
    2018:	9f 85       	ldd	r25, Y+15	; 0x0f
    201a:	20 e0       	ldi	r18, 0x00	; 0
    201c:	30 e0       	ldi	r19, 0x00	; 0
    201e:	4a e7       	ldi	r20, 0x7A	; 122
    2020:	53 e4       	ldi	r21, 0x43	; 67
    2022:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2026:	dc 01       	movw	r26, r24
    2028:	cb 01       	movw	r24, r22
    202a:	88 87       	std	Y+8, r24	; 0x08
    202c:	99 87       	std	Y+9, r25	; 0x09
    202e:	aa 87       	std	Y+10, r26	; 0x0a
    2030:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2032:	68 85       	ldd	r22, Y+8	; 0x08
    2034:	79 85       	ldd	r23, Y+9	; 0x09
    2036:	8a 85       	ldd	r24, Y+10	; 0x0a
    2038:	9b 85       	ldd	r25, Y+11	; 0x0b
    203a:	20 e0       	ldi	r18, 0x00	; 0
    203c:	30 e0       	ldi	r19, 0x00	; 0
    203e:	40 e8       	ldi	r20, 0x80	; 128
    2040:	5f e3       	ldi	r21, 0x3F	; 63
    2042:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2046:	88 23       	and	r24, r24
    2048:	2c f4       	brge	.+10     	; 0x2054 <LCD_sendCommand+0xe04>
		__ticks = 1;
    204a:	81 e0       	ldi	r24, 0x01	; 1
    204c:	90 e0       	ldi	r25, 0x00	; 0
    204e:	9f 83       	std	Y+7, r25	; 0x07
    2050:	8e 83       	std	Y+6, r24	; 0x06
    2052:	3f c0       	rjmp	.+126    	; 0x20d2 <LCD_sendCommand+0xe82>
	else if (__tmp > 65535)
    2054:	68 85       	ldd	r22, Y+8	; 0x08
    2056:	79 85       	ldd	r23, Y+9	; 0x09
    2058:	8a 85       	ldd	r24, Y+10	; 0x0a
    205a:	9b 85       	ldd	r25, Y+11	; 0x0b
    205c:	20 e0       	ldi	r18, 0x00	; 0
    205e:	3f ef       	ldi	r19, 0xFF	; 255
    2060:	4f e7       	ldi	r20, 0x7F	; 127
    2062:	57 e4       	ldi	r21, 0x47	; 71
    2064:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2068:	18 16       	cp	r1, r24
    206a:	4c f5       	brge	.+82     	; 0x20be <LCD_sendCommand+0xe6e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    206c:	6c 85       	ldd	r22, Y+12	; 0x0c
    206e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2070:	8e 85       	ldd	r24, Y+14	; 0x0e
    2072:	9f 85       	ldd	r25, Y+15	; 0x0f
    2074:	20 e0       	ldi	r18, 0x00	; 0
    2076:	30 e0       	ldi	r19, 0x00	; 0
    2078:	40 e2       	ldi	r20, 0x20	; 32
    207a:	51 e4       	ldi	r21, 0x41	; 65
    207c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2080:	dc 01       	movw	r26, r24
    2082:	cb 01       	movw	r24, r22
    2084:	bc 01       	movw	r22, r24
    2086:	cd 01       	movw	r24, r26
    2088:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    208c:	dc 01       	movw	r26, r24
    208e:	cb 01       	movw	r24, r22
    2090:	9f 83       	std	Y+7, r25	; 0x07
    2092:	8e 83       	std	Y+6, r24	; 0x06
    2094:	0f c0       	rjmp	.+30     	; 0x20b4 <LCD_sendCommand+0xe64>
    2096:	89 e1       	ldi	r24, 0x19	; 25
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	9d 83       	std	Y+5, r25	; 0x05
    209c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    209e:	8c 81       	ldd	r24, Y+4	; 0x04
    20a0:	9d 81       	ldd	r25, Y+5	; 0x05
    20a2:	01 97       	sbiw	r24, 0x01	; 1
    20a4:	f1 f7       	brne	.-4      	; 0x20a2 <LCD_sendCommand+0xe52>
    20a6:	9d 83       	std	Y+5, r25	; 0x05
    20a8:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20aa:	8e 81       	ldd	r24, Y+6	; 0x06
    20ac:	9f 81       	ldd	r25, Y+7	; 0x07
    20ae:	01 97       	sbiw	r24, 0x01	; 1
    20b0:	9f 83       	std	Y+7, r25	; 0x07
    20b2:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20b4:	8e 81       	ldd	r24, Y+6	; 0x06
    20b6:	9f 81       	ldd	r25, Y+7	; 0x07
    20b8:	00 97       	sbiw	r24, 0x00	; 0
    20ba:	69 f7       	brne	.-38     	; 0x2096 <LCD_sendCommand+0xe46>
    20bc:	24 c0       	rjmp	.+72     	; 0x2106 <LCD_sendCommand+0xeb6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20be:	68 85       	ldd	r22, Y+8	; 0x08
    20c0:	79 85       	ldd	r23, Y+9	; 0x09
    20c2:	8a 85       	ldd	r24, Y+10	; 0x0a
    20c4:	9b 85       	ldd	r25, Y+11	; 0x0b
    20c6:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    20ca:	dc 01       	movw	r26, r24
    20cc:	cb 01       	movw	r24, r22
    20ce:	9f 83       	std	Y+7, r25	; 0x07
    20d0:	8e 83       	std	Y+6, r24	; 0x06
    20d2:	8e 81       	ldd	r24, Y+6	; 0x06
    20d4:	9f 81       	ldd	r25, Y+7	; 0x07
    20d6:	9b 83       	std	Y+3, r25	; 0x03
    20d8:	8a 83       	std	Y+2, r24	; 0x02
    20da:	8a 81       	ldd	r24, Y+2	; 0x02
    20dc:	9b 81       	ldd	r25, Y+3	; 0x03
    20de:	01 97       	sbiw	r24, 0x01	; 1
    20e0:	f1 f7       	brne	.-4      	; 0x20de <LCD_sendCommand+0xe8e>
    20e2:	9b 83       	std	Y+3, r25	; 0x03
    20e4:	8a 83       	std	Y+2, r24	; 0x02
    20e6:	0f c0       	rjmp	.+30     	; 0x2106 <LCD_sendCommand+0xeb6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    20e8:	69 89       	ldd	r22, Y+17	; 0x11
    20ea:	7a 89       	ldd	r23, Y+18	; 0x12
    20ec:	8b 89       	ldd	r24, Y+19	; 0x13
    20ee:	9c 89       	ldd	r25, Y+20	; 0x14
    20f0:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    20f4:	dc 01       	movw	r26, r24
    20f6:	cb 01       	movw	r24, r22
    20f8:	88 8b       	std	Y+16, r24	; 0x10
    20fa:	88 89       	ldd	r24, Y+16	; 0x10
    20fc:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    20fe:	89 81       	ldd	r24, Y+1	; 0x01
    2100:	8a 95       	dec	r24
    2102:	f1 f7       	brne	.-4      	; 0x2100 <LCD_sendCommand+0xeb0>
    2104:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
	_delay_us(100); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_PORT,EN); /* disable LCD E=0 */
	_delay_us(100); /* delay for processing Th = 13ns */
#endif
}
    2106:	c7 55       	subi	r28, 0x57	; 87
    2108:	df 4f       	sbci	r29, 0xFF	; 255
    210a:	0f b6       	in	r0, 0x3f	; 63
    210c:	f8 94       	cli
    210e:	de bf       	out	0x3e, r29	; 62
    2110:	0f be       	out	0x3f, r0	; 63
    2112:	cd bf       	out	0x3d, r28	; 61
    2114:	cf 91       	pop	r28
    2116:	df 91       	pop	r29
    2118:	1f 91       	pop	r17
    211a:	0f 91       	pop	r16
    211c:	08 95       	ret

0000211e <LCD_displayCharacter>:
void LCD_displayCharacter(uint8 data){
    211e:	0f 93       	push	r16
    2120:	1f 93       	push	r17
    2122:	df 93       	push	r29
    2124:	cf 93       	push	r28
    2126:	cd b7       	in	r28, 0x3d	; 61
    2128:	de b7       	in	r29, 0x3e	; 62
    212a:	c9 5a       	subi	r28, 0xA9	; 169
    212c:	d0 40       	sbci	r29, 0x00	; 0
    212e:	0f b6       	in	r0, 0x3f	; 63
    2130:	f8 94       	cli
    2132:	de bf       	out	0x3e, r29	; 62
    2134:	0f be       	out	0x3f, r0	; 63
    2136:	cd bf       	out	0x3d, r28	; 61
    2138:	fe 01       	movw	r30, r28
    213a:	e7 55       	subi	r30, 0x57	; 87
    213c:	ff 4f       	sbci	r31, 0xFF	; 255
    213e:	80 83       	st	Z, r24
	SET_BIT(LCD_PORT,RS); /* Data Mode RS=1 */
    2140:	a5 e3       	ldi	r26, 0x35	; 53
    2142:	b0 e0       	ldi	r27, 0x00	; 0
    2144:	e5 e3       	ldi	r30, 0x35	; 53
    2146:	f0 e0       	ldi	r31, 0x00	; 0
    2148:	80 81       	ld	r24, Z
    214a:	81 60       	ori	r24, 0x01	; 1
    214c:	8c 93       	st	X, r24
		CLEAR_BIT(LCD_PORT,RW); /* write data to LCD so RW=0 */
    214e:	a5 e3       	ldi	r26, 0x35	; 53
    2150:	b0 e0       	ldi	r27, 0x00	; 0
    2152:	e5 e3       	ldi	r30, 0x35	; 53
    2154:	f0 e0       	ldi	r31, 0x00	; 0
    2156:	80 81       	ld	r24, Z
    2158:	8d 7f       	andi	r24, 0xFD	; 253
    215a:	8c 93       	st	X, r24
    215c:	fe 01       	movw	r30, r28
    215e:	eb 55       	subi	r30, 0x5B	; 91
    2160:	ff 4f       	sbci	r31, 0xFF	; 255
    2162:	80 e0       	ldi	r24, 0x00	; 0
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	a8 ec       	ldi	r26, 0xC8	; 200
    2168:	b2 e4       	ldi	r27, 0x42	; 66
    216a:	80 83       	st	Z, r24
    216c:	91 83       	std	Z+1, r25	; 0x01
    216e:	a2 83       	std	Z+2, r26	; 0x02
    2170:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2172:	8e 01       	movw	r16, r28
    2174:	0f 55       	subi	r16, 0x5F	; 95
    2176:	1f 4f       	sbci	r17, 0xFF	; 255
    2178:	fe 01       	movw	r30, r28
    217a:	eb 55       	subi	r30, 0x5B	; 91
    217c:	ff 4f       	sbci	r31, 0xFF	; 255
    217e:	60 81       	ld	r22, Z
    2180:	71 81       	ldd	r23, Z+1	; 0x01
    2182:	82 81       	ldd	r24, Z+2	; 0x02
    2184:	93 81       	ldd	r25, Z+3	; 0x03
    2186:	2b ea       	ldi	r18, 0xAB	; 171
    2188:	3a ea       	ldi	r19, 0xAA	; 170
    218a:	4a ea       	ldi	r20, 0xAA	; 170
    218c:	5e e3       	ldi	r21, 0x3E	; 62
    218e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2192:	dc 01       	movw	r26, r24
    2194:	cb 01       	movw	r24, r22
    2196:	f8 01       	movw	r30, r16
    2198:	80 83       	st	Z, r24
    219a:	91 83       	std	Z+1, r25	; 0x01
    219c:	a2 83       	std	Z+2, r26	; 0x02
    219e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21a0:	fe 01       	movw	r30, r28
    21a2:	ef 55       	subi	r30, 0x5F	; 95
    21a4:	ff 4f       	sbci	r31, 0xFF	; 255
    21a6:	60 81       	ld	r22, Z
    21a8:	71 81       	ldd	r23, Z+1	; 0x01
    21aa:	82 81       	ldd	r24, Z+2	; 0x02
    21ac:	93 81       	ldd	r25, Z+3	; 0x03
    21ae:	20 e0       	ldi	r18, 0x00	; 0
    21b0:	30 e0       	ldi	r19, 0x00	; 0
    21b2:	40 e8       	ldi	r20, 0x80	; 128
    21b4:	5f e3       	ldi	r21, 0x3F	; 63
    21b6:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    21ba:	88 23       	and	r24, r24
    21bc:	34 f4       	brge	.+12     	; 0x21ca <LCD_displayCharacter+0xac>
		__ticks = 1;
    21be:	fe 01       	movw	r30, r28
    21c0:	e0 56       	subi	r30, 0x60	; 96
    21c2:	ff 4f       	sbci	r31, 0xFF	; 255
    21c4:	81 e0       	ldi	r24, 0x01	; 1
    21c6:	80 83       	st	Z, r24
    21c8:	e0 c0       	rjmp	.+448    	; 0x238a <LCD_displayCharacter+0x26c>
	else if (__tmp > 255)
    21ca:	fe 01       	movw	r30, r28
    21cc:	ef 55       	subi	r30, 0x5F	; 95
    21ce:	ff 4f       	sbci	r31, 0xFF	; 255
    21d0:	60 81       	ld	r22, Z
    21d2:	71 81       	ldd	r23, Z+1	; 0x01
    21d4:	82 81       	ldd	r24, Z+2	; 0x02
    21d6:	93 81       	ldd	r25, Z+3	; 0x03
    21d8:	20 e0       	ldi	r18, 0x00	; 0
    21da:	30 e0       	ldi	r19, 0x00	; 0
    21dc:	4f e7       	ldi	r20, 0x7F	; 127
    21de:	53 e4       	ldi	r21, 0x43	; 67
    21e0:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    21e4:	18 16       	cp	r1, r24
    21e6:	0c f0       	brlt	.+2      	; 0x21ea <LCD_displayCharacter+0xcc>
    21e8:	c0 c0       	rjmp	.+384    	; 0x236a <LCD_displayCharacter+0x24c>
	{
		_delay_ms(__us / 1000.0);
    21ea:	fe 01       	movw	r30, r28
    21ec:	eb 55       	subi	r30, 0x5B	; 91
    21ee:	ff 4f       	sbci	r31, 0xFF	; 255
    21f0:	60 81       	ld	r22, Z
    21f2:	71 81       	ldd	r23, Z+1	; 0x01
    21f4:	82 81       	ldd	r24, Z+2	; 0x02
    21f6:	93 81       	ldd	r25, Z+3	; 0x03
    21f8:	20 e0       	ldi	r18, 0x00	; 0
    21fa:	30 e0       	ldi	r19, 0x00	; 0
    21fc:	4a e7       	ldi	r20, 0x7A	; 122
    21fe:	54 e4       	ldi	r21, 0x44	; 68
    2200:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    2204:	dc 01       	movw	r26, r24
    2206:	cb 01       	movw	r24, r22
    2208:	fe 01       	movw	r30, r28
    220a:	e4 56       	subi	r30, 0x64	; 100
    220c:	ff 4f       	sbci	r31, 0xFF	; 255
    220e:	80 83       	st	Z, r24
    2210:	91 83       	std	Z+1, r25	; 0x01
    2212:	a2 83       	std	Z+2, r26	; 0x02
    2214:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2216:	8e 01       	movw	r16, r28
    2218:	08 56       	subi	r16, 0x68	; 104
    221a:	1f 4f       	sbci	r17, 0xFF	; 255
    221c:	fe 01       	movw	r30, r28
    221e:	e4 56       	subi	r30, 0x64	; 100
    2220:	ff 4f       	sbci	r31, 0xFF	; 255
    2222:	60 81       	ld	r22, Z
    2224:	71 81       	ldd	r23, Z+1	; 0x01
    2226:	82 81       	ldd	r24, Z+2	; 0x02
    2228:	93 81       	ldd	r25, Z+3	; 0x03
    222a:	20 e0       	ldi	r18, 0x00	; 0
    222c:	30 e0       	ldi	r19, 0x00	; 0
    222e:	4a e7       	ldi	r20, 0x7A	; 122
    2230:	53 e4       	ldi	r21, 0x43	; 67
    2232:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2236:	dc 01       	movw	r26, r24
    2238:	cb 01       	movw	r24, r22
    223a:	f8 01       	movw	r30, r16
    223c:	80 83       	st	Z, r24
    223e:	91 83       	std	Z+1, r25	; 0x01
    2240:	a2 83       	std	Z+2, r26	; 0x02
    2242:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2244:	fe 01       	movw	r30, r28
    2246:	e8 56       	subi	r30, 0x68	; 104
    2248:	ff 4f       	sbci	r31, 0xFF	; 255
    224a:	60 81       	ld	r22, Z
    224c:	71 81       	ldd	r23, Z+1	; 0x01
    224e:	82 81       	ldd	r24, Z+2	; 0x02
    2250:	93 81       	ldd	r25, Z+3	; 0x03
    2252:	20 e0       	ldi	r18, 0x00	; 0
    2254:	30 e0       	ldi	r19, 0x00	; 0
    2256:	40 e8       	ldi	r20, 0x80	; 128
    2258:	5f e3       	ldi	r21, 0x3F	; 63
    225a:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    225e:	88 23       	and	r24, r24
    2260:	44 f4       	brge	.+16     	; 0x2272 <LCD_displayCharacter+0x154>
		__ticks = 1;
    2262:	fe 01       	movw	r30, r28
    2264:	ea 56       	subi	r30, 0x6A	; 106
    2266:	ff 4f       	sbci	r31, 0xFF	; 255
    2268:	81 e0       	ldi	r24, 0x01	; 1
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	91 83       	std	Z+1, r25	; 0x01
    226e:	80 83       	st	Z, r24
    2270:	64 c0       	rjmp	.+200    	; 0x233a <LCD_displayCharacter+0x21c>
	else if (__tmp > 65535)
    2272:	fe 01       	movw	r30, r28
    2274:	e8 56       	subi	r30, 0x68	; 104
    2276:	ff 4f       	sbci	r31, 0xFF	; 255
    2278:	60 81       	ld	r22, Z
    227a:	71 81       	ldd	r23, Z+1	; 0x01
    227c:	82 81       	ldd	r24, Z+2	; 0x02
    227e:	93 81       	ldd	r25, Z+3	; 0x03
    2280:	20 e0       	ldi	r18, 0x00	; 0
    2282:	3f ef       	ldi	r19, 0xFF	; 255
    2284:	4f e7       	ldi	r20, 0x7F	; 127
    2286:	57 e4       	ldi	r21, 0x47	; 71
    2288:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    228c:	18 16       	cp	r1, r24
    228e:	0c f0       	brlt	.+2      	; 0x2292 <LCD_displayCharacter+0x174>
    2290:	43 c0       	rjmp	.+134    	; 0x2318 <LCD_displayCharacter+0x1fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2292:	fe 01       	movw	r30, r28
    2294:	e4 56       	subi	r30, 0x64	; 100
    2296:	ff 4f       	sbci	r31, 0xFF	; 255
    2298:	60 81       	ld	r22, Z
    229a:	71 81       	ldd	r23, Z+1	; 0x01
    229c:	82 81       	ldd	r24, Z+2	; 0x02
    229e:	93 81       	ldd	r25, Z+3	; 0x03
    22a0:	20 e0       	ldi	r18, 0x00	; 0
    22a2:	30 e0       	ldi	r19, 0x00	; 0
    22a4:	40 e2       	ldi	r20, 0x20	; 32
    22a6:	51 e4       	ldi	r21, 0x41	; 65
    22a8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    22ac:	dc 01       	movw	r26, r24
    22ae:	cb 01       	movw	r24, r22
    22b0:	8e 01       	movw	r16, r28
    22b2:	0a 56       	subi	r16, 0x6A	; 106
    22b4:	1f 4f       	sbci	r17, 0xFF	; 255
    22b6:	bc 01       	movw	r22, r24
    22b8:	cd 01       	movw	r24, r26
    22ba:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    22be:	dc 01       	movw	r26, r24
    22c0:	cb 01       	movw	r24, r22
    22c2:	f8 01       	movw	r30, r16
    22c4:	91 83       	std	Z+1, r25	; 0x01
    22c6:	80 83       	st	Z, r24
    22c8:	1f c0       	rjmp	.+62     	; 0x2308 <LCD_displayCharacter+0x1ea>
    22ca:	fe 01       	movw	r30, r28
    22cc:	ec 56       	subi	r30, 0x6C	; 108
    22ce:	ff 4f       	sbci	r31, 0xFF	; 255
    22d0:	89 e1       	ldi	r24, 0x19	; 25
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	91 83       	std	Z+1, r25	; 0x01
    22d6:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    22d8:	fe 01       	movw	r30, r28
    22da:	ec 56       	subi	r30, 0x6C	; 108
    22dc:	ff 4f       	sbci	r31, 0xFF	; 255
    22de:	80 81       	ld	r24, Z
    22e0:	91 81       	ldd	r25, Z+1	; 0x01
    22e2:	01 97       	sbiw	r24, 0x01	; 1
    22e4:	f1 f7       	brne	.-4      	; 0x22e2 <LCD_displayCharacter+0x1c4>
    22e6:	fe 01       	movw	r30, r28
    22e8:	ec 56       	subi	r30, 0x6C	; 108
    22ea:	ff 4f       	sbci	r31, 0xFF	; 255
    22ec:	91 83       	std	Z+1, r25	; 0x01
    22ee:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22f0:	de 01       	movw	r26, r28
    22f2:	aa 56       	subi	r26, 0x6A	; 106
    22f4:	bf 4f       	sbci	r27, 0xFF	; 255
    22f6:	fe 01       	movw	r30, r28
    22f8:	ea 56       	subi	r30, 0x6A	; 106
    22fa:	ff 4f       	sbci	r31, 0xFF	; 255
    22fc:	80 81       	ld	r24, Z
    22fe:	91 81       	ldd	r25, Z+1	; 0x01
    2300:	01 97       	sbiw	r24, 0x01	; 1
    2302:	11 96       	adiw	r26, 0x01	; 1
    2304:	9c 93       	st	X, r25
    2306:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2308:	fe 01       	movw	r30, r28
    230a:	ea 56       	subi	r30, 0x6A	; 106
    230c:	ff 4f       	sbci	r31, 0xFF	; 255
    230e:	80 81       	ld	r24, Z
    2310:	91 81       	ldd	r25, Z+1	; 0x01
    2312:	00 97       	sbiw	r24, 0x00	; 0
    2314:	d1 f6       	brne	.-76     	; 0x22ca <LCD_displayCharacter+0x1ac>
    2316:	4b c0       	rjmp	.+150    	; 0x23ae <LCD_displayCharacter+0x290>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2318:	8e 01       	movw	r16, r28
    231a:	0a 56       	subi	r16, 0x6A	; 106
    231c:	1f 4f       	sbci	r17, 0xFF	; 255
    231e:	fe 01       	movw	r30, r28
    2320:	e8 56       	subi	r30, 0x68	; 104
    2322:	ff 4f       	sbci	r31, 0xFF	; 255
    2324:	60 81       	ld	r22, Z
    2326:	71 81       	ldd	r23, Z+1	; 0x01
    2328:	82 81       	ldd	r24, Z+2	; 0x02
    232a:	93 81       	ldd	r25, Z+3	; 0x03
    232c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2330:	dc 01       	movw	r26, r24
    2332:	cb 01       	movw	r24, r22
    2334:	f8 01       	movw	r30, r16
    2336:	91 83       	std	Z+1, r25	; 0x01
    2338:	80 83       	st	Z, r24
    233a:	de 01       	movw	r26, r28
    233c:	ae 56       	subi	r26, 0x6E	; 110
    233e:	bf 4f       	sbci	r27, 0xFF	; 255
    2340:	fe 01       	movw	r30, r28
    2342:	ea 56       	subi	r30, 0x6A	; 106
    2344:	ff 4f       	sbci	r31, 0xFF	; 255
    2346:	80 81       	ld	r24, Z
    2348:	91 81       	ldd	r25, Z+1	; 0x01
    234a:	11 96       	adiw	r26, 0x01	; 1
    234c:	9c 93       	st	X, r25
    234e:	8e 93       	st	-X, r24
    2350:	fe 01       	movw	r30, r28
    2352:	ee 56       	subi	r30, 0x6E	; 110
    2354:	ff 4f       	sbci	r31, 0xFF	; 255
    2356:	80 81       	ld	r24, Z
    2358:	91 81       	ldd	r25, Z+1	; 0x01
    235a:	01 97       	sbiw	r24, 0x01	; 1
    235c:	f1 f7       	brne	.-4      	; 0x235a <LCD_displayCharacter+0x23c>
    235e:	fe 01       	movw	r30, r28
    2360:	ee 56       	subi	r30, 0x6E	; 110
    2362:	ff 4f       	sbci	r31, 0xFF	; 255
    2364:	91 83       	std	Z+1, r25	; 0x01
    2366:	80 83       	st	Z, r24
    2368:	22 c0       	rjmp	.+68     	; 0x23ae <LCD_displayCharacter+0x290>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    236a:	8e 01       	movw	r16, r28
    236c:	00 56       	subi	r16, 0x60	; 96
    236e:	1f 4f       	sbci	r17, 0xFF	; 255
    2370:	fe 01       	movw	r30, r28
    2372:	ef 55       	subi	r30, 0x5F	; 95
    2374:	ff 4f       	sbci	r31, 0xFF	; 255
    2376:	60 81       	ld	r22, Z
    2378:	71 81       	ldd	r23, Z+1	; 0x01
    237a:	82 81       	ldd	r24, Z+2	; 0x02
    237c:	93 81       	ldd	r25, Z+3	; 0x03
    237e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2382:	dc 01       	movw	r26, r24
    2384:	cb 01       	movw	r24, r22
    2386:	f8 01       	movw	r30, r16
    2388:	80 83       	st	Z, r24
    238a:	de 01       	movw	r26, r28
    238c:	af 56       	subi	r26, 0x6F	; 111
    238e:	bf 4f       	sbci	r27, 0xFF	; 255
    2390:	fe 01       	movw	r30, r28
    2392:	e0 56       	subi	r30, 0x60	; 96
    2394:	ff 4f       	sbci	r31, 0xFF	; 255
    2396:	80 81       	ld	r24, Z
    2398:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    239a:	fe 01       	movw	r30, r28
    239c:	ef 56       	subi	r30, 0x6F	; 111
    239e:	ff 4f       	sbci	r31, 0xFF	; 255
    23a0:	80 81       	ld	r24, Z
    23a2:	8a 95       	dec	r24
    23a4:	f1 f7       	brne	.-4      	; 0x23a2 <LCD_displayCharacter+0x284>
    23a6:	fe 01       	movw	r30, r28
    23a8:	ef 56       	subi	r30, 0x6F	; 111
    23aa:	ff 4f       	sbci	r31, 0xFF	; 255
    23ac:	80 83       	st	Z, r24
			_delay_us(100); /* delay for processing Tas = 50ns */
			SET_BIT(LCD_PORT,EN); /* Enable LCD E=1 */
    23ae:	a5 e3       	ldi	r26, 0x35	; 53
    23b0:	b0 e0       	ldi	r27, 0x00	; 0
    23b2:	e5 e3       	ldi	r30, 0x35	; 53
    23b4:	f0 e0       	ldi	r31, 0x00	; 0
    23b6:	80 81       	ld	r24, Z
    23b8:	84 60       	ori	r24, 0x04	; 4
    23ba:	8c 93       	st	X, r24
    23bc:	fe 01       	movw	r30, r28
    23be:	e3 57       	subi	r30, 0x73	; 115
    23c0:	ff 4f       	sbci	r31, 0xFF	; 255
    23c2:	80 e0       	ldi	r24, 0x00	; 0
    23c4:	90 e0       	ldi	r25, 0x00	; 0
    23c6:	a8 ec       	ldi	r26, 0xC8	; 200
    23c8:	b2 e4       	ldi	r27, 0x42	; 66
    23ca:	80 83       	st	Z, r24
    23cc:	91 83       	std	Z+1, r25	; 0x01
    23ce:	a2 83       	std	Z+2, r26	; 0x02
    23d0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    23d2:	8e 01       	movw	r16, r28
    23d4:	07 57       	subi	r16, 0x77	; 119
    23d6:	1f 4f       	sbci	r17, 0xFF	; 255
    23d8:	fe 01       	movw	r30, r28
    23da:	e3 57       	subi	r30, 0x73	; 115
    23dc:	ff 4f       	sbci	r31, 0xFF	; 255
    23de:	60 81       	ld	r22, Z
    23e0:	71 81       	ldd	r23, Z+1	; 0x01
    23e2:	82 81       	ldd	r24, Z+2	; 0x02
    23e4:	93 81       	ldd	r25, Z+3	; 0x03
    23e6:	2b ea       	ldi	r18, 0xAB	; 171
    23e8:	3a ea       	ldi	r19, 0xAA	; 170
    23ea:	4a ea       	ldi	r20, 0xAA	; 170
    23ec:	5e e3       	ldi	r21, 0x3E	; 62
    23ee:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    23f2:	dc 01       	movw	r26, r24
    23f4:	cb 01       	movw	r24, r22
    23f6:	f8 01       	movw	r30, r16
    23f8:	80 83       	st	Z, r24
    23fa:	91 83       	std	Z+1, r25	; 0x01
    23fc:	a2 83       	std	Z+2, r26	; 0x02
    23fe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2400:	fe 01       	movw	r30, r28
    2402:	e7 57       	subi	r30, 0x77	; 119
    2404:	ff 4f       	sbci	r31, 0xFF	; 255
    2406:	60 81       	ld	r22, Z
    2408:	71 81       	ldd	r23, Z+1	; 0x01
    240a:	82 81       	ldd	r24, Z+2	; 0x02
    240c:	93 81       	ldd	r25, Z+3	; 0x03
    240e:	20 e0       	ldi	r18, 0x00	; 0
    2410:	30 e0       	ldi	r19, 0x00	; 0
    2412:	40 e8       	ldi	r20, 0x80	; 128
    2414:	5f e3       	ldi	r21, 0x3F	; 63
    2416:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    241a:	88 23       	and	r24, r24
    241c:	34 f4       	brge	.+12     	; 0x242a <LCD_displayCharacter+0x30c>
		__ticks = 1;
    241e:	fe 01       	movw	r30, r28
    2420:	e8 57       	subi	r30, 0x78	; 120
    2422:	ff 4f       	sbci	r31, 0xFF	; 255
    2424:	81 e0       	ldi	r24, 0x01	; 1
    2426:	80 83       	st	Z, r24
    2428:	e0 c0       	rjmp	.+448    	; 0x25ea <LCD_displayCharacter+0x4cc>
	else if (__tmp > 255)
    242a:	fe 01       	movw	r30, r28
    242c:	e7 57       	subi	r30, 0x77	; 119
    242e:	ff 4f       	sbci	r31, 0xFF	; 255
    2430:	60 81       	ld	r22, Z
    2432:	71 81       	ldd	r23, Z+1	; 0x01
    2434:	82 81       	ldd	r24, Z+2	; 0x02
    2436:	93 81       	ldd	r25, Z+3	; 0x03
    2438:	20 e0       	ldi	r18, 0x00	; 0
    243a:	30 e0       	ldi	r19, 0x00	; 0
    243c:	4f e7       	ldi	r20, 0x7F	; 127
    243e:	53 e4       	ldi	r21, 0x43	; 67
    2440:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2444:	18 16       	cp	r1, r24
    2446:	0c f0       	brlt	.+2      	; 0x244a <LCD_displayCharacter+0x32c>
    2448:	c0 c0       	rjmp	.+384    	; 0x25ca <LCD_displayCharacter+0x4ac>
	{
		_delay_ms(__us / 1000.0);
    244a:	fe 01       	movw	r30, r28
    244c:	e3 57       	subi	r30, 0x73	; 115
    244e:	ff 4f       	sbci	r31, 0xFF	; 255
    2450:	60 81       	ld	r22, Z
    2452:	71 81       	ldd	r23, Z+1	; 0x01
    2454:	82 81       	ldd	r24, Z+2	; 0x02
    2456:	93 81       	ldd	r25, Z+3	; 0x03
    2458:	20 e0       	ldi	r18, 0x00	; 0
    245a:	30 e0       	ldi	r19, 0x00	; 0
    245c:	4a e7       	ldi	r20, 0x7A	; 122
    245e:	54 e4       	ldi	r21, 0x44	; 68
    2460:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    2464:	dc 01       	movw	r26, r24
    2466:	cb 01       	movw	r24, r22
    2468:	fe 01       	movw	r30, r28
    246a:	ec 57       	subi	r30, 0x7C	; 124
    246c:	ff 4f       	sbci	r31, 0xFF	; 255
    246e:	80 83       	st	Z, r24
    2470:	91 83       	std	Z+1, r25	; 0x01
    2472:	a2 83       	std	Z+2, r26	; 0x02
    2474:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2476:	8e 01       	movw	r16, r28
    2478:	00 58       	subi	r16, 0x80	; 128
    247a:	1f 4f       	sbci	r17, 0xFF	; 255
    247c:	fe 01       	movw	r30, r28
    247e:	ec 57       	subi	r30, 0x7C	; 124
    2480:	ff 4f       	sbci	r31, 0xFF	; 255
    2482:	60 81       	ld	r22, Z
    2484:	71 81       	ldd	r23, Z+1	; 0x01
    2486:	82 81       	ldd	r24, Z+2	; 0x02
    2488:	93 81       	ldd	r25, Z+3	; 0x03
    248a:	20 e0       	ldi	r18, 0x00	; 0
    248c:	30 e0       	ldi	r19, 0x00	; 0
    248e:	4a e7       	ldi	r20, 0x7A	; 122
    2490:	53 e4       	ldi	r21, 0x43	; 67
    2492:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2496:	dc 01       	movw	r26, r24
    2498:	cb 01       	movw	r24, r22
    249a:	f8 01       	movw	r30, r16
    249c:	80 83       	st	Z, r24
    249e:	91 83       	std	Z+1, r25	; 0x01
    24a0:	a2 83       	std	Z+2, r26	; 0x02
    24a2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24a4:	fe 01       	movw	r30, r28
    24a6:	e0 58       	subi	r30, 0x80	; 128
    24a8:	ff 4f       	sbci	r31, 0xFF	; 255
    24aa:	60 81       	ld	r22, Z
    24ac:	71 81       	ldd	r23, Z+1	; 0x01
    24ae:	82 81       	ldd	r24, Z+2	; 0x02
    24b0:	93 81       	ldd	r25, Z+3	; 0x03
    24b2:	20 e0       	ldi	r18, 0x00	; 0
    24b4:	30 e0       	ldi	r19, 0x00	; 0
    24b6:	40 e8       	ldi	r20, 0x80	; 128
    24b8:	5f e3       	ldi	r21, 0x3F	; 63
    24ba:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    24be:	88 23       	and	r24, r24
    24c0:	44 f4       	brge	.+16     	; 0x24d2 <LCD_displayCharacter+0x3b4>
		__ticks = 1;
    24c2:	fe 01       	movw	r30, r28
    24c4:	e2 58       	subi	r30, 0x82	; 130
    24c6:	ff 4f       	sbci	r31, 0xFF	; 255
    24c8:	81 e0       	ldi	r24, 0x01	; 1
    24ca:	90 e0       	ldi	r25, 0x00	; 0
    24cc:	91 83       	std	Z+1, r25	; 0x01
    24ce:	80 83       	st	Z, r24
    24d0:	64 c0       	rjmp	.+200    	; 0x259a <LCD_displayCharacter+0x47c>
	else if (__tmp > 65535)
    24d2:	fe 01       	movw	r30, r28
    24d4:	e0 58       	subi	r30, 0x80	; 128
    24d6:	ff 4f       	sbci	r31, 0xFF	; 255
    24d8:	60 81       	ld	r22, Z
    24da:	71 81       	ldd	r23, Z+1	; 0x01
    24dc:	82 81       	ldd	r24, Z+2	; 0x02
    24de:	93 81       	ldd	r25, Z+3	; 0x03
    24e0:	20 e0       	ldi	r18, 0x00	; 0
    24e2:	3f ef       	ldi	r19, 0xFF	; 255
    24e4:	4f e7       	ldi	r20, 0x7F	; 127
    24e6:	57 e4       	ldi	r21, 0x47	; 71
    24e8:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    24ec:	18 16       	cp	r1, r24
    24ee:	0c f0       	brlt	.+2      	; 0x24f2 <LCD_displayCharacter+0x3d4>
    24f0:	43 c0       	rjmp	.+134    	; 0x2578 <LCD_displayCharacter+0x45a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24f2:	fe 01       	movw	r30, r28
    24f4:	ec 57       	subi	r30, 0x7C	; 124
    24f6:	ff 4f       	sbci	r31, 0xFF	; 255
    24f8:	60 81       	ld	r22, Z
    24fa:	71 81       	ldd	r23, Z+1	; 0x01
    24fc:	82 81       	ldd	r24, Z+2	; 0x02
    24fe:	93 81       	ldd	r25, Z+3	; 0x03
    2500:	20 e0       	ldi	r18, 0x00	; 0
    2502:	30 e0       	ldi	r19, 0x00	; 0
    2504:	40 e2       	ldi	r20, 0x20	; 32
    2506:	51 e4       	ldi	r21, 0x41	; 65
    2508:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    250c:	dc 01       	movw	r26, r24
    250e:	cb 01       	movw	r24, r22
    2510:	8e 01       	movw	r16, r28
    2512:	02 58       	subi	r16, 0x82	; 130
    2514:	1f 4f       	sbci	r17, 0xFF	; 255
    2516:	bc 01       	movw	r22, r24
    2518:	cd 01       	movw	r24, r26
    251a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    251e:	dc 01       	movw	r26, r24
    2520:	cb 01       	movw	r24, r22
    2522:	f8 01       	movw	r30, r16
    2524:	91 83       	std	Z+1, r25	; 0x01
    2526:	80 83       	st	Z, r24
    2528:	1f c0       	rjmp	.+62     	; 0x2568 <LCD_displayCharacter+0x44a>
    252a:	fe 01       	movw	r30, r28
    252c:	e4 58       	subi	r30, 0x84	; 132
    252e:	ff 4f       	sbci	r31, 0xFF	; 255
    2530:	89 e1       	ldi	r24, 0x19	; 25
    2532:	90 e0       	ldi	r25, 0x00	; 0
    2534:	91 83       	std	Z+1, r25	; 0x01
    2536:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2538:	fe 01       	movw	r30, r28
    253a:	e4 58       	subi	r30, 0x84	; 132
    253c:	ff 4f       	sbci	r31, 0xFF	; 255
    253e:	80 81       	ld	r24, Z
    2540:	91 81       	ldd	r25, Z+1	; 0x01
    2542:	01 97       	sbiw	r24, 0x01	; 1
    2544:	f1 f7       	brne	.-4      	; 0x2542 <LCD_displayCharacter+0x424>
    2546:	fe 01       	movw	r30, r28
    2548:	e4 58       	subi	r30, 0x84	; 132
    254a:	ff 4f       	sbci	r31, 0xFF	; 255
    254c:	91 83       	std	Z+1, r25	; 0x01
    254e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2550:	de 01       	movw	r26, r28
    2552:	a2 58       	subi	r26, 0x82	; 130
    2554:	bf 4f       	sbci	r27, 0xFF	; 255
    2556:	fe 01       	movw	r30, r28
    2558:	e2 58       	subi	r30, 0x82	; 130
    255a:	ff 4f       	sbci	r31, 0xFF	; 255
    255c:	80 81       	ld	r24, Z
    255e:	91 81       	ldd	r25, Z+1	; 0x01
    2560:	01 97       	sbiw	r24, 0x01	; 1
    2562:	11 96       	adiw	r26, 0x01	; 1
    2564:	9c 93       	st	X, r25
    2566:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2568:	fe 01       	movw	r30, r28
    256a:	e2 58       	subi	r30, 0x82	; 130
    256c:	ff 4f       	sbci	r31, 0xFF	; 255
    256e:	80 81       	ld	r24, Z
    2570:	91 81       	ldd	r25, Z+1	; 0x01
    2572:	00 97       	sbiw	r24, 0x00	; 0
    2574:	d1 f6       	brne	.-76     	; 0x252a <LCD_displayCharacter+0x40c>
    2576:	4b c0       	rjmp	.+150    	; 0x260e <LCD_displayCharacter+0x4f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2578:	8e 01       	movw	r16, r28
    257a:	02 58       	subi	r16, 0x82	; 130
    257c:	1f 4f       	sbci	r17, 0xFF	; 255
    257e:	fe 01       	movw	r30, r28
    2580:	e0 58       	subi	r30, 0x80	; 128
    2582:	ff 4f       	sbci	r31, 0xFF	; 255
    2584:	60 81       	ld	r22, Z
    2586:	71 81       	ldd	r23, Z+1	; 0x01
    2588:	82 81       	ldd	r24, Z+2	; 0x02
    258a:	93 81       	ldd	r25, Z+3	; 0x03
    258c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2590:	dc 01       	movw	r26, r24
    2592:	cb 01       	movw	r24, r22
    2594:	f8 01       	movw	r30, r16
    2596:	91 83       	std	Z+1, r25	; 0x01
    2598:	80 83       	st	Z, r24
    259a:	de 01       	movw	r26, r28
    259c:	a6 58       	subi	r26, 0x86	; 134
    259e:	bf 4f       	sbci	r27, 0xFF	; 255
    25a0:	fe 01       	movw	r30, r28
    25a2:	e2 58       	subi	r30, 0x82	; 130
    25a4:	ff 4f       	sbci	r31, 0xFF	; 255
    25a6:	80 81       	ld	r24, Z
    25a8:	91 81       	ldd	r25, Z+1	; 0x01
    25aa:	11 96       	adiw	r26, 0x01	; 1
    25ac:	9c 93       	st	X, r25
    25ae:	8e 93       	st	-X, r24
    25b0:	fe 01       	movw	r30, r28
    25b2:	e6 58       	subi	r30, 0x86	; 134
    25b4:	ff 4f       	sbci	r31, 0xFF	; 255
    25b6:	80 81       	ld	r24, Z
    25b8:	91 81       	ldd	r25, Z+1	; 0x01
    25ba:	01 97       	sbiw	r24, 0x01	; 1
    25bc:	f1 f7       	brne	.-4      	; 0x25ba <LCD_displayCharacter+0x49c>
    25be:	fe 01       	movw	r30, r28
    25c0:	e6 58       	subi	r30, 0x86	; 134
    25c2:	ff 4f       	sbci	r31, 0xFF	; 255
    25c4:	91 83       	std	Z+1, r25	; 0x01
    25c6:	80 83       	st	Z, r24
    25c8:	22 c0       	rjmp	.+68     	; 0x260e <LCD_displayCharacter+0x4f0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    25ca:	8e 01       	movw	r16, r28
    25cc:	08 57       	subi	r16, 0x78	; 120
    25ce:	1f 4f       	sbci	r17, 0xFF	; 255
    25d0:	fe 01       	movw	r30, r28
    25d2:	e7 57       	subi	r30, 0x77	; 119
    25d4:	ff 4f       	sbci	r31, 0xFF	; 255
    25d6:	60 81       	ld	r22, Z
    25d8:	71 81       	ldd	r23, Z+1	; 0x01
    25da:	82 81       	ldd	r24, Z+2	; 0x02
    25dc:	93 81       	ldd	r25, Z+3	; 0x03
    25de:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    25e2:	dc 01       	movw	r26, r24
    25e4:	cb 01       	movw	r24, r22
    25e6:	f8 01       	movw	r30, r16
    25e8:	80 83       	st	Z, r24
    25ea:	de 01       	movw	r26, r28
    25ec:	a7 58       	subi	r26, 0x87	; 135
    25ee:	bf 4f       	sbci	r27, 0xFF	; 255
    25f0:	fe 01       	movw	r30, r28
    25f2:	e8 57       	subi	r30, 0x78	; 120
    25f4:	ff 4f       	sbci	r31, 0xFF	; 255
    25f6:	80 81       	ld	r24, Z
    25f8:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    25fa:	fe 01       	movw	r30, r28
    25fc:	e7 58       	subi	r30, 0x87	; 135
    25fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2600:	80 81       	ld	r24, Z
    2602:	8a 95       	dec	r24
    2604:	f1 f7       	brne	.-4      	; 0x2602 <LCD_displayCharacter+0x4e4>
    2606:	fe 01       	movw	r30, r28
    2608:	e7 58       	subi	r30, 0x87	; 135
    260a:	ff 4f       	sbci	r31, 0xFF	; 255
    260c:	80 83       	st	Z, r24
			_delay_us(100); /* delay for processing Tpw - Tdws = 190ns */
	#if DATA_BITS_MODE == 4
			LCD_PORT = (LCD_PORT & 0x0F) | (data & 0xF0);
    260e:	a5 e3       	ldi	r26, 0x35	; 53
    2610:	b0 e0       	ldi	r27, 0x00	; 0
    2612:	e5 e3       	ldi	r30, 0x35	; 53
    2614:	f0 e0       	ldi	r31, 0x00	; 0
    2616:	80 81       	ld	r24, Z
    2618:	98 2f       	mov	r25, r24
    261a:	9f 70       	andi	r25, 0x0F	; 15
    261c:	fe 01       	movw	r30, r28
    261e:	e7 55       	subi	r30, 0x57	; 87
    2620:	ff 4f       	sbci	r31, 0xFF	; 255
    2622:	80 81       	ld	r24, Z
    2624:	80 7f       	andi	r24, 0xF0	; 240
    2626:	89 2b       	or	r24, r25
    2628:	8c 93       	st	X, r24
    262a:	fe 01       	movw	r30, r28
    262c:	eb 58       	subi	r30, 0x8B	; 139
    262e:	ff 4f       	sbci	r31, 0xFF	; 255
    2630:	80 e0       	ldi	r24, 0x00	; 0
    2632:	90 e0       	ldi	r25, 0x00	; 0
    2634:	a8 ec       	ldi	r26, 0xC8	; 200
    2636:	b2 e4       	ldi	r27, 0x42	; 66
    2638:	80 83       	st	Z, r24
    263a:	91 83       	std	Z+1, r25	; 0x01
    263c:	a2 83       	std	Z+2, r26	; 0x02
    263e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2640:	8e 01       	movw	r16, r28
    2642:	0f 58       	subi	r16, 0x8F	; 143
    2644:	1f 4f       	sbci	r17, 0xFF	; 255
    2646:	fe 01       	movw	r30, r28
    2648:	eb 58       	subi	r30, 0x8B	; 139
    264a:	ff 4f       	sbci	r31, 0xFF	; 255
    264c:	60 81       	ld	r22, Z
    264e:	71 81       	ldd	r23, Z+1	; 0x01
    2650:	82 81       	ldd	r24, Z+2	; 0x02
    2652:	93 81       	ldd	r25, Z+3	; 0x03
    2654:	2b ea       	ldi	r18, 0xAB	; 171
    2656:	3a ea       	ldi	r19, 0xAA	; 170
    2658:	4a ea       	ldi	r20, 0xAA	; 170
    265a:	5e e3       	ldi	r21, 0x3E	; 62
    265c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2660:	dc 01       	movw	r26, r24
    2662:	cb 01       	movw	r24, r22
    2664:	f8 01       	movw	r30, r16
    2666:	80 83       	st	Z, r24
    2668:	91 83       	std	Z+1, r25	; 0x01
    266a:	a2 83       	std	Z+2, r26	; 0x02
    266c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    266e:	fe 01       	movw	r30, r28
    2670:	ef 58       	subi	r30, 0x8F	; 143
    2672:	ff 4f       	sbci	r31, 0xFF	; 255
    2674:	60 81       	ld	r22, Z
    2676:	71 81       	ldd	r23, Z+1	; 0x01
    2678:	82 81       	ldd	r24, Z+2	; 0x02
    267a:	93 81       	ldd	r25, Z+3	; 0x03
    267c:	20 e0       	ldi	r18, 0x00	; 0
    267e:	30 e0       	ldi	r19, 0x00	; 0
    2680:	40 e8       	ldi	r20, 0x80	; 128
    2682:	5f e3       	ldi	r21, 0x3F	; 63
    2684:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2688:	88 23       	and	r24, r24
    268a:	34 f4       	brge	.+12     	; 0x2698 <LCD_displayCharacter+0x57a>
		__ticks = 1;
    268c:	fe 01       	movw	r30, r28
    268e:	e0 59       	subi	r30, 0x90	; 144
    2690:	ff 4f       	sbci	r31, 0xFF	; 255
    2692:	81 e0       	ldi	r24, 0x01	; 1
    2694:	80 83       	st	Z, r24
    2696:	e0 c0       	rjmp	.+448    	; 0x2858 <LCD_displayCharacter+0x73a>
	else if (__tmp > 255)
    2698:	fe 01       	movw	r30, r28
    269a:	ef 58       	subi	r30, 0x8F	; 143
    269c:	ff 4f       	sbci	r31, 0xFF	; 255
    269e:	60 81       	ld	r22, Z
    26a0:	71 81       	ldd	r23, Z+1	; 0x01
    26a2:	82 81       	ldd	r24, Z+2	; 0x02
    26a4:	93 81       	ldd	r25, Z+3	; 0x03
    26a6:	20 e0       	ldi	r18, 0x00	; 0
    26a8:	30 e0       	ldi	r19, 0x00	; 0
    26aa:	4f e7       	ldi	r20, 0x7F	; 127
    26ac:	53 e4       	ldi	r21, 0x43	; 67
    26ae:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    26b2:	18 16       	cp	r1, r24
    26b4:	0c f0       	brlt	.+2      	; 0x26b8 <LCD_displayCharacter+0x59a>
    26b6:	c0 c0       	rjmp	.+384    	; 0x2838 <LCD_displayCharacter+0x71a>
	{
		_delay_ms(__us / 1000.0);
    26b8:	fe 01       	movw	r30, r28
    26ba:	eb 58       	subi	r30, 0x8B	; 139
    26bc:	ff 4f       	sbci	r31, 0xFF	; 255
    26be:	60 81       	ld	r22, Z
    26c0:	71 81       	ldd	r23, Z+1	; 0x01
    26c2:	82 81       	ldd	r24, Z+2	; 0x02
    26c4:	93 81       	ldd	r25, Z+3	; 0x03
    26c6:	20 e0       	ldi	r18, 0x00	; 0
    26c8:	30 e0       	ldi	r19, 0x00	; 0
    26ca:	4a e7       	ldi	r20, 0x7A	; 122
    26cc:	54 e4       	ldi	r21, 0x44	; 68
    26ce:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    26d2:	dc 01       	movw	r26, r24
    26d4:	cb 01       	movw	r24, r22
    26d6:	fe 01       	movw	r30, r28
    26d8:	e4 59       	subi	r30, 0x94	; 148
    26da:	ff 4f       	sbci	r31, 0xFF	; 255
    26dc:	80 83       	st	Z, r24
    26de:	91 83       	std	Z+1, r25	; 0x01
    26e0:	a2 83       	std	Z+2, r26	; 0x02
    26e2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26e4:	8e 01       	movw	r16, r28
    26e6:	08 59       	subi	r16, 0x98	; 152
    26e8:	1f 4f       	sbci	r17, 0xFF	; 255
    26ea:	fe 01       	movw	r30, r28
    26ec:	e4 59       	subi	r30, 0x94	; 148
    26ee:	ff 4f       	sbci	r31, 0xFF	; 255
    26f0:	60 81       	ld	r22, Z
    26f2:	71 81       	ldd	r23, Z+1	; 0x01
    26f4:	82 81       	ldd	r24, Z+2	; 0x02
    26f6:	93 81       	ldd	r25, Z+3	; 0x03
    26f8:	20 e0       	ldi	r18, 0x00	; 0
    26fa:	30 e0       	ldi	r19, 0x00	; 0
    26fc:	4a e7       	ldi	r20, 0x7A	; 122
    26fe:	53 e4       	ldi	r21, 0x43	; 67
    2700:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2704:	dc 01       	movw	r26, r24
    2706:	cb 01       	movw	r24, r22
    2708:	f8 01       	movw	r30, r16
    270a:	80 83       	st	Z, r24
    270c:	91 83       	std	Z+1, r25	; 0x01
    270e:	a2 83       	std	Z+2, r26	; 0x02
    2710:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2712:	fe 01       	movw	r30, r28
    2714:	e8 59       	subi	r30, 0x98	; 152
    2716:	ff 4f       	sbci	r31, 0xFF	; 255
    2718:	60 81       	ld	r22, Z
    271a:	71 81       	ldd	r23, Z+1	; 0x01
    271c:	82 81       	ldd	r24, Z+2	; 0x02
    271e:	93 81       	ldd	r25, Z+3	; 0x03
    2720:	20 e0       	ldi	r18, 0x00	; 0
    2722:	30 e0       	ldi	r19, 0x00	; 0
    2724:	40 e8       	ldi	r20, 0x80	; 128
    2726:	5f e3       	ldi	r21, 0x3F	; 63
    2728:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    272c:	88 23       	and	r24, r24
    272e:	44 f4       	brge	.+16     	; 0x2740 <LCD_displayCharacter+0x622>
		__ticks = 1;
    2730:	fe 01       	movw	r30, r28
    2732:	ea 59       	subi	r30, 0x9A	; 154
    2734:	ff 4f       	sbci	r31, 0xFF	; 255
    2736:	81 e0       	ldi	r24, 0x01	; 1
    2738:	90 e0       	ldi	r25, 0x00	; 0
    273a:	91 83       	std	Z+1, r25	; 0x01
    273c:	80 83       	st	Z, r24
    273e:	64 c0       	rjmp	.+200    	; 0x2808 <LCD_displayCharacter+0x6ea>
	else if (__tmp > 65535)
    2740:	fe 01       	movw	r30, r28
    2742:	e8 59       	subi	r30, 0x98	; 152
    2744:	ff 4f       	sbci	r31, 0xFF	; 255
    2746:	60 81       	ld	r22, Z
    2748:	71 81       	ldd	r23, Z+1	; 0x01
    274a:	82 81       	ldd	r24, Z+2	; 0x02
    274c:	93 81       	ldd	r25, Z+3	; 0x03
    274e:	20 e0       	ldi	r18, 0x00	; 0
    2750:	3f ef       	ldi	r19, 0xFF	; 255
    2752:	4f e7       	ldi	r20, 0x7F	; 127
    2754:	57 e4       	ldi	r21, 0x47	; 71
    2756:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    275a:	18 16       	cp	r1, r24
    275c:	0c f0       	brlt	.+2      	; 0x2760 <LCD_displayCharacter+0x642>
    275e:	43 c0       	rjmp	.+134    	; 0x27e6 <LCD_displayCharacter+0x6c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2760:	fe 01       	movw	r30, r28
    2762:	e4 59       	subi	r30, 0x94	; 148
    2764:	ff 4f       	sbci	r31, 0xFF	; 255
    2766:	60 81       	ld	r22, Z
    2768:	71 81       	ldd	r23, Z+1	; 0x01
    276a:	82 81       	ldd	r24, Z+2	; 0x02
    276c:	93 81       	ldd	r25, Z+3	; 0x03
    276e:	20 e0       	ldi	r18, 0x00	; 0
    2770:	30 e0       	ldi	r19, 0x00	; 0
    2772:	40 e2       	ldi	r20, 0x20	; 32
    2774:	51 e4       	ldi	r21, 0x41	; 65
    2776:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    277a:	dc 01       	movw	r26, r24
    277c:	cb 01       	movw	r24, r22
    277e:	8e 01       	movw	r16, r28
    2780:	0a 59       	subi	r16, 0x9A	; 154
    2782:	1f 4f       	sbci	r17, 0xFF	; 255
    2784:	bc 01       	movw	r22, r24
    2786:	cd 01       	movw	r24, r26
    2788:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    278c:	dc 01       	movw	r26, r24
    278e:	cb 01       	movw	r24, r22
    2790:	f8 01       	movw	r30, r16
    2792:	91 83       	std	Z+1, r25	; 0x01
    2794:	80 83       	st	Z, r24
    2796:	1f c0       	rjmp	.+62     	; 0x27d6 <LCD_displayCharacter+0x6b8>
    2798:	fe 01       	movw	r30, r28
    279a:	ec 59       	subi	r30, 0x9C	; 156
    279c:	ff 4f       	sbci	r31, 0xFF	; 255
    279e:	89 e1       	ldi	r24, 0x19	; 25
    27a0:	90 e0       	ldi	r25, 0x00	; 0
    27a2:	91 83       	std	Z+1, r25	; 0x01
    27a4:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    27a6:	fe 01       	movw	r30, r28
    27a8:	ec 59       	subi	r30, 0x9C	; 156
    27aa:	ff 4f       	sbci	r31, 0xFF	; 255
    27ac:	80 81       	ld	r24, Z
    27ae:	91 81       	ldd	r25, Z+1	; 0x01
    27b0:	01 97       	sbiw	r24, 0x01	; 1
    27b2:	f1 f7       	brne	.-4      	; 0x27b0 <LCD_displayCharacter+0x692>
    27b4:	fe 01       	movw	r30, r28
    27b6:	ec 59       	subi	r30, 0x9C	; 156
    27b8:	ff 4f       	sbci	r31, 0xFF	; 255
    27ba:	91 83       	std	Z+1, r25	; 0x01
    27bc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27be:	de 01       	movw	r26, r28
    27c0:	aa 59       	subi	r26, 0x9A	; 154
    27c2:	bf 4f       	sbci	r27, 0xFF	; 255
    27c4:	fe 01       	movw	r30, r28
    27c6:	ea 59       	subi	r30, 0x9A	; 154
    27c8:	ff 4f       	sbci	r31, 0xFF	; 255
    27ca:	80 81       	ld	r24, Z
    27cc:	91 81       	ldd	r25, Z+1	; 0x01
    27ce:	01 97       	sbiw	r24, 0x01	; 1
    27d0:	11 96       	adiw	r26, 0x01	; 1
    27d2:	9c 93       	st	X, r25
    27d4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27d6:	fe 01       	movw	r30, r28
    27d8:	ea 59       	subi	r30, 0x9A	; 154
    27da:	ff 4f       	sbci	r31, 0xFF	; 255
    27dc:	80 81       	ld	r24, Z
    27de:	91 81       	ldd	r25, Z+1	; 0x01
    27e0:	00 97       	sbiw	r24, 0x00	; 0
    27e2:	d1 f6       	brne	.-76     	; 0x2798 <LCD_displayCharacter+0x67a>
    27e4:	4b c0       	rjmp	.+150    	; 0x287c <LCD_displayCharacter+0x75e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27e6:	8e 01       	movw	r16, r28
    27e8:	0a 59       	subi	r16, 0x9A	; 154
    27ea:	1f 4f       	sbci	r17, 0xFF	; 255
    27ec:	fe 01       	movw	r30, r28
    27ee:	e8 59       	subi	r30, 0x98	; 152
    27f0:	ff 4f       	sbci	r31, 0xFF	; 255
    27f2:	60 81       	ld	r22, Z
    27f4:	71 81       	ldd	r23, Z+1	; 0x01
    27f6:	82 81       	ldd	r24, Z+2	; 0x02
    27f8:	93 81       	ldd	r25, Z+3	; 0x03
    27fa:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    27fe:	dc 01       	movw	r26, r24
    2800:	cb 01       	movw	r24, r22
    2802:	f8 01       	movw	r30, r16
    2804:	91 83       	std	Z+1, r25	; 0x01
    2806:	80 83       	st	Z, r24
    2808:	de 01       	movw	r26, r28
    280a:	ae 59       	subi	r26, 0x9E	; 158
    280c:	bf 4f       	sbci	r27, 0xFF	; 255
    280e:	fe 01       	movw	r30, r28
    2810:	ea 59       	subi	r30, 0x9A	; 154
    2812:	ff 4f       	sbci	r31, 0xFF	; 255
    2814:	80 81       	ld	r24, Z
    2816:	91 81       	ldd	r25, Z+1	; 0x01
    2818:	11 96       	adiw	r26, 0x01	; 1
    281a:	9c 93       	st	X, r25
    281c:	8e 93       	st	-X, r24
    281e:	fe 01       	movw	r30, r28
    2820:	ee 59       	subi	r30, 0x9E	; 158
    2822:	ff 4f       	sbci	r31, 0xFF	; 255
    2824:	80 81       	ld	r24, Z
    2826:	91 81       	ldd	r25, Z+1	; 0x01
    2828:	01 97       	sbiw	r24, 0x01	; 1
    282a:	f1 f7       	brne	.-4      	; 0x2828 <LCD_displayCharacter+0x70a>
    282c:	fe 01       	movw	r30, r28
    282e:	ee 59       	subi	r30, 0x9E	; 158
    2830:	ff 4f       	sbci	r31, 0xFF	; 255
    2832:	91 83       	std	Z+1, r25	; 0x01
    2834:	80 83       	st	Z, r24
    2836:	22 c0       	rjmp	.+68     	; 0x287c <LCD_displayCharacter+0x75e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2838:	8e 01       	movw	r16, r28
    283a:	00 59       	subi	r16, 0x90	; 144
    283c:	1f 4f       	sbci	r17, 0xFF	; 255
    283e:	fe 01       	movw	r30, r28
    2840:	ef 58       	subi	r30, 0x8F	; 143
    2842:	ff 4f       	sbci	r31, 0xFF	; 255
    2844:	60 81       	ld	r22, Z
    2846:	71 81       	ldd	r23, Z+1	; 0x01
    2848:	82 81       	ldd	r24, Z+2	; 0x02
    284a:	93 81       	ldd	r25, Z+3	; 0x03
    284c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2850:	dc 01       	movw	r26, r24
    2852:	cb 01       	movw	r24, r22
    2854:	f8 01       	movw	r30, r16
    2856:	80 83       	st	Z, r24
    2858:	de 01       	movw	r26, r28
    285a:	af 59       	subi	r26, 0x9F	; 159
    285c:	bf 4f       	sbci	r27, 0xFF	; 255
    285e:	fe 01       	movw	r30, r28
    2860:	e0 59       	subi	r30, 0x90	; 144
    2862:	ff 4f       	sbci	r31, 0xFF	; 255
    2864:	80 81       	ld	r24, Z
    2866:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2868:	fe 01       	movw	r30, r28
    286a:	ef 59       	subi	r30, 0x9F	; 159
    286c:	ff 4f       	sbci	r31, 0xFF	; 255
    286e:	80 81       	ld	r24, Z
    2870:	8a 95       	dec	r24
    2872:	f1 f7       	brne	.-4      	; 0x2870 <LCD_displayCharacter+0x752>
    2874:	fe 01       	movw	r30, r28
    2876:	ef 59       	subi	r30, 0x9F	; 159
    2878:	ff 4f       	sbci	r31, 0xFF	; 255
    287a:	80 83       	st	Z, r24
			_delay_us(100); /* delay for processing Tdsw = 100ns */
				CLEAR_BIT(LCD_PORT,EN); /* disable LCD E=0 */
    287c:	a5 e3       	ldi	r26, 0x35	; 53
    287e:	b0 e0       	ldi	r27, 0x00	; 0
    2880:	e5 e3       	ldi	r30, 0x35	; 53
    2882:	f0 e0       	ldi	r31, 0x00	; 0
    2884:	80 81       	ld	r24, Z
    2886:	8b 7f       	andi	r24, 0xFB	; 251
    2888:	8c 93       	st	X, r24
    288a:	fe 01       	movw	r30, r28
    288c:	e3 5a       	subi	r30, 0xA3	; 163
    288e:	ff 4f       	sbci	r31, 0xFF	; 255
    2890:	80 e0       	ldi	r24, 0x00	; 0
    2892:	90 e0       	ldi	r25, 0x00	; 0
    2894:	a8 ec       	ldi	r26, 0xC8	; 200
    2896:	b2 e4       	ldi	r27, 0x42	; 66
    2898:	80 83       	st	Z, r24
    289a:	91 83       	std	Z+1, r25	; 0x01
    289c:	a2 83       	std	Z+2, r26	; 0x02
    289e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    28a0:	8e 01       	movw	r16, r28
    28a2:	07 5a       	subi	r16, 0xA7	; 167
    28a4:	1f 4f       	sbci	r17, 0xFF	; 255
    28a6:	fe 01       	movw	r30, r28
    28a8:	e3 5a       	subi	r30, 0xA3	; 163
    28aa:	ff 4f       	sbci	r31, 0xFF	; 255
    28ac:	60 81       	ld	r22, Z
    28ae:	71 81       	ldd	r23, Z+1	; 0x01
    28b0:	82 81       	ldd	r24, Z+2	; 0x02
    28b2:	93 81       	ldd	r25, Z+3	; 0x03
    28b4:	2b ea       	ldi	r18, 0xAB	; 171
    28b6:	3a ea       	ldi	r19, 0xAA	; 170
    28b8:	4a ea       	ldi	r20, 0xAA	; 170
    28ba:	5e e3       	ldi	r21, 0x3E	; 62
    28bc:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    28c0:	dc 01       	movw	r26, r24
    28c2:	cb 01       	movw	r24, r22
    28c4:	f8 01       	movw	r30, r16
    28c6:	80 83       	st	Z, r24
    28c8:	91 83       	std	Z+1, r25	; 0x01
    28ca:	a2 83       	std	Z+2, r26	; 0x02
    28cc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    28ce:	fe 01       	movw	r30, r28
    28d0:	e7 5a       	subi	r30, 0xA7	; 167
    28d2:	ff 4f       	sbci	r31, 0xFF	; 255
    28d4:	60 81       	ld	r22, Z
    28d6:	71 81       	ldd	r23, Z+1	; 0x01
    28d8:	82 81       	ldd	r24, Z+2	; 0x02
    28da:	93 81       	ldd	r25, Z+3	; 0x03
    28dc:	20 e0       	ldi	r18, 0x00	; 0
    28de:	30 e0       	ldi	r19, 0x00	; 0
    28e0:	40 e8       	ldi	r20, 0x80	; 128
    28e2:	5f e3       	ldi	r21, 0x3F	; 63
    28e4:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    28e8:	88 23       	and	r24, r24
    28ea:	34 f4       	brge	.+12     	; 0x28f8 <LCD_displayCharacter+0x7da>
		__ticks = 1;
    28ec:	fe 01       	movw	r30, r28
    28ee:	e8 5a       	subi	r30, 0xA8	; 168
    28f0:	ff 4f       	sbci	r31, 0xFF	; 255
    28f2:	81 e0       	ldi	r24, 0x01	; 1
    28f4:	80 83       	st	Z, r24
    28f6:	e0 c0       	rjmp	.+448    	; 0x2ab8 <LCD_displayCharacter+0x99a>
	else if (__tmp > 255)
    28f8:	fe 01       	movw	r30, r28
    28fa:	e7 5a       	subi	r30, 0xA7	; 167
    28fc:	ff 4f       	sbci	r31, 0xFF	; 255
    28fe:	60 81       	ld	r22, Z
    2900:	71 81       	ldd	r23, Z+1	; 0x01
    2902:	82 81       	ldd	r24, Z+2	; 0x02
    2904:	93 81       	ldd	r25, Z+3	; 0x03
    2906:	20 e0       	ldi	r18, 0x00	; 0
    2908:	30 e0       	ldi	r19, 0x00	; 0
    290a:	4f e7       	ldi	r20, 0x7F	; 127
    290c:	53 e4       	ldi	r21, 0x43	; 67
    290e:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2912:	18 16       	cp	r1, r24
    2914:	0c f0       	brlt	.+2      	; 0x2918 <LCD_displayCharacter+0x7fa>
    2916:	c0 c0       	rjmp	.+384    	; 0x2a98 <LCD_displayCharacter+0x97a>
	{
		_delay_ms(__us / 1000.0);
    2918:	fe 01       	movw	r30, r28
    291a:	e3 5a       	subi	r30, 0xA3	; 163
    291c:	ff 4f       	sbci	r31, 0xFF	; 255
    291e:	60 81       	ld	r22, Z
    2920:	71 81       	ldd	r23, Z+1	; 0x01
    2922:	82 81       	ldd	r24, Z+2	; 0x02
    2924:	93 81       	ldd	r25, Z+3	; 0x03
    2926:	20 e0       	ldi	r18, 0x00	; 0
    2928:	30 e0       	ldi	r19, 0x00	; 0
    292a:	4a e7       	ldi	r20, 0x7A	; 122
    292c:	54 e4       	ldi	r21, 0x44	; 68
    292e:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    2932:	dc 01       	movw	r26, r24
    2934:	cb 01       	movw	r24, r22
    2936:	fe 01       	movw	r30, r28
    2938:	ec 5a       	subi	r30, 0xAC	; 172
    293a:	ff 4f       	sbci	r31, 0xFF	; 255
    293c:	80 83       	st	Z, r24
    293e:	91 83       	std	Z+1, r25	; 0x01
    2940:	a2 83       	std	Z+2, r26	; 0x02
    2942:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2944:	8e 01       	movw	r16, r28
    2946:	00 5b       	subi	r16, 0xB0	; 176
    2948:	1f 4f       	sbci	r17, 0xFF	; 255
    294a:	fe 01       	movw	r30, r28
    294c:	ec 5a       	subi	r30, 0xAC	; 172
    294e:	ff 4f       	sbci	r31, 0xFF	; 255
    2950:	60 81       	ld	r22, Z
    2952:	71 81       	ldd	r23, Z+1	; 0x01
    2954:	82 81       	ldd	r24, Z+2	; 0x02
    2956:	93 81       	ldd	r25, Z+3	; 0x03
    2958:	20 e0       	ldi	r18, 0x00	; 0
    295a:	30 e0       	ldi	r19, 0x00	; 0
    295c:	4a e7       	ldi	r20, 0x7A	; 122
    295e:	53 e4       	ldi	r21, 0x43	; 67
    2960:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2964:	dc 01       	movw	r26, r24
    2966:	cb 01       	movw	r24, r22
    2968:	f8 01       	movw	r30, r16
    296a:	80 83       	st	Z, r24
    296c:	91 83       	std	Z+1, r25	; 0x01
    296e:	a2 83       	std	Z+2, r26	; 0x02
    2970:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2972:	fe 01       	movw	r30, r28
    2974:	e0 5b       	subi	r30, 0xB0	; 176
    2976:	ff 4f       	sbci	r31, 0xFF	; 255
    2978:	60 81       	ld	r22, Z
    297a:	71 81       	ldd	r23, Z+1	; 0x01
    297c:	82 81       	ldd	r24, Z+2	; 0x02
    297e:	93 81       	ldd	r25, Z+3	; 0x03
    2980:	20 e0       	ldi	r18, 0x00	; 0
    2982:	30 e0       	ldi	r19, 0x00	; 0
    2984:	40 e8       	ldi	r20, 0x80	; 128
    2986:	5f e3       	ldi	r21, 0x3F	; 63
    2988:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    298c:	88 23       	and	r24, r24
    298e:	44 f4       	brge	.+16     	; 0x29a0 <LCD_displayCharacter+0x882>
		__ticks = 1;
    2990:	fe 01       	movw	r30, r28
    2992:	e2 5b       	subi	r30, 0xB2	; 178
    2994:	ff 4f       	sbci	r31, 0xFF	; 255
    2996:	81 e0       	ldi	r24, 0x01	; 1
    2998:	90 e0       	ldi	r25, 0x00	; 0
    299a:	91 83       	std	Z+1, r25	; 0x01
    299c:	80 83       	st	Z, r24
    299e:	64 c0       	rjmp	.+200    	; 0x2a68 <LCD_displayCharacter+0x94a>
	else if (__tmp > 65535)
    29a0:	fe 01       	movw	r30, r28
    29a2:	e0 5b       	subi	r30, 0xB0	; 176
    29a4:	ff 4f       	sbci	r31, 0xFF	; 255
    29a6:	60 81       	ld	r22, Z
    29a8:	71 81       	ldd	r23, Z+1	; 0x01
    29aa:	82 81       	ldd	r24, Z+2	; 0x02
    29ac:	93 81       	ldd	r25, Z+3	; 0x03
    29ae:	20 e0       	ldi	r18, 0x00	; 0
    29b0:	3f ef       	ldi	r19, 0xFF	; 255
    29b2:	4f e7       	ldi	r20, 0x7F	; 127
    29b4:	57 e4       	ldi	r21, 0x47	; 71
    29b6:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    29ba:	18 16       	cp	r1, r24
    29bc:	0c f0       	brlt	.+2      	; 0x29c0 <LCD_displayCharacter+0x8a2>
    29be:	43 c0       	rjmp	.+134    	; 0x2a46 <LCD_displayCharacter+0x928>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29c0:	fe 01       	movw	r30, r28
    29c2:	ec 5a       	subi	r30, 0xAC	; 172
    29c4:	ff 4f       	sbci	r31, 0xFF	; 255
    29c6:	60 81       	ld	r22, Z
    29c8:	71 81       	ldd	r23, Z+1	; 0x01
    29ca:	82 81       	ldd	r24, Z+2	; 0x02
    29cc:	93 81       	ldd	r25, Z+3	; 0x03
    29ce:	20 e0       	ldi	r18, 0x00	; 0
    29d0:	30 e0       	ldi	r19, 0x00	; 0
    29d2:	40 e2       	ldi	r20, 0x20	; 32
    29d4:	51 e4       	ldi	r21, 0x41	; 65
    29d6:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    29da:	dc 01       	movw	r26, r24
    29dc:	cb 01       	movw	r24, r22
    29de:	8e 01       	movw	r16, r28
    29e0:	02 5b       	subi	r16, 0xB2	; 178
    29e2:	1f 4f       	sbci	r17, 0xFF	; 255
    29e4:	bc 01       	movw	r22, r24
    29e6:	cd 01       	movw	r24, r26
    29e8:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    29ec:	dc 01       	movw	r26, r24
    29ee:	cb 01       	movw	r24, r22
    29f0:	f8 01       	movw	r30, r16
    29f2:	91 83       	std	Z+1, r25	; 0x01
    29f4:	80 83       	st	Z, r24
    29f6:	1f c0       	rjmp	.+62     	; 0x2a36 <LCD_displayCharacter+0x918>
    29f8:	fe 01       	movw	r30, r28
    29fa:	e4 5b       	subi	r30, 0xB4	; 180
    29fc:	ff 4f       	sbci	r31, 0xFF	; 255
    29fe:	89 e1       	ldi	r24, 0x19	; 25
    2a00:	90 e0       	ldi	r25, 0x00	; 0
    2a02:	91 83       	std	Z+1, r25	; 0x01
    2a04:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2a06:	fe 01       	movw	r30, r28
    2a08:	e4 5b       	subi	r30, 0xB4	; 180
    2a0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a0c:	80 81       	ld	r24, Z
    2a0e:	91 81       	ldd	r25, Z+1	; 0x01
    2a10:	01 97       	sbiw	r24, 0x01	; 1
    2a12:	f1 f7       	brne	.-4      	; 0x2a10 <LCD_displayCharacter+0x8f2>
    2a14:	fe 01       	movw	r30, r28
    2a16:	e4 5b       	subi	r30, 0xB4	; 180
    2a18:	ff 4f       	sbci	r31, 0xFF	; 255
    2a1a:	91 83       	std	Z+1, r25	; 0x01
    2a1c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a1e:	de 01       	movw	r26, r28
    2a20:	a2 5b       	subi	r26, 0xB2	; 178
    2a22:	bf 4f       	sbci	r27, 0xFF	; 255
    2a24:	fe 01       	movw	r30, r28
    2a26:	e2 5b       	subi	r30, 0xB2	; 178
    2a28:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2a:	80 81       	ld	r24, Z
    2a2c:	91 81       	ldd	r25, Z+1	; 0x01
    2a2e:	01 97       	sbiw	r24, 0x01	; 1
    2a30:	11 96       	adiw	r26, 0x01	; 1
    2a32:	9c 93       	st	X, r25
    2a34:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a36:	fe 01       	movw	r30, r28
    2a38:	e2 5b       	subi	r30, 0xB2	; 178
    2a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3c:	80 81       	ld	r24, Z
    2a3e:	91 81       	ldd	r25, Z+1	; 0x01
    2a40:	00 97       	sbiw	r24, 0x00	; 0
    2a42:	d1 f6       	brne	.-76     	; 0x29f8 <LCD_displayCharacter+0x8da>
    2a44:	4b c0       	rjmp	.+150    	; 0x2adc <LCD_displayCharacter+0x9be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a46:	8e 01       	movw	r16, r28
    2a48:	02 5b       	subi	r16, 0xB2	; 178
    2a4a:	1f 4f       	sbci	r17, 0xFF	; 255
    2a4c:	fe 01       	movw	r30, r28
    2a4e:	e0 5b       	subi	r30, 0xB0	; 176
    2a50:	ff 4f       	sbci	r31, 0xFF	; 255
    2a52:	60 81       	ld	r22, Z
    2a54:	71 81       	ldd	r23, Z+1	; 0x01
    2a56:	82 81       	ldd	r24, Z+2	; 0x02
    2a58:	93 81       	ldd	r25, Z+3	; 0x03
    2a5a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2a5e:	dc 01       	movw	r26, r24
    2a60:	cb 01       	movw	r24, r22
    2a62:	f8 01       	movw	r30, r16
    2a64:	91 83       	std	Z+1, r25	; 0x01
    2a66:	80 83       	st	Z, r24
    2a68:	de 01       	movw	r26, r28
    2a6a:	a6 5b       	subi	r26, 0xB6	; 182
    2a6c:	bf 4f       	sbci	r27, 0xFF	; 255
    2a6e:	fe 01       	movw	r30, r28
    2a70:	e2 5b       	subi	r30, 0xB2	; 178
    2a72:	ff 4f       	sbci	r31, 0xFF	; 255
    2a74:	80 81       	ld	r24, Z
    2a76:	91 81       	ldd	r25, Z+1	; 0x01
    2a78:	11 96       	adiw	r26, 0x01	; 1
    2a7a:	9c 93       	st	X, r25
    2a7c:	8e 93       	st	-X, r24
    2a7e:	fe 01       	movw	r30, r28
    2a80:	e6 5b       	subi	r30, 0xB6	; 182
    2a82:	ff 4f       	sbci	r31, 0xFF	; 255
    2a84:	80 81       	ld	r24, Z
    2a86:	91 81       	ldd	r25, Z+1	; 0x01
    2a88:	01 97       	sbiw	r24, 0x01	; 1
    2a8a:	f1 f7       	brne	.-4      	; 0x2a88 <LCD_displayCharacter+0x96a>
    2a8c:	fe 01       	movw	r30, r28
    2a8e:	e6 5b       	subi	r30, 0xB6	; 182
    2a90:	ff 4f       	sbci	r31, 0xFF	; 255
    2a92:	91 83       	std	Z+1, r25	; 0x01
    2a94:	80 83       	st	Z, r24
    2a96:	22 c0       	rjmp	.+68     	; 0x2adc <LCD_displayCharacter+0x9be>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2a98:	8e 01       	movw	r16, r28
    2a9a:	08 5a       	subi	r16, 0xA8	; 168
    2a9c:	1f 4f       	sbci	r17, 0xFF	; 255
    2a9e:	fe 01       	movw	r30, r28
    2aa0:	e7 5a       	subi	r30, 0xA7	; 167
    2aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa4:	60 81       	ld	r22, Z
    2aa6:	71 81       	ldd	r23, Z+1	; 0x01
    2aa8:	82 81       	ldd	r24, Z+2	; 0x02
    2aaa:	93 81       	ldd	r25, Z+3	; 0x03
    2aac:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2ab0:	dc 01       	movw	r26, r24
    2ab2:	cb 01       	movw	r24, r22
    2ab4:	f8 01       	movw	r30, r16
    2ab6:	80 83       	st	Z, r24
    2ab8:	de 01       	movw	r26, r28
    2aba:	a7 5b       	subi	r26, 0xB7	; 183
    2abc:	bf 4f       	sbci	r27, 0xFF	; 255
    2abe:	fe 01       	movw	r30, r28
    2ac0:	e8 5a       	subi	r30, 0xA8	; 168
    2ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac4:	80 81       	ld	r24, Z
    2ac6:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2ac8:	fe 01       	movw	r30, r28
    2aca:	e7 5b       	subi	r30, 0xB7	; 183
    2acc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ace:	80 81       	ld	r24, Z
    2ad0:	8a 95       	dec	r24
    2ad2:	f1 f7       	brne	.-4      	; 0x2ad0 <LCD_displayCharacter+0x9b2>
    2ad4:	fe 01       	movw	r30, r28
    2ad6:	e7 5b       	subi	r30, 0xB7	; 183
    2ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    2ada:	80 83       	st	Z, r24
				_delay_us(100); /* delay for processing Th = 13ns */
				SET_BIT(LCD_PORT,EN); /* Enable LCD E=1 */
    2adc:	a5 e3       	ldi	r26, 0x35	; 53
    2ade:	b0 e0       	ldi	r27, 0x00	; 0
    2ae0:	e5 e3       	ldi	r30, 0x35	; 53
    2ae2:	f0 e0       	ldi	r31, 0x00	; 0
    2ae4:	80 81       	ld	r24, Z
    2ae6:	84 60       	ori	r24, 0x04	; 4
    2ae8:	8c 93       	st	X, r24
    2aea:	fe 01       	movw	r30, r28
    2aec:	eb 5b       	subi	r30, 0xBB	; 187
    2aee:	ff 4f       	sbci	r31, 0xFF	; 255
    2af0:	80 e0       	ldi	r24, 0x00	; 0
    2af2:	90 e0       	ldi	r25, 0x00	; 0
    2af4:	a8 ec       	ldi	r26, 0xC8	; 200
    2af6:	b2 e4       	ldi	r27, 0x42	; 66
    2af8:	80 83       	st	Z, r24
    2afa:	91 83       	std	Z+1, r25	; 0x01
    2afc:	a2 83       	std	Z+2, r26	; 0x02
    2afe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2b00:	8e 01       	movw	r16, r28
    2b02:	0f 5b       	subi	r16, 0xBF	; 191
    2b04:	1f 4f       	sbci	r17, 0xFF	; 255
    2b06:	fe 01       	movw	r30, r28
    2b08:	eb 5b       	subi	r30, 0xBB	; 187
    2b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0c:	60 81       	ld	r22, Z
    2b0e:	71 81       	ldd	r23, Z+1	; 0x01
    2b10:	82 81       	ldd	r24, Z+2	; 0x02
    2b12:	93 81       	ldd	r25, Z+3	; 0x03
    2b14:	2b ea       	ldi	r18, 0xAB	; 171
    2b16:	3a ea       	ldi	r19, 0xAA	; 170
    2b18:	4a ea       	ldi	r20, 0xAA	; 170
    2b1a:	5e e3       	ldi	r21, 0x3E	; 62
    2b1c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2b20:	dc 01       	movw	r26, r24
    2b22:	cb 01       	movw	r24, r22
    2b24:	f8 01       	movw	r30, r16
    2b26:	80 83       	st	Z, r24
    2b28:	91 83       	std	Z+1, r25	; 0x01
    2b2a:	a2 83       	std	Z+2, r26	; 0x02
    2b2c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b2e:	fe 01       	movw	r30, r28
    2b30:	ef 5b       	subi	r30, 0xBF	; 191
    2b32:	ff 4f       	sbci	r31, 0xFF	; 255
    2b34:	60 81       	ld	r22, Z
    2b36:	71 81       	ldd	r23, Z+1	; 0x01
    2b38:	82 81       	ldd	r24, Z+2	; 0x02
    2b3a:	93 81       	ldd	r25, Z+3	; 0x03
    2b3c:	20 e0       	ldi	r18, 0x00	; 0
    2b3e:	30 e0       	ldi	r19, 0x00	; 0
    2b40:	40 e8       	ldi	r20, 0x80	; 128
    2b42:	5f e3       	ldi	r21, 0x3F	; 63
    2b44:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2b48:	88 23       	and	r24, r24
    2b4a:	34 f4       	brge	.+12     	; 0x2b58 <LCD_displayCharacter+0xa3a>
		__ticks = 1;
    2b4c:	81 e0       	ldi	r24, 0x01	; 1
    2b4e:	fe 01       	movw	r30, r28
    2b50:	e0 5c       	subi	r30, 0xC0	; 192
    2b52:	ff 4f       	sbci	r31, 0xFF	; 255
    2b54:	80 83       	st	Z, r24
    2b56:	9d c0       	rjmp	.+314    	; 0x2c92 <LCD_displayCharacter+0xb74>
	else if (__tmp > 255)
    2b58:	fe 01       	movw	r30, r28
    2b5a:	ef 5b       	subi	r30, 0xBF	; 191
    2b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b5e:	60 81       	ld	r22, Z
    2b60:	71 81       	ldd	r23, Z+1	; 0x01
    2b62:	82 81       	ldd	r24, Z+2	; 0x02
    2b64:	93 81       	ldd	r25, Z+3	; 0x03
    2b66:	20 e0       	ldi	r18, 0x00	; 0
    2b68:	30 e0       	ldi	r19, 0x00	; 0
    2b6a:	4f e7       	ldi	r20, 0x7F	; 127
    2b6c:	53 e4       	ldi	r21, 0x43	; 67
    2b6e:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2b72:	18 16       	cp	r1, r24
    2b74:	0c f0       	brlt	.+2      	; 0x2b78 <LCD_displayCharacter+0xa5a>
    2b76:	7e c0       	rjmp	.+252    	; 0x2c74 <LCD_displayCharacter+0xb56>
	{
		_delay_ms(__us / 1000.0);
    2b78:	fe 01       	movw	r30, r28
    2b7a:	eb 5b       	subi	r30, 0xBB	; 187
    2b7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7e:	60 81       	ld	r22, Z
    2b80:	71 81       	ldd	r23, Z+1	; 0x01
    2b82:	82 81       	ldd	r24, Z+2	; 0x02
    2b84:	93 81       	ldd	r25, Z+3	; 0x03
    2b86:	20 e0       	ldi	r18, 0x00	; 0
    2b88:	30 e0       	ldi	r19, 0x00	; 0
    2b8a:	4a e7       	ldi	r20, 0x7A	; 122
    2b8c:	54 e4       	ldi	r21, 0x44	; 68
    2b8e:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    2b92:	dc 01       	movw	r26, r24
    2b94:	cb 01       	movw	r24, r22
    2b96:	8c af       	std	Y+60, r24	; 0x3c
    2b98:	9d af       	std	Y+61, r25	; 0x3d
    2b9a:	ae af       	std	Y+62, r26	; 0x3e
    2b9c:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b9e:	6c ad       	ldd	r22, Y+60	; 0x3c
    2ba0:	7d ad       	ldd	r23, Y+61	; 0x3d
    2ba2:	8e ad       	ldd	r24, Y+62	; 0x3e
    2ba4:	9f ad       	ldd	r25, Y+63	; 0x3f
    2ba6:	20 e0       	ldi	r18, 0x00	; 0
    2ba8:	30 e0       	ldi	r19, 0x00	; 0
    2baa:	4a e7       	ldi	r20, 0x7A	; 122
    2bac:	53 e4       	ldi	r21, 0x43	; 67
    2bae:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2bb2:	dc 01       	movw	r26, r24
    2bb4:	cb 01       	movw	r24, r22
    2bb6:	88 af       	std	Y+56, r24	; 0x38
    2bb8:	99 af       	std	Y+57, r25	; 0x39
    2bba:	aa af       	std	Y+58, r26	; 0x3a
    2bbc:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    2bbe:	68 ad       	ldd	r22, Y+56	; 0x38
    2bc0:	79 ad       	ldd	r23, Y+57	; 0x39
    2bc2:	8a ad       	ldd	r24, Y+58	; 0x3a
    2bc4:	9b ad       	ldd	r25, Y+59	; 0x3b
    2bc6:	20 e0       	ldi	r18, 0x00	; 0
    2bc8:	30 e0       	ldi	r19, 0x00	; 0
    2bca:	40 e8       	ldi	r20, 0x80	; 128
    2bcc:	5f e3       	ldi	r21, 0x3F	; 63
    2bce:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2bd2:	88 23       	and	r24, r24
    2bd4:	2c f4       	brge	.+10     	; 0x2be0 <LCD_displayCharacter+0xac2>
		__ticks = 1;
    2bd6:	81 e0       	ldi	r24, 0x01	; 1
    2bd8:	90 e0       	ldi	r25, 0x00	; 0
    2bda:	9f ab       	std	Y+55, r25	; 0x37
    2bdc:	8e ab       	std	Y+54, r24	; 0x36
    2bde:	3f c0       	rjmp	.+126    	; 0x2c5e <LCD_displayCharacter+0xb40>
	else if (__tmp > 65535)
    2be0:	68 ad       	ldd	r22, Y+56	; 0x38
    2be2:	79 ad       	ldd	r23, Y+57	; 0x39
    2be4:	8a ad       	ldd	r24, Y+58	; 0x3a
    2be6:	9b ad       	ldd	r25, Y+59	; 0x3b
    2be8:	20 e0       	ldi	r18, 0x00	; 0
    2bea:	3f ef       	ldi	r19, 0xFF	; 255
    2bec:	4f e7       	ldi	r20, 0x7F	; 127
    2bee:	57 e4       	ldi	r21, 0x47	; 71
    2bf0:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2bf4:	18 16       	cp	r1, r24
    2bf6:	4c f5       	brge	.+82     	; 0x2c4a <LCD_displayCharacter+0xb2c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bf8:	6c ad       	ldd	r22, Y+60	; 0x3c
    2bfa:	7d ad       	ldd	r23, Y+61	; 0x3d
    2bfc:	8e ad       	ldd	r24, Y+62	; 0x3e
    2bfe:	9f ad       	ldd	r25, Y+63	; 0x3f
    2c00:	20 e0       	ldi	r18, 0x00	; 0
    2c02:	30 e0       	ldi	r19, 0x00	; 0
    2c04:	40 e2       	ldi	r20, 0x20	; 32
    2c06:	51 e4       	ldi	r21, 0x41	; 65
    2c08:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2c0c:	dc 01       	movw	r26, r24
    2c0e:	cb 01       	movw	r24, r22
    2c10:	bc 01       	movw	r22, r24
    2c12:	cd 01       	movw	r24, r26
    2c14:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2c18:	dc 01       	movw	r26, r24
    2c1a:	cb 01       	movw	r24, r22
    2c1c:	9f ab       	std	Y+55, r25	; 0x37
    2c1e:	8e ab       	std	Y+54, r24	; 0x36
    2c20:	0f c0       	rjmp	.+30     	; 0x2c40 <LCD_displayCharacter+0xb22>
    2c22:	89 e1       	ldi	r24, 0x19	; 25
    2c24:	90 e0       	ldi	r25, 0x00	; 0
    2c26:	9d ab       	std	Y+53, r25	; 0x35
    2c28:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2c2a:	8c a9       	ldd	r24, Y+52	; 0x34
    2c2c:	9d a9       	ldd	r25, Y+53	; 0x35
    2c2e:	01 97       	sbiw	r24, 0x01	; 1
    2c30:	f1 f7       	brne	.-4      	; 0x2c2e <LCD_displayCharacter+0xb10>
    2c32:	9d ab       	std	Y+53, r25	; 0x35
    2c34:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c36:	8e a9       	ldd	r24, Y+54	; 0x36
    2c38:	9f a9       	ldd	r25, Y+55	; 0x37
    2c3a:	01 97       	sbiw	r24, 0x01	; 1
    2c3c:	9f ab       	std	Y+55, r25	; 0x37
    2c3e:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c40:	8e a9       	ldd	r24, Y+54	; 0x36
    2c42:	9f a9       	ldd	r25, Y+55	; 0x37
    2c44:	00 97       	sbiw	r24, 0x00	; 0
    2c46:	69 f7       	brne	.-38     	; 0x2c22 <LCD_displayCharacter+0xb04>
    2c48:	2d c0       	rjmp	.+90     	; 0x2ca4 <LCD_displayCharacter+0xb86>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c4a:	68 ad       	ldd	r22, Y+56	; 0x38
    2c4c:	79 ad       	ldd	r23, Y+57	; 0x39
    2c4e:	8a ad       	ldd	r24, Y+58	; 0x3a
    2c50:	9b ad       	ldd	r25, Y+59	; 0x3b
    2c52:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2c56:	dc 01       	movw	r26, r24
    2c58:	cb 01       	movw	r24, r22
    2c5a:	9f ab       	std	Y+55, r25	; 0x37
    2c5c:	8e ab       	std	Y+54, r24	; 0x36
    2c5e:	8e a9       	ldd	r24, Y+54	; 0x36
    2c60:	9f a9       	ldd	r25, Y+55	; 0x37
    2c62:	9b ab       	std	Y+51, r25	; 0x33
    2c64:	8a ab       	std	Y+50, r24	; 0x32
    2c66:	8a a9       	ldd	r24, Y+50	; 0x32
    2c68:	9b a9       	ldd	r25, Y+51	; 0x33
    2c6a:	01 97       	sbiw	r24, 0x01	; 1
    2c6c:	f1 f7       	brne	.-4      	; 0x2c6a <LCD_displayCharacter+0xb4c>
    2c6e:	9b ab       	std	Y+51, r25	; 0x33
    2c70:	8a ab       	std	Y+50, r24	; 0x32
    2c72:	18 c0       	rjmp	.+48     	; 0x2ca4 <LCD_displayCharacter+0xb86>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2c74:	fe 01       	movw	r30, r28
    2c76:	ef 5b       	subi	r30, 0xBF	; 191
    2c78:	ff 4f       	sbci	r31, 0xFF	; 255
    2c7a:	60 81       	ld	r22, Z
    2c7c:	71 81       	ldd	r23, Z+1	; 0x01
    2c7e:	82 81       	ldd	r24, Z+2	; 0x02
    2c80:	93 81       	ldd	r25, Z+3	; 0x03
    2c82:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2c86:	dc 01       	movw	r26, r24
    2c88:	cb 01       	movw	r24, r22
    2c8a:	fe 01       	movw	r30, r28
    2c8c:	e0 5c       	subi	r30, 0xC0	; 192
    2c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c90:	80 83       	st	Z, r24
    2c92:	fe 01       	movw	r30, r28
    2c94:	e0 5c       	subi	r30, 0xC0	; 192
    2c96:	ff 4f       	sbci	r31, 0xFF	; 255
    2c98:	80 81       	ld	r24, Z
    2c9a:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2c9c:	89 a9       	ldd	r24, Y+49	; 0x31
    2c9e:	8a 95       	dec	r24
    2ca0:	f1 f7       	brne	.-4      	; 0x2c9e <LCD_displayCharacter+0xb80>
    2ca2:	89 ab       	std	Y+49, r24	; 0x31
				_delay_us(100); /* delay for processing Tpw - Tdws = 190ns */
				LCD_PORT = (LCD_PORT & 0x0F) | ((data & 0x0F) << 4);
    2ca4:	a5 e3       	ldi	r26, 0x35	; 53
    2ca6:	b0 e0       	ldi	r27, 0x00	; 0
    2ca8:	e5 e3       	ldi	r30, 0x35	; 53
    2caa:	f0 e0       	ldi	r31, 0x00	; 0
    2cac:	80 81       	ld	r24, Z
    2cae:	28 2f       	mov	r18, r24
    2cb0:	2f 70       	andi	r18, 0x0F	; 15
    2cb2:	fe 01       	movw	r30, r28
    2cb4:	e7 55       	subi	r30, 0x57	; 87
    2cb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb8:	80 81       	ld	r24, Z
    2cba:	88 2f       	mov	r24, r24
    2cbc:	90 e0       	ldi	r25, 0x00	; 0
    2cbe:	82 95       	swap	r24
    2cc0:	92 95       	swap	r25
    2cc2:	90 7f       	andi	r25, 0xF0	; 240
    2cc4:	98 27       	eor	r25, r24
    2cc6:	80 7f       	andi	r24, 0xF0	; 240
    2cc8:	98 27       	eor	r25, r24
    2cca:	82 2b       	or	r24, r18
    2ccc:	8c 93       	st	X, r24
    2cce:	80 e0       	ldi	r24, 0x00	; 0
    2cd0:	90 e0       	ldi	r25, 0x00	; 0
    2cd2:	a8 ec       	ldi	r26, 0xC8	; 200
    2cd4:	b2 e4       	ldi	r27, 0x42	; 66
    2cd6:	8d a7       	std	Y+45, r24	; 0x2d
    2cd8:	9e a7       	std	Y+46, r25	; 0x2e
    2cda:	af a7       	std	Y+47, r26	; 0x2f
    2cdc:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2cde:	6d a5       	ldd	r22, Y+45	; 0x2d
    2ce0:	7e a5       	ldd	r23, Y+46	; 0x2e
    2ce2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ce4:	98 a9       	ldd	r25, Y+48	; 0x30
    2ce6:	2b ea       	ldi	r18, 0xAB	; 171
    2ce8:	3a ea       	ldi	r19, 0xAA	; 170
    2cea:	4a ea       	ldi	r20, 0xAA	; 170
    2cec:	5e e3       	ldi	r21, 0x3E	; 62
    2cee:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2cf2:	dc 01       	movw	r26, r24
    2cf4:	cb 01       	movw	r24, r22
    2cf6:	89 a7       	std	Y+41, r24	; 0x29
    2cf8:	9a a7       	std	Y+42, r25	; 0x2a
    2cfa:	ab a7       	std	Y+43, r26	; 0x2b
    2cfc:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2cfe:	69 a5       	ldd	r22, Y+41	; 0x29
    2d00:	7a a5       	ldd	r23, Y+42	; 0x2a
    2d02:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d04:	9c a5       	ldd	r25, Y+44	; 0x2c
    2d06:	20 e0       	ldi	r18, 0x00	; 0
    2d08:	30 e0       	ldi	r19, 0x00	; 0
    2d0a:	40 e8       	ldi	r20, 0x80	; 128
    2d0c:	5f e3       	ldi	r21, 0x3F	; 63
    2d0e:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2d12:	88 23       	and	r24, r24
    2d14:	1c f4       	brge	.+6      	; 0x2d1c <LCD_displayCharacter+0xbfe>
		__ticks = 1;
    2d16:	81 e0       	ldi	r24, 0x01	; 1
    2d18:	88 a7       	std	Y+40, r24	; 0x28
    2d1a:	91 c0       	rjmp	.+290    	; 0x2e3e <LCD_displayCharacter+0xd20>
	else if (__tmp > 255)
    2d1c:	69 a5       	ldd	r22, Y+41	; 0x29
    2d1e:	7a a5       	ldd	r23, Y+42	; 0x2a
    2d20:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d22:	9c a5       	ldd	r25, Y+44	; 0x2c
    2d24:	20 e0       	ldi	r18, 0x00	; 0
    2d26:	30 e0       	ldi	r19, 0x00	; 0
    2d28:	4f e7       	ldi	r20, 0x7F	; 127
    2d2a:	53 e4       	ldi	r21, 0x43	; 67
    2d2c:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2d30:	18 16       	cp	r1, r24
    2d32:	0c f0       	brlt	.+2      	; 0x2d36 <LCD_displayCharacter+0xc18>
    2d34:	7b c0       	rjmp	.+246    	; 0x2e2c <LCD_displayCharacter+0xd0e>
	{
		_delay_ms(__us / 1000.0);
    2d36:	6d a5       	ldd	r22, Y+45	; 0x2d
    2d38:	7e a5       	ldd	r23, Y+46	; 0x2e
    2d3a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d3c:	98 a9       	ldd	r25, Y+48	; 0x30
    2d3e:	20 e0       	ldi	r18, 0x00	; 0
    2d40:	30 e0       	ldi	r19, 0x00	; 0
    2d42:	4a e7       	ldi	r20, 0x7A	; 122
    2d44:	54 e4       	ldi	r21, 0x44	; 68
    2d46:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    2d4a:	dc 01       	movw	r26, r24
    2d4c:	cb 01       	movw	r24, r22
    2d4e:	8c a3       	std	Y+36, r24	; 0x24
    2d50:	9d a3       	std	Y+37, r25	; 0x25
    2d52:	ae a3       	std	Y+38, r26	; 0x26
    2d54:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d56:	6c a1       	ldd	r22, Y+36	; 0x24
    2d58:	7d a1       	ldd	r23, Y+37	; 0x25
    2d5a:	8e a1       	ldd	r24, Y+38	; 0x26
    2d5c:	9f a1       	ldd	r25, Y+39	; 0x27
    2d5e:	20 e0       	ldi	r18, 0x00	; 0
    2d60:	30 e0       	ldi	r19, 0x00	; 0
    2d62:	4a e7       	ldi	r20, 0x7A	; 122
    2d64:	53 e4       	ldi	r21, 0x43	; 67
    2d66:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2d6a:	dc 01       	movw	r26, r24
    2d6c:	cb 01       	movw	r24, r22
    2d6e:	88 a3       	std	Y+32, r24	; 0x20
    2d70:	99 a3       	std	Y+33, r25	; 0x21
    2d72:	aa a3       	std	Y+34, r26	; 0x22
    2d74:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2d76:	68 a1       	ldd	r22, Y+32	; 0x20
    2d78:	79 a1       	ldd	r23, Y+33	; 0x21
    2d7a:	8a a1       	ldd	r24, Y+34	; 0x22
    2d7c:	9b a1       	ldd	r25, Y+35	; 0x23
    2d7e:	20 e0       	ldi	r18, 0x00	; 0
    2d80:	30 e0       	ldi	r19, 0x00	; 0
    2d82:	40 e8       	ldi	r20, 0x80	; 128
    2d84:	5f e3       	ldi	r21, 0x3F	; 63
    2d86:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2d8a:	88 23       	and	r24, r24
    2d8c:	2c f4       	brge	.+10     	; 0x2d98 <LCD_displayCharacter+0xc7a>
		__ticks = 1;
    2d8e:	81 e0       	ldi	r24, 0x01	; 1
    2d90:	90 e0       	ldi	r25, 0x00	; 0
    2d92:	9f 8f       	std	Y+31, r25	; 0x1f
    2d94:	8e 8f       	std	Y+30, r24	; 0x1e
    2d96:	3f c0       	rjmp	.+126    	; 0x2e16 <LCD_displayCharacter+0xcf8>
	else if (__tmp > 65535)
    2d98:	68 a1       	ldd	r22, Y+32	; 0x20
    2d9a:	79 a1       	ldd	r23, Y+33	; 0x21
    2d9c:	8a a1       	ldd	r24, Y+34	; 0x22
    2d9e:	9b a1       	ldd	r25, Y+35	; 0x23
    2da0:	20 e0       	ldi	r18, 0x00	; 0
    2da2:	3f ef       	ldi	r19, 0xFF	; 255
    2da4:	4f e7       	ldi	r20, 0x7F	; 127
    2da6:	57 e4       	ldi	r21, 0x47	; 71
    2da8:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2dac:	18 16       	cp	r1, r24
    2dae:	4c f5       	brge	.+82     	; 0x2e02 <LCD_displayCharacter+0xce4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2db0:	6c a1       	ldd	r22, Y+36	; 0x24
    2db2:	7d a1       	ldd	r23, Y+37	; 0x25
    2db4:	8e a1       	ldd	r24, Y+38	; 0x26
    2db6:	9f a1       	ldd	r25, Y+39	; 0x27
    2db8:	20 e0       	ldi	r18, 0x00	; 0
    2dba:	30 e0       	ldi	r19, 0x00	; 0
    2dbc:	40 e2       	ldi	r20, 0x20	; 32
    2dbe:	51 e4       	ldi	r21, 0x41	; 65
    2dc0:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2dc4:	dc 01       	movw	r26, r24
    2dc6:	cb 01       	movw	r24, r22
    2dc8:	bc 01       	movw	r22, r24
    2dca:	cd 01       	movw	r24, r26
    2dcc:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2dd0:	dc 01       	movw	r26, r24
    2dd2:	cb 01       	movw	r24, r22
    2dd4:	9f 8f       	std	Y+31, r25	; 0x1f
    2dd6:	8e 8f       	std	Y+30, r24	; 0x1e
    2dd8:	0f c0       	rjmp	.+30     	; 0x2df8 <LCD_displayCharacter+0xcda>
    2dda:	89 e1       	ldi	r24, 0x19	; 25
    2ddc:	90 e0       	ldi	r25, 0x00	; 0
    2dde:	9d 8f       	std	Y+29, r25	; 0x1d
    2de0:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2de2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2de4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2de6:	01 97       	sbiw	r24, 0x01	; 1
    2de8:	f1 f7       	brne	.-4      	; 0x2de6 <LCD_displayCharacter+0xcc8>
    2dea:	9d 8f       	std	Y+29, r25	; 0x1d
    2dec:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dee:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2df0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2df2:	01 97       	sbiw	r24, 0x01	; 1
    2df4:	9f 8f       	std	Y+31, r25	; 0x1f
    2df6:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2df8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2dfa:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2dfc:	00 97       	sbiw	r24, 0x00	; 0
    2dfe:	69 f7       	brne	.-38     	; 0x2dda <LCD_displayCharacter+0xcbc>
    2e00:	24 c0       	rjmp	.+72     	; 0x2e4a <LCD_displayCharacter+0xd2c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e02:	68 a1       	ldd	r22, Y+32	; 0x20
    2e04:	79 a1       	ldd	r23, Y+33	; 0x21
    2e06:	8a a1       	ldd	r24, Y+34	; 0x22
    2e08:	9b a1       	ldd	r25, Y+35	; 0x23
    2e0a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2e0e:	dc 01       	movw	r26, r24
    2e10:	cb 01       	movw	r24, r22
    2e12:	9f 8f       	std	Y+31, r25	; 0x1f
    2e14:	8e 8f       	std	Y+30, r24	; 0x1e
    2e16:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2e18:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2e1a:	9b 8f       	std	Y+27, r25	; 0x1b
    2e1c:	8a 8f       	std	Y+26, r24	; 0x1a
    2e1e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2e20:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2e22:	01 97       	sbiw	r24, 0x01	; 1
    2e24:	f1 f7       	brne	.-4      	; 0x2e22 <LCD_displayCharacter+0xd04>
    2e26:	9b 8f       	std	Y+27, r25	; 0x1b
    2e28:	8a 8f       	std	Y+26, r24	; 0x1a
    2e2a:	0f c0       	rjmp	.+30     	; 0x2e4a <LCD_displayCharacter+0xd2c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2e2c:	69 a5       	ldd	r22, Y+41	; 0x29
    2e2e:	7a a5       	ldd	r23, Y+42	; 0x2a
    2e30:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e32:	9c a5       	ldd	r25, Y+44	; 0x2c
    2e34:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2e38:	dc 01       	movw	r26, r24
    2e3a:	cb 01       	movw	r24, r22
    2e3c:	88 a7       	std	Y+40, r24	; 0x28
    2e3e:	88 a5       	ldd	r24, Y+40	; 0x28
    2e40:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2e42:	89 8d       	ldd	r24, Y+25	; 0x19
    2e44:	8a 95       	dec	r24
    2e46:	f1 f7       	brne	.-4      	; 0x2e44 <LCD_displayCharacter+0xd26>
    2e48:	89 8f       	std	Y+25, r24	; 0x19
				_delay_us(100); /* delay for processing Tdsw = 100ns */
					CLEAR_BIT(LCD_PORT,EN); /* disable LCD E=0 */
    2e4a:	a5 e3       	ldi	r26, 0x35	; 53
    2e4c:	b0 e0       	ldi	r27, 0x00	; 0
    2e4e:	e5 e3       	ldi	r30, 0x35	; 53
    2e50:	f0 e0       	ldi	r31, 0x00	; 0
    2e52:	80 81       	ld	r24, Z
    2e54:	8b 7f       	andi	r24, 0xFB	; 251
    2e56:	8c 93       	st	X, r24
    2e58:	80 e0       	ldi	r24, 0x00	; 0
    2e5a:	90 e0       	ldi	r25, 0x00	; 0
    2e5c:	a8 ec       	ldi	r26, 0xC8	; 200
    2e5e:	b2 e4       	ldi	r27, 0x42	; 66
    2e60:	8d 8b       	std	Y+21, r24	; 0x15
    2e62:	9e 8b       	std	Y+22, r25	; 0x16
    2e64:	af 8b       	std	Y+23, r26	; 0x17
    2e66:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2e68:	6d 89       	ldd	r22, Y+21	; 0x15
    2e6a:	7e 89       	ldd	r23, Y+22	; 0x16
    2e6c:	8f 89       	ldd	r24, Y+23	; 0x17
    2e6e:	98 8d       	ldd	r25, Y+24	; 0x18
    2e70:	2b ea       	ldi	r18, 0xAB	; 171
    2e72:	3a ea       	ldi	r19, 0xAA	; 170
    2e74:	4a ea       	ldi	r20, 0xAA	; 170
    2e76:	5e e3       	ldi	r21, 0x3E	; 62
    2e78:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2e7c:	dc 01       	movw	r26, r24
    2e7e:	cb 01       	movw	r24, r22
    2e80:	89 8b       	std	Y+17, r24	; 0x11
    2e82:	9a 8b       	std	Y+18, r25	; 0x12
    2e84:	ab 8b       	std	Y+19, r26	; 0x13
    2e86:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2e88:	69 89       	ldd	r22, Y+17	; 0x11
    2e8a:	7a 89       	ldd	r23, Y+18	; 0x12
    2e8c:	8b 89       	ldd	r24, Y+19	; 0x13
    2e8e:	9c 89       	ldd	r25, Y+20	; 0x14
    2e90:	20 e0       	ldi	r18, 0x00	; 0
    2e92:	30 e0       	ldi	r19, 0x00	; 0
    2e94:	40 e8       	ldi	r20, 0x80	; 128
    2e96:	5f e3       	ldi	r21, 0x3F	; 63
    2e98:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2e9c:	88 23       	and	r24, r24
    2e9e:	1c f4       	brge	.+6      	; 0x2ea6 <LCD_displayCharacter+0xd88>
		__ticks = 1;
    2ea0:	81 e0       	ldi	r24, 0x01	; 1
    2ea2:	88 8b       	std	Y+16, r24	; 0x10
    2ea4:	91 c0       	rjmp	.+290    	; 0x2fc8 <LCD_displayCharacter+0xeaa>
	else if (__tmp > 255)
    2ea6:	69 89       	ldd	r22, Y+17	; 0x11
    2ea8:	7a 89       	ldd	r23, Y+18	; 0x12
    2eaa:	8b 89       	ldd	r24, Y+19	; 0x13
    2eac:	9c 89       	ldd	r25, Y+20	; 0x14
    2eae:	20 e0       	ldi	r18, 0x00	; 0
    2eb0:	30 e0       	ldi	r19, 0x00	; 0
    2eb2:	4f e7       	ldi	r20, 0x7F	; 127
    2eb4:	53 e4       	ldi	r21, 0x43	; 67
    2eb6:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2eba:	18 16       	cp	r1, r24
    2ebc:	0c f0       	brlt	.+2      	; 0x2ec0 <LCD_displayCharacter+0xda2>
    2ebe:	7b c0       	rjmp	.+246    	; 0x2fb6 <LCD_displayCharacter+0xe98>
	{
		_delay_ms(__us / 1000.0);
    2ec0:	6d 89       	ldd	r22, Y+21	; 0x15
    2ec2:	7e 89       	ldd	r23, Y+22	; 0x16
    2ec4:	8f 89       	ldd	r24, Y+23	; 0x17
    2ec6:	98 8d       	ldd	r25, Y+24	; 0x18
    2ec8:	20 e0       	ldi	r18, 0x00	; 0
    2eca:	30 e0       	ldi	r19, 0x00	; 0
    2ecc:	4a e7       	ldi	r20, 0x7A	; 122
    2ece:	54 e4       	ldi	r21, 0x44	; 68
    2ed0:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    2ed4:	dc 01       	movw	r26, r24
    2ed6:	cb 01       	movw	r24, r22
    2ed8:	8c 87       	std	Y+12, r24	; 0x0c
    2eda:	9d 87       	std	Y+13, r25	; 0x0d
    2edc:	ae 87       	std	Y+14, r26	; 0x0e
    2ede:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ee0:	6c 85       	ldd	r22, Y+12	; 0x0c
    2ee2:	7d 85       	ldd	r23, Y+13	; 0x0d
    2ee4:	8e 85       	ldd	r24, Y+14	; 0x0e
    2ee6:	9f 85       	ldd	r25, Y+15	; 0x0f
    2ee8:	20 e0       	ldi	r18, 0x00	; 0
    2eea:	30 e0       	ldi	r19, 0x00	; 0
    2eec:	4a e7       	ldi	r20, 0x7A	; 122
    2eee:	53 e4       	ldi	r21, 0x43	; 67
    2ef0:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2ef4:	dc 01       	movw	r26, r24
    2ef6:	cb 01       	movw	r24, r22
    2ef8:	88 87       	std	Y+8, r24	; 0x08
    2efa:	99 87       	std	Y+9, r25	; 0x09
    2efc:	aa 87       	std	Y+10, r26	; 0x0a
    2efe:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2f00:	68 85       	ldd	r22, Y+8	; 0x08
    2f02:	79 85       	ldd	r23, Y+9	; 0x09
    2f04:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f06:	9b 85       	ldd	r25, Y+11	; 0x0b
    2f08:	20 e0       	ldi	r18, 0x00	; 0
    2f0a:	30 e0       	ldi	r19, 0x00	; 0
    2f0c:	40 e8       	ldi	r20, 0x80	; 128
    2f0e:	5f e3       	ldi	r21, 0x3F	; 63
    2f10:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2f14:	88 23       	and	r24, r24
    2f16:	2c f4       	brge	.+10     	; 0x2f22 <LCD_displayCharacter+0xe04>
		__ticks = 1;
    2f18:	81 e0       	ldi	r24, 0x01	; 1
    2f1a:	90 e0       	ldi	r25, 0x00	; 0
    2f1c:	9f 83       	std	Y+7, r25	; 0x07
    2f1e:	8e 83       	std	Y+6, r24	; 0x06
    2f20:	3f c0       	rjmp	.+126    	; 0x2fa0 <LCD_displayCharacter+0xe82>
	else if (__tmp > 65535)
    2f22:	68 85       	ldd	r22, Y+8	; 0x08
    2f24:	79 85       	ldd	r23, Y+9	; 0x09
    2f26:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f28:	9b 85       	ldd	r25, Y+11	; 0x0b
    2f2a:	20 e0       	ldi	r18, 0x00	; 0
    2f2c:	3f ef       	ldi	r19, 0xFF	; 255
    2f2e:	4f e7       	ldi	r20, 0x7F	; 127
    2f30:	57 e4       	ldi	r21, 0x47	; 71
    2f32:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2f36:	18 16       	cp	r1, r24
    2f38:	4c f5       	brge	.+82     	; 0x2f8c <LCD_displayCharacter+0xe6e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f3a:	6c 85       	ldd	r22, Y+12	; 0x0c
    2f3c:	7d 85       	ldd	r23, Y+13	; 0x0d
    2f3e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2f40:	9f 85       	ldd	r25, Y+15	; 0x0f
    2f42:	20 e0       	ldi	r18, 0x00	; 0
    2f44:	30 e0       	ldi	r19, 0x00	; 0
    2f46:	40 e2       	ldi	r20, 0x20	; 32
    2f48:	51 e4       	ldi	r21, 0x41	; 65
    2f4a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2f4e:	dc 01       	movw	r26, r24
    2f50:	cb 01       	movw	r24, r22
    2f52:	bc 01       	movw	r22, r24
    2f54:	cd 01       	movw	r24, r26
    2f56:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2f5a:	dc 01       	movw	r26, r24
    2f5c:	cb 01       	movw	r24, r22
    2f5e:	9f 83       	std	Y+7, r25	; 0x07
    2f60:	8e 83       	std	Y+6, r24	; 0x06
    2f62:	0f c0       	rjmp	.+30     	; 0x2f82 <LCD_displayCharacter+0xe64>
    2f64:	89 e1       	ldi	r24, 0x19	; 25
    2f66:	90 e0       	ldi	r25, 0x00	; 0
    2f68:	9d 83       	std	Y+5, r25	; 0x05
    2f6a:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2f6c:	8c 81       	ldd	r24, Y+4	; 0x04
    2f6e:	9d 81       	ldd	r25, Y+5	; 0x05
    2f70:	01 97       	sbiw	r24, 0x01	; 1
    2f72:	f1 f7       	brne	.-4      	; 0x2f70 <LCD_displayCharacter+0xe52>
    2f74:	9d 83       	std	Y+5, r25	; 0x05
    2f76:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f78:	8e 81       	ldd	r24, Y+6	; 0x06
    2f7a:	9f 81       	ldd	r25, Y+7	; 0x07
    2f7c:	01 97       	sbiw	r24, 0x01	; 1
    2f7e:	9f 83       	std	Y+7, r25	; 0x07
    2f80:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f82:	8e 81       	ldd	r24, Y+6	; 0x06
    2f84:	9f 81       	ldd	r25, Y+7	; 0x07
    2f86:	00 97       	sbiw	r24, 0x00	; 0
    2f88:	69 f7       	brne	.-38     	; 0x2f64 <LCD_displayCharacter+0xe46>
    2f8a:	24 c0       	rjmp	.+72     	; 0x2fd4 <LCD_displayCharacter+0xeb6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f8c:	68 85       	ldd	r22, Y+8	; 0x08
    2f8e:	79 85       	ldd	r23, Y+9	; 0x09
    2f90:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f92:	9b 85       	ldd	r25, Y+11	; 0x0b
    2f94:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2f98:	dc 01       	movw	r26, r24
    2f9a:	cb 01       	movw	r24, r22
    2f9c:	9f 83       	std	Y+7, r25	; 0x07
    2f9e:	8e 83       	std	Y+6, r24	; 0x06
    2fa0:	8e 81       	ldd	r24, Y+6	; 0x06
    2fa2:	9f 81       	ldd	r25, Y+7	; 0x07
    2fa4:	9b 83       	std	Y+3, r25	; 0x03
    2fa6:	8a 83       	std	Y+2, r24	; 0x02
    2fa8:	8a 81       	ldd	r24, Y+2	; 0x02
    2faa:	9b 81       	ldd	r25, Y+3	; 0x03
    2fac:	01 97       	sbiw	r24, 0x01	; 1
    2fae:	f1 f7       	brne	.-4      	; 0x2fac <LCD_displayCharacter+0xe8e>
    2fb0:	9b 83       	std	Y+3, r25	; 0x03
    2fb2:	8a 83       	std	Y+2, r24	; 0x02
    2fb4:	0f c0       	rjmp	.+30     	; 0x2fd4 <LCD_displayCharacter+0xeb6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2fb6:	69 89       	ldd	r22, Y+17	; 0x11
    2fb8:	7a 89       	ldd	r23, Y+18	; 0x12
    2fba:	8b 89       	ldd	r24, Y+19	; 0x13
    2fbc:	9c 89       	ldd	r25, Y+20	; 0x14
    2fbe:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2fc2:	dc 01       	movw	r26, r24
    2fc4:	cb 01       	movw	r24, r22
    2fc6:	88 8b       	std	Y+16, r24	; 0x10
    2fc8:	88 89       	ldd	r24, Y+16	; 0x10
    2fca:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2fcc:	89 81       	ldd	r24, Y+1	; 0x01
    2fce:	8a 95       	dec	r24
    2fd0:	f1 f7       	brne	.-4      	; 0x2fce <LCD_displayCharacter+0xeb0>
    2fd2:	89 83       	std	Y+1, r24	; 0x01
		LCD_DATA_PORT = data; /* out the required command to the data bus D0 --> D7 */
		_delay_us(100); /* delay for processing Tdsw = 100ns */
		CLEAR_BIT(LCD_PORT,EN); /* disable LCD E=0 */
		_delay_us(100); /* delay for processing Th = 13ns */
	#endif
}
    2fd4:	c7 55       	subi	r28, 0x57	; 87
    2fd6:	df 4f       	sbci	r29, 0xFF	; 255
    2fd8:	0f b6       	in	r0, 0x3f	; 63
    2fda:	f8 94       	cli
    2fdc:	de bf       	out	0x3e, r29	; 62
    2fde:	0f be       	out	0x3f, r0	; 63
    2fe0:	cd bf       	out	0x3d, r28	; 61
    2fe2:	cf 91       	pop	r28
    2fe4:	df 91       	pop	r29
    2fe6:	1f 91       	pop	r17
    2fe8:	0f 91       	pop	r16
    2fea:	08 95       	ret

00002fec <LCD_gotoRowColumn>:
void LCD_gotoRowColumn(unsigned char row,unsigned char col){
    2fec:	df 93       	push	r29
    2fee:	cf 93       	push	r28
    2ff0:	cd b7       	in	r28, 0x3d	; 61
    2ff2:	de b7       	in	r29, 0x3e	; 62
    2ff4:	6e 97       	sbiw	r28, 0x1e	; 30
    2ff6:	0f b6       	in	r0, 0x3f	; 63
    2ff8:	f8 94       	cli
    2ffa:	de bf       	out	0x3e, r29	; 62
    2ffc:	0f be       	out	0x3f, r0	; 63
    2ffe:	cd bf       	out	0x3d, r28	; 61
    3000:	8d 8f       	std	Y+29, r24	; 0x1d
    3002:	6e 8f       	std	Y+30, r22	; 0x1e
	unsigned char fristcharadr[]={0x80,0xC0,0x90,0xD0};  // location of the rows in lcd (2lines and 4lines)
    3004:	80 e8       	ldi	r24, 0x80	; 128
    3006:	89 8f       	std	Y+25, r24	; 0x19
    3008:	80 ec       	ldi	r24, 0xC0	; 192
    300a:	8a 8f       	std	Y+26, r24	; 0x1a
    300c:	80 e9       	ldi	r24, 0x90	; 144
    300e:	8b 8f       	std	Y+27, r24	; 0x1b
    3010:	80 ed       	ldi	r24, 0xD0	; 208
    3012:	8c 8f       	std	Y+28, r24	; 0x1c
	LCD_sendCommand(fristcharadr[row-1]+(col-1));
    3014:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3016:	88 2f       	mov	r24, r24
    3018:	90 e0       	ldi	r25, 0x00	; 0
    301a:	9c 01       	movw	r18, r24
    301c:	21 50       	subi	r18, 0x01	; 1
    301e:	30 40       	sbci	r19, 0x00	; 0
    3020:	ce 01       	movw	r24, r28
    3022:	49 96       	adiw	r24, 0x19	; 25
    3024:	fc 01       	movw	r30, r24
    3026:	e2 0f       	add	r30, r18
    3028:	f3 1f       	adc	r31, r19
    302a:	90 81       	ld	r25, Z
    302c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    302e:	89 0f       	add	r24, r25
    3030:	81 50       	subi	r24, 0x01	; 1
    3032:	0e 94 28 09 	call	0x1250	; 0x1250 <LCD_sendCommand>
    3036:	80 e0       	ldi	r24, 0x00	; 0
    3038:	90 e0       	ldi	r25, 0x00	; 0
    303a:	a8 ec       	ldi	r26, 0xC8	; 200
    303c:	b2 e4       	ldi	r27, 0x42	; 66
    303e:	8d 8b       	std	Y+21, r24	; 0x15
    3040:	9e 8b       	std	Y+22, r25	; 0x16
    3042:	af 8b       	std	Y+23, r26	; 0x17
    3044:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3046:	6d 89       	ldd	r22, Y+21	; 0x15
    3048:	7e 89       	ldd	r23, Y+22	; 0x16
    304a:	8f 89       	ldd	r24, Y+23	; 0x17
    304c:	98 8d       	ldd	r25, Y+24	; 0x18
    304e:	2b ea       	ldi	r18, 0xAB	; 171
    3050:	3a ea       	ldi	r19, 0xAA	; 170
    3052:	4a ea       	ldi	r20, 0xAA	; 170
    3054:	5e e3       	ldi	r21, 0x3E	; 62
    3056:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    305a:	dc 01       	movw	r26, r24
    305c:	cb 01       	movw	r24, r22
    305e:	89 8b       	std	Y+17, r24	; 0x11
    3060:	9a 8b       	std	Y+18, r25	; 0x12
    3062:	ab 8b       	std	Y+19, r26	; 0x13
    3064:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3066:	69 89       	ldd	r22, Y+17	; 0x11
    3068:	7a 89       	ldd	r23, Y+18	; 0x12
    306a:	8b 89       	ldd	r24, Y+19	; 0x13
    306c:	9c 89       	ldd	r25, Y+20	; 0x14
    306e:	20 e0       	ldi	r18, 0x00	; 0
    3070:	30 e0       	ldi	r19, 0x00	; 0
    3072:	40 e8       	ldi	r20, 0x80	; 128
    3074:	5f e3       	ldi	r21, 0x3F	; 63
    3076:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    307a:	88 23       	and	r24, r24
    307c:	1c f4       	brge	.+6      	; 0x3084 <LCD_gotoRowColumn+0x98>
		__ticks = 1;
    307e:	81 e0       	ldi	r24, 0x01	; 1
    3080:	88 8b       	std	Y+16, r24	; 0x10
    3082:	91 c0       	rjmp	.+290    	; 0x31a6 <LCD_gotoRowColumn+0x1ba>
	else if (__tmp > 255)
    3084:	69 89       	ldd	r22, Y+17	; 0x11
    3086:	7a 89       	ldd	r23, Y+18	; 0x12
    3088:	8b 89       	ldd	r24, Y+19	; 0x13
    308a:	9c 89       	ldd	r25, Y+20	; 0x14
    308c:	20 e0       	ldi	r18, 0x00	; 0
    308e:	30 e0       	ldi	r19, 0x00	; 0
    3090:	4f e7       	ldi	r20, 0x7F	; 127
    3092:	53 e4       	ldi	r21, 0x43	; 67
    3094:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    3098:	18 16       	cp	r1, r24
    309a:	0c f0       	brlt	.+2      	; 0x309e <LCD_gotoRowColumn+0xb2>
    309c:	7b c0       	rjmp	.+246    	; 0x3194 <LCD_gotoRowColumn+0x1a8>
	{
		_delay_ms(__us / 1000.0);
    309e:	6d 89       	ldd	r22, Y+21	; 0x15
    30a0:	7e 89       	ldd	r23, Y+22	; 0x16
    30a2:	8f 89       	ldd	r24, Y+23	; 0x17
    30a4:	98 8d       	ldd	r25, Y+24	; 0x18
    30a6:	20 e0       	ldi	r18, 0x00	; 0
    30a8:	30 e0       	ldi	r19, 0x00	; 0
    30aa:	4a e7       	ldi	r20, 0x7A	; 122
    30ac:	54 e4       	ldi	r21, 0x44	; 68
    30ae:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    30b2:	dc 01       	movw	r26, r24
    30b4:	cb 01       	movw	r24, r22
    30b6:	8c 87       	std	Y+12, r24	; 0x0c
    30b8:	9d 87       	std	Y+13, r25	; 0x0d
    30ba:	ae 87       	std	Y+14, r26	; 0x0e
    30bc:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30be:	6c 85       	ldd	r22, Y+12	; 0x0c
    30c0:	7d 85       	ldd	r23, Y+13	; 0x0d
    30c2:	8e 85       	ldd	r24, Y+14	; 0x0e
    30c4:	9f 85       	ldd	r25, Y+15	; 0x0f
    30c6:	20 e0       	ldi	r18, 0x00	; 0
    30c8:	30 e0       	ldi	r19, 0x00	; 0
    30ca:	4a e7       	ldi	r20, 0x7A	; 122
    30cc:	53 e4       	ldi	r21, 0x43	; 67
    30ce:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    30d2:	dc 01       	movw	r26, r24
    30d4:	cb 01       	movw	r24, r22
    30d6:	88 87       	std	Y+8, r24	; 0x08
    30d8:	99 87       	std	Y+9, r25	; 0x09
    30da:	aa 87       	std	Y+10, r26	; 0x0a
    30dc:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    30de:	68 85       	ldd	r22, Y+8	; 0x08
    30e0:	79 85       	ldd	r23, Y+9	; 0x09
    30e2:	8a 85       	ldd	r24, Y+10	; 0x0a
    30e4:	9b 85       	ldd	r25, Y+11	; 0x0b
    30e6:	20 e0       	ldi	r18, 0x00	; 0
    30e8:	30 e0       	ldi	r19, 0x00	; 0
    30ea:	40 e8       	ldi	r20, 0x80	; 128
    30ec:	5f e3       	ldi	r21, 0x3F	; 63
    30ee:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    30f2:	88 23       	and	r24, r24
    30f4:	2c f4       	brge	.+10     	; 0x3100 <LCD_gotoRowColumn+0x114>
		__ticks = 1;
    30f6:	81 e0       	ldi	r24, 0x01	; 1
    30f8:	90 e0       	ldi	r25, 0x00	; 0
    30fa:	9f 83       	std	Y+7, r25	; 0x07
    30fc:	8e 83       	std	Y+6, r24	; 0x06
    30fe:	3f c0       	rjmp	.+126    	; 0x317e <LCD_gotoRowColumn+0x192>
	else if (__tmp > 65535)
    3100:	68 85       	ldd	r22, Y+8	; 0x08
    3102:	79 85       	ldd	r23, Y+9	; 0x09
    3104:	8a 85       	ldd	r24, Y+10	; 0x0a
    3106:	9b 85       	ldd	r25, Y+11	; 0x0b
    3108:	20 e0       	ldi	r18, 0x00	; 0
    310a:	3f ef       	ldi	r19, 0xFF	; 255
    310c:	4f e7       	ldi	r20, 0x7F	; 127
    310e:	57 e4       	ldi	r21, 0x47	; 71
    3110:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    3114:	18 16       	cp	r1, r24
    3116:	4c f5       	brge	.+82     	; 0x316a <LCD_gotoRowColumn+0x17e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3118:	6c 85       	ldd	r22, Y+12	; 0x0c
    311a:	7d 85       	ldd	r23, Y+13	; 0x0d
    311c:	8e 85       	ldd	r24, Y+14	; 0x0e
    311e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3120:	20 e0       	ldi	r18, 0x00	; 0
    3122:	30 e0       	ldi	r19, 0x00	; 0
    3124:	40 e2       	ldi	r20, 0x20	; 32
    3126:	51 e4       	ldi	r21, 0x41	; 65
    3128:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    312c:	dc 01       	movw	r26, r24
    312e:	cb 01       	movw	r24, r22
    3130:	bc 01       	movw	r22, r24
    3132:	cd 01       	movw	r24, r26
    3134:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3138:	dc 01       	movw	r26, r24
    313a:	cb 01       	movw	r24, r22
    313c:	9f 83       	std	Y+7, r25	; 0x07
    313e:	8e 83       	std	Y+6, r24	; 0x06
    3140:	0f c0       	rjmp	.+30     	; 0x3160 <LCD_gotoRowColumn+0x174>
    3142:	89 e1       	ldi	r24, 0x19	; 25
    3144:	90 e0       	ldi	r25, 0x00	; 0
    3146:	9d 83       	std	Y+5, r25	; 0x05
    3148:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    314a:	8c 81       	ldd	r24, Y+4	; 0x04
    314c:	9d 81       	ldd	r25, Y+5	; 0x05
    314e:	01 97       	sbiw	r24, 0x01	; 1
    3150:	f1 f7       	brne	.-4      	; 0x314e <LCD_gotoRowColumn+0x162>
    3152:	9d 83       	std	Y+5, r25	; 0x05
    3154:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3156:	8e 81       	ldd	r24, Y+6	; 0x06
    3158:	9f 81       	ldd	r25, Y+7	; 0x07
    315a:	01 97       	sbiw	r24, 0x01	; 1
    315c:	9f 83       	std	Y+7, r25	; 0x07
    315e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3160:	8e 81       	ldd	r24, Y+6	; 0x06
    3162:	9f 81       	ldd	r25, Y+7	; 0x07
    3164:	00 97       	sbiw	r24, 0x00	; 0
    3166:	69 f7       	brne	.-38     	; 0x3142 <LCD_gotoRowColumn+0x156>
    3168:	24 c0       	rjmp	.+72     	; 0x31b2 <LCD_gotoRowColumn+0x1c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    316a:	68 85       	ldd	r22, Y+8	; 0x08
    316c:	79 85       	ldd	r23, Y+9	; 0x09
    316e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3170:	9b 85       	ldd	r25, Y+11	; 0x0b
    3172:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3176:	dc 01       	movw	r26, r24
    3178:	cb 01       	movw	r24, r22
    317a:	9f 83       	std	Y+7, r25	; 0x07
    317c:	8e 83       	std	Y+6, r24	; 0x06
    317e:	8e 81       	ldd	r24, Y+6	; 0x06
    3180:	9f 81       	ldd	r25, Y+7	; 0x07
    3182:	9b 83       	std	Y+3, r25	; 0x03
    3184:	8a 83       	std	Y+2, r24	; 0x02
    3186:	8a 81       	ldd	r24, Y+2	; 0x02
    3188:	9b 81       	ldd	r25, Y+3	; 0x03
    318a:	01 97       	sbiw	r24, 0x01	; 1
    318c:	f1 f7       	brne	.-4      	; 0x318a <LCD_gotoRowColumn+0x19e>
    318e:	9b 83       	std	Y+3, r25	; 0x03
    3190:	8a 83       	std	Y+2, r24	; 0x02
    3192:	0f c0       	rjmp	.+30     	; 0x31b2 <LCD_gotoRowColumn+0x1c6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3194:	69 89       	ldd	r22, Y+17	; 0x11
    3196:	7a 89       	ldd	r23, Y+18	; 0x12
    3198:	8b 89       	ldd	r24, Y+19	; 0x13
    319a:	9c 89       	ldd	r25, Y+20	; 0x14
    319c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    31a0:	dc 01       	movw	r26, r24
    31a2:	cb 01       	movw	r24, r22
    31a4:	88 8b       	std	Y+16, r24	; 0x10
    31a6:	88 89       	ldd	r24, Y+16	; 0x10
    31a8:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    31aa:	89 81       	ldd	r24, Y+1	; 0x01
    31ac:	8a 95       	dec	r24
    31ae:	f1 f7       	brne	.-4      	; 0x31ac <LCD_gotoRowColumn+0x1c0>
    31b0:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);
	}
    31b2:	6e 96       	adiw	r28, 0x1e	; 30
    31b4:	0f b6       	in	r0, 0x3f	; 63
    31b6:	f8 94       	cli
    31b8:	de bf       	out	0x3e, r29	; 62
    31ba:	0f be       	out	0x3f, r0	; 63
    31bc:	cd bf       	out	0x3d, r28	; 61
    31be:	cf 91       	pop	r28
    31c0:	df 91       	pop	r29
    31c2:	08 95       	ret

000031c4 <LCD_print_str>:
void LCD_print_str(char *text){
    31c4:	df 93       	push	r29
    31c6:	cf 93       	push	r28
    31c8:	00 d0       	rcall	.+0      	; 0x31ca <LCD_print_str+0x6>
    31ca:	cd b7       	in	r28, 0x3d	; 61
    31cc:	de b7       	in	r29, 0x3e	; 62
    31ce:	9a 83       	std	Y+2, r25	; 0x02
    31d0:	89 83       	std	Y+1, r24	; 0x01
    31d2:	0a c0       	rjmp	.+20     	; 0x31e8 <LCD_print_str+0x24>
	while((*text) !='\0'){
		LCD_displayCharacter(*text);
    31d4:	e9 81       	ldd	r30, Y+1	; 0x01
    31d6:	fa 81       	ldd	r31, Y+2	; 0x02
    31d8:	80 81       	ld	r24, Z
    31da:	0e 94 8f 10 	call	0x211e	; 0x211e <LCD_displayCharacter>
		text++;
    31de:	89 81       	ldd	r24, Y+1	; 0x01
    31e0:	9a 81       	ldd	r25, Y+2	; 0x02
    31e2:	01 96       	adiw	r24, 0x01	; 1
    31e4:	9a 83       	std	Y+2, r25	; 0x02
    31e6:	89 83       	std	Y+1, r24	; 0x01
	unsigned char fristcharadr[]={0x80,0xC0,0x90,0xD0};  // location of the rows in lcd (2lines and 4lines)
	LCD_sendCommand(fristcharadr[row-1]+(col-1));
	_delay_us(100);
	}
void LCD_print_str(char *text){
	while((*text) !='\0'){
    31e8:	e9 81       	ldd	r30, Y+1	; 0x01
    31ea:	fa 81       	ldd	r31, Y+2	; 0x02
    31ec:	80 81       	ld	r24, Z
    31ee:	88 23       	and	r24, r24
    31f0:	89 f7       	brne	.-30     	; 0x31d4 <LCD_print_str+0x10>
		LCD_displayCharacter(*text);
		text++;
	}

}
    31f2:	0f 90       	pop	r0
    31f4:	0f 90       	pop	r0
    31f6:	cf 91       	pop	r28
    31f8:	df 91       	pop	r29
    31fa:	08 95       	ret

000031fc <LCD_intgerToString>:
void LCD_intgerToString(int data)
{
    31fc:	df 93       	push	r29
    31fe:	cf 93       	push	r28
    3200:	cd b7       	in	r28, 0x3d	; 61
    3202:	de b7       	in	r29, 0x3e	; 62
    3204:	62 97       	sbiw	r28, 0x12	; 18
    3206:	0f b6       	in	r0, 0x3f	; 63
    3208:	f8 94       	cli
    320a:	de bf       	out	0x3e, r29	; 62
    320c:	0f be       	out	0x3f, r0	; 63
    320e:	cd bf       	out	0x3d, r28	; 61
    3210:	9a 8b       	std	Y+18, r25	; 0x12
    3212:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    3214:	89 89       	ldd	r24, Y+17	; 0x11
    3216:	9a 89       	ldd	r25, Y+18	; 0x12
    3218:	9e 01       	movw	r18, r28
    321a:	2f 5f       	subi	r18, 0xFF	; 255
    321c:	3f 4f       	sbci	r19, 0xFF	; 255
    321e:	b9 01       	movw	r22, r18
    3220:	4a e0       	ldi	r20, 0x0A	; 10
    3222:	50 e0       	ldi	r21, 0x00	; 0
    3224:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <itoa>
   LCD_print_str(buff);
    3228:	ce 01       	movw	r24, r28
    322a:	01 96       	adiw	r24, 0x01	; 1
    322c:	0e 94 e2 18 	call	0x31c4	; 0x31c4 <LCD_print_str>
}
    3230:	62 96       	adiw	r28, 0x12	; 18
    3232:	0f b6       	in	r0, 0x3f	; 63
    3234:	f8 94       	cli
    3236:	de bf       	out	0x3e, r29	; 62
    3238:	0f be       	out	0x3f, r0	; 63
    323a:	cd bf       	out	0x3d, r28	; 61
    323c:	cf 91       	pop	r28
    323e:	df 91       	pop	r29
    3240:	08 95       	ret

00003242 <LCD_FLOATToString>:
void LCD_FLOATToString(double data,uint8 width,uint8 prec){
    3242:	0f 93       	push	r16
    3244:	1f 93       	push	r17
    3246:	df 93       	push	r29
    3248:	cf 93       	push	r28
    324a:	cd b7       	in	r28, 0x3d	; 61
    324c:	de b7       	in	r29, 0x3e	; 62
    324e:	66 97       	sbiw	r28, 0x16	; 22
    3250:	0f b6       	in	r0, 0x3f	; 63
    3252:	f8 94       	cli
    3254:	de bf       	out	0x3e, r29	; 62
    3256:	0f be       	out	0x3f, r0	; 63
    3258:	cd bf       	out	0x3d, r28	; 61
    325a:	69 8b       	std	Y+17, r22	; 0x11
    325c:	7a 8b       	std	Y+18, r23	; 0x12
    325e:	8b 8b       	std	Y+19, r24	; 0x13
    3260:	9c 8b       	std	Y+20, r25	; 0x14
    3262:	4d 8b       	std	Y+21, r20	; 0x15
    3264:	2e 8b       	std	Y+22, r18	; 0x16
	char num[16];
	dtostrf(data,width,prec,num);
    3266:	8d 89       	ldd	r24, Y+21	; 0x15
    3268:	48 2f       	mov	r20, r24
    326a:	50 e0       	ldi	r21, 0x00	; 0
    326c:	8e 89       	ldd	r24, Y+22	; 0x16
    326e:	28 2f       	mov	r18, r24
    3270:	30 e0       	ldi	r19, 0x00	; 0
    3272:	89 89       	ldd	r24, Y+17	; 0x11
    3274:	9a 89       	ldd	r25, Y+18	; 0x12
    3276:	ab 89       	ldd	r26, Y+19	; 0x13
    3278:	bc 89       	ldd	r27, Y+20	; 0x14
    327a:	bc 01       	movw	r22, r24
    327c:	cd 01       	movw	r24, r26
    327e:	fe 01       	movw	r30, r28
    3280:	31 96       	adiw	r30, 0x01	; 1
    3282:	8f 01       	movw	r16, r30
    3284:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <dtostrf>
	LCD_print_str(num);
    3288:	ce 01       	movw	r24, r28
    328a:	01 96       	adiw	r24, 0x01	; 1
    328c:	0e 94 e2 18 	call	0x31c4	; 0x31c4 <LCD_print_str>
}
    3290:	66 96       	adiw	r28, 0x16	; 22
    3292:	0f b6       	in	r0, 0x3f	; 63
    3294:	f8 94       	cli
    3296:	de bf       	out	0x3e, r29	; 62
    3298:	0f be       	out	0x3f, r0	; 63
    329a:	cd bf       	out	0x3d, r28	; 61
    329c:	cf 91       	pop	r28
    329e:	df 91       	pop	r29
    32a0:	1f 91       	pop	r17
    32a2:	0f 91       	pop	r16
    32a4:	08 95       	ret

000032a6 <LCD_clearScreen>:
void LCD_clearScreen(void){
    32a6:	df 93       	push	r29
    32a8:	cf 93       	push	r28
    32aa:	cd b7       	in	r28, 0x3d	; 61
    32ac:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display
    32ae:	81 e0       	ldi	r24, 0x01	; 1
    32b0:	0e 94 28 09 	call	0x1250	; 0x1250 <LCD_sendCommand>
}
    32b4:	cf 91       	pop	r28
    32b6:	df 91       	pop	r29
    32b8:	08 95       	ret

000032ba <main>:

#include"ADC.h"
#include"LCD.h"


int main(void){
    32ba:	df 93       	push	r29
    32bc:	cf 93       	push	r28
    32be:	cd b7       	in	r28, 0x3d	; 61
    32c0:	de b7       	in	r29, 0x3e	; 62
    32c2:	68 97       	sbiw	r28, 0x18	; 24
    32c4:	0f b6       	in	r0, 0x3f	; 63
    32c6:	f8 94       	cli
    32c8:	de bf       	out	0x3e, r29	; 62
    32ca:	0f be       	out	0x3f, r0	; 63
    32cc:	cd bf       	out	0x3d, r28	; 61
	uint16 l_adc_value=0;
    32ce:	18 8a       	std	Y+16, r1	; 0x10
    32d0:	1f 86       	std	Y+15, r1	; 0x0f
	ADC_ConfigType ADC_config={AVCC,FCLOCK_8,Interrupt};
    32d2:	ce 01       	movw	r24, r28
    32d4:	41 96       	adiw	r24, 0x11	; 17
    32d6:	9d 8b       	std	Y+21, r25	; 0x15
    32d8:	8c 8b       	std	Y+20, r24	; 0x14
    32da:	e3 e7       	ldi	r30, 0x73	; 115
    32dc:	f0 e0       	ldi	r31, 0x00	; 0
    32de:	ff 8b       	std	Y+23, r31	; 0x17
    32e0:	ee 8b       	std	Y+22, r30	; 0x16
    32e2:	f3 e0       	ldi	r31, 0x03	; 3
    32e4:	f8 8f       	std	Y+24, r31	; 0x18
    32e6:	ee 89       	ldd	r30, Y+22	; 0x16
    32e8:	ff 89       	ldd	r31, Y+23	; 0x17
    32ea:	00 80       	ld	r0, Z
    32ec:	8e 89       	ldd	r24, Y+22	; 0x16
    32ee:	9f 89       	ldd	r25, Y+23	; 0x17
    32f0:	01 96       	adiw	r24, 0x01	; 1
    32f2:	9f 8b       	std	Y+23, r25	; 0x17
    32f4:	8e 8b       	std	Y+22, r24	; 0x16
    32f6:	ec 89       	ldd	r30, Y+20	; 0x14
    32f8:	fd 89       	ldd	r31, Y+21	; 0x15
    32fa:	00 82       	st	Z, r0
    32fc:	8c 89       	ldd	r24, Y+20	; 0x14
    32fe:	9d 89       	ldd	r25, Y+21	; 0x15
    3300:	01 96       	adiw	r24, 0x01	; 1
    3302:	9d 8b       	std	Y+21, r25	; 0x15
    3304:	8c 8b       	std	Y+20, r24	; 0x14
    3306:	98 8d       	ldd	r25, Y+24	; 0x18
    3308:	91 50       	subi	r25, 0x01	; 1
    330a:	98 8f       	std	Y+24, r25	; 0x18
    330c:	e8 8d       	ldd	r30, Y+24	; 0x18
    330e:	ee 23       	and	r30, r30
    3310:	51 f7       	brne	.-44     	; 0x32e6 <main+0x2c>
	/* Enable Global Interrupt I-Bit */
	SREG |= (1<<7);
    3312:	af e5       	ldi	r26, 0x5F	; 95
    3314:	b0 e0       	ldi	r27, 0x00	; 0
    3316:	ef e5       	ldi	r30, 0x5F	; 95
    3318:	f0 e0       	ldi	r31, 0x00	; 0
    331a:	80 81       	ld	r24, Z
    331c:	80 68       	ori	r24, 0x80	; 128
    331e:	8c 93       	st	X, r24
	ADC_init(&ADC_config);
    3320:	ce 01       	movw	r24, r28
    3322:	41 96       	adiw	r24, 0x11	; 17
    3324:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <ADC_init>
    LCD_init();
    3328:	0e 94 7f 07 	call	0xefe	; 0xefe <LCD_init>
    while(1){
    	LCD_gotoRowColumn(1,1);
    332c:	81 e0       	ldi	r24, 0x01	; 1
    332e:	61 e0       	ldi	r22, 0x01	; 1
    3330:	0e 94 f6 17 	call	0x2fec	; 0x2fec <LCD_gotoRowColumn>
    	LCD_print_str("Adc value=");
    3334:	80 e6       	ldi	r24, 0x60	; 96
    3336:	90 e0       	ldi	r25, 0x00	; 0
    3338:	0e 94 e2 18 	call	0x31c4	; 0x31c4 <LCD_print_str>
    	ADC_readChannel_Interrupt(1);
    333c:	81 e0       	ldi	r24, 0x01	; 1
    333e:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <ADC_readChannel_Interrupt>
    	l_adc_value=G_AdcResult;
    3342:	80 91 76 00 	lds	r24, 0x0076
    3346:	90 91 77 00 	lds	r25, 0x0077
    334a:	98 8b       	std	Y+16, r25	; 0x10
    334c:	8f 87       	std	Y+15, r24	; 0x0f
        LCD_gotoRowColumn(1,11);
    334e:	81 e0       	ldi	r24, 0x01	; 1
    3350:	6b e0       	ldi	r22, 0x0B	; 11
    3352:	0e 94 f6 17 	call	0x2fec	; 0x2fec <LCD_gotoRowColumn>
        LCD_intgerToString(l_adc_value);
    3356:	8f 85       	ldd	r24, Y+15	; 0x0f
    3358:	98 89       	ldd	r25, Y+16	; 0x10
    335a:	0e 94 fe 18 	call	0x31fc	; 0x31fc <LCD_intgerToString>
    335e:	80 e0       	ldi	r24, 0x00	; 0
    3360:	90 e0       	ldi	r25, 0x00	; 0
    3362:	a4 eb       	ldi	r26, 0xB4	; 180
    3364:	b2 e4       	ldi	r27, 0x42	; 66
    3366:	8b 87       	std	Y+11, r24	; 0x0b
    3368:	9c 87       	std	Y+12, r25	; 0x0c
    336a:	ad 87       	std	Y+13, r26	; 0x0d
    336c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    336e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3370:	7c 85       	ldd	r23, Y+12	; 0x0c
    3372:	8d 85       	ldd	r24, Y+13	; 0x0d
    3374:	9e 85       	ldd	r25, Y+14	; 0x0e
    3376:	20 e0       	ldi	r18, 0x00	; 0
    3378:	30 e0       	ldi	r19, 0x00	; 0
    337a:	4a e7       	ldi	r20, 0x7A	; 122
    337c:	53 e4       	ldi	r21, 0x43	; 67
    337e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3382:	dc 01       	movw	r26, r24
    3384:	cb 01       	movw	r24, r22
    3386:	8f 83       	std	Y+7, r24	; 0x07
    3388:	98 87       	std	Y+8, r25	; 0x08
    338a:	a9 87       	std	Y+9, r26	; 0x09
    338c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    338e:	6f 81       	ldd	r22, Y+7	; 0x07
    3390:	78 85       	ldd	r23, Y+8	; 0x08
    3392:	89 85       	ldd	r24, Y+9	; 0x09
    3394:	9a 85       	ldd	r25, Y+10	; 0x0a
    3396:	20 e0       	ldi	r18, 0x00	; 0
    3398:	30 e0       	ldi	r19, 0x00	; 0
    339a:	40 e8       	ldi	r20, 0x80	; 128
    339c:	5f e3       	ldi	r21, 0x3F	; 63
    339e:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    33a2:	88 23       	and	r24, r24
    33a4:	2c f4       	brge	.+10     	; 0x33b0 <main+0xf6>
		__ticks = 1;
    33a6:	81 e0       	ldi	r24, 0x01	; 1
    33a8:	90 e0       	ldi	r25, 0x00	; 0
    33aa:	9e 83       	std	Y+6, r25	; 0x06
    33ac:	8d 83       	std	Y+5, r24	; 0x05
    33ae:	3f c0       	rjmp	.+126    	; 0x342e <main+0x174>
	else if (__tmp > 65535)
    33b0:	6f 81       	ldd	r22, Y+7	; 0x07
    33b2:	78 85       	ldd	r23, Y+8	; 0x08
    33b4:	89 85       	ldd	r24, Y+9	; 0x09
    33b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    33b8:	20 e0       	ldi	r18, 0x00	; 0
    33ba:	3f ef       	ldi	r19, 0xFF	; 255
    33bc:	4f e7       	ldi	r20, 0x7F	; 127
    33be:	57 e4       	ldi	r21, 0x47	; 71
    33c0:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    33c4:	18 16       	cp	r1, r24
    33c6:	4c f5       	brge	.+82     	; 0x341a <main+0x160>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    33ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    33cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    33ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    33d0:	20 e0       	ldi	r18, 0x00	; 0
    33d2:	30 e0       	ldi	r19, 0x00	; 0
    33d4:	40 e2       	ldi	r20, 0x20	; 32
    33d6:	51 e4       	ldi	r21, 0x41	; 65
    33d8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    33dc:	dc 01       	movw	r26, r24
    33de:	cb 01       	movw	r24, r22
    33e0:	bc 01       	movw	r22, r24
    33e2:	cd 01       	movw	r24, r26
    33e4:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    33e8:	dc 01       	movw	r26, r24
    33ea:	cb 01       	movw	r24, r22
    33ec:	9e 83       	std	Y+6, r25	; 0x06
    33ee:	8d 83       	std	Y+5, r24	; 0x05
    33f0:	0f c0       	rjmp	.+30     	; 0x3410 <main+0x156>
    33f2:	89 e1       	ldi	r24, 0x19	; 25
    33f4:	90 e0       	ldi	r25, 0x00	; 0
    33f6:	9c 83       	std	Y+4, r25	; 0x04
    33f8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    33fa:	8b 81       	ldd	r24, Y+3	; 0x03
    33fc:	9c 81       	ldd	r25, Y+4	; 0x04
    33fe:	01 97       	sbiw	r24, 0x01	; 1
    3400:	f1 f7       	brne	.-4      	; 0x33fe <main+0x144>
    3402:	9c 83       	std	Y+4, r25	; 0x04
    3404:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3406:	8d 81       	ldd	r24, Y+5	; 0x05
    3408:	9e 81       	ldd	r25, Y+6	; 0x06
    340a:	01 97       	sbiw	r24, 0x01	; 1
    340c:	9e 83       	std	Y+6, r25	; 0x06
    340e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3410:	8d 81       	ldd	r24, Y+5	; 0x05
    3412:	9e 81       	ldd	r25, Y+6	; 0x06
    3414:	00 97       	sbiw	r24, 0x00	; 0
    3416:	69 f7       	brne	.-38     	; 0x33f2 <main+0x138>
    3418:	89 cf       	rjmp	.-238    	; 0x332c <main+0x72>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    341a:	6f 81       	ldd	r22, Y+7	; 0x07
    341c:	78 85       	ldd	r23, Y+8	; 0x08
    341e:	89 85       	ldd	r24, Y+9	; 0x09
    3420:	9a 85       	ldd	r25, Y+10	; 0x0a
    3422:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3426:	dc 01       	movw	r26, r24
    3428:	cb 01       	movw	r24, r22
    342a:	9e 83       	std	Y+6, r25	; 0x06
    342c:	8d 83       	std	Y+5, r24	; 0x05
    342e:	8d 81       	ldd	r24, Y+5	; 0x05
    3430:	9e 81       	ldd	r25, Y+6	; 0x06
    3432:	9a 83       	std	Y+2, r25	; 0x02
    3434:	89 83       	std	Y+1, r24	; 0x01
    3436:	89 81       	ldd	r24, Y+1	; 0x01
    3438:	9a 81       	ldd	r25, Y+2	; 0x02
    343a:	01 97       	sbiw	r24, 0x01	; 1
    343c:	f1 f7       	brne	.-4      	; 0x343a <main+0x180>
    343e:	9a 83       	std	Y+2, r25	; 0x02
    3440:	89 83       	std	Y+1, r24	; 0x01
    3442:	74 cf       	rjmp	.-280    	; 0x332c <main+0x72>

00003444 <__prologue_saves__>:
    3444:	2f 92       	push	r2
    3446:	3f 92       	push	r3
    3448:	4f 92       	push	r4
    344a:	5f 92       	push	r5
    344c:	6f 92       	push	r6
    344e:	7f 92       	push	r7
    3450:	8f 92       	push	r8
    3452:	9f 92       	push	r9
    3454:	af 92       	push	r10
    3456:	bf 92       	push	r11
    3458:	cf 92       	push	r12
    345a:	df 92       	push	r13
    345c:	ef 92       	push	r14
    345e:	ff 92       	push	r15
    3460:	0f 93       	push	r16
    3462:	1f 93       	push	r17
    3464:	cf 93       	push	r28
    3466:	df 93       	push	r29
    3468:	cd b7       	in	r28, 0x3d	; 61
    346a:	de b7       	in	r29, 0x3e	; 62
    346c:	ca 1b       	sub	r28, r26
    346e:	db 0b       	sbc	r29, r27
    3470:	0f b6       	in	r0, 0x3f	; 63
    3472:	f8 94       	cli
    3474:	de bf       	out	0x3e, r29	; 62
    3476:	0f be       	out	0x3f, r0	; 63
    3478:	cd bf       	out	0x3d, r28	; 61
    347a:	09 94       	ijmp

0000347c <__epilogue_restores__>:
    347c:	2a 88       	ldd	r2, Y+18	; 0x12
    347e:	39 88       	ldd	r3, Y+17	; 0x11
    3480:	48 88       	ldd	r4, Y+16	; 0x10
    3482:	5f 84       	ldd	r5, Y+15	; 0x0f
    3484:	6e 84       	ldd	r6, Y+14	; 0x0e
    3486:	7d 84       	ldd	r7, Y+13	; 0x0d
    3488:	8c 84       	ldd	r8, Y+12	; 0x0c
    348a:	9b 84       	ldd	r9, Y+11	; 0x0b
    348c:	aa 84       	ldd	r10, Y+10	; 0x0a
    348e:	b9 84       	ldd	r11, Y+9	; 0x09
    3490:	c8 84       	ldd	r12, Y+8	; 0x08
    3492:	df 80       	ldd	r13, Y+7	; 0x07
    3494:	ee 80       	ldd	r14, Y+6	; 0x06
    3496:	fd 80       	ldd	r15, Y+5	; 0x05
    3498:	0c 81       	ldd	r16, Y+4	; 0x04
    349a:	1b 81       	ldd	r17, Y+3	; 0x03
    349c:	aa 81       	ldd	r26, Y+2	; 0x02
    349e:	b9 81       	ldd	r27, Y+1	; 0x01
    34a0:	ce 0f       	add	r28, r30
    34a2:	d1 1d       	adc	r29, r1
    34a4:	0f b6       	in	r0, 0x3f	; 63
    34a6:	f8 94       	cli
    34a8:	de bf       	out	0x3e, r29	; 62
    34aa:	0f be       	out	0x3f, r0	; 63
    34ac:	cd bf       	out	0x3d, r28	; 61
    34ae:	ed 01       	movw	r28, r26
    34b0:	08 95       	ret

000034b2 <dtostrf>:
    34b2:	ef 92       	push	r14
    34b4:	ff 92       	push	r15
    34b6:	0f 93       	push	r16
    34b8:	1f 93       	push	r17
    34ba:	f2 2f       	mov	r31, r18
    34bc:	f0 2e       	mov	r15, r16
    34be:	47 fd       	sbrc	r20, 7
    34c0:	02 c0       	rjmp	.+4      	; 0x34c6 <dtostrf+0x14>
    34c2:	e4 e0       	ldi	r30, 0x04	; 4
    34c4:	01 c0       	rjmp	.+2      	; 0x34c8 <dtostrf+0x16>
    34c6:	e4 e1       	ldi	r30, 0x14	; 20
    34c8:	24 2f       	mov	r18, r20
    34ca:	33 27       	eor	r19, r19
    34cc:	27 fd       	sbrc	r18, 7
    34ce:	30 95       	com	r19
    34d0:	37 ff       	sbrs	r19, 7
    34d2:	03 c0       	rjmp	.+6      	; 0x34da <dtostrf+0x28>
    34d4:	30 95       	com	r19
    34d6:	21 95       	neg	r18
    34d8:	3f 4f       	sbci	r19, 0xFF	; 255
    34da:	4f 2d       	mov	r20, r15
    34dc:	51 2f       	mov	r21, r17
    34de:	0f 2f       	mov	r16, r31
    34e0:	ee 2e       	mov	r14, r30
    34e2:	0e 94 9b 1a 	call	0x3536	; 0x3536 <dtoa_prf>
    34e6:	8f 2d       	mov	r24, r15
    34e8:	91 2f       	mov	r25, r17
    34ea:	1f 91       	pop	r17
    34ec:	0f 91       	pop	r16
    34ee:	ff 90       	pop	r15
    34f0:	ef 90       	pop	r14
    34f2:	08 95       	ret

000034f4 <itoa>:
    34f4:	fb 01       	movw	r30, r22
    34f6:	9f 01       	movw	r18, r30
    34f8:	e8 94       	clt
    34fa:	42 30       	cpi	r20, 0x02	; 2
    34fc:	c4 f0       	brlt	.+48     	; 0x352e <itoa+0x3a>
    34fe:	45 32       	cpi	r20, 0x25	; 37
    3500:	b4 f4       	brge	.+44     	; 0x352e <itoa+0x3a>
    3502:	4a 30       	cpi	r20, 0x0A	; 10
    3504:	29 f4       	brne	.+10     	; 0x3510 <itoa+0x1c>
    3506:	97 fb       	bst	r25, 7
    3508:	1e f4       	brtc	.+6      	; 0x3510 <itoa+0x1c>
    350a:	90 95       	com	r25
    350c:	81 95       	neg	r24
    350e:	9f 4f       	sbci	r25, 0xFF	; 255
    3510:	64 2f       	mov	r22, r20
    3512:	77 27       	eor	r23, r23
    3514:	0e 94 e5 1c 	call	0x39ca	; 0x39ca <__udivmodhi4>
    3518:	80 5d       	subi	r24, 0xD0	; 208
    351a:	8a 33       	cpi	r24, 0x3A	; 58
    351c:	0c f0       	brlt	.+2      	; 0x3520 <itoa+0x2c>
    351e:	89 5d       	subi	r24, 0xD9	; 217
    3520:	81 93       	st	Z+, r24
    3522:	cb 01       	movw	r24, r22
    3524:	00 97       	sbiw	r24, 0x00	; 0
    3526:	a1 f7       	brne	.-24     	; 0x3510 <itoa+0x1c>
    3528:	16 f4       	brtc	.+4      	; 0x352e <itoa+0x3a>
    352a:	5d e2       	ldi	r21, 0x2D	; 45
    352c:	51 93       	st	Z+, r21
    352e:	10 82       	st	Z, r1
    3530:	c9 01       	movw	r24, r18
    3532:	0c 94 d5 1c 	jmp	0x39aa	; 0x39aa <strrev>

00003536 <dtoa_prf>:
    3536:	a9 e0       	ldi	r26, 0x09	; 9
    3538:	b0 e0       	ldi	r27, 0x00	; 0
    353a:	e1 ea       	ldi	r30, 0xA1	; 161
    353c:	fa e1       	ldi	r31, 0x1A	; 26
    353e:	0c 94 26 1a 	jmp	0x344c	; 0x344c <__prologue_saves__+0x8>
    3542:	6a 01       	movw	r12, r20
    3544:	12 2f       	mov	r17, r18
    3546:	a0 2e       	mov	r10, r16
    3548:	be 2c       	mov	r11, r14
    354a:	2b e3       	ldi	r18, 0x3B	; 59
    354c:	20 17       	cp	r18, r16
    354e:	18 f4       	brcc	.+6      	; 0x3556 <dtoa_prf+0x20>
    3550:	2c e3       	ldi	r18, 0x3C	; 60
    3552:	92 2e       	mov	r9, r18
    3554:	02 c0       	rjmp	.+4      	; 0x355a <dtoa_prf+0x24>
    3556:	90 2e       	mov	r9, r16
    3558:	93 94       	inc	r9
    355a:	ae 01       	movw	r20, r28
    355c:	4f 5f       	subi	r20, 0xFF	; 255
    355e:	5f 4f       	sbci	r21, 0xFF	; 255
    3560:	27 e0       	ldi	r18, 0x07	; 7
    3562:	09 2d       	mov	r16, r9
    3564:	0e 94 fd 1b 	call	0x37fa	; 0x37fa <__ftoa_engine>
    3568:	bc 01       	movw	r22, r24
    356a:	89 81       	ldd	r24, Y+1	; 0x01
    356c:	e8 2e       	mov	r14, r24
    356e:	ff 24       	eor	r15, r15
    3570:	c7 01       	movw	r24, r14
    3572:	89 70       	andi	r24, 0x09	; 9
    3574:	90 70       	andi	r25, 0x00	; 0
    3576:	01 97       	sbiw	r24, 0x01	; 1
    3578:	11 f4       	brne	.+4      	; 0x357e <dtoa_prf+0x48>
    357a:	ad e2       	ldi	r26, 0x2D	; 45
    357c:	09 c0       	rjmp	.+18     	; 0x3590 <dtoa_prf+0x5a>
    357e:	b1 fe       	sbrs	r11, 1
    3580:	02 c0       	rjmp	.+4      	; 0x3586 <dtoa_prf+0x50>
    3582:	ab e2       	ldi	r26, 0x2B	; 43
    3584:	05 c0       	rjmp	.+10     	; 0x3590 <dtoa_prf+0x5a>
    3586:	b0 fc       	sbrc	r11, 0
    3588:	02 c0       	rjmp	.+4      	; 0x358e <dtoa_prf+0x58>
    358a:	a0 e0       	ldi	r26, 0x00	; 0
    358c:	01 c0       	rjmp	.+2      	; 0x3590 <dtoa_prf+0x5a>
    358e:	a0 e2       	ldi	r26, 0x20	; 32
    3590:	e3 fe       	sbrs	r14, 3
    3592:	3b c0       	rjmp	.+118    	; 0x360a <dtoa_prf+0xd4>
    3594:	aa 23       	and	r26, r26
    3596:	11 f4       	brne	.+4      	; 0x359c <dtoa_prf+0x66>
    3598:	23 e0       	ldi	r18, 0x03	; 3
    359a:	01 c0       	rjmp	.+2      	; 0x359e <dtoa_prf+0x68>
    359c:	24 e0       	ldi	r18, 0x04	; 4
    359e:	21 17       	cp	r18, r17
    35a0:	10 f0       	brcs	.+4      	; 0x35a6 <dtoa_prf+0x70>
    35a2:	20 e0       	ldi	r18, 0x00	; 0
    35a4:	02 c0       	rjmp	.+4      	; 0x35aa <dtoa_prf+0x74>
    35a6:	12 1b       	sub	r17, r18
    35a8:	21 2f       	mov	r18, r17
    35aa:	eb 2c       	mov	r14, r11
    35ac:	b4 fe       	sbrs	r11, 4
    35ae:	02 c0       	rjmp	.+4      	; 0x35b4 <dtoa_prf+0x7e>
    35b0:	32 2f       	mov	r19, r18
    35b2:	0a c0       	rjmp	.+20     	; 0x35c8 <dtoa_prf+0x92>
    35b4:	f6 01       	movw	r30, r12
    35b6:	32 2f       	mov	r19, r18
    35b8:	80 e2       	ldi	r24, 0x20	; 32
    35ba:	02 c0       	rjmp	.+4      	; 0x35c0 <dtoa_prf+0x8a>
    35bc:	81 93       	st	Z+, r24
    35be:	31 50       	subi	r19, 0x01	; 1
    35c0:	33 23       	and	r19, r19
    35c2:	e1 f7       	brne	.-8      	; 0x35bc <dtoa_prf+0x86>
    35c4:	c2 0e       	add	r12, r18
    35c6:	d1 1c       	adc	r13, r1
    35c8:	aa 23       	and	r26, r26
    35ca:	19 f0       	breq	.+6      	; 0x35d2 <dtoa_prf+0x9c>
    35cc:	f6 01       	movw	r30, r12
    35ce:	a1 93       	st	Z+, r26
    35d0:	6f 01       	movw	r12, r30
    35d2:	f6 01       	movw	r30, r12
    35d4:	31 96       	adiw	r30, 0x01	; 1
    35d6:	e2 fe       	sbrs	r14, 2
    35d8:	05 c0       	rjmp	.+10     	; 0x35e4 <dtoa_prf+0xae>
    35da:	9e e4       	ldi	r25, 0x4E	; 78
    35dc:	d6 01       	movw	r26, r12
    35de:	9c 93       	st	X, r25
    35e0:	81 e4       	ldi	r24, 0x41	; 65
    35e2:	04 c0       	rjmp	.+8      	; 0x35ec <dtoa_prf+0xb6>
    35e4:	9e e6       	ldi	r25, 0x6E	; 110
    35e6:	d6 01       	movw	r26, r12
    35e8:	9c 93       	st	X, r25
    35ea:	81 e6       	ldi	r24, 0x61	; 97
    35ec:	11 96       	adiw	r26, 0x01	; 1
    35ee:	8c 93       	st	X, r24
    35f0:	91 83       	std	Z+1, r25	; 0x01
    35f2:	32 96       	adiw	r30, 0x02	; 2
    35f4:	df 01       	movw	r26, r30
    35f6:	83 2f       	mov	r24, r19
    35f8:	90 e2       	ldi	r25, 0x20	; 32
    35fa:	02 c0       	rjmp	.+4      	; 0x3600 <dtoa_prf+0xca>
    35fc:	9d 93       	st	X+, r25
    35fe:	81 50       	subi	r24, 0x01	; 1
    3600:	88 23       	and	r24, r24
    3602:	e1 f7       	brne	.-8      	; 0x35fc <dtoa_prf+0xc6>
    3604:	e3 0f       	add	r30, r19
    3606:	f1 1d       	adc	r31, r1
    3608:	40 c0       	rjmp	.+128    	; 0x368a <dtoa_prf+0x154>
    360a:	e2 fe       	sbrs	r14, 2
    360c:	42 c0       	rjmp	.+132    	; 0x3692 <dtoa_prf+0x15c>
    360e:	aa 23       	and	r26, r26
    3610:	11 f4       	brne	.+4      	; 0x3616 <dtoa_prf+0xe0>
    3612:	23 e0       	ldi	r18, 0x03	; 3
    3614:	01 c0       	rjmp	.+2      	; 0x3618 <dtoa_prf+0xe2>
    3616:	24 e0       	ldi	r18, 0x04	; 4
    3618:	21 17       	cp	r18, r17
    361a:	10 f0       	brcs	.+4      	; 0x3620 <dtoa_prf+0xea>
    361c:	20 e0       	ldi	r18, 0x00	; 0
    361e:	02 c0       	rjmp	.+4      	; 0x3624 <dtoa_prf+0xee>
    3620:	12 1b       	sub	r17, r18
    3622:	21 2f       	mov	r18, r17
    3624:	eb 2c       	mov	r14, r11
    3626:	b4 fe       	sbrs	r11, 4
    3628:	02 c0       	rjmp	.+4      	; 0x362e <dtoa_prf+0xf8>
    362a:	92 2f       	mov	r25, r18
    362c:	0a c0       	rjmp	.+20     	; 0x3642 <dtoa_prf+0x10c>
    362e:	f6 01       	movw	r30, r12
    3630:	92 2f       	mov	r25, r18
    3632:	80 e2       	ldi	r24, 0x20	; 32
    3634:	02 c0       	rjmp	.+4      	; 0x363a <dtoa_prf+0x104>
    3636:	81 93       	st	Z+, r24
    3638:	91 50       	subi	r25, 0x01	; 1
    363a:	99 23       	and	r25, r25
    363c:	e1 f7       	brne	.-8      	; 0x3636 <dtoa_prf+0x100>
    363e:	c2 0e       	add	r12, r18
    3640:	d1 1c       	adc	r13, r1
    3642:	aa 23       	and	r26, r26
    3644:	19 f0       	breq	.+6      	; 0x364c <dtoa_prf+0x116>
    3646:	f6 01       	movw	r30, r12
    3648:	a1 93       	st	Z+, r26
    364a:	6f 01       	movw	r12, r30
    364c:	f6 01       	movw	r30, r12
    364e:	31 96       	adiw	r30, 0x01	; 1
    3650:	e2 fe       	sbrs	r14, 2
    3652:	08 c0       	rjmp	.+16     	; 0x3664 <dtoa_prf+0x12e>
    3654:	89 e4       	ldi	r24, 0x49	; 73
    3656:	d6 01       	movw	r26, r12
    3658:	8c 93       	st	X, r24
    365a:	8e e4       	ldi	r24, 0x4E	; 78
    365c:	11 96       	adiw	r26, 0x01	; 1
    365e:	8c 93       	st	X, r24
    3660:	86 e4       	ldi	r24, 0x46	; 70
    3662:	07 c0       	rjmp	.+14     	; 0x3672 <dtoa_prf+0x13c>
    3664:	89 e6       	ldi	r24, 0x69	; 105
    3666:	d6 01       	movw	r26, r12
    3668:	8c 93       	st	X, r24
    366a:	8e e6       	ldi	r24, 0x6E	; 110
    366c:	11 96       	adiw	r26, 0x01	; 1
    366e:	8c 93       	st	X, r24
    3670:	86 e6       	ldi	r24, 0x66	; 102
    3672:	81 83       	std	Z+1, r24	; 0x01
    3674:	32 96       	adiw	r30, 0x02	; 2
    3676:	df 01       	movw	r26, r30
    3678:	89 2f       	mov	r24, r25
    367a:	20 e2       	ldi	r18, 0x20	; 32
    367c:	02 c0       	rjmp	.+4      	; 0x3682 <dtoa_prf+0x14c>
    367e:	2d 93       	st	X+, r18
    3680:	81 50       	subi	r24, 0x01	; 1
    3682:	88 23       	and	r24, r24
    3684:	e1 f7       	brne	.-8      	; 0x367e <dtoa_prf+0x148>
    3686:	e9 0f       	add	r30, r25
    3688:	f1 1d       	adc	r31, r1
    368a:	10 82       	st	Z, r1
    368c:	2e ef       	ldi	r18, 0xFE	; 254
    368e:	3f ef       	ldi	r19, 0xFF	; 255
    3690:	af c0       	rjmp	.+350    	; 0x37f0 <dtoa_prf+0x2ba>
    3692:	16 16       	cp	r1, r22
    3694:	17 06       	cpc	r1, r23
    3696:	1c f0       	brlt	.+6      	; 0x369e <dtoa_prf+0x168>
    3698:	41 e0       	ldi	r20, 0x01	; 1
    369a:	50 e0       	ldi	r21, 0x00	; 0
    369c:	03 c0       	rjmp	.+6      	; 0x36a4 <dtoa_prf+0x16e>
    369e:	ab 01       	movw	r20, r22
    36a0:	4f 5f       	subi	r20, 0xFF	; 255
    36a2:	5f 4f       	sbci	r21, 0xFF	; 255
    36a4:	aa 20       	and	r10, r10
    36a6:	19 f4       	brne	.+6      	; 0x36ae <dtoa_prf+0x178>
    36a8:	80 e0       	ldi	r24, 0x00	; 0
    36aa:	90 e0       	ldi	r25, 0x00	; 0
    36ac:	03 c0       	rjmp	.+6      	; 0x36b4 <dtoa_prf+0x17e>
    36ae:	8a 2d       	mov	r24, r10
    36b0:	90 e0       	ldi	r25, 0x00	; 0
    36b2:	01 96       	adiw	r24, 0x01	; 1
    36b4:	20 e0       	ldi	r18, 0x00	; 0
    36b6:	30 e0       	ldi	r19, 0x00	; 0
    36b8:	aa 23       	and	r26, r26
    36ba:	11 f0       	breq	.+4      	; 0x36c0 <dtoa_prf+0x18a>
    36bc:	21 e0       	ldi	r18, 0x01	; 1
    36be:	30 e0       	ldi	r19, 0x00	; 0
    36c0:	24 0f       	add	r18, r20
    36c2:	35 1f       	adc	r19, r21
    36c4:	28 0f       	add	r18, r24
    36c6:	39 1f       	adc	r19, r25
    36c8:	81 2f       	mov	r24, r17
    36ca:	90 e0       	ldi	r25, 0x00	; 0
    36cc:	28 17       	cp	r18, r24
    36ce:	39 07       	cpc	r19, r25
    36d0:	14 f0       	brlt	.+4      	; 0x36d6 <dtoa_prf+0x1a0>
    36d2:	20 e0       	ldi	r18, 0x00	; 0
    36d4:	02 c0       	rjmp	.+4      	; 0x36da <dtoa_prf+0x1a4>
    36d6:	12 1b       	sub	r17, r18
    36d8:	21 2f       	mov	r18, r17
    36da:	4b 2d       	mov	r20, r11
    36dc:	50 e0       	ldi	r21, 0x00	; 0
    36de:	ca 01       	movw	r24, r20
    36e0:	80 71       	andi	r24, 0x10	; 16
    36e2:	90 70       	andi	r25, 0x00	; 0
    36e4:	b4 fc       	sbrc	r11, 4
    36e6:	0d c0       	rjmp	.+26     	; 0x3702 <dtoa_prf+0x1cc>
    36e8:	b3 fc       	sbrc	r11, 3
    36ea:	0b c0       	rjmp	.+22     	; 0x3702 <dtoa_prf+0x1cc>
    36ec:	f6 01       	movw	r30, r12
    36ee:	32 2f       	mov	r19, r18
    36f0:	40 e2       	ldi	r20, 0x20	; 32
    36f2:	02 c0       	rjmp	.+4      	; 0x36f8 <dtoa_prf+0x1c2>
    36f4:	41 93       	st	Z+, r20
    36f6:	31 50       	subi	r19, 0x01	; 1
    36f8:	33 23       	and	r19, r19
    36fa:	e1 f7       	brne	.-8      	; 0x36f4 <dtoa_prf+0x1be>
    36fc:	c2 0e       	add	r12, r18
    36fe:	d1 1c       	adc	r13, r1
    3700:	01 c0       	rjmp	.+2      	; 0x3704 <dtoa_prf+0x1ce>
    3702:	32 2f       	mov	r19, r18
    3704:	aa 23       	and	r26, r26
    3706:	19 f0       	breq	.+6      	; 0x370e <dtoa_prf+0x1d8>
    3708:	f6 01       	movw	r30, r12
    370a:	a1 93       	st	Z+, r26
    370c:	6f 01       	movw	r12, r30
    370e:	89 2b       	or	r24, r25
    3710:	11 f0       	breq	.+4      	; 0x3716 <dtoa_prf+0x1e0>
    3712:	13 2f       	mov	r17, r19
    3714:	0a c0       	rjmp	.+20     	; 0x372a <dtoa_prf+0x1f4>
    3716:	f6 01       	movw	r30, r12
    3718:	13 2f       	mov	r17, r19
    371a:	80 e3       	ldi	r24, 0x30	; 48
    371c:	02 c0       	rjmp	.+4      	; 0x3722 <dtoa_prf+0x1ec>
    371e:	81 93       	st	Z+, r24
    3720:	11 50       	subi	r17, 0x01	; 1
    3722:	11 23       	and	r17, r17
    3724:	e1 f7       	brne	.-8      	; 0x371e <dtoa_prf+0x1e8>
    3726:	c3 0e       	add	r12, r19
    3728:	d1 1c       	adc	r13, r1
    372a:	09 2d       	mov	r16, r9
    372c:	06 0f       	add	r16, r22
    372e:	ba 80       	ldd	r11, Y+2	; 0x02
    3730:	90 e1       	ldi	r25, 0x10	; 16
    3732:	89 2e       	mov	r8, r25
    3734:	91 2c       	mov	r9, r1
    3736:	8e 20       	and	r8, r14
    3738:	9f 20       	and	r9, r15
    373a:	e4 fe       	sbrs	r14, 4
    373c:	04 c0       	rjmp	.+8      	; 0x3746 <dtoa_prf+0x210>
    373e:	f1 e3       	ldi	r31, 0x31	; 49
    3740:	bf 16       	cp	r11, r31
    3742:	09 f4       	brne	.+2      	; 0x3746 <dtoa_prf+0x210>
    3744:	01 50       	subi	r16, 0x01	; 1
    3746:	10 16       	cp	r1, r16
    3748:	14 f0       	brlt	.+4      	; 0x374e <dtoa_prf+0x218>
    374a:	01 e0       	ldi	r16, 0x01	; 1
    374c:	03 c0       	rjmp	.+6      	; 0x3754 <dtoa_prf+0x21e>
    374e:	09 30       	cpi	r16, 0x09	; 9
    3750:	08 f0       	brcs	.+2      	; 0x3754 <dtoa_prf+0x21e>
    3752:	08 e0       	ldi	r16, 0x08	; 8
    3754:	9b 01       	movw	r18, r22
    3756:	77 ff       	sbrs	r23, 7
    3758:	02 c0       	rjmp	.+4      	; 0x375e <dtoa_prf+0x228>
    375a:	20 e0       	ldi	r18, 0x00	; 0
    375c:	30 e0       	ldi	r19, 0x00	; 0
    375e:	cb 01       	movw	r24, r22
    3760:	01 96       	adiw	r24, 0x01	; 1
    3762:	82 1b       	sub	r24, r18
    3764:	93 0b       	sbc	r25, r19
    3766:	fe 01       	movw	r30, r28
    3768:	31 96       	adiw	r30, 0x01	; 1
    376a:	e8 0f       	add	r30, r24
    376c:	f9 1f       	adc	r31, r25
    376e:	8e e2       	ldi	r24, 0x2E	; 46
    3770:	f8 2e       	mov	r15, r24
    3772:	3b 01       	movw	r6, r22
    3774:	60 1a       	sub	r6, r16
    3776:	71 08       	sbc	r7, r1
    3778:	8a 2d       	mov	r24, r10
    377a:	90 e0       	ldi	r25, 0x00	; 0
    377c:	44 27       	eor	r20, r20
    377e:	55 27       	eor	r21, r21
    3780:	48 1b       	sub	r20, r24
    3782:	59 0b       	sbc	r21, r25
    3784:	8f ef       	ldi	r24, 0xFF	; 255
    3786:	2f 3f       	cpi	r18, 0xFF	; 255
    3788:	38 07       	cpc	r19, r24
    378a:	19 f4       	brne	.+6      	; 0x3792 <dtoa_prf+0x25c>
    378c:	d6 01       	movw	r26, r12
    378e:	fd 92       	st	X+, r15
    3790:	6d 01       	movw	r12, r26
    3792:	62 17       	cp	r22, r18
    3794:	73 07       	cpc	r23, r19
    3796:	2c f0       	brlt	.+10     	; 0x37a2 <dtoa_prf+0x26c>
    3798:	62 16       	cp	r6, r18
    379a:	73 06       	cpc	r7, r19
    379c:	14 f4       	brge	.+4      	; 0x37a2 <dtoa_prf+0x26c>
    379e:	80 81       	ld	r24, Z
    37a0:	01 c0       	rjmp	.+2      	; 0x37a4 <dtoa_prf+0x26e>
    37a2:	80 e3       	ldi	r24, 0x30	; 48
    37a4:	21 50       	subi	r18, 0x01	; 1
    37a6:	30 40       	sbci	r19, 0x00	; 0
    37a8:	31 96       	adiw	r30, 0x01	; 1
    37aa:	24 17       	cp	r18, r20
    37ac:	35 07       	cpc	r19, r21
    37ae:	24 f0       	brlt	.+8      	; 0x37b8 <dtoa_prf+0x282>
    37b0:	d6 01       	movw	r26, r12
    37b2:	8d 93       	st	X+, r24
    37b4:	6d 01       	movw	r12, r26
    37b6:	e6 cf       	rjmp	.-52     	; 0x3784 <dtoa_prf+0x24e>
    37b8:	26 17       	cp	r18, r22
    37ba:	37 07       	cpc	r19, r23
    37bc:	49 f4       	brne	.+18     	; 0x37d0 <dtoa_prf+0x29a>
    37be:	b5 e3       	ldi	r27, 0x35	; 53
    37c0:	bb 15       	cp	r27, r11
    37c2:	28 f0       	brcs	.+10     	; 0x37ce <dtoa_prf+0x298>
    37c4:	bb 16       	cp	r11, r27
    37c6:	21 f4       	brne	.+8      	; 0x37d0 <dtoa_prf+0x29a>
    37c8:	81 14       	cp	r8, r1
    37ca:	91 04       	cpc	r9, r1
    37cc:	09 f4       	brne	.+2      	; 0x37d0 <dtoa_prf+0x29a>
    37ce:	81 e3       	ldi	r24, 0x31	; 49
    37d0:	f6 01       	movw	r30, r12
    37d2:	81 93       	st	Z+, r24
    37d4:	d6 01       	movw	r26, r12
    37d6:	81 2f       	mov	r24, r17
    37d8:	90 e2       	ldi	r25, 0x20	; 32
    37da:	02 c0       	rjmp	.+4      	; 0x37e0 <dtoa_prf+0x2aa>
    37dc:	9c 93       	st	X, r25
    37de:	81 50       	subi	r24, 0x01	; 1
    37e0:	11 96       	adiw	r26, 0x01	; 1
    37e2:	88 23       	and	r24, r24
    37e4:	d9 f7       	brne	.-10     	; 0x37dc <dtoa_prf+0x2a6>
    37e6:	e1 0f       	add	r30, r17
    37e8:	f1 1d       	adc	r31, r1
    37ea:	10 82       	st	Z, r1
    37ec:	20 e0       	ldi	r18, 0x00	; 0
    37ee:	30 e0       	ldi	r19, 0x00	; 0
    37f0:	c9 01       	movw	r24, r18
    37f2:	29 96       	adiw	r28, 0x09	; 9
    37f4:	ee e0       	ldi	r30, 0x0E	; 14
    37f6:	0c 94 42 1a 	jmp	0x3484	; 0x3484 <__epilogue_restores__+0x8>

000037fa <__ftoa_engine>:
    37fa:	28 30       	cpi	r18, 0x08	; 8
    37fc:	08 f0       	brcs	.+2      	; 0x3800 <__ftoa_engine+0x6>
    37fe:	27 e0       	ldi	r18, 0x07	; 7
    3800:	33 27       	eor	r19, r19
    3802:	da 01       	movw	r26, r20
    3804:	99 0f       	add	r25, r25
    3806:	31 1d       	adc	r19, r1
    3808:	87 fd       	sbrc	r24, 7
    380a:	91 60       	ori	r25, 0x01	; 1
    380c:	00 96       	adiw	r24, 0x00	; 0
    380e:	61 05       	cpc	r22, r1
    3810:	71 05       	cpc	r23, r1
    3812:	39 f4       	brne	.+14     	; 0x3822 <__ftoa_engine+0x28>
    3814:	32 60       	ori	r19, 0x02	; 2
    3816:	2e 5f       	subi	r18, 0xFE	; 254
    3818:	3d 93       	st	X+, r19
    381a:	30 e3       	ldi	r19, 0x30	; 48
    381c:	2a 95       	dec	r18
    381e:	e1 f7       	brne	.-8      	; 0x3818 <__ftoa_engine+0x1e>
    3820:	08 95       	ret
    3822:	9f 3f       	cpi	r25, 0xFF	; 255
    3824:	30 f0       	brcs	.+12     	; 0x3832 <__ftoa_engine+0x38>
    3826:	80 38       	cpi	r24, 0x80	; 128
    3828:	71 05       	cpc	r23, r1
    382a:	61 05       	cpc	r22, r1
    382c:	09 f0       	breq	.+2      	; 0x3830 <__ftoa_engine+0x36>
    382e:	3c 5f       	subi	r19, 0xFC	; 252
    3830:	3c 5f       	subi	r19, 0xFC	; 252
    3832:	3d 93       	st	X+, r19
    3834:	91 30       	cpi	r25, 0x01	; 1
    3836:	08 f0       	brcs	.+2      	; 0x383a <__ftoa_engine+0x40>
    3838:	80 68       	ori	r24, 0x80	; 128
    383a:	91 1d       	adc	r25, r1
    383c:	df 93       	push	r29
    383e:	cf 93       	push	r28
    3840:	1f 93       	push	r17
    3842:	0f 93       	push	r16
    3844:	ff 92       	push	r15
    3846:	ef 92       	push	r14
    3848:	19 2f       	mov	r17, r25
    384a:	98 7f       	andi	r25, 0xF8	; 248
    384c:	96 95       	lsr	r25
    384e:	e9 2f       	mov	r30, r25
    3850:	96 95       	lsr	r25
    3852:	96 95       	lsr	r25
    3854:	e9 0f       	add	r30, r25
    3856:	ff 27       	eor	r31, r31
    3858:	e2 55       	subi	r30, 0x52	; 82
    385a:	ff 4f       	sbci	r31, 0xFF	; 255
    385c:	99 27       	eor	r25, r25
    385e:	33 27       	eor	r19, r19
    3860:	ee 24       	eor	r14, r14
    3862:	ff 24       	eor	r15, r15
    3864:	a7 01       	movw	r20, r14
    3866:	e7 01       	movw	r28, r14
    3868:	05 90       	lpm	r0, Z+
    386a:	08 94       	sec
    386c:	07 94       	ror	r0
    386e:	28 f4       	brcc	.+10     	; 0x387a <__ftoa_engine+0x80>
    3870:	36 0f       	add	r19, r22
    3872:	e7 1e       	adc	r14, r23
    3874:	f8 1e       	adc	r15, r24
    3876:	49 1f       	adc	r20, r25
    3878:	51 1d       	adc	r21, r1
    387a:	66 0f       	add	r22, r22
    387c:	77 1f       	adc	r23, r23
    387e:	88 1f       	adc	r24, r24
    3880:	99 1f       	adc	r25, r25
    3882:	06 94       	lsr	r0
    3884:	a1 f7       	brne	.-24     	; 0x386e <__ftoa_engine+0x74>
    3886:	05 90       	lpm	r0, Z+
    3888:	07 94       	ror	r0
    388a:	28 f4       	brcc	.+10     	; 0x3896 <__ftoa_engine+0x9c>
    388c:	e7 0e       	add	r14, r23
    388e:	f8 1e       	adc	r15, r24
    3890:	49 1f       	adc	r20, r25
    3892:	56 1f       	adc	r21, r22
    3894:	c1 1d       	adc	r28, r1
    3896:	77 0f       	add	r23, r23
    3898:	88 1f       	adc	r24, r24
    389a:	99 1f       	adc	r25, r25
    389c:	66 1f       	adc	r22, r22
    389e:	06 94       	lsr	r0
    38a0:	a1 f7       	brne	.-24     	; 0x388a <__ftoa_engine+0x90>
    38a2:	05 90       	lpm	r0, Z+
    38a4:	07 94       	ror	r0
    38a6:	28 f4       	brcc	.+10     	; 0x38b2 <__ftoa_engine+0xb8>
    38a8:	f8 0e       	add	r15, r24
    38aa:	49 1f       	adc	r20, r25
    38ac:	56 1f       	adc	r21, r22
    38ae:	c7 1f       	adc	r28, r23
    38b0:	d1 1d       	adc	r29, r1
    38b2:	88 0f       	add	r24, r24
    38b4:	99 1f       	adc	r25, r25
    38b6:	66 1f       	adc	r22, r22
    38b8:	77 1f       	adc	r23, r23
    38ba:	06 94       	lsr	r0
    38bc:	a1 f7       	brne	.-24     	; 0x38a6 <__ftoa_engine+0xac>
    38be:	05 90       	lpm	r0, Z+
    38c0:	07 94       	ror	r0
    38c2:	20 f4       	brcc	.+8      	; 0x38cc <__ftoa_engine+0xd2>
    38c4:	49 0f       	add	r20, r25
    38c6:	56 1f       	adc	r21, r22
    38c8:	c7 1f       	adc	r28, r23
    38ca:	d8 1f       	adc	r29, r24
    38cc:	99 0f       	add	r25, r25
    38ce:	66 1f       	adc	r22, r22
    38d0:	77 1f       	adc	r23, r23
    38d2:	88 1f       	adc	r24, r24
    38d4:	06 94       	lsr	r0
    38d6:	a9 f7       	brne	.-22     	; 0x38c2 <__ftoa_engine+0xc8>
    38d8:	84 91       	lpm	r24, Z+
    38da:	10 95       	com	r17
    38dc:	17 70       	andi	r17, 0x07	; 7
    38de:	41 f0       	breq	.+16     	; 0x38f0 <__ftoa_engine+0xf6>
    38e0:	d6 95       	lsr	r29
    38e2:	c7 95       	ror	r28
    38e4:	57 95       	ror	r21
    38e6:	47 95       	ror	r20
    38e8:	f7 94       	ror	r15
    38ea:	e7 94       	ror	r14
    38ec:	1a 95       	dec	r17
    38ee:	c1 f7       	brne	.-16     	; 0x38e0 <__ftoa_engine+0xe6>
    38f0:	e4 e5       	ldi	r30, 0x54	; 84
    38f2:	f0 e0       	ldi	r31, 0x00	; 0
    38f4:	68 94       	set
    38f6:	15 90       	lpm	r1, Z+
    38f8:	15 91       	lpm	r17, Z+
    38fa:	35 91       	lpm	r19, Z+
    38fc:	65 91       	lpm	r22, Z+
    38fe:	95 91       	lpm	r25, Z+
    3900:	05 90       	lpm	r0, Z+
    3902:	7f e2       	ldi	r23, 0x2F	; 47
    3904:	73 95       	inc	r23
    3906:	e1 18       	sub	r14, r1
    3908:	f1 0a       	sbc	r15, r17
    390a:	43 0b       	sbc	r20, r19
    390c:	56 0b       	sbc	r21, r22
    390e:	c9 0b       	sbc	r28, r25
    3910:	d0 09       	sbc	r29, r0
    3912:	c0 f7       	brcc	.-16     	; 0x3904 <__ftoa_engine+0x10a>
    3914:	e1 0c       	add	r14, r1
    3916:	f1 1e       	adc	r15, r17
    3918:	43 1f       	adc	r20, r19
    391a:	56 1f       	adc	r21, r22
    391c:	c9 1f       	adc	r28, r25
    391e:	d0 1d       	adc	r29, r0
    3920:	7e f4       	brtc	.+30     	; 0x3940 <__ftoa_engine+0x146>
    3922:	70 33       	cpi	r23, 0x30	; 48
    3924:	11 f4       	brne	.+4      	; 0x392a <__ftoa_engine+0x130>
    3926:	8a 95       	dec	r24
    3928:	e6 cf       	rjmp	.-52     	; 0x38f6 <__ftoa_engine+0xfc>
    392a:	e8 94       	clt
    392c:	01 50       	subi	r16, 0x01	; 1
    392e:	30 f0       	brcs	.+12     	; 0x393c <__ftoa_engine+0x142>
    3930:	08 0f       	add	r16, r24
    3932:	0a f4       	brpl	.+2      	; 0x3936 <__ftoa_engine+0x13c>
    3934:	00 27       	eor	r16, r16
    3936:	02 17       	cp	r16, r18
    3938:	08 f4       	brcc	.+2      	; 0x393c <__ftoa_engine+0x142>
    393a:	20 2f       	mov	r18, r16
    393c:	23 95       	inc	r18
    393e:	02 2f       	mov	r16, r18
    3940:	7a 33       	cpi	r23, 0x3A	; 58
    3942:	28 f0       	brcs	.+10     	; 0x394e <__ftoa_engine+0x154>
    3944:	79 e3       	ldi	r23, 0x39	; 57
    3946:	7d 93       	st	X+, r23
    3948:	2a 95       	dec	r18
    394a:	e9 f7       	brne	.-6      	; 0x3946 <__ftoa_engine+0x14c>
    394c:	10 c0       	rjmp	.+32     	; 0x396e <__ftoa_engine+0x174>
    394e:	7d 93       	st	X+, r23
    3950:	2a 95       	dec	r18
    3952:	89 f6       	brne	.-94     	; 0x38f6 <__ftoa_engine+0xfc>
    3954:	06 94       	lsr	r0
    3956:	97 95       	ror	r25
    3958:	67 95       	ror	r22
    395a:	37 95       	ror	r19
    395c:	17 95       	ror	r17
    395e:	17 94       	ror	r1
    3960:	e1 18       	sub	r14, r1
    3962:	f1 0a       	sbc	r15, r17
    3964:	43 0b       	sbc	r20, r19
    3966:	56 0b       	sbc	r21, r22
    3968:	c9 0b       	sbc	r28, r25
    396a:	d0 09       	sbc	r29, r0
    396c:	98 f0       	brcs	.+38     	; 0x3994 <__ftoa_engine+0x19a>
    396e:	23 95       	inc	r18
    3970:	7e 91       	ld	r23, -X
    3972:	73 95       	inc	r23
    3974:	7a 33       	cpi	r23, 0x3A	; 58
    3976:	08 f0       	brcs	.+2      	; 0x397a <__ftoa_engine+0x180>
    3978:	70 e3       	ldi	r23, 0x30	; 48
    397a:	7c 93       	st	X, r23
    397c:	20 13       	cpse	r18, r16
    397e:	b8 f7       	brcc	.-18     	; 0x396e <__ftoa_engine+0x174>
    3980:	7e 91       	ld	r23, -X
    3982:	70 61       	ori	r23, 0x10	; 16
    3984:	7d 93       	st	X+, r23
    3986:	30 f0       	brcs	.+12     	; 0x3994 <__ftoa_engine+0x19a>
    3988:	83 95       	inc	r24
    398a:	71 e3       	ldi	r23, 0x31	; 49
    398c:	7d 93       	st	X+, r23
    398e:	70 e3       	ldi	r23, 0x30	; 48
    3990:	2a 95       	dec	r18
    3992:	e1 f7       	brne	.-8      	; 0x398c <__ftoa_engine+0x192>
    3994:	11 24       	eor	r1, r1
    3996:	ef 90       	pop	r14
    3998:	ff 90       	pop	r15
    399a:	0f 91       	pop	r16
    399c:	1f 91       	pop	r17
    399e:	cf 91       	pop	r28
    39a0:	df 91       	pop	r29
    39a2:	99 27       	eor	r25, r25
    39a4:	87 fd       	sbrc	r24, 7
    39a6:	90 95       	com	r25
    39a8:	08 95       	ret

000039aa <strrev>:
    39aa:	dc 01       	movw	r26, r24
    39ac:	fc 01       	movw	r30, r24
    39ae:	67 2f       	mov	r22, r23
    39b0:	71 91       	ld	r23, Z+
    39b2:	77 23       	and	r23, r23
    39b4:	e1 f7       	brne	.-8      	; 0x39ae <strrev+0x4>
    39b6:	32 97       	sbiw	r30, 0x02	; 2
    39b8:	04 c0       	rjmp	.+8      	; 0x39c2 <strrev+0x18>
    39ba:	7c 91       	ld	r23, X
    39bc:	6d 93       	st	X+, r22
    39be:	70 83       	st	Z, r23
    39c0:	62 91       	ld	r22, -Z
    39c2:	ae 17       	cp	r26, r30
    39c4:	bf 07       	cpc	r27, r31
    39c6:	c8 f3       	brcs	.-14     	; 0x39ba <strrev+0x10>
    39c8:	08 95       	ret

000039ca <__udivmodhi4>:
    39ca:	aa 1b       	sub	r26, r26
    39cc:	bb 1b       	sub	r27, r27
    39ce:	51 e1       	ldi	r21, 0x11	; 17
    39d0:	07 c0       	rjmp	.+14     	; 0x39e0 <__udivmodhi4_ep>

000039d2 <__udivmodhi4_loop>:
    39d2:	aa 1f       	adc	r26, r26
    39d4:	bb 1f       	adc	r27, r27
    39d6:	a6 17       	cp	r26, r22
    39d8:	b7 07       	cpc	r27, r23
    39da:	10 f0       	brcs	.+4      	; 0x39e0 <__udivmodhi4_ep>
    39dc:	a6 1b       	sub	r26, r22
    39de:	b7 0b       	sbc	r27, r23

000039e0 <__udivmodhi4_ep>:
    39e0:	88 1f       	adc	r24, r24
    39e2:	99 1f       	adc	r25, r25
    39e4:	5a 95       	dec	r21
    39e6:	a9 f7       	brne	.-22     	; 0x39d2 <__udivmodhi4_loop>
    39e8:	80 95       	com	r24
    39ea:	90 95       	com	r25
    39ec:	bc 01       	movw	r22, r24
    39ee:	cd 01       	movw	r24, r26
    39f0:	08 95       	ret

000039f2 <_exit>:
    39f2:	f8 94       	cli

000039f4 <__stop_program>:
    39f4:	ff cf       	rjmp	.-2      	; 0x39f4 <__stop_program>
