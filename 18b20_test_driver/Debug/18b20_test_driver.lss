
18b20_test_driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003b7c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000116  00800060  00003b7c  00003bf0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002490  00000000  00000000  00003d08  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000ad4  00000000  00000000  00006198  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  00006c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001f0  00000000  00000000  00006e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000240c  00000000  00000000  00006ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001377  00000000  00000000  00009408  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d8  00000000  00000000  0000a77f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000b958  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f3  00000000  00000000  0000bb18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009ce  00000000  00000000  0000be0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000c7d9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__ctors_end>
       4:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
       8:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
       c:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      10:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      14:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      18:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      1c:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      20:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      24:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      28:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      2c:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      30:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      34:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      38:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      3c:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      40:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      44:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      48:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      4c:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      50:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      54:	00 40       	sbci	r16, 0x00	; 0
      56:	7a 10       	cpse	r7, r10
      58:	f3 5a       	subi	r31, 0xA3	; 163
      5a:	00 a0       	ldd	r0, Z+32	; 0x20
      5c:	72 4e       	sbci	r23, 0xE2	; 226
      5e:	18 09       	sbc	r17, r8
      60:	00 10       	cpse	r0, r0
      62:	a5 d4       	rcall	.+2378   	; 0x9ae <__floatsisf+0x1a>
      64:	e8 00       	.word	0x00e8	; ????
      66:	00 e8       	ldi	r16, 0x80	; 128
      68:	76 48       	sbci	r23, 0x86	; 134
      6a:	17 00       	.word	0x0017	; ????
      6c:	00 e4       	ldi	r16, 0x40	; 64
      6e:	0b 54       	subi	r16, 0x4B	; 75
      70:	02 00       	.word	0x0002	; ????
      72:	00 ca       	rjmp	.-3072   	; 0xfffff474 <__eeprom_end+0xff7ef474>
      74:	9a 3b       	cpi	r25, 0xBA	; 186
      76:	00 00       	nop
      78:	00 e1       	ldi	r16, 0x10	; 16
      7a:	f5 05       	cpc	r31, r5
      7c:	00 00       	nop
      7e:	80 96       	adiw	r24, 0x20	; 32
      80:	98 00       	.word	0x0098	; ????
      82:	00 00       	nop
      84:	40 42       	sbci	r20, 0x20	; 32
      86:	0f 00       	.word	0x000f	; ????
      88:	00 00       	nop
      8a:	a0 86       	std	Z+8, r10	; 0x08
      8c:	01 00       	.word	0x0001	; ????
      8e:	00 00       	nop
      90:	10 27       	eor	r17, r16
      92:	00 00       	nop
      94:	00 00       	nop
      96:	e8 03       	fmulsu	r22, r16
      98:	00 00       	nop
      9a:	00 00       	nop
      9c:	64 00       	.word	0x0064	; ????
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	0a 00       	.word	0x000a	; ????
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	01 00       	.word	0x0001	; ????
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	2c 76       	andi	r18, 0x6C	; 108
      b0:	d8 88       	ldd	r13, Y+16	; 0x10
      b2:	dc 67       	ori	r29, 0x7C	; 124
      b4:	4f 08       	sbc	r4, r15
      b6:	23 df       	rcall	.-442    	; 0xfffffefe <__eeprom_end+0xff7efefe>
      b8:	c1 df       	rcall	.-126    	; 0x3c <__CCP__+0x8>
      ba:	ae 59       	subi	r26, 0x9E	; 158
      bc:	e1 b1       	in	r30, 0x01	; 1
      be:	b7 96       	adiw	r30, 0x27	; 39
      c0:	e5 e3       	ldi	r30, 0x35	; 53
      c2:	e4 53       	subi	r30, 0x34	; 52
      c4:	c6 3a       	cpi	r28, 0xA6	; 166
      c6:	e6 51       	subi	r30, 0x16	; 22
      c8:	99 76       	andi	r25, 0x69	; 105
      ca:	96 e8       	ldi	r25, 0x86	; 134
      cc:	e6 c2       	rjmp	.+1484   	; 0x69a <__mulsf3+0x172>
      ce:	84 26       	eor	r8, r20
      d0:	eb 89       	ldd	r30, Y+19	; 0x13
      d2:	8c 9b       	sbis	0x11, 4	; 17
      d4:	62 ed       	ldi	r22, 0xD2	; 210
      d6:	40 7c       	andi	r20, 0xC0	; 192
      d8:	6f fc       	.word	0xfc6f	; ????
      da:	ef bc       	out	0x2f, r14	; 47
      dc:	9c 9f       	mul	r25, r28
      de:	40 f2       	brcs	.-112    	; 0x70 <__SREG__+0x31>
      e0:	ba a5       	ldd	r27, Y+42	; 0x2a
      e2:	6f a5       	ldd	r22, Y+47	; 0x2f
      e4:	f4 90       	lpm	r15, Z+
      e6:	05 5a       	subi	r16, 0xA5	; 165
      e8:	2a f7       	brpl	.-54     	; 0xb4 <__SREG__+0x75>
      ea:	5c 93       	st	X, r21
      ec:	6b 6c       	ori	r22, 0xCB	; 203
      ee:	f9 67       	ori	r31, 0x79	; 121
      f0:	6d c1       	rjmp	.+730    	; 0x3cc <_fpadd_parts+0x1f8>
      f2:	1b fc       	.word	0xfc1b	; ????
      f4:	e0 e4       	ldi	r30, 0x40	; 64
      f6:	0d 47       	sbci	r16, 0x7D	; 125
      f8:	fe f5       	brtc	.+126    	; 0x178 <__bad_interrupt>
      fa:	20 e6       	ldi	r18, 0x60	; 96
      fc:	b5 00       	.word	0x00b5	; ????
      fe:	d0 ed       	ldi	r29, 0xD0	; 208
     100:	90 2e       	mov	r9, r16
     102:	03 00       	.word	0x0003	; ????
     104:	94 35       	cpi	r25, 0x54	; 84
     106:	77 05       	cpc	r23, r7
     108:	00 80       	ld	r0, Z
     10a:	84 1e       	adc	r8, r20
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 20       	and	r0, r0
     110:	4e 0a       	sbc	r4, r30
     112:	00 00       	nop
     114:	00 c8       	rjmp	.-4096   	; 0xfffff116 <__eeprom_end+0xff7ef116>
     116:	0c 33       	cpi	r16, 0x3C	; 60
     118:	33 33       	cpi	r19, 0x33	; 51
     11a:	33 0f       	add	r19, r19
     11c:	98 6e       	ori	r25, 0xE8	; 232
     11e:	12 83       	std	Z+2, r17	; 0x02
     120:	11 41       	sbci	r17, 0x11	; 17
     122:	ef 8d       	ldd	r30, Y+31	; 0x1f
     124:	21 14       	cp	r2, r1
     126:	89 3b       	cpi	r24, 0xB9	; 185
     128:	e6 55       	subi	r30, 0x56	; 86
     12a:	16 cf       	rjmp	.-468    	; 0xffffff58 <__eeprom_end+0xff7eff58>
     12c:	fe e6       	ldi	r31, 0x6E	; 110
     12e:	db 18       	sub	r13, r11
     130:	d1 84       	ldd	r13, Z+9	; 0x09
     132:	4b 38       	cpi	r20, 0x8B	; 139
     134:	1b f7       	brvc	.-58     	; 0xfc <__SREG__+0xbd>
     136:	7c 1d       	adc	r23, r12
     138:	90 1d       	adc	r25, r0
     13a:	a4 bb       	out	0x14, r26	; 20
     13c:	e4 24       	eor	r14, r4
     13e:	20 32       	cpi	r18, 0x20	; 32
     140:	84 72       	andi	r24, 0x24	; 36
     142:	5e 22       	and	r5, r30
     144:	81 00       	.word	0x0081	; ????
     146:	c9 f1       	breq	.+114    	; 0x1ba <__fixunssfsi+0x3e>
     148:	24 ec       	ldi	r18, 0xC4	; 196
     14a:	a1 e5       	ldi	r26, 0x51	; 81
     14c:	3d 27       	eor	r19, r29

0000014e <__ctors_end>:
     14e:	11 24       	eor	r1, r1
     150:	1f be       	out	0x3f, r1	; 63
     152:	cf e5       	ldi	r28, 0x5F	; 95
     154:	d4 e0       	ldi	r29, 0x04	; 4
     156:	de bf       	out	0x3e, r29	; 62
     158:	cd bf       	out	0x3d, r28	; 61

0000015a <__do_copy_data>:
     15a:	11 e0       	ldi	r17, 0x01	; 1
     15c:	a0 e6       	ldi	r26, 0x60	; 96
     15e:	b0 e0       	ldi	r27, 0x00	; 0
     160:	ec e7       	ldi	r30, 0x7C	; 124
     162:	fb e3       	ldi	r31, 0x3B	; 59
     164:	02 c0       	rjmp	.+4      	; 0x16a <.do_copy_data_start>

00000166 <.do_copy_data_loop>:
     166:	05 90       	lpm	r0, Z+
     168:	0d 92       	st	X+, r0

0000016a <.do_copy_data_start>:
     16a:	a6 37       	cpi	r26, 0x76	; 118
     16c:	b1 07       	cpc	r27, r17
     16e:	d9 f7       	brne	.-10     	; 0x166 <.do_copy_data_loop>
     170:	0e 94 48 1a 	call	0x3490	; 0x3490 <main>
     174:	0c 94 bc 1d 	jmp	0x3b78	; 0x3b78 <_exit>

00000178 <__bad_interrupt>:
     178:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000017c <__fixunssfsi>:
     17c:	ef 92       	push	r14
     17e:	ff 92       	push	r15
     180:	0f 93       	push	r16
     182:	1f 93       	push	r17
     184:	7b 01       	movw	r14, r22
     186:	8c 01       	movw	r16, r24
     188:	20 e0       	ldi	r18, 0x00	; 0
     18a:	30 e0       	ldi	r19, 0x00	; 0
     18c:	40 e0       	ldi	r20, 0x00	; 0
     18e:	5f e4       	ldi	r21, 0x4F	; 79
     190:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__gesf2>
     194:	88 23       	and	r24, r24
     196:	8c f0       	brlt	.+34     	; 0x1ba <__fixunssfsi+0x3e>
     198:	c8 01       	movw	r24, r16
     19a:	b7 01       	movw	r22, r14
     19c:	20 e0       	ldi	r18, 0x00	; 0
     19e:	30 e0       	ldi	r19, 0x00	; 0
     1a0:	40 e0       	ldi	r20, 0x00	; 0
     1a2:	5f e4       	ldi	r21, 0x4F	; 79
     1a4:	0e 94 36 02 	call	0x46c	; 0x46c <__subsf3>
     1a8:	0e 94 28 05 	call	0xa50	; 0xa50 <__fixsfsi>
     1ac:	9b 01       	movw	r18, r22
     1ae:	ac 01       	movw	r20, r24
     1b0:	20 50       	subi	r18, 0x00	; 0
     1b2:	30 40       	sbci	r19, 0x00	; 0
     1b4:	40 40       	sbci	r20, 0x00	; 0
     1b6:	50 48       	sbci	r21, 0x80	; 128
     1b8:	06 c0       	rjmp	.+12     	; 0x1c6 <__fixunssfsi+0x4a>
     1ba:	c8 01       	movw	r24, r16
     1bc:	b7 01       	movw	r22, r14
     1be:	0e 94 28 05 	call	0xa50	; 0xa50 <__fixsfsi>
     1c2:	9b 01       	movw	r18, r22
     1c4:	ac 01       	movw	r20, r24
     1c6:	b9 01       	movw	r22, r18
     1c8:	ca 01       	movw	r24, r20
     1ca:	1f 91       	pop	r17
     1cc:	0f 91       	pop	r16
     1ce:	ff 90       	pop	r15
     1d0:	ef 90       	pop	r14
     1d2:	08 95       	ret

000001d4 <_fpadd_parts>:
     1d4:	a0 e0       	ldi	r26, 0x00	; 0
     1d6:	b0 e0       	ldi	r27, 0x00	; 0
     1d8:	e0 ef       	ldi	r30, 0xF0	; 240
     1da:	f0 e0       	ldi	r31, 0x00	; 0
     1dc:	0c 94 e5 1a 	jmp	0x35ca	; 0x35ca <__prologue_saves__>
     1e0:	dc 01       	movw	r26, r24
     1e2:	2b 01       	movw	r4, r22
     1e4:	fa 01       	movw	r30, r20
     1e6:	9c 91       	ld	r25, X
     1e8:	92 30       	cpi	r25, 0x02	; 2
     1ea:	08 f4       	brcc	.+2      	; 0x1ee <_fpadd_parts+0x1a>
     1ec:	39 c1       	rjmp	.+626    	; 0x460 <__stack+0x1>
     1ee:	eb 01       	movw	r28, r22
     1f0:	88 81       	ld	r24, Y
     1f2:	82 30       	cpi	r24, 0x02	; 2
     1f4:	08 f4       	brcc	.+2      	; 0x1f8 <_fpadd_parts+0x24>
     1f6:	33 c1       	rjmp	.+614    	; 0x45e <_fpadd_parts+0x28a>
     1f8:	94 30       	cpi	r25, 0x04	; 4
     1fa:	69 f4       	brne	.+26     	; 0x216 <_fpadd_parts+0x42>
     1fc:	84 30       	cpi	r24, 0x04	; 4
     1fe:	09 f0       	breq	.+2      	; 0x202 <_fpadd_parts+0x2e>
     200:	2f c1       	rjmp	.+606    	; 0x460 <__stack+0x1>
     202:	11 96       	adiw	r26, 0x01	; 1
     204:	9c 91       	ld	r25, X
     206:	11 97       	sbiw	r26, 0x01	; 1
     208:	89 81       	ldd	r24, Y+1	; 0x01
     20a:	98 17       	cp	r25, r24
     20c:	09 f4       	brne	.+2      	; 0x210 <_fpadd_parts+0x3c>
     20e:	28 c1       	rjmp	.+592    	; 0x460 <__stack+0x1>
     210:	ad e6       	ldi	r26, 0x6D	; 109
     212:	b0 e0       	ldi	r27, 0x00	; 0
     214:	25 c1       	rjmp	.+586    	; 0x460 <__stack+0x1>
     216:	84 30       	cpi	r24, 0x04	; 4
     218:	09 f4       	brne	.+2      	; 0x21c <_fpadd_parts+0x48>
     21a:	21 c1       	rjmp	.+578    	; 0x45e <_fpadd_parts+0x28a>
     21c:	82 30       	cpi	r24, 0x02	; 2
     21e:	a9 f4       	brne	.+42     	; 0x24a <_fpadd_parts+0x76>
     220:	92 30       	cpi	r25, 0x02	; 2
     222:	09 f0       	breq	.+2      	; 0x226 <_fpadd_parts+0x52>
     224:	1d c1       	rjmp	.+570    	; 0x460 <__stack+0x1>
     226:	9a 01       	movw	r18, r20
     228:	ad 01       	movw	r20, r26
     22a:	88 e0       	ldi	r24, 0x08	; 8
     22c:	ea 01       	movw	r28, r20
     22e:	09 90       	ld	r0, Y+
     230:	ae 01       	movw	r20, r28
     232:	e9 01       	movw	r28, r18
     234:	09 92       	st	Y+, r0
     236:	9e 01       	movw	r18, r28
     238:	81 50       	subi	r24, 0x01	; 1
     23a:	c1 f7       	brne	.-16     	; 0x22c <_fpadd_parts+0x58>
     23c:	e2 01       	movw	r28, r4
     23e:	89 81       	ldd	r24, Y+1	; 0x01
     240:	11 96       	adiw	r26, 0x01	; 1
     242:	9c 91       	ld	r25, X
     244:	89 23       	and	r24, r25
     246:	81 83       	std	Z+1, r24	; 0x01
     248:	08 c1       	rjmp	.+528    	; 0x45a <_fpadd_parts+0x286>
     24a:	92 30       	cpi	r25, 0x02	; 2
     24c:	09 f4       	brne	.+2      	; 0x250 <_fpadd_parts+0x7c>
     24e:	07 c1       	rjmp	.+526    	; 0x45e <_fpadd_parts+0x28a>
     250:	12 96       	adiw	r26, 0x02	; 2
     252:	2d 90       	ld	r2, X+
     254:	3c 90       	ld	r3, X
     256:	13 97       	sbiw	r26, 0x03	; 3
     258:	eb 01       	movw	r28, r22
     25a:	8a 81       	ldd	r24, Y+2	; 0x02
     25c:	9b 81       	ldd	r25, Y+3	; 0x03
     25e:	14 96       	adiw	r26, 0x04	; 4
     260:	ad 90       	ld	r10, X+
     262:	bd 90       	ld	r11, X+
     264:	cd 90       	ld	r12, X+
     266:	dc 90       	ld	r13, X
     268:	17 97       	sbiw	r26, 0x07	; 7
     26a:	ec 80       	ldd	r14, Y+4	; 0x04
     26c:	fd 80       	ldd	r15, Y+5	; 0x05
     26e:	0e 81       	ldd	r16, Y+6	; 0x06
     270:	1f 81       	ldd	r17, Y+7	; 0x07
     272:	91 01       	movw	r18, r2
     274:	28 1b       	sub	r18, r24
     276:	39 0b       	sbc	r19, r25
     278:	b9 01       	movw	r22, r18
     27a:	37 ff       	sbrs	r19, 7
     27c:	04 c0       	rjmp	.+8      	; 0x286 <_fpadd_parts+0xb2>
     27e:	66 27       	eor	r22, r22
     280:	77 27       	eor	r23, r23
     282:	62 1b       	sub	r22, r18
     284:	73 0b       	sbc	r23, r19
     286:	60 32       	cpi	r22, 0x20	; 32
     288:	71 05       	cpc	r23, r1
     28a:	0c f0       	brlt	.+2      	; 0x28e <_fpadd_parts+0xba>
     28c:	61 c0       	rjmp	.+194    	; 0x350 <_fpadd_parts+0x17c>
     28e:	12 16       	cp	r1, r18
     290:	13 06       	cpc	r1, r19
     292:	6c f5       	brge	.+90     	; 0x2ee <_fpadd_parts+0x11a>
     294:	37 01       	movw	r6, r14
     296:	48 01       	movw	r8, r16
     298:	06 2e       	mov	r0, r22
     29a:	04 c0       	rjmp	.+8      	; 0x2a4 <_fpadd_parts+0xd0>
     29c:	96 94       	lsr	r9
     29e:	87 94       	ror	r8
     2a0:	77 94       	ror	r7
     2a2:	67 94       	ror	r6
     2a4:	0a 94       	dec	r0
     2a6:	d2 f7       	brpl	.-12     	; 0x29c <_fpadd_parts+0xc8>
     2a8:	21 e0       	ldi	r18, 0x01	; 1
     2aa:	30 e0       	ldi	r19, 0x00	; 0
     2ac:	40 e0       	ldi	r20, 0x00	; 0
     2ae:	50 e0       	ldi	r21, 0x00	; 0
     2b0:	04 c0       	rjmp	.+8      	; 0x2ba <_fpadd_parts+0xe6>
     2b2:	22 0f       	add	r18, r18
     2b4:	33 1f       	adc	r19, r19
     2b6:	44 1f       	adc	r20, r20
     2b8:	55 1f       	adc	r21, r21
     2ba:	6a 95       	dec	r22
     2bc:	d2 f7       	brpl	.-12     	; 0x2b2 <_fpadd_parts+0xde>
     2be:	21 50       	subi	r18, 0x01	; 1
     2c0:	30 40       	sbci	r19, 0x00	; 0
     2c2:	40 40       	sbci	r20, 0x00	; 0
     2c4:	50 40       	sbci	r21, 0x00	; 0
     2c6:	2e 21       	and	r18, r14
     2c8:	3f 21       	and	r19, r15
     2ca:	40 23       	and	r20, r16
     2cc:	51 23       	and	r21, r17
     2ce:	21 15       	cp	r18, r1
     2d0:	31 05       	cpc	r19, r1
     2d2:	41 05       	cpc	r20, r1
     2d4:	51 05       	cpc	r21, r1
     2d6:	21 f0       	breq	.+8      	; 0x2e0 <_fpadd_parts+0x10c>
     2d8:	21 e0       	ldi	r18, 0x01	; 1
     2da:	30 e0       	ldi	r19, 0x00	; 0
     2dc:	40 e0       	ldi	r20, 0x00	; 0
     2de:	50 e0       	ldi	r21, 0x00	; 0
     2e0:	79 01       	movw	r14, r18
     2e2:	8a 01       	movw	r16, r20
     2e4:	e6 28       	or	r14, r6
     2e6:	f7 28       	or	r15, r7
     2e8:	08 29       	or	r16, r8
     2ea:	19 29       	or	r17, r9
     2ec:	3c c0       	rjmp	.+120    	; 0x366 <_fpadd_parts+0x192>
     2ee:	23 2b       	or	r18, r19
     2f0:	d1 f1       	breq	.+116    	; 0x366 <_fpadd_parts+0x192>
     2f2:	26 0e       	add	r2, r22
     2f4:	37 1e       	adc	r3, r23
     2f6:	35 01       	movw	r6, r10
     2f8:	46 01       	movw	r8, r12
     2fa:	06 2e       	mov	r0, r22
     2fc:	04 c0       	rjmp	.+8      	; 0x306 <_fpadd_parts+0x132>
     2fe:	96 94       	lsr	r9
     300:	87 94       	ror	r8
     302:	77 94       	ror	r7
     304:	67 94       	ror	r6
     306:	0a 94       	dec	r0
     308:	d2 f7       	brpl	.-12     	; 0x2fe <_fpadd_parts+0x12a>
     30a:	21 e0       	ldi	r18, 0x01	; 1
     30c:	30 e0       	ldi	r19, 0x00	; 0
     30e:	40 e0       	ldi	r20, 0x00	; 0
     310:	50 e0       	ldi	r21, 0x00	; 0
     312:	04 c0       	rjmp	.+8      	; 0x31c <_fpadd_parts+0x148>
     314:	22 0f       	add	r18, r18
     316:	33 1f       	adc	r19, r19
     318:	44 1f       	adc	r20, r20
     31a:	55 1f       	adc	r21, r21
     31c:	6a 95       	dec	r22
     31e:	d2 f7       	brpl	.-12     	; 0x314 <_fpadd_parts+0x140>
     320:	21 50       	subi	r18, 0x01	; 1
     322:	30 40       	sbci	r19, 0x00	; 0
     324:	40 40       	sbci	r20, 0x00	; 0
     326:	50 40       	sbci	r21, 0x00	; 0
     328:	2a 21       	and	r18, r10
     32a:	3b 21       	and	r19, r11
     32c:	4c 21       	and	r20, r12
     32e:	5d 21       	and	r21, r13
     330:	21 15       	cp	r18, r1
     332:	31 05       	cpc	r19, r1
     334:	41 05       	cpc	r20, r1
     336:	51 05       	cpc	r21, r1
     338:	21 f0       	breq	.+8      	; 0x342 <_fpadd_parts+0x16e>
     33a:	21 e0       	ldi	r18, 0x01	; 1
     33c:	30 e0       	ldi	r19, 0x00	; 0
     33e:	40 e0       	ldi	r20, 0x00	; 0
     340:	50 e0       	ldi	r21, 0x00	; 0
     342:	59 01       	movw	r10, r18
     344:	6a 01       	movw	r12, r20
     346:	a6 28       	or	r10, r6
     348:	b7 28       	or	r11, r7
     34a:	c8 28       	or	r12, r8
     34c:	d9 28       	or	r13, r9
     34e:	0b c0       	rjmp	.+22     	; 0x366 <_fpadd_parts+0x192>
     350:	82 15       	cp	r24, r2
     352:	93 05       	cpc	r25, r3
     354:	2c f0       	brlt	.+10     	; 0x360 <_fpadd_parts+0x18c>
     356:	1c 01       	movw	r2, r24
     358:	aa 24       	eor	r10, r10
     35a:	bb 24       	eor	r11, r11
     35c:	65 01       	movw	r12, r10
     35e:	03 c0       	rjmp	.+6      	; 0x366 <_fpadd_parts+0x192>
     360:	ee 24       	eor	r14, r14
     362:	ff 24       	eor	r15, r15
     364:	87 01       	movw	r16, r14
     366:	11 96       	adiw	r26, 0x01	; 1
     368:	9c 91       	ld	r25, X
     36a:	d2 01       	movw	r26, r4
     36c:	11 96       	adiw	r26, 0x01	; 1
     36e:	8c 91       	ld	r24, X
     370:	98 17       	cp	r25, r24
     372:	09 f4       	brne	.+2      	; 0x376 <_fpadd_parts+0x1a2>
     374:	45 c0       	rjmp	.+138    	; 0x400 <_fpadd_parts+0x22c>
     376:	99 23       	and	r25, r25
     378:	39 f0       	breq	.+14     	; 0x388 <_fpadd_parts+0x1b4>
     37a:	a8 01       	movw	r20, r16
     37c:	97 01       	movw	r18, r14
     37e:	2a 19       	sub	r18, r10
     380:	3b 09       	sbc	r19, r11
     382:	4c 09       	sbc	r20, r12
     384:	5d 09       	sbc	r21, r13
     386:	06 c0       	rjmp	.+12     	; 0x394 <_fpadd_parts+0x1c0>
     388:	a6 01       	movw	r20, r12
     38a:	95 01       	movw	r18, r10
     38c:	2e 19       	sub	r18, r14
     38e:	3f 09       	sbc	r19, r15
     390:	40 0b       	sbc	r20, r16
     392:	51 0b       	sbc	r21, r17
     394:	57 fd       	sbrc	r21, 7
     396:	08 c0       	rjmp	.+16     	; 0x3a8 <_fpadd_parts+0x1d4>
     398:	11 82       	std	Z+1, r1	; 0x01
     39a:	33 82       	std	Z+3, r3	; 0x03
     39c:	22 82       	std	Z+2, r2	; 0x02
     39e:	24 83       	std	Z+4, r18	; 0x04
     3a0:	35 83       	std	Z+5, r19	; 0x05
     3a2:	46 83       	std	Z+6, r20	; 0x06
     3a4:	57 83       	std	Z+7, r21	; 0x07
     3a6:	1d c0       	rjmp	.+58     	; 0x3e2 <_fpadd_parts+0x20e>
     3a8:	81 e0       	ldi	r24, 0x01	; 1
     3aa:	81 83       	std	Z+1, r24	; 0x01
     3ac:	33 82       	std	Z+3, r3	; 0x03
     3ae:	22 82       	std	Z+2, r2	; 0x02
     3b0:	88 27       	eor	r24, r24
     3b2:	99 27       	eor	r25, r25
     3b4:	dc 01       	movw	r26, r24
     3b6:	82 1b       	sub	r24, r18
     3b8:	93 0b       	sbc	r25, r19
     3ba:	a4 0b       	sbc	r26, r20
     3bc:	b5 0b       	sbc	r27, r21
     3be:	84 83       	std	Z+4, r24	; 0x04
     3c0:	95 83       	std	Z+5, r25	; 0x05
     3c2:	a6 83       	std	Z+6, r26	; 0x06
     3c4:	b7 83       	std	Z+7, r27	; 0x07
     3c6:	0d c0       	rjmp	.+26     	; 0x3e2 <_fpadd_parts+0x20e>
     3c8:	22 0f       	add	r18, r18
     3ca:	33 1f       	adc	r19, r19
     3cc:	44 1f       	adc	r20, r20
     3ce:	55 1f       	adc	r21, r21
     3d0:	24 83       	std	Z+4, r18	; 0x04
     3d2:	35 83       	std	Z+5, r19	; 0x05
     3d4:	46 83       	std	Z+6, r20	; 0x06
     3d6:	57 83       	std	Z+7, r21	; 0x07
     3d8:	82 81       	ldd	r24, Z+2	; 0x02
     3da:	93 81       	ldd	r25, Z+3	; 0x03
     3dc:	01 97       	sbiw	r24, 0x01	; 1
     3de:	93 83       	std	Z+3, r25	; 0x03
     3e0:	82 83       	std	Z+2, r24	; 0x02
     3e2:	24 81       	ldd	r18, Z+4	; 0x04
     3e4:	35 81       	ldd	r19, Z+5	; 0x05
     3e6:	46 81       	ldd	r20, Z+6	; 0x06
     3e8:	57 81       	ldd	r21, Z+7	; 0x07
     3ea:	da 01       	movw	r26, r20
     3ec:	c9 01       	movw	r24, r18
     3ee:	01 97       	sbiw	r24, 0x01	; 1
     3f0:	a1 09       	sbc	r26, r1
     3f2:	b1 09       	sbc	r27, r1
     3f4:	8f 5f       	subi	r24, 0xFF	; 255
     3f6:	9f 4f       	sbci	r25, 0xFF	; 255
     3f8:	af 4f       	sbci	r26, 0xFF	; 255
     3fa:	bf 43       	sbci	r27, 0x3F	; 63
     3fc:	28 f3       	brcs	.-54     	; 0x3c8 <_fpadd_parts+0x1f4>
     3fe:	0b c0       	rjmp	.+22     	; 0x416 <_fpadd_parts+0x242>
     400:	91 83       	std	Z+1, r25	; 0x01
     402:	33 82       	std	Z+3, r3	; 0x03
     404:	22 82       	std	Z+2, r2	; 0x02
     406:	ea 0c       	add	r14, r10
     408:	fb 1c       	adc	r15, r11
     40a:	0c 1d       	adc	r16, r12
     40c:	1d 1d       	adc	r17, r13
     40e:	e4 82       	std	Z+4, r14	; 0x04
     410:	f5 82       	std	Z+5, r15	; 0x05
     412:	06 83       	std	Z+6, r16	; 0x06
     414:	17 83       	std	Z+7, r17	; 0x07
     416:	83 e0       	ldi	r24, 0x03	; 3
     418:	80 83       	st	Z, r24
     41a:	24 81       	ldd	r18, Z+4	; 0x04
     41c:	35 81       	ldd	r19, Z+5	; 0x05
     41e:	46 81       	ldd	r20, Z+6	; 0x06
     420:	57 81       	ldd	r21, Z+7	; 0x07
     422:	57 ff       	sbrs	r21, 7
     424:	1a c0       	rjmp	.+52     	; 0x45a <_fpadd_parts+0x286>
     426:	c9 01       	movw	r24, r18
     428:	aa 27       	eor	r26, r26
     42a:	97 fd       	sbrc	r25, 7
     42c:	a0 95       	com	r26
     42e:	ba 2f       	mov	r27, r26
     430:	81 70       	andi	r24, 0x01	; 1
     432:	90 70       	andi	r25, 0x00	; 0
     434:	a0 70       	andi	r26, 0x00	; 0
     436:	b0 70       	andi	r27, 0x00	; 0
     438:	56 95       	lsr	r21
     43a:	47 95       	ror	r20
     43c:	37 95       	ror	r19
     43e:	27 95       	ror	r18
     440:	82 2b       	or	r24, r18
     442:	93 2b       	or	r25, r19
     444:	a4 2b       	or	r26, r20
     446:	b5 2b       	or	r27, r21
     448:	84 83       	std	Z+4, r24	; 0x04
     44a:	95 83       	std	Z+5, r25	; 0x05
     44c:	a6 83       	std	Z+6, r26	; 0x06
     44e:	b7 83       	std	Z+7, r27	; 0x07
     450:	82 81       	ldd	r24, Z+2	; 0x02
     452:	93 81       	ldd	r25, Z+3	; 0x03
     454:	01 96       	adiw	r24, 0x01	; 1
     456:	93 83       	std	Z+3, r25	; 0x03
     458:	82 83       	std	Z+2, r24	; 0x02
     45a:	df 01       	movw	r26, r30
     45c:	01 c0       	rjmp	.+2      	; 0x460 <__stack+0x1>
     45e:	d2 01       	movw	r26, r4
     460:	cd 01       	movw	r24, r26
     462:	cd b7       	in	r28, 0x3d	; 61
     464:	de b7       	in	r29, 0x3e	; 62
     466:	e2 e1       	ldi	r30, 0x12	; 18
     468:	0c 94 01 1b 	jmp	0x3602	; 0x3602 <__epilogue_restores__>

0000046c <__subsf3>:
     46c:	a0 e2       	ldi	r26, 0x20	; 32
     46e:	b0 e0       	ldi	r27, 0x00	; 0
     470:	ec e3       	ldi	r30, 0x3C	; 60
     472:	f2 e0       	ldi	r31, 0x02	; 2
     474:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__prologue_saves__+0x18>
     478:	69 83       	std	Y+1, r22	; 0x01
     47a:	7a 83       	std	Y+2, r23	; 0x02
     47c:	8b 83       	std	Y+3, r24	; 0x03
     47e:	9c 83       	std	Y+4, r25	; 0x04
     480:	2d 83       	std	Y+5, r18	; 0x05
     482:	3e 83       	std	Y+6, r19	; 0x06
     484:	4f 83       	std	Y+7, r20	; 0x07
     486:	58 87       	std	Y+8, r21	; 0x08
     488:	e9 e0       	ldi	r30, 0x09	; 9
     48a:	ee 2e       	mov	r14, r30
     48c:	f1 2c       	mov	r15, r1
     48e:	ec 0e       	add	r14, r28
     490:	fd 1e       	adc	r15, r29
     492:	ce 01       	movw	r24, r28
     494:	01 96       	adiw	r24, 0x01	; 1
     496:	b7 01       	movw	r22, r14
     498:	0e 94 a0 06 	call	0xd40	; 0xd40 <__unpack_f>
     49c:	8e 01       	movw	r16, r28
     49e:	0f 5e       	subi	r16, 0xEF	; 239
     4a0:	1f 4f       	sbci	r17, 0xFF	; 255
     4a2:	ce 01       	movw	r24, r28
     4a4:	05 96       	adiw	r24, 0x05	; 5
     4a6:	b8 01       	movw	r22, r16
     4a8:	0e 94 a0 06 	call	0xd40	; 0xd40 <__unpack_f>
     4ac:	8a 89       	ldd	r24, Y+18	; 0x12
     4ae:	91 e0       	ldi	r25, 0x01	; 1
     4b0:	89 27       	eor	r24, r25
     4b2:	8a 8b       	std	Y+18, r24	; 0x12
     4b4:	c7 01       	movw	r24, r14
     4b6:	b8 01       	movw	r22, r16
     4b8:	ae 01       	movw	r20, r28
     4ba:	47 5e       	subi	r20, 0xE7	; 231
     4bc:	5f 4f       	sbci	r21, 0xFF	; 255
     4be:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <_fpadd_parts>
     4c2:	0e 94 cb 05 	call	0xb96	; 0xb96 <__pack_f>
     4c6:	a0 96       	adiw	r28, 0x20	; 32
     4c8:	e6 e0       	ldi	r30, 0x06	; 6
     4ca:	0c 94 0d 1b 	jmp	0x361a	; 0x361a <__epilogue_restores__+0x18>

000004ce <__addsf3>:
     4ce:	a0 e2       	ldi	r26, 0x20	; 32
     4d0:	b0 e0       	ldi	r27, 0x00	; 0
     4d2:	ed e6       	ldi	r30, 0x6D	; 109
     4d4:	f2 e0       	ldi	r31, 0x02	; 2
     4d6:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__prologue_saves__+0x18>
     4da:	69 83       	std	Y+1, r22	; 0x01
     4dc:	7a 83       	std	Y+2, r23	; 0x02
     4de:	8b 83       	std	Y+3, r24	; 0x03
     4e0:	9c 83       	std	Y+4, r25	; 0x04
     4e2:	2d 83       	std	Y+5, r18	; 0x05
     4e4:	3e 83       	std	Y+6, r19	; 0x06
     4e6:	4f 83       	std	Y+7, r20	; 0x07
     4e8:	58 87       	std	Y+8, r21	; 0x08
     4ea:	f9 e0       	ldi	r31, 0x09	; 9
     4ec:	ef 2e       	mov	r14, r31
     4ee:	f1 2c       	mov	r15, r1
     4f0:	ec 0e       	add	r14, r28
     4f2:	fd 1e       	adc	r15, r29
     4f4:	ce 01       	movw	r24, r28
     4f6:	01 96       	adiw	r24, 0x01	; 1
     4f8:	b7 01       	movw	r22, r14
     4fa:	0e 94 a0 06 	call	0xd40	; 0xd40 <__unpack_f>
     4fe:	8e 01       	movw	r16, r28
     500:	0f 5e       	subi	r16, 0xEF	; 239
     502:	1f 4f       	sbci	r17, 0xFF	; 255
     504:	ce 01       	movw	r24, r28
     506:	05 96       	adiw	r24, 0x05	; 5
     508:	b8 01       	movw	r22, r16
     50a:	0e 94 a0 06 	call	0xd40	; 0xd40 <__unpack_f>
     50e:	c7 01       	movw	r24, r14
     510:	b8 01       	movw	r22, r16
     512:	ae 01       	movw	r20, r28
     514:	47 5e       	subi	r20, 0xE7	; 231
     516:	5f 4f       	sbci	r21, 0xFF	; 255
     518:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <_fpadd_parts>
     51c:	0e 94 cb 05 	call	0xb96	; 0xb96 <__pack_f>
     520:	a0 96       	adiw	r28, 0x20	; 32
     522:	e6 e0       	ldi	r30, 0x06	; 6
     524:	0c 94 0d 1b 	jmp	0x361a	; 0x361a <__epilogue_restores__+0x18>

00000528 <__mulsf3>:
     528:	a0 e2       	ldi	r26, 0x20	; 32
     52a:	b0 e0       	ldi	r27, 0x00	; 0
     52c:	ea e9       	ldi	r30, 0x9A	; 154
     52e:	f2 e0       	ldi	r31, 0x02	; 2
     530:	0c 94 e5 1a 	jmp	0x35ca	; 0x35ca <__prologue_saves__>
     534:	69 83       	std	Y+1, r22	; 0x01
     536:	7a 83       	std	Y+2, r23	; 0x02
     538:	8b 83       	std	Y+3, r24	; 0x03
     53a:	9c 83       	std	Y+4, r25	; 0x04
     53c:	2d 83       	std	Y+5, r18	; 0x05
     53e:	3e 83       	std	Y+6, r19	; 0x06
     540:	4f 83       	std	Y+7, r20	; 0x07
     542:	58 87       	std	Y+8, r21	; 0x08
     544:	ce 01       	movw	r24, r28
     546:	01 96       	adiw	r24, 0x01	; 1
     548:	be 01       	movw	r22, r28
     54a:	67 5f       	subi	r22, 0xF7	; 247
     54c:	7f 4f       	sbci	r23, 0xFF	; 255
     54e:	0e 94 a0 06 	call	0xd40	; 0xd40 <__unpack_f>
     552:	ce 01       	movw	r24, r28
     554:	05 96       	adiw	r24, 0x05	; 5
     556:	be 01       	movw	r22, r28
     558:	6f 5e       	subi	r22, 0xEF	; 239
     55a:	7f 4f       	sbci	r23, 0xFF	; 255
     55c:	0e 94 a0 06 	call	0xd40	; 0xd40 <__unpack_f>
     560:	99 85       	ldd	r25, Y+9	; 0x09
     562:	92 30       	cpi	r25, 0x02	; 2
     564:	88 f0       	brcs	.+34     	; 0x588 <__mulsf3+0x60>
     566:	89 89       	ldd	r24, Y+17	; 0x11
     568:	82 30       	cpi	r24, 0x02	; 2
     56a:	c8 f0       	brcs	.+50     	; 0x59e <__mulsf3+0x76>
     56c:	94 30       	cpi	r25, 0x04	; 4
     56e:	19 f4       	brne	.+6      	; 0x576 <__mulsf3+0x4e>
     570:	82 30       	cpi	r24, 0x02	; 2
     572:	51 f4       	brne	.+20     	; 0x588 <__mulsf3+0x60>
     574:	04 c0       	rjmp	.+8      	; 0x57e <__mulsf3+0x56>
     576:	84 30       	cpi	r24, 0x04	; 4
     578:	29 f4       	brne	.+10     	; 0x584 <__mulsf3+0x5c>
     57a:	92 30       	cpi	r25, 0x02	; 2
     57c:	81 f4       	brne	.+32     	; 0x59e <__mulsf3+0x76>
     57e:	8d e6       	ldi	r24, 0x6D	; 109
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	c6 c0       	rjmp	.+396    	; 0x710 <__mulsf3+0x1e8>
     584:	92 30       	cpi	r25, 0x02	; 2
     586:	49 f4       	brne	.+18     	; 0x59a <__mulsf3+0x72>
     588:	20 e0       	ldi	r18, 0x00	; 0
     58a:	9a 85       	ldd	r25, Y+10	; 0x0a
     58c:	8a 89       	ldd	r24, Y+18	; 0x12
     58e:	98 13       	cpse	r25, r24
     590:	21 e0       	ldi	r18, 0x01	; 1
     592:	2a 87       	std	Y+10, r18	; 0x0a
     594:	ce 01       	movw	r24, r28
     596:	09 96       	adiw	r24, 0x09	; 9
     598:	bb c0       	rjmp	.+374    	; 0x710 <__mulsf3+0x1e8>
     59a:	82 30       	cpi	r24, 0x02	; 2
     59c:	49 f4       	brne	.+18     	; 0x5b0 <__mulsf3+0x88>
     59e:	20 e0       	ldi	r18, 0x00	; 0
     5a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     5a2:	8a 89       	ldd	r24, Y+18	; 0x12
     5a4:	98 13       	cpse	r25, r24
     5a6:	21 e0       	ldi	r18, 0x01	; 1
     5a8:	2a 8b       	std	Y+18, r18	; 0x12
     5aa:	ce 01       	movw	r24, r28
     5ac:	41 96       	adiw	r24, 0x11	; 17
     5ae:	b0 c0       	rjmp	.+352    	; 0x710 <__mulsf3+0x1e8>
     5b0:	2d 84       	ldd	r2, Y+13	; 0x0d
     5b2:	3e 84       	ldd	r3, Y+14	; 0x0e
     5b4:	4f 84       	ldd	r4, Y+15	; 0x0f
     5b6:	58 88       	ldd	r5, Y+16	; 0x10
     5b8:	6d 88       	ldd	r6, Y+21	; 0x15
     5ba:	7e 88       	ldd	r7, Y+22	; 0x16
     5bc:	8f 88       	ldd	r8, Y+23	; 0x17
     5be:	98 8c       	ldd	r9, Y+24	; 0x18
     5c0:	ee 24       	eor	r14, r14
     5c2:	ff 24       	eor	r15, r15
     5c4:	87 01       	movw	r16, r14
     5c6:	aa 24       	eor	r10, r10
     5c8:	bb 24       	eor	r11, r11
     5ca:	65 01       	movw	r12, r10
     5cc:	40 e0       	ldi	r20, 0x00	; 0
     5ce:	50 e0       	ldi	r21, 0x00	; 0
     5d0:	60 e0       	ldi	r22, 0x00	; 0
     5d2:	70 e0       	ldi	r23, 0x00	; 0
     5d4:	e0 e0       	ldi	r30, 0x00	; 0
     5d6:	f0 e0       	ldi	r31, 0x00	; 0
     5d8:	c1 01       	movw	r24, r2
     5da:	81 70       	andi	r24, 0x01	; 1
     5dc:	90 70       	andi	r25, 0x00	; 0
     5de:	89 2b       	or	r24, r25
     5e0:	e9 f0       	breq	.+58     	; 0x61c <__mulsf3+0xf4>
     5e2:	e6 0c       	add	r14, r6
     5e4:	f7 1c       	adc	r15, r7
     5e6:	08 1d       	adc	r16, r8
     5e8:	19 1d       	adc	r17, r9
     5ea:	9a 01       	movw	r18, r20
     5ec:	ab 01       	movw	r20, r22
     5ee:	2a 0d       	add	r18, r10
     5f0:	3b 1d       	adc	r19, r11
     5f2:	4c 1d       	adc	r20, r12
     5f4:	5d 1d       	adc	r21, r13
     5f6:	80 e0       	ldi	r24, 0x00	; 0
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	a0 e0       	ldi	r26, 0x00	; 0
     5fc:	b0 e0       	ldi	r27, 0x00	; 0
     5fe:	e6 14       	cp	r14, r6
     600:	f7 04       	cpc	r15, r7
     602:	08 05       	cpc	r16, r8
     604:	19 05       	cpc	r17, r9
     606:	20 f4       	brcc	.+8      	; 0x610 <__mulsf3+0xe8>
     608:	81 e0       	ldi	r24, 0x01	; 1
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	a0 e0       	ldi	r26, 0x00	; 0
     60e:	b0 e0       	ldi	r27, 0x00	; 0
     610:	ba 01       	movw	r22, r20
     612:	a9 01       	movw	r20, r18
     614:	48 0f       	add	r20, r24
     616:	59 1f       	adc	r21, r25
     618:	6a 1f       	adc	r22, r26
     61a:	7b 1f       	adc	r23, r27
     61c:	aa 0c       	add	r10, r10
     61e:	bb 1c       	adc	r11, r11
     620:	cc 1c       	adc	r12, r12
     622:	dd 1c       	adc	r13, r13
     624:	97 fe       	sbrs	r9, 7
     626:	08 c0       	rjmp	.+16     	; 0x638 <__mulsf3+0x110>
     628:	81 e0       	ldi	r24, 0x01	; 1
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	a0 e0       	ldi	r26, 0x00	; 0
     62e:	b0 e0       	ldi	r27, 0x00	; 0
     630:	a8 2a       	or	r10, r24
     632:	b9 2a       	or	r11, r25
     634:	ca 2a       	or	r12, r26
     636:	db 2a       	or	r13, r27
     638:	31 96       	adiw	r30, 0x01	; 1
     63a:	e0 32       	cpi	r30, 0x20	; 32
     63c:	f1 05       	cpc	r31, r1
     63e:	49 f0       	breq	.+18     	; 0x652 <__mulsf3+0x12a>
     640:	66 0c       	add	r6, r6
     642:	77 1c       	adc	r7, r7
     644:	88 1c       	adc	r8, r8
     646:	99 1c       	adc	r9, r9
     648:	56 94       	lsr	r5
     64a:	47 94       	ror	r4
     64c:	37 94       	ror	r3
     64e:	27 94       	ror	r2
     650:	c3 cf       	rjmp	.-122    	; 0x5d8 <__mulsf3+0xb0>
     652:	fa 85       	ldd	r31, Y+10	; 0x0a
     654:	ea 89       	ldd	r30, Y+18	; 0x12
     656:	2b 89       	ldd	r18, Y+19	; 0x13
     658:	3c 89       	ldd	r19, Y+20	; 0x14
     65a:	8b 85       	ldd	r24, Y+11	; 0x0b
     65c:	9c 85       	ldd	r25, Y+12	; 0x0c
     65e:	28 0f       	add	r18, r24
     660:	39 1f       	adc	r19, r25
     662:	2e 5f       	subi	r18, 0xFE	; 254
     664:	3f 4f       	sbci	r19, 0xFF	; 255
     666:	17 c0       	rjmp	.+46     	; 0x696 <__mulsf3+0x16e>
     668:	ca 01       	movw	r24, r20
     66a:	81 70       	andi	r24, 0x01	; 1
     66c:	90 70       	andi	r25, 0x00	; 0
     66e:	89 2b       	or	r24, r25
     670:	61 f0       	breq	.+24     	; 0x68a <__mulsf3+0x162>
     672:	16 95       	lsr	r17
     674:	07 95       	ror	r16
     676:	f7 94       	ror	r15
     678:	e7 94       	ror	r14
     67a:	80 e0       	ldi	r24, 0x00	; 0
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	a0 e0       	ldi	r26, 0x00	; 0
     680:	b0 e8       	ldi	r27, 0x80	; 128
     682:	e8 2a       	or	r14, r24
     684:	f9 2a       	or	r15, r25
     686:	0a 2b       	or	r16, r26
     688:	1b 2b       	or	r17, r27
     68a:	76 95       	lsr	r23
     68c:	67 95       	ror	r22
     68e:	57 95       	ror	r21
     690:	47 95       	ror	r20
     692:	2f 5f       	subi	r18, 0xFF	; 255
     694:	3f 4f       	sbci	r19, 0xFF	; 255
     696:	77 fd       	sbrc	r23, 7
     698:	e7 cf       	rjmp	.-50     	; 0x668 <__mulsf3+0x140>
     69a:	0c c0       	rjmp	.+24     	; 0x6b4 <__mulsf3+0x18c>
     69c:	44 0f       	add	r20, r20
     69e:	55 1f       	adc	r21, r21
     6a0:	66 1f       	adc	r22, r22
     6a2:	77 1f       	adc	r23, r23
     6a4:	17 fd       	sbrc	r17, 7
     6a6:	41 60       	ori	r20, 0x01	; 1
     6a8:	ee 0c       	add	r14, r14
     6aa:	ff 1c       	adc	r15, r15
     6ac:	00 1f       	adc	r16, r16
     6ae:	11 1f       	adc	r17, r17
     6b0:	21 50       	subi	r18, 0x01	; 1
     6b2:	30 40       	sbci	r19, 0x00	; 0
     6b4:	40 30       	cpi	r20, 0x00	; 0
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	59 07       	cpc	r21, r25
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	69 07       	cpc	r22, r25
     6be:	90 e4       	ldi	r25, 0x40	; 64
     6c0:	79 07       	cpc	r23, r25
     6c2:	60 f3       	brcs	.-40     	; 0x69c <__mulsf3+0x174>
     6c4:	2b 8f       	std	Y+27, r18	; 0x1b
     6c6:	3c 8f       	std	Y+28, r19	; 0x1c
     6c8:	db 01       	movw	r26, r22
     6ca:	ca 01       	movw	r24, r20
     6cc:	8f 77       	andi	r24, 0x7F	; 127
     6ce:	90 70       	andi	r25, 0x00	; 0
     6d0:	a0 70       	andi	r26, 0x00	; 0
     6d2:	b0 70       	andi	r27, 0x00	; 0
     6d4:	80 34       	cpi	r24, 0x40	; 64
     6d6:	91 05       	cpc	r25, r1
     6d8:	a1 05       	cpc	r26, r1
     6da:	b1 05       	cpc	r27, r1
     6dc:	61 f4       	brne	.+24     	; 0x6f6 <__mulsf3+0x1ce>
     6de:	47 fd       	sbrc	r20, 7
     6e0:	0a c0       	rjmp	.+20     	; 0x6f6 <__mulsf3+0x1ce>
     6e2:	e1 14       	cp	r14, r1
     6e4:	f1 04       	cpc	r15, r1
     6e6:	01 05       	cpc	r16, r1
     6e8:	11 05       	cpc	r17, r1
     6ea:	29 f0       	breq	.+10     	; 0x6f6 <__mulsf3+0x1ce>
     6ec:	40 5c       	subi	r20, 0xC0	; 192
     6ee:	5f 4f       	sbci	r21, 0xFF	; 255
     6f0:	6f 4f       	sbci	r22, 0xFF	; 255
     6f2:	7f 4f       	sbci	r23, 0xFF	; 255
     6f4:	40 78       	andi	r20, 0x80	; 128
     6f6:	1a 8e       	std	Y+26, r1	; 0x1a
     6f8:	fe 17       	cp	r31, r30
     6fa:	11 f0       	breq	.+4      	; 0x700 <__mulsf3+0x1d8>
     6fc:	81 e0       	ldi	r24, 0x01	; 1
     6fe:	8a 8f       	std	Y+26, r24	; 0x1a
     700:	4d 8f       	std	Y+29, r20	; 0x1d
     702:	5e 8f       	std	Y+30, r21	; 0x1e
     704:	6f 8f       	std	Y+31, r22	; 0x1f
     706:	78 a3       	std	Y+32, r23	; 0x20
     708:	83 e0       	ldi	r24, 0x03	; 3
     70a:	89 8f       	std	Y+25, r24	; 0x19
     70c:	ce 01       	movw	r24, r28
     70e:	49 96       	adiw	r24, 0x19	; 25
     710:	0e 94 cb 05 	call	0xb96	; 0xb96 <__pack_f>
     714:	a0 96       	adiw	r28, 0x20	; 32
     716:	e2 e1       	ldi	r30, 0x12	; 18
     718:	0c 94 01 1b 	jmp	0x3602	; 0x3602 <__epilogue_restores__>

0000071c <__divsf3>:
     71c:	a8 e1       	ldi	r26, 0x18	; 24
     71e:	b0 e0       	ldi	r27, 0x00	; 0
     720:	e4 e9       	ldi	r30, 0x94	; 148
     722:	f3 e0       	ldi	r31, 0x03	; 3
     724:	0c 94 ed 1a 	jmp	0x35da	; 0x35da <__prologue_saves__+0x10>
     728:	69 83       	std	Y+1, r22	; 0x01
     72a:	7a 83       	std	Y+2, r23	; 0x02
     72c:	8b 83       	std	Y+3, r24	; 0x03
     72e:	9c 83       	std	Y+4, r25	; 0x04
     730:	2d 83       	std	Y+5, r18	; 0x05
     732:	3e 83       	std	Y+6, r19	; 0x06
     734:	4f 83       	std	Y+7, r20	; 0x07
     736:	58 87       	std	Y+8, r21	; 0x08
     738:	b9 e0       	ldi	r27, 0x09	; 9
     73a:	eb 2e       	mov	r14, r27
     73c:	f1 2c       	mov	r15, r1
     73e:	ec 0e       	add	r14, r28
     740:	fd 1e       	adc	r15, r29
     742:	ce 01       	movw	r24, r28
     744:	01 96       	adiw	r24, 0x01	; 1
     746:	b7 01       	movw	r22, r14
     748:	0e 94 a0 06 	call	0xd40	; 0xd40 <__unpack_f>
     74c:	8e 01       	movw	r16, r28
     74e:	0f 5e       	subi	r16, 0xEF	; 239
     750:	1f 4f       	sbci	r17, 0xFF	; 255
     752:	ce 01       	movw	r24, r28
     754:	05 96       	adiw	r24, 0x05	; 5
     756:	b8 01       	movw	r22, r16
     758:	0e 94 a0 06 	call	0xd40	; 0xd40 <__unpack_f>
     75c:	29 85       	ldd	r18, Y+9	; 0x09
     75e:	22 30       	cpi	r18, 0x02	; 2
     760:	08 f4       	brcc	.+2      	; 0x764 <__divsf3+0x48>
     762:	7e c0       	rjmp	.+252    	; 0x860 <__divsf3+0x144>
     764:	39 89       	ldd	r19, Y+17	; 0x11
     766:	32 30       	cpi	r19, 0x02	; 2
     768:	10 f4       	brcc	.+4      	; 0x76e <__divsf3+0x52>
     76a:	b8 01       	movw	r22, r16
     76c:	7c c0       	rjmp	.+248    	; 0x866 <__divsf3+0x14a>
     76e:	8a 85       	ldd	r24, Y+10	; 0x0a
     770:	9a 89       	ldd	r25, Y+18	; 0x12
     772:	89 27       	eor	r24, r25
     774:	8a 87       	std	Y+10, r24	; 0x0a
     776:	24 30       	cpi	r18, 0x04	; 4
     778:	11 f0       	breq	.+4      	; 0x77e <__divsf3+0x62>
     77a:	22 30       	cpi	r18, 0x02	; 2
     77c:	31 f4       	brne	.+12     	; 0x78a <__divsf3+0x6e>
     77e:	23 17       	cp	r18, r19
     780:	09 f0       	breq	.+2      	; 0x784 <__divsf3+0x68>
     782:	6e c0       	rjmp	.+220    	; 0x860 <__divsf3+0x144>
     784:	6d e6       	ldi	r22, 0x6D	; 109
     786:	70 e0       	ldi	r23, 0x00	; 0
     788:	6e c0       	rjmp	.+220    	; 0x866 <__divsf3+0x14a>
     78a:	34 30       	cpi	r19, 0x04	; 4
     78c:	39 f4       	brne	.+14     	; 0x79c <__divsf3+0x80>
     78e:	1d 86       	std	Y+13, r1	; 0x0d
     790:	1e 86       	std	Y+14, r1	; 0x0e
     792:	1f 86       	std	Y+15, r1	; 0x0f
     794:	18 8a       	std	Y+16, r1	; 0x10
     796:	1c 86       	std	Y+12, r1	; 0x0c
     798:	1b 86       	std	Y+11, r1	; 0x0b
     79a:	04 c0       	rjmp	.+8      	; 0x7a4 <__divsf3+0x88>
     79c:	32 30       	cpi	r19, 0x02	; 2
     79e:	21 f4       	brne	.+8      	; 0x7a8 <__divsf3+0x8c>
     7a0:	84 e0       	ldi	r24, 0x04	; 4
     7a2:	89 87       	std	Y+9, r24	; 0x09
     7a4:	b7 01       	movw	r22, r14
     7a6:	5f c0       	rjmp	.+190    	; 0x866 <__divsf3+0x14a>
     7a8:	2b 85       	ldd	r18, Y+11	; 0x0b
     7aa:	3c 85       	ldd	r19, Y+12	; 0x0c
     7ac:	8b 89       	ldd	r24, Y+19	; 0x13
     7ae:	9c 89       	ldd	r25, Y+20	; 0x14
     7b0:	28 1b       	sub	r18, r24
     7b2:	39 0b       	sbc	r19, r25
     7b4:	3c 87       	std	Y+12, r19	; 0x0c
     7b6:	2b 87       	std	Y+11, r18	; 0x0b
     7b8:	ed 84       	ldd	r14, Y+13	; 0x0d
     7ba:	fe 84       	ldd	r15, Y+14	; 0x0e
     7bc:	0f 85       	ldd	r16, Y+15	; 0x0f
     7be:	18 89       	ldd	r17, Y+16	; 0x10
     7c0:	ad 88       	ldd	r10, Y+21	; 0x15
     7c2:	be 88       	ldd	r11, Y+22	; 0x16
     7c4:	cf 88       	ldd	r12, Y+23	; 0x17
     7c6:	d8 8c       	ldd	r13, Y+24	; 0x18
     7c8:	ea 14       	cp	r14, r10
     7ca:	fb 04       	cpc	r15, r11
     7cc:	0c 05       	cpc	r16, r12
     7ce:	1d 05       	cpc	r17, r13
     7d0:	40 f4       	brcc	.+16     	; 0x7e2 <__divsf3+0xc6>
     7d2:	ee 0c       	add	r14, r14
     7d4:	ff 1c       	adc	r15, r15
     7d6:	00 1f       	adc	r16, r16
     7d8:	11 1f       	adc	r17, r17
     7da:	21 50       	subi	r18, 0x01	; 1
     7dc:	30 40       	sbci	r19, 0x00	; 0
     7de:	3c 87       	std	Y+12, r19	; 0x0c
     7e0:	2b 87       	std	Y+11, r18	; 0x0b
     7e2:	20 e0       	ldi	r18, 0x00	; 0
     7e4:	30 e0       	ldi	r19, 0x00	; 0
     7e6:	40 e0       	ldi	r20, 0x00	; 0
     7e8:	50 e0       	ldi	r21, 0x00	; 0
     7ea:	80 e0       	ldi	r24, 0x00	; 0
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	a0 e0       	ldi	r26, 0x00	; 0
     7f0:	b0 e4       	ldi	r27, 0x40	; 64
     7f2:	60 e0       	ldi	r22, 0x00	; 0
     7f4:	70 e0       	ldi	r23, 0x00	; 0
     7f6:	ea 14       	cp	r14, r10
     7f8:	fb 04       	cpc	r15, r11
     7fa:	0c 05       	cpc	r16, r12
     7fc:	1d 05       	cpc	r17, r13
     7fe:	40 f0       	brcs	.+16     	; 0x810 <__divsf3+0xf4>
     800:	28 2b       	or	r18, r24
     802:	39 2b       	or	r19, r25
     804:	4a 2b       	or	r20, r26
     806:	5b 2b       	or	r21, r27
     808:	ea 18       	sub	r14, r10
     80a:	fb 08       	sbc	r15, r11
     80c:	0c 09       	sbc	r16, r12
     80e:	1d 09       	sbc	r17, r13
     810:	b6 95       	lsr	r27
     812:	a7 95       	ror	r26
     814:	97 95       	ror	r25
     816:	87 95       	ror	r24
     818:	ee 0c       	add	r14, r14
     81a:	ff 1c       	adc	r15, r15
     81c:	00 1f       	adc	r16, r16
     81e:	11 1f       	adc	r17, r17
     820:	6f 5f       	subi	r22, 0xFF	; 255
     822:	7f 4f       	sbci	r23, 0xFF	; 255
     824:	6f 31       	cpi	r22, 0x1F	; 31
     826:	71 05       	cpc	r23, r1
     828:	31 f7       	brne	.-52     	; 0x7f6 <__divsf3+0xda>
     82a:	da 01       	movw	r26, r20
     82c:	c9 01       	movw	r24, r18
     82e:	8f 77       	andi	r24, 0x7F	; 127
     830:	90 70       	andi	r25, 0x00	; 0
     832:	a0 70       	andi	r26, 0x00	; 0
     834:	b0 70       	andi	r27, 0x00	; 0
     836:	80 34       	cpi	r24, 0x40	; 64
     838:	91 05       	cpc	r25, r1
     83a:	a1 05       	cpc	r26, r1
     83c:	b1 05       	cpc	r27, r1
     83e:	61 f4       	brne	.+24     	; 0x858 <__divsf3+0x13c>
     840:	27 fd       	sbrc	r18, 7
     842:	0a c0       	rjmp	.+20     	; 0x858 <__divsf3+0x13c>
     844:	e1 14       	cp	r14, r1
     846:	f1 04       	cpc	r15, r1
     848:	01 05       	cpc	r16, r1
     84a:	11 05       	cpc	r17, r1
     84c:	29 f0       	breq	.+10     	; 0x858 <__divsf3+0x13c>
     84e:	20 5c       	subi	r18, 0xC0	; 192
     850:	3f 4f       	sbci	r19, 0xFF	; 255
     852:	4f 4f       	sbci	r20, 0xFF	; 255
     854:	5f 4f       	sbci	r21, 0xFF	; 255
     856:	20 78       	andi	r18, 0x80	; 128
     858:	2d 87       	std	Y+13, r18	; 0x0d
     85a:	3e 87       	std	Y+14, r19	; 0x0e
     85c:	4f 87       	std	Y+15, r20	; 0x0f
     85e:	58 8b       	std	Y+16, r21	; 0x10
     860:	be 01       	movw	r22, r28
     862:	67 5f       	subi	r22, 0xF7	; 247
     864:	7f 4f       	sbci	r23, 0xFF	; 255
     866:	cb 01       	movw	r24, r22
     868:	0e 94 cb 05 	call	0xb96	; 0xb96 <__pack_f>
     86c:	68 96       	adiw	r28, 0x18	; 24
     86e:	ea e0       	ldi	r30, 0x0A	; 10
     870:	0c 94 09 1b 	jmp	0x3612	; 0x3612 <__epilogue_restores__+0x10>

00000874 <__gtsf2>:
     874:	a8 e1       	ldi	r26, 0x18	; 24
     876:	b0 e0       	ldi	r27, 0x00	; 0
     878:	e0 e4       	ldi	r30, 0x40	; 64
     87a:	f4 e0       	ldi	r31, 0x04	; 4
     87c:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__prologue_saves__+0x18>
     880:	69 83       	std	Y+1, r22	; 0x01
     882:	7a 83       	std	Y+2, r23	; 0x02
     884:	8b 83       	std	Y+3, r24	; 0x03
     886:	9c 83       	std	Y+4, r25	; 0x04
     888:	2d 83       	std	Y+5, r18	; 0x05
     88a:	3e 83       	std	Y+6, r19	; 0x06
     88c:	4f 83       	std	Y+7, r20	; 0x07
     88e:	58 87       	std	Y+8, r21	; 0x08
     890:	89 e0       	ldi	r24, 0x09	; 9
     892:	e8 2e       	mov	r14, r24
     894:	f1 2c       	mov	r15, r1
     896:	ec 0e       	add	r14, r28
     898:	fd 1e       	adc	r15, r29
     89a:	ce 01       	movw	r24, r28
     89c:	01 96       	adiw	r24, 0x01	; 1
     89e:	b7 01       	movw	r22, r14
     8a0:	0e 94 a0 06 	call	0xd40	; 0xd40 <__unpack_f>
     8a4:	8e 01       	movw	r16, r28
     8a6:	0f 5e       	subi	r16, 0xEF	; 239
     8a8:	1f 4f       	sbci	r17, 0xFF	; 255
     8aa:	ce 01       	movw	r24, r28
     8ac:	05 96       	adiw	r24, 0x05	; 5
     8ae:	b8 01       	movw	r22, r16
     8b0:	0e 94 a0 06 	call	0xd40	; 0xd40 <__unpack_f>
     8b4:	89 85       	ldd	r24, Y+9	; 0x09
     8b6:	82 30       	cpi	r24, 0x02	; 2
     8b8:	40 f0       	brcs	.+16     	; 0x8ca <__gtsf2+0x56>
     8ba:	89 89       	ldd	r24, Y+17	; 0x11
     8bc:	82 30       	cpi	r24, 0x02	; 2
     8be:	28 f0       	brcs	.+10     	; 0x8ca <__gtsf2+0x56>
     8c0:	c7 01       	movw	r24, r14
     8c2:	b8 01       	movw	r22, r16
     8c4:	0e 94 18 07 	call	0xe30	; 0xe30 <__fpcmp_parts_f>
     8c8:	01 c0       	rjmp	.+2      	; 0x8cc <__gtsf2+0x58>
     8ca:	8f ef       	ldi	r24, 0xFF	; 255
     8cc:	68 96       	adiw	r28, 0x18	; 24
     8ce:	e6 e0       	ldi	r30, 0x06	; 6
     8d0:	0c 94 0d 1b 	jmp	0x361a	; 0x361a <__epilogue_restores__+0x18>

000008d4 <__gesf2>:
     8d4:	a8 e1       	ldi	r26, 0x18	; 24
     8d6:	b0 e0       	ldi	r27, 0x00	; 0
     8d8:	e0 e7       	ldi	r30, 0x70	; 112
     8da:	f4 e0       	ldi	r31, 0x04	; 4
     8dc:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__prologue_saves__+0x18>
     8e0:	69 83       	std	Y+1, r22	; 0x01
     8e2:	7a 83       	std	Y+2, r23	; 0x02
     8e4:	8b 83       	std	Y+3, r24	; 0x03
     8e6:	9c 83       	std	Y+4, r25	; 0x04
     8e8:	2d 83       	std	Y+5, r18	; 0x05
     8ea:	3e 83       	std	Y+6, r19	; 0x06
     8ec:	4f 83       	std	Y+7, r20	; 0x07
     8ee:	58 87       	std	Y+8, r21	; 0x08
     8f0:	89 e0       	ldi	r24, 0x09	; 9
     8f2:	e8 2e       	mov	r14, r24
     8f4:	f1 2c       	mov	r15, r1
     8f6:	ec 0e       	add	r14, r28
     8f8:	fd 1e       	adc	r15, r29
     8fa:	ce 01       	movw	r24, r28
     8fc:	01 96       	adiw	r24, 0x01	; 1
     8fe:	b7 01       	movw	r22, r14
     900:	0e 94 a0 06 	call	0xd40	; 0xd40 <__unpack_f>
     904:	8e 01       	movw	r16, r28
     906:	0f 5e       	subi	r16, 0xEF	; 239
     908:	1f 4f       	sbci	r17, 0xFF	; 255
     90a:	ce 01       	movw	r24, r28
     90c:	05 96       	adiw	r24, 0x05	; 5
     90e:	b8 01       	movw	r22, r16
     910:	0e 94 a0 06 	call	0xd40	; 0xd40 <__unpack_f>
     914:	89 85       	ldd	r24, Y+9	; 0x09
     916:	82 30       	cpi	r24, 0x02	; 2
     918:	40 f0       	brcs	.+16     	; 0x92a <__gesf2+0x56>
     91a:	89 89       	ldd	r24, Y+17	; 0x11
     91c:	82 30       	cpi	r24, 0x02	; 2
     91e:	28 f0       	brcs	.+10     	; 0x92a <__gesf2+0x56>
     920:	c7 01       	movw	r24, r14
     922:	b8 01       	movw	r22, r16
     924:	0e 94 18 07 	call	0xe30	; 0xe30 <__fpcmp_parts_f>
     928:	01 c0       	rjmp	.+2      	; 0x92c <__gesf2+0x58>
     92a:	8f ef       	ldi	r24, 0xFF	; 255
     92c:	68 96       	adiw	r28, 0x18	; 24
     92e:	e6 e0       	ldi	r30, 0x06	; 6
     930:	0c 94 0d 1b 	jmp	0x361a	; 0x361a <__epilogue_restores__+0x18>

00000934 <__ltsf2>:
     934:	a8 e1       	ldi	r26, 0x18	; 24
     936:	b0 e0       	ldi	r27, 0x00	; 0
     938:	e0 ea       	ldi	r30, 0xA0	; 160
     93a:	f4 e0       	ldi	r31, 0x04	; 4
     93c:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__prologue_saves__+0x18>
     940:	69 83       	std	Y+1, r22	; 0x01
     942:	7a 83       	std	Y+2, r23	; 0x02
     944:	8b 83       	std	Y+3, r24	; 0x03
     946:	9c 83       	std	Y+4, r25	; 0x04
     948:	2d 83       	std	Y+5, r18	; 0x05
     94a:	3e 83       	std	Y+6, r19	; 0x06
     94c:	4f 83       	std	Y+7, r20	; 0x07
     94e:	58 87       	std	Y+8, r21	; 0x08
     950:	89 e0       	ldi	r24, 0x09	; 9
     952:	e8 2e       	mov	r14, r24
     954:	f1 2c       	mov	r15, r1
     956:	ec 0e       	add	r14, r28
     958:	fd 1e       	adc	r15, r29
     95a:	ce 01       	movw	r24, r28
     95c:	01 96       	adiw	r24, 0x01	; 1
     95e:	b7 01       	movw	r22, r14
     960:	0e 94 a0 06 	call	0xd40	; 0xd40 <__unpack_f>
     964:	8e 01       	movw	r16, r28
     966:	0f 5e       	subi	r16, 0xEF	; 239
     968:	1f 4f       	sbci	r17, 0xFF	; 255
     96a:	ce 01       	movw	r24, r28
     96c:	05 96       	adiw	r24, 0x05	; 5
     96e:	b8 01       	movw	r22, r16
     970:	0e 94 a0 06 	call	0xd40	; 0xd40 <__unpack_f>
     974:	89 85       	ldd	r24, Y+9	; 0x09
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	40 f0       	brcs	.+16     	; 0x98a <__ltsf2+0x56>
     97a:	89 89       	ldd	r24, Y+17	; 0x11
     97c:	82 30       	cpi	r24, 0x02	; 2
     97e:	28 f0       	brcs	.+10     	; 0x98a <__ltsf2+0x56>
     980:	c7 01       	movw	r24, r14
     982:	b8 01       	movw	r22, r16
     984:	0e 94 18 07 	call	0xe30	; 0xe30 <__fpcmp_parts_f>
     988:	01 c0       	rjmp	.+2      	; 0x98c <__ltsf2+0x58>
     98a:	81 e0       	ldi	r24, 0x01	; 1
     98c:	68 96       	adiw	r28, 0x18	; 24
     98e:	e6 e0       	ldi	r30, 0x06	; 6
     990:	0c 94 0d 1b 	jmp	0x361a	; 0x361a <__epilogue_restores__+0x18>

00000994 <__floatsisf>:
     994:	a8 e0       	ldi	r26, 0x08	; 8
     996:	b0 e0       	ldi	r27, 0x00	; 0
     998:	e0 ed       	ldi	r30, 0xD0	; 208
     99a:	f4 e0       	ldi	r31, 0x04	; 4
     99c:	0c 94 ee 1a 	jmp	0x35dc	; 0x35dc <__prologue_saves__+0x12>
     9a0:	9b 01       	movw	r18, r22
     9a2:	ac 01       	movw	r20, r24
     9a4:	83 e0       	ldi	r24, 0x03	; 3
     9a6:	89 83       	std	Y+1, r24	; 0x01
     9a8:	da 01       	movw	r26, r20
     9aa:	c9 01       	movw	r24, r18
     9ac:	88 27       	eor	r24, r24
     9ae:	b7 fd       	sbrc	r27, 7
     9b0:	83 95       	inc	r24
     9b2:	99 27       	eor	r25, r25
     9b4:	aa 27       	eor	r26, r26
     9b6:	bb 27       	eor	r27, r27
     9b8:	b8 2e       	mov	r11, r24
     9ba:	21 15       	cp	r18, r1
     9bc:	31 05       	cpc	r19, r1
     9be:	41 05       	cpc	r20, r1
     9c0:	51 05       	cpc	r21, r1
     9c2:	19 f4       	brne	.+6      	; 0x9ca <__floatsisf+0x36>
     9c4:	82 e0       	ldi	r24, 0x02	; 2
     9c6:	89 83       	std	Y+1, r24	; 0x01
     9c8:	3a c0       	rjmp	.+116    	; 0xa3e <__floatsisf+0xaa>
     9ca:	88 23       	and	r24, r24
     9cc:	a9 f0       	breq	.+42     	; 0x9f8 <__floatsisf+0x64>
     9ce:	20 30       	cpi	r18, 0x00	; 0
     9d0:	80 e0       	ldi	r24, 0x00	; 0
     9d2:	38 07       	cpc	r19, r24
     9d4:	80 e0       	ldi	r24, 0x00	; 0
     9d6:	48 07       	cpc	r20, r24
     9d8:	80 e8       	ldi	r24, 0x80	; 128
     9da:	58 07       	cpc	r21, r24
     9dc:	29 f4       	brne	.+10     	; 0x9e8 <__floatsisf+0x54>
     9de:	60 e0       	ldi	r22, 0x00	; 0
     9e0:	70 e0       	ldi	r23, 0x00	; 0
     9e2:	80 e0       	ldi	r24, 0x00	; 0
     9e4:	9f ec       	ldi	r25, 0xCF	; 207
     9e6:	30 c0       	rjmp	.+96     	; 0xa48 <__floatsisf+0xb4>
     9e8:	ee 24       	eor	r14, r14
     9ea:	ff 24       	eor	r15, r15
     9ec:	87 01       	movw	r16, r14
     9ee:	e2 1a       	sub	r14, r18
     9f0:	f3 0a       	sbc	r15, r19
     9f2:	04 0b       	sbc	r16, r20
     9f4:	15 0b       	sbc	r17, r21
     9f6:	02 c0       	rjmp	.+4      	; 0x9fc <__floatsisf+0x68>
     9f8:	79 01       	movw	r14, r18
     9fa:	8a 01       	movw	r16, r20
     9fc:	8e e1       	ldi	r24, 0x1E	; 30
     9fe:	c8 2e       	mov	r12, r24
     a00:	d1 2c       	mov	r13, r1
     a02:	dc 82       	std	Y+4, r13	; 0x04
     a04:	cb 82       	std	Y+3, r12	; 0x03
     a06:	ed 82       	std	Y+5, r14	; 0x05
     a08:	fe 82       	std	Y+6, r15	; 0x06
     a0a:	0f 83       	std	Y+7, r16	; 0x07
     a0c:	18 87       	std	Y+8, r17	; 0x08
     a0e:	c8 01       	movw	r24, r16
     a10:	b7 01       	movw	r22, r14
     a12:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <__clzsi2>
     a16:	01 97       	sbiw	r24, 0x01	; 1
     a18:	18 16       	cp	r1, r24
     a1a:	19 06       	cpc	r1, r25
     a1c:	84 f4       	brge	.+32     	; 0xa3e <__floatsisf+0xaa>
     a1e:	08 2e       	mov	r0, r24
     a20:	04 c0       	rjmp	.+8      	; 0xa2a <__floatsisf+0x96>
     a22:	ee 0c       	add	r14, r14
     a24:	ff 1c       	adc	r15, r15
     a26:	00 1f       	adc	r16, r16
     a28:	11 1f       	adc	r17, r17
     a2a:	0a 94       	dec	r0
     a2c:	d2 f7       	brpl	.-12     	; 0xa22 <__floatsisf+0x8e>
     a2e:	ed 82       	std	Y+5, r14	; 0x05
     a30:	fe 82       	std	Y+6, r15	; 0x06
     a32:	0f 83       	std	Y+7, r16	; 0x07
     a34:	18 87       	std	Y+8, r17	; 0x08
     a36:	c8 1a       	sub	r12, r24
     a38:	d9 0a       	sbc	r13, r25
     a3a:	dc 82       	std	Y+4, r13	; 0x04
     a3c:	cb 82       	std	Y+3, r12	; 0x03
     a3e:	ba 82       	std	Y+2, r11	; 0x02
     a40:	ce 01       	movw	r24, r28
     a42:	01 96       	adiw	r24, 0x01	; 1
     a44:	0e 94 cb 05 	call	0xb96	; 0xb96 <__pack_f>
     a48:	28 96       	adiw	r28, 0x08	; 8
     a4a:	e9 e0       	ldi	r30, 0x09	; 9
     a4c:	0c 94 0a 1b 	jmp	0x3614	; 0x3614 <__epilogue_restores__+0x12>

00000a50 <__fixsfsi>:
     a50:	ac e0       	ldi	r26, 0x0C	; 12
     a52:	b0 e0       	ldi	r27, 0x00	; 0
     a54:	ee e2       	ldi	r30, 0x2E	; 46
     a56:	f5 e0       	ldi	r31, 0x05	; 5
     a58:	0c 94 f5 1a 	jmp	0x35ea	; 0x35ea <__prologue_saves__+0x20>
     a5c:	69 83       	std	Y+1, r22	; 0x01
     a5e:	7a 83       	std	Y+2, r23	; 0x02
     a60:	8b 83       	std	Y+3, r24	; 0x03
     a62:	9c 83       	std	Y+4, r25	; 0x04
     a64:	ce 01       	movw	r24, r28
     a66:	01 96       	adiw	r24, 0x01	; 1
     a68:	be 01       	movw	r22, r28
     a6a:	6b 5f       	subi	r22, 0xFB	; 251
     a6c:	7f 4f       	sbci	r23, 0xFF	; 255
     a6e:	0e 94 a0 06 	call	0xd40	; 0xd40 <__unpack_f>
     a72:	8d 81       	ldd	r24, Y+5	; 0x05
     a74:	82 30       	cpi	r24, 0x02	; 2
     a76:	61 f1       	breq	.+88     	; 0xad0 <__fixsfsi+0x80>
     a78:	82 30       	cpi	r24, 0x02	; 2
     a7a:	50 f1       	brcs	.+84     	; 0xad0 <__fixsfsi+0x80>
     a7c:	84 30       	cpi	r24, 0x04	; 4
     a7e:	21 f4       	brne	.+8      	; 0xa88 <__fixsfsi+0x38>
     a80:	8e 81       	ldd	r24, Y+6	; 0x06
     a82:	88 23       	and	r24, r24
     a84:	51 f1       	breq	.+84     	; 0xada <__fixsfsi+0x8a>
     a86:	2e c0       	rjmp	.+92     	; 0xae4 <__fixsfsi+0x94>
     a88:	2f 81       	ldd	r18, Y+7	; 0x07
     a8a:	38 85       	ldd	r19, Y+8	; 0x08
     a8c:	37 fd       	sbrc	r19, 7
     a8e:	20 c0       	rjmp	.+64     	; 0xad0 <__fixsfsi+0x80>
     a90:	6e 81       	ldd	r22, Y+6	; 0x06
     a92:	2f 31       	cpi	r18, 0x1F	; 31
     a94:	31 05       	cpc	r19, r1
     a96:	1c f0       	brlt	.+6      	; 0xa9e <__fixsfsi+0x4e>
     a98:	66 23       	and	r22, r22
     a9a:	f9 f0       	breq	.+62     	; 0xada <__fixsfsi+0x8a>
     a9c:	23 c0       	rjmp	.+70     	; 0xae4 <__fixsfsi+0x94>
     a9e:	8e e1       	ldi	r24, 0x1E	; 30
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	82 1b       	sub	r24, r18
     aa4:	93 0b       	sbc	r25, r19
     aa6:	29 85       	ldd	r18, Y+9	; 0x09
     aa8:	3a 85       	ldd	r19, Y+10	; 0x0a
     aaa:	4b 85       	ldd	r20, Y+11	; 0x0b
     aac:	5c 85       	ldd	r21, Y+12	; 0x0c
     aae:	04 c0       	rjmp	.+8      	; 0xab8 <__fixsfsi+0x68>
     ab0:	56 95       	lsr	r21
     ab2:	47 95       	ror	r20
     ab4:	37 95       	ror	r19
     ab6:	27 95       	ror	r18
     ab8:	8a 95       	dec	r24
     aba:	d2 f7       	brpl	.-12     	; 0xab0 <__fixsfsi+0x60>
     abc:	66 23       	and	r22, r22
     abe:	b1 f0       	breq	.+44     	; 0xaec <__fixsfsi+0x9c>
     ac0:	50 95       	com	r21
     ac2:	40 95       	com	r20
     ac4:	30 95       	com	r19
     ac6:	21 95       	neg	r18
     ac8:	3f 4f       	sbci	r19, 0xFF	; 255
     aca:	4f 4f       	sbci	r20, 0xFF	; 255
     acc:	5f 4f       	sbci	r21, 0xFF	; 255
     ace:	0e c0       	rjmp	.+28     	; 0xaec <__fixsfsi+0x9c>
     ad0:	20 e0       	ldi	r18, 0x00	; 0
     ad2:	30 e0       	ldi	r19, 0x00	; 0
     ad4:	40 e0       	ldi	r20, 0x00	; 0
     ad6:	50 e0       	ldi	r21, 0x00	; 0
     ad8:	09 c0       	rjmp	.+18     	; 0xaec <__fixsfsi+0x9c>
     ada:	2f ef       	ldi	r18, 0xFF	; 255
     adc:	3f ef       	ldi	r19, 0xFF	; 255
     ade:	4f ef       	ldi	r20, 0xFF	; 255
     ae0:	5f e7       	ldi	r21, 0x7F	; 127
     ae2:	04 c0       	rjmp	.+8      	; 0xaec <__fixsfsi+0x9c>
     ae4:	20 e0       	ldi	r18, 0x00	; 0
     ae6:	30 e0       	ldi	r19, 0x00	; 0
     ae8:	40 e0       	ldi	r20, 0x00	; 0
     aea:	50 e8       	ldi	r21, 0x80	; 128
     aec:	b9 01       	movw	r22, r18
     aee:	ca 01       	movw	r24, r20
     af0:	2c 96       	adiw	r28, 0x0c	; 12
     af2:	e2 e0       	ldi	r30, 0x02	; 2
     af4:	0c 94 11 1b 	jmp	0x3622	; 0x3622 <__epilogue_restores__+0x20>

00000af8 <__clzsi2>:
     af8:	ef 92       	push	r14
     afa:	ff 92       	push	r15
     afc:	0f 93       	push	r16
     afe:	1f 93       	push	r17
     b00:	7b 01       	movw	r14, r22
     b02:	8c 01       	movw	r16, r24
     b04:	80 e0       	ldi	r24, 0x00	; 0
     b06:	e8 16       	cp	r14, r24
     b08:	80 e0       	ldi	r24, 0x00	; 0
     b0a:	f8 06       	cpc	r15, r24
     b0c:	81 e0       	ldi	r24, 0x01	; 1
     b0e:	08 07       	cpc	r16, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	18 07       	cpc	r17, r24
     b14:	88 f4       	brcc	.+34     	; 0xb38 <__clzsi2+0x40>
     b16:	8f ef       	ldi	r24, 0xFF	; 255
     b18:	e8 16       	cp	r14, r24
     b1a:	f1 04       	cpc	r15, r1
     b1c:	01 05       	cpc	r16, r1
     b1e:	11 05       	cpc	r17, r1
     b20:	31 f0       	breq	.+12     	; 0xb2e <__clzsi2+0x36>
     b22:	28 f0       	brcs	.+10     	; 0xb2e <__clzsi2+0x36>
     b24:	88 e0       	ldi	r24, 0x08	; 8
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	a0 e0       	ldi	r26, 0x00	; 0
     b2a:	b0 e0       	ldi	r27, 0x00	; 0
     b2c:	17 c0       	rjmp	.+46     	; 0xb5c <__clzsi2+0x64>
     b2e:	80 e0       	ldi	r24, 0x00	; 0
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	a0 e0       	ldi	r26, 0x00	; 0
     b34:	b0 e0       	ldi	r27, 0x00	; 0
     b36:	12 c0       	rjmp	.+36     	; 0xb5c <__clzsi2+0x64>
     b38:	80 e0       	ldi	r24, 0x00	; 0
     b3a:	e8 16       	cp	r14, r24
     b3c:	80 e0       	ldi	r24, 0x00	; 0
     b3e:	f8 06       	cpc	r15, r24
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	08 07       	cpc	r16, r24
     b44:	81 e0       	ldi	r24, 0x01	; 1
     b46:	18 07       	cpc	r17, r24
     b48:	28 f0       	brcs	.+10     	; 0xb54 <__clzsi2+0x5c>
     b4a:	88 e1       	ldi	r24, 0x18	; 24
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	a0 e0       	ldi	r26, 0x00	; 0
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	04 c0       	rjmp	.+8      	; 0xb5c <__clzsi2+0x64>
     b54:	80 e1       	ldi	r24, 0x10	; 16
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	a0 e0       	ldi	r26, 0x00	; 0
     b5a:	b0 e0       	ldi	r27, 0x00	; 0
     b5c:	20 e2       	ldi	r18, 0x20	; 32
     b5e:	30 e0       	ldi	r19, 0x00	; 0
     b60:	40 e0       	ldi	r20, 0x00	; 0
     b62:	50 e0       	ldi	r21, 0x00	; 0
     b64:	28 1b       	sub	r18, r24
     b66:	39 0b       	sbc	r19, r25
     b68:	4a 0b       	sbc	r20, r26
     b6a:	5b 0b       	sbc	r21, r27
     b6c:	04 c0       	rjmp	.+8      	; 0xb76 <__clzsi2+0x7e>
     b6e:	16 95       	lsr	r17
     b70:	07 95       	ror	r16
     b72:	f7 94       	ror	r15
     b74:	e7 94       	ror	r14
     b76:	8a 95       	dec	r24
     b78:	d2 f7       	brpl	.-12     	; 0xb6e <__clzsi2+0x76>
     b7a:	f7 01       	movw	r30, r14
     b7c:	eb 58       	subi	r30, 0x8B	; 139
     b7e:	ff 4f       	sbci	r31, 0xFF	; 255
     b80:	80 81       	ld	r24, Z
     b82:	28 1b       	sub	r18, r24
     b84:	31 09       	sbc	r19, r1
     b86:	41 09       	sbc	r20, r1
     b88:	51 09       	sbc	r21, r1
     b8a:	c9 01       	movw	r24, r18
     b8c:	1f 91       	pop	r17
     b8e:	0f 91       	pop	r16
     b90:	ff 90       	pop	r15
     b92:	ef 90       	pop	r14
     b94:	08 95       	ret

00000b96 <__pack_f>:
     b96:	df 92       	push	r13
     b98:	ef 92       	push	r14
     b9a:	ff 92       	push	r15
     b9c:	0f 93       	push	r16
     b9e:	1f 93       	push	r17
     ba0:	fc 01       	movw	r30, r24
     ba2:	e4 80       	ldd	r14, Z+4	; 0x04
     ba4:	f5 80       	ldd	r15, Z+5	; 0x05
     ba6:	06 81       	ldd	r16, Z+6	; 0x06
     ba8:	17 81       	ldd	r17, Z+7	; 0x07
     baa:	d1 80       	ldd	r13, Z+1	; 0x01
     bac:	80 81       	ld	r24, Z
     bae:	82 30       	cpi	r24, 0x02	; 2
     bb0:	48 f4       	brcc	.+18     	; 0xbc4 <__pack_f+0x2e>
     bb2:	80 e0       	ldi	r24, 0x00	; 0
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	a0 e1       	ldi	r26, 0x10	; 16
     bb8:	b0 e0       	ldi	r27, 0x00	; 0
     bba:	e8 2a       	or	r14, r24
     bbc:	f9 2a       	or	r15, r25
     bbe:	0a 2b       	or	r16, r26
     bc0:	1b 2b       	or	r17, r27
     bc2:	a5 c0       	rjmp	.+330    	; 0xd0e <__pack_f+0x178>
     bc4:	84 30       	cpi	r24, 0x04	; 4
     bc6:	09 f4       	brne	.+2      	; 0xbca <__pack_f+0x34>
     bc8:	9f c0       	rjmp	.+318    	; 0xd08 <__pack_f+0x172>
     bca:	82 30       	cpi	r24, 0x02	; 2
     bcc:	21 f4       	brne	.+8      	; 0xbd6 <__pack_f+0x40>
     bce:	ee 24       	eor	r14, r14
     bd0:	ff 24       	eor	r15, r15
     bd2:	87 01       	movw	r16, r14
     bd4:	05 c0       	rjmp	.+10     	; 0xbe0 <__pack_f+0x4a>
     bd6:	e1 14       	cp	r14, r1
     bd8:	f1 04       	cpc	r15, r1
     bda:	01 05       	cpc	r16, r1
     bdc:	11 05       	cpc	r17, r1
     bde:	19 f4       	brne	.+6      	; 0xbe6 <__pack_f+0x50>
     be0:	e0 e0       	ldi	r30, 0x00	; 0
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	96 c0       	rjmp	.+300    	; 0xd12 <__pack_f+0x17c>
     be6:	62 81       	ldd	r22, Z+2	; 0x02
     be8:	73 81       	ldd	r23, Z+3	; 0x03
     bea:	9f ef       	ldi	r25, 0xFF	; 255
     bec:	62 38       	cpi	r22, 0x82	; 130
     bee:	79 07       	cpc	r23, r25
     bf0:	0c f0       	brlt	.+2      	; 0xbf4 <__pack_f+0x5e>
     bf2:	5b c0       	rjmp	.+182    	; 0xcaa <__pack_f+0x114>
     bf4:	22 e8       	ldi	r18, 0x82	; 130
     bf6:	3f ef       	ldi	r19, 0xFF	; 255
     bf8:	26 1b       	sub	r18, r22
     bfa:	37 0b       	sbc	r19, r23
     bfc:	2a 31       	cpi	r18, 0x1A	; 26
     bfe:	31 05       	cpc	r19, r1
     c00:	2c f0       	brlt	.+10     	; 0xc0c <__pack_f+0x76>
     c02:	20 e0       	ldi	r18, 0x00	; 0
     c04:	30 e0       	ldi	r19, 0x00	; 0
     c06:	40 e0       	ldi	r20, 0x00	; 0
     c08:	50 e0       	ldi	r21, 0x00	; 0
     c0a:	2a c0       	rjmp	.+84     	; 0xc60 <__pack_f+0xca>
     c0c:	b8 01       	movw	r22, r16
     c0e:	a7 01       	movw	r20, r14
     c10:	02 2e       	mov	r0, r18
     c12:	04 c0       	rjmp	.+8      	; 0xc1c <__pack_f+0x86>
     c14:	76 95       	lsr	r23
     c16:	67 95       	ror	r22
     c18:	57 95       	ror	r21
     c1a:	47 95       	ror	r20
     c1c:	0a 94       	dec	r0
     c1e:	d2 f7       	brpl	.-12     	; 0xc14 <__pack_f+0x7e>
     c20:	81 e0       	ldi	r24, 0x01	; 1
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	a0 e0       	ldi	r26, 0x00	; 0
     c26:	b0 e0       	ldi	r27, 0x00	; 0
     c28:	04 c0       	rjmp	.+8      	; 0xc32 <__pack_f+0x9c>
     c2a:	88 0f       	add	r24, r24
     c2c:	99 1f       	adc	r25, r25
     c2e:	aa 1f       	adc	r26, r26
     c30:	bb 1f       	adc	r27, r27
     c32:	2a 95       	dec	r18
     c34:	d2 f7       	brpl	.-12     	; 0xc2a <__pack_f+0x94>
     c36:	01 97       	sbiw	r24, 0x01	; 1
     c38:	a1 09       	sbc	r26, r1
     c3a:	b1 09       	sbc	r27, r1
     c3c:	8e 21       	and	r24, r14
     c3e:	9f 21       	and	r25, r15
     c40:	a0 23       	and	r26, r16
     c42:	b1 23       	and	r27, r17
     c44:	00 97       	sbiw	r24, 0x00	; 0
     c46:	a1 05       	cpc	r26, r1
     c48:	b1 05       	cpc	r27, r1
     c4a:	21 f0       	breq	.+8      	; 0xc54 <__pack_f+0xbe>
     c4c:	81 e0       	ldi	r24, 0x01	; 1
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	a0 e0       	ldi	r26, 0x00	; 0
     c52:	b0 e0       	ldi	r27, 0x00	; 0
     c54:	9a 01       	movw	r18, r20
     c56:	ab 01       	movw	r20, r22
     c58:	28 2b       	or	r18, r24
     c5a:	39 2b       	or	r19, r25
     c5c:	4a 2b       	or	r20, r26
     c5e:	5b 2b       	or	r21, r27
     c60:	da 01       	movw	r26, r20
     c62:	c9 01       	movw	r24, r18
     c64:	8f 77       	andi	r24, 0x7F	; 127
     c66:	90 70       	andi	r25, 0x00	; 0
     c68:	a0 70       	andi	r26, 0x00	; 0
     c6a:	b0 70       	andi	r27, 0x00	; 0
     c6c:	80 34       	cpi	r24, 0x40	; 64
     c6e:	91 05       	cpc	r25, r1
     c70:	a1 05       	cpc	r26, r1
     c72:	b1 05       	cpc	r27, r1
     c74:	39 f4       	brne	.+14     	; 0xc84 <__pack_f+0xee>
     c76:	27 ff       	sbrs	r18, 7
     c78:	09 c0       	rjmp	.+18     	; 0xc8c <__pack_f+0xf6>
     c7a:	20 5c       	subi	r18, 0xC0	; 192
     c7c:	3f 4f       	sbci	r19, 0xFF	; 255
     c7e:	4f 4f       	sbci	r20, 0xFF	; 255
     c80:	5f 4f       	sbci	r21, 0xFF	; 255
     c82:	04 c0       	rjmp	.+8      	; 0xc8c <__pack_f+0xf6>
     c84:	21 5c       	subi	r18, 0xC1	; 193
     c86:	3f 4f       	sbci	r19, 0xFF	; 255
     c88:	4f 4f       	sbci	r20, 0xFF	; 255
     c8a:	5f 4f       	sbci	r21, 0xFF	; 255
     c8c:	e0 e0       	ldi	r30, 0x00	; 0
     c8e:	f0 e0       	ldi	r31, 0x00	; 0
     c90:	20 30       	cpi	r18, 0x00	; 0
     c92:	a0 e0       	ldi	r26, 0x00	; 0
     c94:	3a 07       	cpc	r19, r26
     c96:	a0 e0       	ldi	r26, 0x00	; 0
     c98:	4a 07       	cpc	r20, r26
     c9a:	a0 e4       	ldi	r26, 0x40	; 64
     c9c:	5a 07       	cpc	r21, r26
     c9e:	10 f0       	brcs	.+4      	; 0xca4 <__pack_f+0x10e>
     ca0:	e1 e0       	ldi	r30, 0x01	; 1
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	79 01       	movw	r14, r18
     ca6:	8a 01       	movw	r16, r20
     ca8:	27 c0       	rjmp	.+78     	; 0xcf8 <__pack_f+0x162>
     caa:	60 38       	cpi	r22, 0x80	; 128
     cac:	71 05       	cpc	r23, r1
     cae:	64 f5       	brge	.+88     	; 0xd08 <__pack_f+0x172>
     cb0:	fb 01       	movw	r30, r22
     cb2:	e1 58       	subi	r30, 0x81	; 129
     cb4:	ff 4f       	sbci	r31, 0xFF	; 255
     cb6:	d8 01       	movw	r26, r16
     cb8:	c7 01       	movw	r24, r14
     cba:	8f 77       	andi	r24, 0x7F	; 127
     cbc:	90 70       	andi	r25, 0x00	; 0
     cbe:	a0 70       	andi	r26, 0x00	; 0
     cc0:	b0 70       	andi	r27, 0x00	; 0
     cc2:	80 34       	cpi	r24, 0x40	; 64
     cc4:	91 05       	cpc	r25, r1
     cc6:	a1 05       	cpc	r26, r1
     cc8:	b1 05       	cpc	r27, r1
     cca:	39 f4       	brne	.+14     	; 0xcda <__pack_f+0x144>
     ccc:	e7 fe       	sbrs	r14, 7
     cce:	0d c0       	rjmp	.+26     	; 0xcea <__pack_f+0x154>
     cd0:	80 e4       	ldi	r24, 0x40	; 64
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	a0 e0       	ldi	r26, 0x00	; 0
     cd6:	b0 e0       	ldi	r27, 0x00	; 0
     cd8:	04 c0       	rjmp	.+8      	; 0xce2 <__pack_f+0x14c>
     cda:	8f e3       	ldi	r24, 0x3F	; 63
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	a0 e0       	ldi	r26, 0x00	; 0
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e8 0e       	add	r14, r24
     ce4:	f9 1e       	adc	r15, r25
     ce6:	0a 1f       	adc	r16, r26
     ce8:	1b 1f       	adc	r17, r27
     cea:	17 ff       	sbrs	r17, 7
     cec:	05 c0       	rjmp	.+10     	; 0xcf8 <__pack_f+0x162>
     cee:	16 95       	lsr	r17
     cf0:	07 95       	ror	r16
     cf2:	f7 94       	ror	r15
     cf4:	e7 94       	ror	r14
     cf6:	31 96       	adiw	r30, 0x01	; 1
     cf8:	87 e0       	ldi	r24, 0x07	; 7
     cfa:	16 95       	lsr	r17
     cfc:	07 95       	ror	r16
     cfe:	f7 94       	ror	r15
     d00:	e7 94       	ror	r14
     d02:	8a 95       	dec	r24
     d04:	d1 f7       	brne	.-12     	; 0xcfa <__pack_f+0x164>
     d06:	05 c0       	rjmp	.+10     	; 0xd12 <__pack_f+0x17c>
     d08:	ee 24       	eor	r14, r14
     d0a:	ff 24       	eor	r15, r15
     d0c:	87 01       	movw	r16, r14
     d0e:	ef ef       	ldi	r30, 0xFF	; 255
     d10:	f0 e0       	ldi	r31, 0x00	; 0
     d12:	6e 2f       	mov	r22, r30
     d14:	67 95       	ror	r22
     d16:	66 27       	eor	r22, r22
     d18:	67 95       	ror	r22
     d1a:	90 2f       	mov	r25, r16
     d1c:	9f 77       	andi	r25, 0x7F	; 127
     d1e:	d7 94       	ror	r13
     d20:	dd 24       	eor	r13, r13
     d22:	d7 94       	ror	r13
     d24:	8e 2f       	mov	r24, r30
     d26:	86 95       	lsr	r24
     d28:	49 2f       	mov	r20, r25
     d2a:	46 2b       	or	r20, r22
     d2c:	58 2f       	mov	r21, r24
     d2e:	5d 29       	or	r21, r13
     d30:	b7 01       	movw	r22, r14
     d32:	ca 01       	movw	r24, r20
     d34:	1f 91       	pop	r17
     d36:	0f 91       	pop	r16
     d38:	ff 90       	pop	r15
     d3a:	ef 90       	pop	r14
     d3c:	df 90       	pop	r13
     d3e:	08 95       	ret

00000d40 <__unpack_f>:
     d40:	fc 01       	movw	r30, r24
     d42:	db 01       	movw	r26, r22
     d44:	40 81       	ld	r20, Z
     d46:	51 81       	ldd	r21, Z+1	; 0x01
     d48:	22 81       	ldd	r18, Z+2	; 0x02
     d4a:	62 2f       	mov	r22, r18
     d4c:	6f 77       	andi	r22, 0x7F	; 127
     d4e:	70 e0       	ldi	r23, 0x00	; 0
     d50:	22 1f       	adc	r18, r18
     d52:	22 27       	eor	r18, r18
     d54:	22 1f       	adc	r18, r18
     d56:	93 81       	ldd	r25, Z+3	; 0x03
     d58:	89 2f       	mov	r24, r25
     d5a:	88 0f       	add	r24, r24
     d5c:	82 2b       	or	r24, r18
     d5e:	28 2f       	mov	r18, r24
     d60:	30 e0       	ldi	r19, 0x00	; 0
     d62:	99 1f       	adc	r25, r25
     d64:	99 27       	eor	r25, r25
     d66:	99 1f       	adc	r25, r25
     d68:	11 96       	adiw	r26, 0x01	; 1
     d6a:	9c 93       	st	X, r25
     d6c:	11 97       	sbiw	r26, 0x01	; 1
     d6e:	21 15       	cp	r18, r1
     d70:	31 05       	cpc	r19, r1
     d72:	a9 f5       	brne	.+106    	; 0xdde <__unpack_f+0x9e>
     d74:	41 15       	cp	r20, r1
     d76:	51 05       	cpc	r21, r1
     d78:	61 05       	cpc	r22, r1
     d7a:	71 05       	cpc	r23, r1
     d7c:	11 f4       	brne	.+4      	; 0xd82 <__unpack_f+0x42>
     d7e:	82 e0       	ldi	r24, 0x02	; 2
     d80:	37 c0       	rjmp	.+110    	; 0xdf0 <__unpack_f+0xb0>
     d82:	82 e8       	ldi	r24, 0x82	; 130
     d84:	9f ef       	ldi	r25, 0xFF	; 255
     d86:	13 96       	adiw	r26, 0x03	; 3
     d88:	9c 93       	st	X, r25
     d8a:	8e 93       	st	-X, r24
     d8c:	12 97       	sbiw	r26, 0x02	; 2
     d8e:	9a 01       	movw	r18, r20
     d90:	ab 01       	movw	r20, r22
     d92:	67 e0       	ldi	r22, 0x07	; 7
     d94:	22 0f       	add	r18, r18
     d96:	33 1f       	adc	r19, r19
     d98:	44 1f       	adc	r20, r20
     d9a:	55 1f       	adc	r21, r21
     d9c:	6a 95       	dec	r22
     d9e:	d1 f7       	brne	.-12     	; 0xd94 <__unpack_f+0x54>
     da0:	83 e0       	ldi	r24, 0x03	; 3
     da2:	8c 93       	st	X, r24
     da4:	0d c0       	rjmp	.+26     	; 0xdc0 <__unpack_f+0x80>
     da6:	22 0f       	add	r18, r18
     da8:	33 1f       	adc	r19, r19
     daa:	44 1f       	adc	r20, r20
     dac:	55 1f       	adc	r21, r21
     dae:	12 96       	adiw	r26, 0x02	; 2
     db0:	8d 91       	ld	r24, X+
     db2:	9c 91       	ld	r25, X
     db4:	13 97       	sbiw	r26, 0x03	; 3
     db6:	01 97       	sbiw	r24, 0x01	; 1
     db8:	13 96       	adiw	r26, 0x03	; 3
     dba:	9c 93       	st	X, r25
     dbc:	8e 93       	st	-X, r24
     dbe:	12 97       	sbiw	r26, 0x02	; 2
     dc0:	20 30       	cpi	r18, 0x00	; 0
     dc2:	80 e0       	ldi	r24, 0x00	; 0
     dc4:	38 07       	cpc	r19, r24
     dc6:	80 e0       	ldi	r24, 0x00	; 0
     dc8:	48 07       	cpc	r20, r24
     dca:	80 e4       	ldi	r24, 0x40	; 64
     dcc:	58 07       	cpc	r21, r24
     dce:	58 f3       	brcs	.-42     	; 0xda6 <__unpack_f+0x66>
     dd0:	14 96       	adiw	r26, 0x04	; 4
     dd2:	2d 93       	st	X+, r18
     dd4:	3d 93       	st	X+, r19
     dd6:	4d 93       	st	X+, r20
     dd8:	5c 93       	st	X, r21
     dda:	17 97       	sbiw	r26, 0x07	; 7
     ddc:	08 95       	ret
     dde:	2f 3f       	cpi	r18, 0xFF	; 255
     de0:	31 05       	cpc	r19, r1
     de2:	79 f4       	brne	.+30     	; 0xe02 <__unpack_f+0xc2>
     de4:	41 15       	cp	r20, r1
     de6:	51 05       	cpc	r21, r1
     de8:	61 05       	cpc	r22, r1
     dea:	71 05       	cpc	r23, r1
     dec:	19 f4       	brne	.+6      	; 0xdf4 <__unpack_f+0xb4>
     dee:	84 e0       	ldi	r24, 0x04	; 4
     df0:	8c 93       	st	X, r24
     df2:	08 95       	ret
     df4:	64 ff       	sbrs	r22, 4
     df6:	03 c0       	rjmp	.+6      	; 0xdfe <__unpack_f+0xbe>
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	8c 93       	st	X, r24
     dfc:	12 c0       	rjmp	.+36     	; 0xe22 <__unpack_f+0xe2>
     dfe:	1c 92       	st	X, r1
     e00:	10 c0       	rjmp	.+32     	; 0xe22 <__unpack_f+0xe2>
     e02:	2f 57       	subi	r18, 0x7F	; 127
     e04:	30 40       	sbci	r19, 0x00	; 0
     e06:	13 96       	adiw	r26, 0x03	; 3
     e08:	3c 93       	st	X, r19
     e0a:	2e 93       	st	-X, r18
     e0c:	12 97       	sbiw	r26, 0x02	; 2
     e0e:	83 e0       	ldi	r24, 0x03	; 3
     e10:	8c 93       	st	X, r24
     e12:	87 e0       	ldi	r24, 0x07	; 7
     e14:	44 0f       	add	r20, r20
     e16:	55 1f       	adc	r21, r21
     e18:	66 1f       	adc	r22, r22
     e1a:	77 1f       	adc	r23, r23
     e1c:	8a 95       	dec	r24
     e1e:	d1 f7       	brne	.-12     	; 0xe14 <__unpack_f+0xd4>
     e20:	70 64       	ori	r23, 0x40	; 64
     e22:	14 96       	adiw	r26, 0x04	; 4
     e24:	4d 93       	st	X+, r20
     e26:	5d 93       	st	X+, r21
     e28:	6d 93       	st	X+, r22
     e2a:	7c 93       	st	X, r23
     e2c:	17 97       	sbiw	r26, 0x07	; 7
     e2e:	08 95       	ret

00000e30 <__fpcmp_parts_f>:
     e30:	1f 93       	push	r17
     e32:	dc 01       	movw	r26, r24
     e34:	fb 01       	movw	r30, r22
     e36:	9c 91       	ld	r25, X
     e38:	92 30       	cpi	r25, 0x02	; 2
     e3a:	08 f4       	brcc	.+2      	; 0xe3e <__fpcmp_parts_f+0xe>
     e3c:	47 c0       	rjmp	.+142    	; 0xecc <__fpcmp_parts_f+0x9c>
     e3e:	80 81       	ld	r24, Z
     e40:	82 30       	cpi	r24, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0x16>
     e44:	43 c0       	rjmp	.+134    	; 0xecc <__fpcmp_parts_f+0x9c>
     e46:	94 30       	cpi	r25, 0x04	; 4
     e48:	51 f4       	brne	.+20     	; 0xe5e <__fpcmp_parts_f+0x2e>
     e4a:	11 96       	adiw	r26, 0x01	; 1
     e4c:	1c 91       	ld	r17, X
     e4e:	84 30       	cpi	r24, 0x04	; 4
     e50:	99 f5       	brne	.+102    	; 0xeb8 <__fpcmp_parts_f+0x88>
     e52:	81 81       	ldd	r24, Z+1	; 0x01
     e54:	68 2f       	mov	r22, r24
     e56:	70 e0       	ldi	r23, 0x00	; 0
     e58:	61 1b       	sub	r22, r17
     e5a:	71 09       	sbc	r23, r1
     e5c:	3f c0       	rjmp	.+126    	; 0xedc <__fpcmp_parts_f+0xac>
     e5e:	84 30       	cpi	r24, 0x04	; 4
     e60:	21 f0       	breq	.+8      	; 0xe6a <__fpcmp_parts_f+0x3a>
     e62:	92 30       	cpi	r25, 0x02	; 2
     e64:	31 f4       	brne	.+12     	; 0xe72 <__fpcmp_parts_f+0x42>
     e66:	82 30       	cpi	r24, 0x02	; 2
     e68:	b9 f1       	breq	.+110    	; 0xed8 <__fpcmp_parts_f+0xa8>
     e6a:	81 81       	ldd	r24, Z+1	; 0x01
     e6c:	88 23       	and	r24, r24
     e6e:	89 f1       	breq	.+98     	; 0xed2 <__fpcmp_parts_f+0xa2>
     e70:	2d c0       	rjmp	.+90     	; 0xecc <__fpcmp_parts_f+0x9c>
     e72:	11 96       	adiw	r26, 0x01	; 1
     e74:	1c 91       	ld	r17, X
     e76:	11 97       	sbiw	r26, 0x01	; 1
     e78:	82 30       	cpi	r24, 0x02	; 2
     e7a:	f1 f0       	breq	.+60     	; 0xeb8 <__fpcmp_parts_f+0x88>
     e7c:	81 81       	ldd	r24, Z+1	; 0x01
     e7e:	18 17       	cp	r17, r24
     e80:	d9 f4       	brne	.+54     	; 0xeb8 <__fpcmp_parts_f+0x88>
     e82:	12 96       	adiw	r26, 0x02	; 2
     e84:	2d 91       	ld	r18, X+
     e86:	3c 91       	ld	r19, X
     e88:	13 97       	sbiw	r26, 0x03	; 3
     e8a:	82 81       	ldd	r24, Z+2	; 0x02
     e8c:	93 81       	ldd	r25, Z+3	; 0x03
     e8e:	82 17       	cp	r24, r18
     e90:	93 07       	cpc	r25, r19
     e92:	94 f0       	brlt	.+36     	; 0xeb8 <__fpcmp_parts_f+0x88>
     e94:	28 17       	cp	r18, r24
     e96:	39 07       	cpc	r19, r25
     e98:	bc f0       	brlt	.+46     	; 0xec8 <__fpcmp_parts_f+0x98>
     e9a:	14 96       	adiw	r26, 0x04	; 4
     e9c:	8d 91       	ld	r24, X+
     e9e:	9d 91       	ld	r25, X+
     ea0:	0d 90       	ld	r0, X+
     ea2:	bc 91       	ld	r27, X
     ea4:	a0 2d       	mov	r26, r0
     ea6:	24 81       	ldd	r18, Z+4	; 0x04
     ea8:	35 81       	ldd	r19, Z+5	; 0x05
     eaa:	46 81       	ldd	r20, Z+6	; 0x06
     eac:	57 81       	ldd	r21, Z+7	; 0x07
     eae:	28 17       	cp	r18, r24
     eb0:	39 07       	cpc	r19, r25
     eb2:	4a 07       	cpc	r20, r26
     eb4:	5b 07       	cpc	r21, r27
     eb6:	18 f4       	brcc	.+6      	; 0xebe <__fpcmp_parts_f+0x8e>
     eb8:	11 23       	and	r17, r17
     eba:	41 f0       	breq	.+16     	; 0xecc <__fpcmp_parts_f+0x9c>
     ebc:	0a c0       	rjmp	.+20     	; 0xed2 <__fpcmp_parts_f+0xa2>
     ebe:	82 17       	cp	r24, r18
     ec0:	93 07       	cpc	r25, r19
     ec2:	a4 07       	cpc	r26, r20
     ec4:	b5 07       	cpc	r27, r21
     ec6:	40 f4       	brcc	.+16     	; 0xed8 <__fpcmp_parts_f+0xa8>
     ec8:	11 23       	and	r17, r17
     eca:	19 f0       	breq	.+6      	; 0xed2 <__fpcmp_parts_f+0xa2>
     ecc:	61 e0       	ldi	r22, 0x01	; 1
     ece:	70 e0       	ldi	r23, 0x00	; 0
     ed0:	05 c0       	rjmp	.+10     	; 0xedc <__fpcmp_parts_f+0xac>
     ed2:	6f ef       	ldi	r22, 0xFF	; 255
     ed4:	7f ef       	ldi	r23, 0xFF	; 255
     ed6:	02 c0       	rjmp	.+4      	; 0xedc <__fpcmp_parts_f+0xac>
     ed8:	60 e0       	ldi	r22, 0x00	; 0
     eda:	70 e0       	ldi	r23, 0x00	; 0
     edc:	cb 01       	movw	r24, r22
     ede:	1f 91       	pop	r17
     ee0:	08 95       	ret

00000ee2 <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
     ee2:	df 93       	push	r29
     ee4:	cf 93       	push	r28
     ee6:	cd b7       	in	r28, 0x3d	; 61
     ee8:	de b7       	in	r29, 0x3e	; 62
     eea:	e1 97       	sbiw	r28, 0x31	; 49
     eec:	0f b6       	in	r0, 0x3f	; 63
     eee:	f8 94       	cli
     ef0:	de bf       	out	0x3e, r29	; 62
     ef2:	0f be       	out	0x3f, r0	; 63
     ef4:	cd bf       	out	0x3d, r28	; 61
#if (DATA_BITS_MODE == 4)
	LCD_DIR|=0xFF;
     ef6:	ea e3       	ldi	r30, 0x3A	; 58
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	ea e3       	ldi	r30, 0x3A	; 58
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	8f ef       	ldi	r24, 0xFF	; 255
     f02:	80 83       	st	Z, r24
	LCD_PORT&=~(1<<EN);
     f04:	ab e3       	ldi	r26, 0x3B	; 59
     f06:	b0 e0       	ldi	r27, 0x00	; 0
     f08:	eb e3       	ldi	r30, 0x3B	; 59
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	80 81       	ld	r24, Z
     f0e:	8b 7f       	andi	r24, 0xFB	; 251
     f10:	8c 93       	st	X, r24
     f12:	80 e0       	ldi	r24, 0x00	; 0
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	aa ef       	ldi	r26, 0xFA	; 250
     f18:	b4 e4       	ldi	r27, 0x44	; 68
     f1a:	8d a7       	std	Y+45, r24	; 0x2d
     f1c:	9e a7       	std	Y+46, r25	; 0x2e
     f1e:	af a7       	std	Y+47, r26	; 0x2f
     f20:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     f22:	6d a5       	ldd	r22, Y+45	; 0x2d
     f24:	7e a5       	ldd	r23, Y+46	; 0x2e
     f26:	8f a5       	ldd	r24, Y+47	; 0x2f
     f28:	98 a9       	ldd	r25, Y+48	; 0x30
     f2a:	2b ea       	ldi	r18, 0xAB	; 171
     f2c:	3a ea       	ldi	r19, 0xAA	; 170
     f2e:	4a e2       	ldi	r20, 0x2A	; 42
     f30:	50 e4       	ldi	r21, 0x40	; 64
     f32:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
     f36:	dc 01       	movw	r26, r24
     f38:	cb 01       	movw	r24, r22
     f3a:	89 a7       	std	Y+41, r24	; 0x29
     f3c:	9a a7       	std	Y+42, r25	; 0x2a
     f3e:	ab a7       	std	Y+43, r26	; 0x2b
     f40:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
     f42:	69 a5       	ldd	r22, Y+41	; 0x29
     f44:	7a a5       	ldd	r23, Y+42	; 0x2a
     f46:	8b a5       	ldd	r24, Y+43	; 0x2b
     f48:	9c a5       	ldd	r25, Y+44	; 0x2c
     f4a:	20 e0       	ldi	r18, 0x00	; 0
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	40 e8       	ldi	r20, 0x80	; 128
     f50:	5f e3       	ldi	r21, 0x3F	; 63
     f52:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
     f56:	88 23       	and	r24, r24
     f58:	1c f4       	brge	.+6      	; 0xf60 <LCD_init+0x7e>
		__ticks = 1;
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	88 a7       	std	Y+40, r24	; 0x28
     f5e:	91 c0       	rjmp	.+290    	; 0x1082 <LCD_init+0x1a0>
	else if (__tmp > 255)
     f60:	69 a5       	ldd	r22, Y+41	; 0x29
     f62:	7a a5       	ldd	r23, Y+42	; 0x2a
     f64:	8b a5       	ldd	r24, Y+43	; 0x2b
     f66:	9c a5       	ldd	r25, Y+44	; 0x2c
     f68:	20 e0       	ldi	r18, 0x00	; 0
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	4f e7       	ldi	r20, 0x7F	; 127
     f6e:	53 e4       	ldi	r21, 0x43	; 67
     f70:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
     f74:	18 16       	cp	r1, r24
     f76:	0c f0       	brlt	.+2      	; 0xf7a <LCD_init+0x98>
     f78:	7b c0       	rjmp	.+246    	; 0x1070 <LCD_init+0x18e>
	{
		_delay_ms(__us / 1000.0);
     f7a:	6d a5       	ldd	r22, Y+45	; 0x2d
     f7c:	7e a5       	ldd	r23, Y+46	; 0x2e
     f7e:	8f a5       	ldd	r24, Y+47	; 0x2f
     f80:	98 a9       	ldd	r25, Y+48	; 0x30
     f82:	20 e0       	ldi	r18, 0x00	; 0
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	4a e7       	ldi	r20, 0x7A	; 122
     f88:	54 e4       	ldi	r21, 0x44	; 68
     f8a:	0e 94 8e 03 	call	0x71c	; 0x71c <__divsf3>
     f8e:	dc 01       	movw	r26, r24
     f90:	cb 01       	movw	r24, r22
     f92:	8c a3       	std	Y+36, r24	; 0x24
     f94:	9d a3       	std	Y+37, r25	; 0x25
     f96:	ae a3       	std	Y+38, r26	; 0x26
     f98:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f9a:	6c a1       	ldd	r22, Y+36	; 0x24
     f9c:	7d a1       	ldd	r23, Y+37	; 0x25
     f9e:	8e a1       	ldd	r24, Y+38	; 0x26
     fa0:	9f a1       	ldd	r25, Y+39	; 0x27
     fa2:	20 e0       	ldi	r18, 0x00	; 0
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	4a ef       	ldi	r20, 0xFA	; 250
     fa8:	54 e4       	ldi	r21, 0x44	; 68
     faa:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
     fae:	dc 01       	movw	r26, r24
     fb0:	cb 01       	movw	r24, r22
     fb2:	88 a3       	std	Y+32, r24	; 0x20
     fb4:	99 a3       	std	Y+33, r25	; 0x21
     fb6:	aa a3       	std	Y+34, r26	; 0x22
     fb8:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
     fba:	68 a1       	ldd	r22, Y+32	; 0x20
     fbc:	79 a1       	ldd	r23, Y+33	; 0x21
     fbe:	8a a1       	ldd	r24, Y+34	; 0x22
     fc0:	9b a1       	ldd	r25, Y+35	; 0x23
     fc2:	20 e0       	ldi	r18, 0x00	; 0
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	40 e8       	ldi	r20, 0x80	; 128
     fc8:	5f e3       	ldi	r21, 0x3F	; 63
     fca:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
     fce:	88 23       	and	r24, r24
     fd0:	2c f4       	brge	.+10     	; 0xfdc <LCD_init+0xfa>
		__ticks = 1;
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	9f 8f       	std	Y+31, r25	; 0x1f
     fd8:	8e 8f       	std	Y+30, r24	; 0x1e
     fda:	3f c0       	rjmp	.+126    	; 0x105a <LCD_init+0x178>
	else if (__tmp > 65535)
     fdc:	68 a1       	ldd	r22, Y+32	; 0x20
     fde:	79 a1       	ldd	r23, Y+33	; 0x21
     fe0:	8a a1       	ldd	r24, Y+34	; 0x22
     fe2:	9b a1       	ldd	r25, Y+35	; 0x23
     fe4:	20 e0       	ldi	r18, 0x00	; 0
     fe6:	3f ef       	ldi	r19, 0xFF	; 255
     fe8:	4f e7       	ldi	r20, 0x7F	; 127
     fea:	57 e4       	ldi	r21, 0x47	; 71
     fec:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
     ff0:	18 16       	cp	r1, r24
     ff2:	4c f5       	brge	.+82     	; 0x1046 <LCD_init+0x164>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ff4:	6c a1       	ldd	r22, Y+36	; 0x24
     ff6:	7d a1       	ldd	r23, Y+37	; 0x25
     ff8:	8e a1       	ldd	r24, Y+38	; 0x26
     ffa:	9f a1       	ldd	r25, Y+39	; 0x27
     ffc:	20 e0       	ldi	r18, 0x00	; 0
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	40 e2       	ldi	r20, 0x20	; 32
    1002:	51 e4       	ldi	r21, 0x41	; 65
    1004:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    1008:	dc 01       	movw	r26, r24
    100a:	cb 01       	movw	r24, r22
    100c:	bc 01       	movw	r22, r24
    100e:	cd 01       	movw	r24, r26
    1010:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    1014:	dc 01       	movw	r26, r24
    1016:	cb 01       	movw	r24, r22
    1018:	9f 8f       	std	Y+31, r25	; 0x1f
    101a:	8e 8f       	std	Y+30, r24	; 0x1e
    101c:	0f c0       	rjmp	.+30     	; 0x103c <LCD_init+0x15a>
    101e:	88 ec       	ldi	r24, 0xC8	; 200
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	9d 8f       	std	Y+29, r25	; 0x1d
    1024:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1026:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1028:	9d 8d       	ldd	r25, Y+29	; 0x1d
    102a:	01 97       	sbiw	r24, 0x01	; 1
    102c:	f1 f7       	brne	.-4      	; 0x102a <LCD_init+0x148>
    102e:	9d 8f       	std	Y+29, r25	; 0x1d
    1030:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1032:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1034:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1036:	01 97       	sbiw	r24, 0x01	; 1
    1038:	9f 8f       	std	Y+31, r25	; 0x1f
    103a:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    103c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    103e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1040:	00 97       	sbiw	r24, 0x00	; 0
    1042:	69 f7       	brne	.-38     	; 0x101e <LCD_init+0x13c>
    1044:	24 c0       	rjmp	.+72     	; 0x108e <LCD_init+0x1ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1046:	68 a1       	ldd	r22, Y+32	; 0x20
    1048:	79 a1       	ldd	r23, Y+33	; 0x21
    104a:	8a a1       	ldd	r24, Y+34	; 0x22
    104c:	9b a1       	ldd	r25, Y+35	; 0x23
    104e:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    1052:	dc 01       	movw	r26, r24
    1054:	cb 01       	movw	r24, r22
    1056:	9f 8f       	std	Y+31, r25	; 0x1f
    1058:	8e 8f       	std	Y+30, r24	; 0x1e
    105a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    105c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    105e:	9b 8f       	std	Y+27, r25	; 0x1b
    1060:	8a 8f       	std	Y+26, r24	; 0x1a
    1062:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1064:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1066:	01 97       	sbiw	r24, 0x01	; 1
    1068:	f1 f7       	brne	.-4      	; 0x1066 <LCD_init+0x184>
    106a:	9b 8f       	std	Y+27, r25	; 0x1b
    106c:	8a 8f       	std	Y+26, r24	; 0x1a
    106e:	0f c0       	rjmp	.+30     	; 0x108e <LCD_init+0x1ac>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1070:	69 a5       	ldd	r22, Y+41	; 0x29
    1072:	7a a5       	ldd	r23, Y+42	; 0x2a
    1074:	8b a5       	ldd	r24, Y+43	; 0x2b
    1076:	9c a5       	ldd	r25, Y+44	; 0x2c
    1078:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    107c:	dc 01       	movw	r26, r24
    107e:	cb 01       	movw	r24, r22
    1080:	88 a7       	std	Y+40, r24	; 0x28
    1082:	88 a5       	ldd	r24, Y+40	; 0x28
    1084:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1086:	89 8d       	ldd	r24, Y+25	; 0x19
    1088:	8a 95       	dec	r24
    108a:	f1 f7       	brne	.-4      	; 0x1088 <LCD_init+0x1a6>
    108c:	89 8f       	std	Y+25, r24	; 0x19
		_delay_us(2000);
		LCD_sendCommand(FOUR_BITS_DATA_MODE);
    108e:	82 e0       	ldi	r24, 0x02	; 2
    1090:	0e 94 1a 09 	call	0x1234	; 0x1234 <LCD_sendCommand>
    1094:	80 e0       	ldi	r24, 0x00	; 0
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	a8 ec       	ldi	r26, 0xC8	; 200
    109a:	b2 e4       	ldi	r27, 0x42	; 66
    109c:	8d 8b       	std	Y+21, r24	; 0x15
    109e:	9e 8b       	std	Y+22, r25	; 0x16
    10a0:	af 8b       	std	Y+23, r26	; 0x17
    10a2:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    10a4:	6d 89       	ldd	r22, Y+21	; 0x15
    10a6:	7e 89       	ldd	r23, Y+22	; 0x16
    10a8:	8f 89       	ldd	r24, Y+23	; 0x17
    10aa:	98 8d       	ldd	r25, Y+24	; 0x18
    10ac:	2b ea       	ldi	r18, 0xAB	; 171
    10ae:	3a ea       	ldi	r19, 0xAA	; 170
    10b0:	4a e2       	ldi	r20, 0x2A	; 42
    10b2:	50 e4       	ldi	r21, 0x40	; 64
    10b4:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    10b8:	dc 01       	movw	r26, r24
    10ba:	cb 01       	movw	r24, r22
    10bc:	89 8b       	std	Y+17, r24	; 0x11
    10be:	9a 8b       	std	Y+18, r25	; 0x12
    10c0:	ab 8b       	std	Y+19, r26	; 0x13
    10c2:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    10c4:	69 89       	ldd	r22, Y+17	; 0x11
    10c6:	7a 89       	ldd	r23, Y+18	; 0x12
    10c8:	8b 89       	ldd	r24, Y+19	; 0x13
    10ca:	9c 89       	ldd	r25, Y+20	; 0x14
    10cc:	20 e0       	ldi	r18, 0x00	; 0
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	40 e8       	ldi	r20, 0x80	; 128
    10d2:	5f e3       	ldi	r21, 0x3F	; 63
    10d4:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    10d8:	88 23       	and	r24, r24
    10da:	1c f4       	brge	.+6      	; 0x10e2 <LCD_init+0x200>
		__ticks = 1;
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	88 8b       	std	Y+16, r24	; 0x10
    10e0:	91 c0       	rjmp	.+290    	; 0x1204 <LCD_init+0x322>
	else if (__tmp > 255)
    10e2:	69 89       	ldd	r22, Y+17	; 0x11
    10e4:	7a 89       	ldd	r23, Y+18	; 0x12
    10e6:	8b 89       	ldd	r24, Y+19	; 0x13
    10e8:	9c 89       	ldd	r25, Y+20	; 0x14
    10ea:	20 e0       	ldi	r18, 0x00	; 0
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	4f e7       	ldi	r20, 0x7F	; 127
    10f0:	53 e4       	ldi	r21, 0x43	; 67
    10f2:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    10f6:	18 16       	cp	r1, r24
    10f8:	0c f0       	brlt	.+2      	; 0x10fc <LCD_init+0x21a>
    10fa:	7b c0       	rjmp	.+246    	; 0x11f2 <LCD_init+0x310>
	{
		_delay_ms(__us / 1000.0);
    10fc:	6d 89       	ldd	r22, Y+21	; 0x15
    10fe:	7e 89       	ldd	r23, Y+22	; 0x16
    1100:	8f 89       	ldd	r24, Y+23	; 0x17
    1102:	98 8d       	ldd	r25, Y+24	; 0x18
    1104:	20 e0       	ldi	r18, 0x00	; 0
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	4a e7       	ldi	r20, 0x7A	; 122
    110a:	54 e4       	ldi	r21, 0x44	; 68
    110c:	0e 94 8e 03 	call	0x71c	; 0x71c <__divsf3>
    1110:	dc 01       	movw	r26, r24
    1112:	cb 01       	movw	r24, r22
    1114:	8c 87       	std	Y+12, r24	; 0x0c
    1116:	9d 87       	std	Y+13, r25	; 0x0d
    1118:	ae 87       	std	Y+14, r26	; 0x0e
    111a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    111c:	6c 85       	ldd	r22, Y+12	; 0x0c
    111e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1120:	8e 85       	ldd	r24, Y+14	; 0x0e
    1122:	9f 85       	ldd	r25, Y+15	; 0x0f
    1124:	20 e0       	ldi	r18, 0x00	; 0
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	4a ef       	ldi	r20, 0xFA	; 250
    112a:	54 e4       	ldi	r21, 0x44	; 68
    112c:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    1130:	dc 01       	movw	r26, r24
    1132:	cb 01       	movw	r24, r22
    1134:	88 87       	std	Y+8, r24	; 0x08
    1136:	99 87       	std	Y+9, r25	; 0x09
    1138:	aa 87       	std	Y+10, r26	; 0x0a
    113a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    113c:	68 85       	ldd	r22, Y+8	; 0x08
    113e:	79 85       	ldd	r23, Y+9	; 0x09
    1140:	8a 85       	ldd	r24, Y+10	; 0x0a
    1142:	9b 85       	ldd	r25, Y+11	; 0x0b
    1144:	20 e0       	ldi	r18, 0x00	; 0
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	40 e8       	ldi	r20, 0x80	; 128
    114a:	5f e3       	ldi	r21, 0x3F	; 63
    114c:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    1150:	88 23       	and	r24, r24
    1152:	2c f4       	brge	.+10     	; 0x115e <LCD_init+0x27c>
		__ticks = 1;
    1154:	81 e0       	ldi	r24, 0x01	; 1
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	9f 83       	std	Y+7, r25	; 0x07
    115a:	8e 83       	std	Y+6, r24	; 0x06
    115c:	3f c0       	rjmp	.+126    	; 0x11dc <LCD_init+0x2fa>
	else if (__tmp > 65535)
    115e:	68 85       	ldd	r22, Y+8	; 0x08
    1160:	79 85       	ldd	r23, Y+9	; 0x09
    1162:	8a 85       	ldd	r24, Y+10	; 0x0a
    1164:	9b 85       	ldd	r25, Y+11	; 0x0b
    1166:	20 e0       	ldi	r18, 0x00	; 0
    1168:	3f ef       	ldi	r19, 0xFF	; 255
    116a:	4f e7       	ldi	r20, 0x7F	; 127
    116c:	57 e4       	ldi	r21, 0x47	; 71
    116e:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    1172:	18 16       	cp	r1, r24
    1174:	4c f5       	brge	.+82     	; 0x11c8 <LCD_init+0x2e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1176:	6c 85       	ldd	r22, Y+12	; 0x0c
    1178:	7d 85       	ldd	r23, Y+13	; 0x0d
    117a:	8e 85       	ldd	r24, Y+14	; 0x0e
    117c:	9f 85       	ldd	r25, Y+15	; 0x0f
    117e:	20 e0       	ldi	r18, 0x00	; 0
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	40 e2       	ldi	r20, 0x20	; 32
    1184:	51 e4       	ldi	r21, 0x41	; 65
    1186:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    118a:	dc 01       	movw	r26, r24
    118c:	cb 01       	movw	r24, r22
    118e:	bc 01       	movw	r22, r24
    1190:	cd 01       	movw	r24, r26
    1192:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    1196:	dc 01       	movw	r26, r24
    1198:	cb 01       	movw	r24, r22
    119a:	9f 83       	std	Y+7, r25	; 0x07
    119c:	8e 83       	std	Y+6, r24	; 0x06
    119e:	0f c0       	rjmp	.+30     	; 0x11be <LCD_init+0x2dc>
    11a0:	88 ec       	ldi	r24, 0xC8	; 200
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	9d 83       	std	Y+5, r25	; 0x05
    11a6:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    11a8:	8c 81       	ldd	r24, Y+4	; 0x04
    11aa:	9d 81       	ldd	r25, Y+5	; 0x05
    11ac:	01 97       	sbiw	r24, 0x01	; 1
    11ae:	f1 f7       	brne	.-4      	; 0x11ac <LCD_init+0x2ca>
    11b0:	9d 83       	std	Y+5, r25	; 0x05
    11b2:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11b4:	8e 81       	ldd	r24, Y+6	; 0x06
    11b6:	9f 81       	ldd	r25, Y+7	; 0x07
    11b8:	01 97       	sbiw	r24, 0x01	; 1
    11ba:	9f 83       	std	Y+7, r25	; 0x07
    11bc:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11be:	8e 81       	ldd	r24, Y+6	; 0x06
    11c0:	9f 81       	ldd	r25, Y+7	; 0x07
    11c2:	00 97       	sbiw	r24, 0x00	; 0
    11c4:	69 f7       	brne	.-38     	; 0x11a0 <LCD_init+0x2be>
    11c6:	24 c0       	rjmp	.+72     	; 0x1210 <LCD_init+0x32e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11c8:	68 85       	ldd	r22, Y+8	; 0x08
    11ca:	79 85       	ldd	r23, Y+9	; 0x09
    11cc:	8a 85       	ldd	r24, Y+10	; 0x0a
    11ce:	9b 85       	ldd	r25, Y+11	; 0x0b
    11d0:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    11d4:	dc 01       	movw	r26, r24
    11d6:	cb 01       	movw	r24, r22
    11d8:	9f 83       	std	Y+7, r25	; 0x07
    11da:	8e 83       	std	Y+6, r24	; 0x06
    11dc:	8e 81       	ldd	r24, Y+6	; 0x06
    11de:	9f 81       	ldd	r25, Y+7	; 0x07
    11e0:	9b 83       	std	Y+3, r25	; 0x03
    11e2:	8a 83       	std	Y+2, r24	; 0x02
    11e4:	8a 81       	ldd	r24, Y+2	; 0x02
    11e6:	9b 81       	ldd	r25, Y+3	; 0x03
    11e8:	01 97       	sbiw	r24, 0x01	; 1
    11ea:	f1 f7       	brne	.-4      	; 0x11e8 <LCD_init+0x306>
    11ec:	9b 83       	std	Y+3, r25	; 0x03
    11ee:	8a 83       	std	Y+2, r24	; 0x02
    11f0:	0f c0       	rjmp	.+30     	; 0x1210 <LCD_init+0x32e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    11f2:	69 89       	ldd	r22, Y+17	; 0x11
    11f4:	7a 89       	ldd	r23, Y+18	; 0x12
    11f6:	8b 89       	ldd	r24, Y+19	; 0x13
    11f8:	9c 89       	ldd	r25, Y+20	; 0x14
    11fa:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    11fe:	dc 01       	movw	r26, r24
    1200:	cb 01       	movw	r24, r22
    1202:	88 8b       	std	Y+16, r24	; 0x10
    1204:	88 89       	ldd	r24, Y+16	; 0x10
    1206:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1208:	89 81       	ldd	r24, Y+1	; 0x01
    120a:	8a 95       	dec	r24
    120c:	f1 f7       	brne	.-4      	; 0x120a <LCD_init+0x328>
    120e:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(100);
		LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE);
    1210:	88 e2       	ldi	r24, 0x28	; 40
    1212:	0e 94 1a 09 	call	0x1234	; 0x1234 <LCD_sendCommand>
		LCD_DIR|=(1<<EN)|(1<<RS)|(1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
		LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */
		LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
#endif

	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    1216:	8c e0       	ldi	r24, 0x0C	; 12
    1218:	0e 94 1a 09 	call	0x1234	; 0x1234 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	0e 94 1a 09 	call	0x1234	; 0x1234 <LCD_sendCommand>
	}
    1222:	e1 96       	adiw	r28, 0x31	; 49
    1224:	0f b6       	in	r0, 0x3f	; 63
    1226:	f8 94       	cli
    1228:	de bf       	out	0x3e, r29	; 62
    122a:	0f be       	out	0x3f, r0	; 63
    122c:	cd bf       	out	0x3d, r28	; 61
    122e:	cf 91       	pop	r28
    1230:	df 91       	pop	r29
    1232:	08 95       	ret

00001234 <LCD_sendCommand>:
void LCD_sendCommand(uint8 command){
    1234:	0f 93       	push	r16
    1236:	1f 93       	push	r17
    1238:	df 93       	push	r29
    123a:	cf 93       	push	r28
    123c:	cd b7       	in	r28, 0x3d	; 61
    123e:	de b7       	in	r29, 0x3e	; 62
    1240:	c3 56       	subi	r28, 0x63	; 99
    1242:	d0 40       	sbci	r29, 0x00	; 0
    1244:	0f b6       	in	r0, 0x3f	; 63
    1246:	f8 94       	cli
    1248:	de bf       	out	0x3e, r29	; 62
    124a:	0f be       	out	0x3f, r0	; 63
    124c:	cd bf       	out	0x3d, r28	; 61
    124e:	fe 01       	movw	r30, r28
    1250:	ed 59       	subi	r30, 0x9D	; 157
    1252:	ff 4f       	sbci	r31, 0xFF	; 255
    1254:	80 83       	st	Z, r24
	CLEAR_BIT(LCD_PORT,RS); /* Instruction Mode RS=0 */
    1256:	ab e3       	ldi	r26, 0x3B	; 59
    1258:	b0 e0       	ldi	r27, 0x00	; 0
    125a:	eb e3       	ldi	r30, 0x3B	; 59
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	80 81       	ld	r24, Z
    1260:	8e 7f       	andi	r24, 0xFE	; 254
    1262:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_PORT,RW); /* write data to LCD so RW=0 */
    1264:	ab e3       	ldi	r26, 0x3B	; 59
    1266:	b0 e0       	ldi	r27, 0x00	; 0
    1268:	eb e3       	ldi	r30, 0x3B	; 59
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	80 81       	ld	r24, Z
    126e:	8d 7f       	andi	r24, 0xFD	; 253
    1270:	8c 93       	st	X, r24
    1272:	fe 01       	movw	r30, r28
    1274:	e1 5a       	subi	r30, 0xA1	; 161
    1276:	ff 4f       	sbci	r31, 0xFF	; 255
    1278:	80 e0       	ldi	r24, 0x00	; 0
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	a0 e8       	ldi	r26, 0x80	; 128
    127e:	bf e3       	ldi	r27, 0x3F	; 63
    1280:	80 83       	st	Z, r24
    1282:	91 83       	std	Z+1, r25	; 0x01
    1284:	a2 83       	std	Z+2, r26	; 0x02
    1286:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1288:	8e 01       	movw	r16, r28
    128a:	05 5a       	subi	r16, 0xA5	; 165
    128c:	1f 4f       	sbci	r17, 0xFF	; 255
    128e:	fe 01       	movw	r30, r28
    1290:	e1 5a       	subi	r30, 0xA1	; 161
    1292:	ff 4f       	sbci	r31, 0xFF	; 255
    1294:	60 81       	ld	r22, Z
    1296:	71 81       	ldd	r23, Z+1	; 0x01
    1298:	82 81       	ldd	r24, Z+2	; 0x02
    129a:	93 81       	ldd	r25, Z+3	; 0x03
    129c:	20 e0       	ldi	r18, 0x00	; 0
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	4a ef       	ldi	r20, 0xFA	; 250
    12a2:	54 e4       	ldi	r21, 0x44	; 68
    12a4:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    12a8:	dc 01       	movw	r26, r24
    12aa:	cb 01       	movw	r24, r22
    12ac:	f8 01       	movw	r30, r16
    12ae:	80 83       	st	Z, r24
    12b0:	91 83       	std	Z+1, r25	; 0x01
    12b2:	a2 83       	std	Z+2, r26	; 0x02
    12b4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    12b6:	fe 01       	movw	r30, r28
    12b8:	e5 5a       	subi	r30, 0xA5	; 165
    12ba:	ff 4f       	sbci	r31, 0xFF	; 255
    12bc:	60 81       	ld	r22, Z
    12be:	71 81       	ldd	r23, Z+1	; 0x01
    12c0:	82 81       	ldd	r24, Z+2	; 0x02
    12c2:	93 81       	ldd	r25, Z+3	; 0x03
    12c4:	20 e0       	ldi	r18, 0x00	; 0
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	40 e8       	ldi	r20, 0x80	; 128
    12ca:	5f e3       	ldi	r21, 0x3F	; 63
    12cc:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    12d0:	88 23       	and	r24, r24
    12d2:	44 f4       	brge	.+16     	; 0x12e4 <LCD_sendCommand+0xb0>
		__ticks = 1;
    12d4:	fe 01       	movw	r30, r28
    12d6:	e7 5a       	subi	r30, 0xA7	; 167
    12d8:	ff 4f       	sbci	r31, 0xFF	; 255
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	91 83       	std	Z+1, r25	; 0x01
    12e0:	80 83       	st	Z, r24
    12e2:	64 c0       	rjmp	.+200    	; 0x13ac <LCD_sendCommand+0x178>
	else if (__tmp > 65535)
    12e4:	fe 01       	movw	r30, r28
    12e6:	e5 5a       	subi	r30, 0xA5	; 165
    12e8:	ff 4f       	sbci	r31, 0xFF	; 255
    12ea:	60 81       	ld	r22, Z
    12ec:	71 81       	ldd	r23, Z+1	; 0x01
    12ee:	82 81       	ldd	r24, Z+2	; 0x02
    12f0:	93 81       	ldd	r25, Z+3	; 0x03
    12f2:	20 e0       	ldi	r18, 0x00	; 0
    12f4:	3f ef       	ldi	r19, 0xFF	; 255
    12f6:	4f e7       	ldi	r20, 0x7F	; 127
    12f8:	57 e4       	ldi	r21, 0x47	; 71
    12fa:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    12fe:	18 16       	cp	r1, r24
    1300:	0c f0       	brlt	.+2      	; 0x1304 <LCD_sendCommand+0xd0>
    1302:	43 c0       	rjmp	.+134    	; 0x138a <LCD_sendCommand+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1304:	fe 01       	movw	r30, r28
    1306:	e1 5a       	subi	r30, 0xA1	; 161
    1308:	ff 4f       	sbci	r31, 0xFF	; 255
    130a:	60 81       	ld	r22, Z
    130c:	71 81       	ldd	r23, Z+1	; 0x01
    130e:	82 81       	ldd	r24, Z+2	; 0x02
    1310:	93 81       	ldd	r25, Z+3	; 0x03
    1312:	20 e0       	ldi	r18, 0x00	; 0
    1314:	30 e0       	ldi	r19, 0x00	; 0
    1316:	40 e2       	ldi	r20, 0x20	; 32
    1318:	51 e4       	ldi	r21, 0x41	; 65
    131a:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    131e:	dc 01       	movw	r26, r24
    1320:	cb 01       	movw	r24, r22
    1322:	8e 01       	movw	r16, r28
    1324:	07 5a       	subi	r16, 0xA7	; 167
    1326:	1f 4f       	sbci	r17, 0xFF	; 255
    1328:	bc 01       	movw	r22, r24
    132a:	cd 01       	movw	r24, r26
    132c:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    1330:	dc 01       	movw	r26, r24
    1332:	cb 01       	movw	r24, r22
    1334:	f8 01       	movw	r30, r16
    1336:	91 83       	std	Z+1, r25	; 0x01
    1338:	80 83       	st	Z, r24
    133a:	1f c0       	rjmp	.+62     	; 0x137a <LCD_sendCommand+0x146>
    133c:	fe 01       	movw	r30, r28
    133e:	e9 5a       	subi	r30, 0xA9	; 169
    1340:	ff 4f       	sbci	r31, 0xFF	; 255
    1342:	88 ec       	ldi	r24, 0xC8	; 200
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	91 83       	std	Z+1, r25	; 0x01
    1348:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    134a:	fe 01       	movw	r30, r28
    134c:	e9 5a       	subi	r30, 0xA9	; 169
    134e:	ff 4f       	sbci	r31, 0xFF	; 255
    1350:	80 81       	ld	r24, Z
    1352:	91 81       	ldd	r25, Z+1	; 0x01
    1354:	01 97       	sbiw	r24, 0x01	; 1
    1356:	f1 f7       	brne	.-4      	; 0x1354 <LCD_sendCommand+0x120>
    1358:	fe 01       	movw	r30, r28
    135a:	e9 5a       	subi	r30, 0xA9	; 169
    135c:	ff 4f       	sbci	r31, 0xFF	; 255
    135e:	91 83       	std	Z+1, r25	; 0x01
    1360:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1362:	de 01       	movw	r26, r28
    1364:	a7 5a       	subi	r26, 0xA7	; 167
    1366:	bf 4f       	sbci	r27, 0xFF	; 255
    1368:	fe 01       	movw	r30, r28
    136a:	e7 5a       	subi	r30, 0xA7	; 167
    136c:	ff 4f       	sbci	r31, 0xFF	; 255
    136e:	80 81       	ld	r24, Z
    1370:	91 81       	ldd	r25, Z+1	; 0x01
    1372:	01 97       	sbiw	r24, 0x01	; 1
    1374:	11 96       	adiw	r26, 0x01	; 1
    1376:	9c 93       	st	X, r25
    1378:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    137a:	fe 01       	movw	r30, r28
    137c:	e7 5a       	subi	r30, 0xA7	; 167
    137e:	ff 4f       	sbci	r31, 0xFF	; 255
    1380:	80 81       	ld	r24, Z
    1382:	91 81       	ldd	r25, Z+1	; 0x01
    1384:	00 97       	sbiw	r24, 0x00	; 0
    1386:	d1 f6       	brne	.-76     	; 0x133c <LCD_sendCommand+0x108>
    1388:	27 c0       	rjmp	.+78     	; 0x13d8 <LCD_sendCommand+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    138a:	8e 01       	movw	r16, r28
    138c:	07 5a       	subi	r16, 0xA7	; 167
    138e:	1f 4f       	sbci	r17, 0xFF	; 255
    1390:	fe 01       	movw	r30, r28
    1392:	e5 5a       	subi	r30, 0xA5	; 165
    1394:	ff 4f       	sbci	r31, 0xFF	; 255
    1396:	60 81       	ld	r22, Z
    1398:	71 81       	ldd	r23, Z+1	; 0x01
    139a:	82 81       	ldd	r24, Z+2	; 0x02
    139c:	93 81       	ldd	r25, Z+3	; 0x03
    139e:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    13a2:	dc 01       	movw	r26, r24
    13a4:	cb 01       	movw	r24, r22
    13a6:	f8 01       	movw	r30, r16
    13a8:	91 83       	std	Z+1, r25	; 0x01
    13aa:	80 83       	st	Z, r24
    13ac:	de 01       	movw	r26, r28
    13ae:	ab 5a       	subi	r26, 0xAB	; 171
    13b0:	bf 4f       	sbci	r27, 0xFF	; 255
    13b2:	fe 01       	movw	r30, r28
    13b4:	e7 5a       	subi	r30, 0xA7	; 167
    13b6:	ff 4f       	sbci	r31, 0xFF	; 255
    13b8:	80 81       	ld	r24, Z
    13ba:	91 81       	ldd	r25, Z+1	; 0x01
    13bc:	8d 93       	st	X+, r24
    13be:	9c 93       	st	X, r25
    13c0:	fe 01       	movw	r30, r28
    13c2:	eb 5a       	subi	r30, 0xAB	; 171
    13c4:	ff 4f       	sbci	r31, 0xFF	; 255
    13c6:	80 81       	ld	r24, Z
    13c8:	91 81       	ldd	r25, Z+1	; 0x01
    13ca:	01 97       	sbiw	r24, 0x01	; 1
    13cc:	f1 f7       	brne	.-4      	; 0x13ca <LCD_sendCommand+0x196>
    13ce:	fe 01       	movw	r30, r28
    13d0:	eb 5a       	subi	r30, 0xAB	; 171
    13d2:	ff 4f       	sbci	r31, 0xFF	; 255
    13d4:	91 83       	std	Z+1, r25	; 0x01
    13d6:	80 83       	st	Z, r24
		_delay_ms(1); /* delay for processing Tas = 50ns */
		SET_BIT(LCD_PORT,EN); /* Enable LCD E=1 */
    13d8:	ab e3       	ldi	r26, 0x3B	; 59
    13da:	b0 e0       	ldi	r27, 0x00	; 0
    13dc:	eb e3       	ldi	r30, 0x3B	; 59
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	80 81       	ld	r24, Z
    13e2:	84 60       	ori	r24, 0x04	; 4
    13e4:	8c 93       	st	X, r24
    13e6:	fe 01       	movw	r30, r28
    13e8:	ef 5a       	subi	r30, 0xAF	; 175
    13ea:	ff 4f       	sbci	r31, 0xFF	; 255
    13ec:	80 e0       	ldi	r24, 0x00	; 0
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	a0 e8       	ldi	r26, 0x80	; 128
    13f2:	bf e3       	ldi	r27, 0x3F	; 63
    13f4:	80 83       	st	Z, r24
    13f6:	91 83       	std	Z+1, r25	; 0x01
    13f8:	a2 83       	std	Z+2, r26	; 0x02
    13fa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13fc:	8e 01       	movw	r16, r28
    13fe:	03 5b       	subi	r16, 0xB3	; 179
    1400:	1f 4f       	sbci	r17, 0xFF	; 255
    1402:	fe 01       	movw	r30, r28
    1404:	ef 5a       	subi	r30, 0xAF	; 175
    1406:	ff 4f       	sbci	r31, 0xFF	; 255
    1408:	60 81       	ld	r22, Z
    140a:	71 81       	ldd	r23, Z+1	; 0x01
    140c:	82 81       	ldd	r24, Z+2	; 0x02
    140e:	93 81       	ldd	r25, Z+3	; 0x03
    1410:	20 e0       	ldi	r18, 0x00	; 0
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	4a ef       	ldi	r20, 0xFA	; 250
    1416:	54 e4       	ldi	r21, 0x44	; 68
    1418:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    141c:	dc 01       	movw	r26, r24
    141e:	cb 01       	movw	r24, r22
    1420:	f8 01       	movw	r30, r16
    1422:	80 83       	st	Z, r24
    1424:	91 83       	std	Z+1, r25	; 0x01
    1426:	a2 83       	std	Z+2, r26	; 0x02
    1428:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    142a:	fe 01       	movw	r30, r28
    142c:	e3 5b       	subi	r30, 0xB3	; 179
    142e:	ff 4f       	sbci	r31, 0xFF	; 255
    1430:	60 81       	ld	r22, Z
    1432:	71 81       	ldd	r23, Z+1	; 0x01
    1434:	82 81       	ldd	r24, Z+2	; 0x02
    1436:	93 81       	ldd	r25, Z+3	; 0x03
    1438:	20 e0       	ldi	r18, 0x00	; 0
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	40 e8       	ldi	r20, 0x80	; 128
    143e:	5f e3       	ldi	r21, 0x3F	; 63
    1440:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    1444:	88 23       	and	r24, r24
    1446:	44 f4       	brge	.+16     	; 0x1458 <LCD_sendCommand+0x224>
		__ticks = 1;
    1448:	fe 01       	movw	r30, r28
    144a:	e5 5b       	subi	r30, 0xB5	; 181
    144c:	ff 4f       	sbci	r31, 0xFF	; 255
    144e:	81 e0       	ldi	r24, 0x01	; 1
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	91 83       	std	Z+1, r25	; 0x01
    1454:	80 83       	st	Z, r24
    1456:	64 c0       	rjmp	.+200    	; 0x1520 <LCD_sendCommand+0x2ec>
	else if (__tmp > 65535)
    1458:	fe 01       	movw	r30, r28
    145a:	e3 5b       	subi	r30, 0xB3	; 179
    145c:	ff 4f       	sbci	r31, 0xFF	; 255
    145e:	60 81       	ld	r22, Z
    1460:	71 81       	ldd	r23, Z+1	; 0x01
    1462:	82 81       	ldd	r24, Z+2	; 0x02
    1464:	93 81       	ldd	r25, Z+3	; 0x03
    1466:	20 e0       	ldi	r18, 0x00	; 0
    1468:	3f ef       	ldi	r19, 0xFF	; 255
    146a:	4f e7       	ldi	r20, 0x7F	; 127
    146c:	57 e4       	ldi	r21, 0x47	; 71
    146e:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    1472:	18 16       	cp	r1, r24
    1474:	0c f0       	brlt	.+2      	; 0x1478 <LCD_sendCommand+0x244>
    1476:	43 c0       	rjmp	.+134    	; 0x14fe <LCD_sendCommand+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1478:	fe 01       	movw	r30, r28
    147a:	ef 5a       	subi	r30, 0xAF	; 175
    147c:	ff 4f       	sbci	r31, 0xFF	; 255
    147e:	60 81       	ld	r22, Z
    1480:	71 81       	ldd	r23, Z+1	; 0x01
    1482:	82 81       	ldd	r24, Z+2	; 0x02
    1484:	93 81       	ldd	r25, Z+3	; 0x03
    1486:	20 e0       	ldi	r18, 0x00	; 0
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	40 e2       	ldi	r20, 0x20	; 32
    148c:	51 e4       	ldi	r21, 0x41	; 65
    148e:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    1492:	dc 01       	movw	r26, r24
    1494:	cb 01       	movw	r24, r22
    1496:	8e 01       	movw	r16, r28
    1498:	05 5b       	subi	r16, 0xB5	; 181
    149a:	1f 4f       	sbci	r17, 0xFF	; 255
    149c:	bc 01       	movw	r22, r24
    149e:	cd 01       	movw	r24, r26
    14a0:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    14a4:	dc 01       	movw	r26, r24
    14a6:	cb 01       	movw	r24, r22
    14a8:	f8 01       	movw	r30, r16
    14aa:	91 83       	std	Z+1, r25	; 0x01
    14ac:	80 83       	st	Z, r24
    14ae:	1f c0       	rjmp	.+62     	; 0x14ee <LCD_sendCommand+0x2ba>
    14b0:	fe 01       	movw	r30, r28
    14b2:	e7 5b       	subi	r30, 0xB7	; 183
    14b4:	ff 4f       	sbci	r31, 0xFF	; 255
    14b6:	88 ec       	ldi	r24, 0xC8	; 200
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	91 83       	std	Z+1, r25	; 0x01
    14bc:	80 83       	st	Z, r24
    14be:	fe 01       	movw	r30, r28
    14c0:	e7 5b       	subi	r30, 0xB7	; 183
    14c2:	ff 4f       	sbci	r31, 0xFF	; 255
    14c4:	80 81       	ld	r24, Z
    14c6:	91 81       	ldd	r25, Z+1	; 0x01
    14c8:	01 97       	sbiw	r24, 0x01	; 1
    14ca:	f1 f7       	brne	.-4      	; 0x14c8 <LCD_sendCommand+0x294>
    14cc:	fe 01       	movw	r30, r28
    14ce:	e7 5b       	subi	r30, 0xB7	; 183
    14d0:	ff 4f       	sbci	r31, 0xFF	; 255
    14d2:	91 83       	std	Z+1, r25	; 0x01
    14d4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14d6:	de 01       	movw	r26, r28
    14d8:	a5 5b       	subi	r26, 0xB5	; 181
    14da:	bf 4f       	sbci	r27, 0xFF	; 255
    14dc:	fe 01       	movw	r30, r28
    14de:	e5 5b       	subi	r30, 0xB5	; 181
    14e0:	ff 4f       	sbci	r31, 0xFF	; 255
    14e2:	80 81       	ld	r24, Z
    14e4:	91 81       	ldd	r25, Z+1	; 0x01
    14e6:	01 97       	sbiw	r24, 0x01	; 1
    14e8:	11 96       	adiw	r26, 0x01	; 1
    14ea:	9c 93       	st	X, r25
    14ec:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14ee:	fe 01       	movw	r30, r28
    14f0:	e5 5b       	subi	r30, 0xB5	; 181
    14f2:	ff 4f       	sbci	r31, 0xFF	; 255
    14f4:	80 81       	ld	r24, Z
    14f6:	91 81       	ldd	r25, Z+1	; 0x01
    14f8:	00 97       	sbiw	r24, 0x00	; 0
    14fa:	d1 f6       	brne	.-76     	; 0x14b0 <LCD_sendCommand+0x27c>
    14fc:	27 c0       	rjmp	.+78     	; 0x154c <LCD_sendCommand+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14fe:	8e 01       	movw	r16, r28
    1500:	05 5b       	subi	r16, 0xB5	; 181
    1502:	1f 4f       	sbci	r17, 0xFF	; 255
    1504:	fe 01       	movw	r30, r28
    1506:	e3 5b       	subi	r30, 0xB3	; 179
    1508:	ff 4f       	sbci	r31, 0xFF	; 255
    150a:	60 81       	ld	r22, Z
    150c:	71 81       	ldd	r23, Z+1	; 0x01
    150e:	82 81       	ldd	r24, Z+2	; 0x02
    1510:	93 81       	ldd	r25, Z+3	; 0x03
    1512:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    1516:	dc 01       	movw	r26, r24
    1518:	cb 01       	movw	r24, r22
    151a:	f8 01       	movw	r30, r16
    151c:	91 83       	std	Z+1, r25	; 0x01
    151e:	80 83       	st	Z, r24
    1520:	de 01       	movw	r26, r28
    1522:	a9 5b       	subi	r26, 0xB9	; 185
    1524:	bf 4f       	sbci	r27, 0xFF	; 255
    1526:	fe 01       	movw	r30, r28
    1528:	e5 5b       	subi	r30, 0xB5	; 181
    152a:	ff 4f       	sbci	r31, 0xFF	; 255
    152c:	80 81       	ld	r24, Z
    152e:	91 81       	ldd	r25, Z+1	; 0x01
    1530:	8d 93       	st	X+, r24
    1532:	9c 93       	st	X, r25
    1534:	fe 01       	movw	r30, r28
    1536:	e9 5b       	subi	r30, 0xB9	; 185
    1538:	ff 4f       	sbci	r31, 0xFF	; 255
    153a:	80 81       	ld	r24, Z
    153c:	91 81       	ldd	r25, Z+1	; 0x01
    153e:	01 97       	sbiw	r24, 0x01	; 1
    1540:	f1 f7       	brne	.-4      	; 0x153e <LCD_sendCommand+0x30a>
    1542:	fe 01       	movw	r30, r28
    1544:	e9 5b       	subi	r30, 0xB9	; 185
    1546:	ff 4f       	sbci	r31, 0xFF	; 255
    1548:	91 83       	std	Z+1, r25	; 0x01
    154a:	80 83       	st	Z, r24
		_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
#if (DATA_BITS_MODE == 4)
		LCD_PORT = (LCD_PORT & 0x0F) | (command & 0xF0);
    154c:	ab e3       	ldi	r26, 0x3B	; 59
    154e:	b0 e0       	ldi	r27, 0x00	; 0
    1550:	eb e3       	ldi	r30, 0x3B	; 59
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	80 81       	ld	r24, Z
    1556:	98 2f       	mov	r25, r24
    1558:	9f 70       	andi	r25, 0x0F	; 15
    155a:	fe 01       	movw	r30, r28
    155c:	ed 59       	subi	r30, 0x9D	; 157
    155e:	ff 4f       	sbci	r31, 0xFF	; 255
    1560:	80 81       	ld	r24, Z
    1562:	80 7f       	andi	r24, 0xF0	; 240
    1564:	89 2b       	or	r24, r25
    1566:	8c 93       	st	X, r24
    1568:	fe 01       	movw	r30, r28
    156a:	ed 5b       	subi	r30, 0xBD	; 189
    156c:	ff 4f       	sbci	r31, 0xFF	; 255
    156e:	80 e0       	ldi	r24, 0x00	; 0
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	a0 e8       	ldi	r26, 0x80	; 128
    1574:	bf e3       	ldi	r27, 0x3F	; 63
    1576:	80 83       	st	Z, r24
    1578:	91 83       	std	Z+1, r25	; 0x01
    157a:	a2 83       	std	Z+2, r26	; 0x02
    157c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    157e:	8e 01       	movw	r16, r28
    1580:	01 5c       	subi	r16, 0xC1	; 193
    1582:	1f 4f       	sbci	r17, 0xFF	; 255
    1584:	fe 01       	movw	r30, r28
    1586:	ed 5b       	subi	r30, 0xBD	; 189
    1588:	ff 4f       	sbci	r31, 0xFF	; 255
    158a:	60 81       	ld	r22, Z
    158c:	71 81       	ldd	r23, Z+1	; 0x01
    158e:	82 81       	ldd	r24, Z+2	; 0x02
    1590:	93 81       	ldd	r25, Z+3	; 0x03
    1592:	20 e0       	ldi	r18, 0x00	; 0
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	4a ef       	ldi	r20, 0xFA	; 250
    1598:	54 e4       	ldi	r21, 0x44	; 68
    159a:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    159e:	dc 01       	movw	r26, r24
    15a0:	cb 01       	movw	r24, r22
    15a2:	f8 01       	movw	r30, r16
    15a4:	80 83       	st	Z, r24
    15a6:	91 83       	std	Z+1, r25	; 0x01
    15a8:	a2 83       	std	Z+2, r26	; 0x02
    15aa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    15ac:	fe 01       	movw	r30, r28
    15ae:	ff 96       	adiw	r30, 0x3f	; 63
    15b0:	60 81       	ld	r22, Z
    15b2:	71 81       	ldd	r23, Z+1	; 0x01
    15b4:	82 81       	ldd	r24, Z+2	; 0x02
    15b6:	93 81       	ldd	r25, Z+3	; 0x03
    15b8:	20 e0       	ldi	r18, 0x00	; 0
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	40 e8       	ldi	r20, 0x80	; 128
    15be:	5f e3       	ldi	r21, 0x3F	; 63
    15c0:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    15c4:	88 23       	and	r24, r24
    15c6:	2c f4       	brge	.+10     	; 0x15d2 <LCD_sendCommand+0x39e>
		__ticks = 1;
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	9e af       	std	Y+62, r25	; 0x3e
    15ce:	8d af       	std	Y+61, r24	; 0x3d
    15d0:	46 c0       	rjmp	.+140    	; 0x165e <LCD_sendCommand+0x42a>
	else if (__tmp > 65535)
    15d2:	fe 01       	movw	r30, r28
    15d4:	ff 96       	adiw	r30, 0x3f	; 63
    15d6:	60 81       	ld	r22, Z
    15d8:	71 81       	ldd	r23, Z+1	; 0x01
    15da:	82 81       	ldd	r24, Z+2	; 0x02
    15dc:	93 81       	ldd	r25, Z+3	; 0x03
    15de:	20 e0       	ldi	r18, 0x00	; 0
    15e0:	3f ef       	ldi	r19, 0xFF	; 255
    15e2:	4f e7       	ldi	r20, 0x7F	; 127
    15e4:	57 e4       	ldi	r21, 0x47	; 71
    15e6:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    15ea:	18 16       	cp	r1, r24
    15ec:	64 f5       	brge	.+88     	; 0x1646 <LCD_sendCommand+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15ee:	fe 01       	movw	r30, r28
    15f0:	ed 5b       	subi	r30, 0xBD	; 189
    15f2:	ff 4f       	sbci	r31, 0xFF	; 255
    15f4:	60 81       	ld	r22, Z
    15f6:	71 81       	ldd	r23, Z+1	; 0x01
    15f8:	82 81       	ldd	r24, Z+2	; 0x02
    15fa:	93 81       	ldd	r25, Z+3	; 0x03
    15fc:	20 e0       	ldi	r18, 0x00	; 0
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	40 e2       	ldi	r20, 0x20	; 32
    1602:	51 e4       	ldi	r21, 0x41	; 65
    1604:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    1608:	dc 01       	movw	r26, r24
    160a:	cb 01       	movw	r24, r22
    160c:	bc 01       	movw	r22, r24
    160e:	cd 01       	movw	r24, r26
    1610:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    1614:	dc 01       	movw	r26, r24
    1616:	cb 01       	movw	r24, r22
    1618:	9e af       	std	Y+62, r25	; 0x3e
    161a:	8d af       	std	Y+61, r24	; 0x3d
    161c:	0f c0       	rjmp	.+30     	; 0x163c <LCD_sendCommand+0x408>
    161e:	88 ec       	ldi	r24, 0xC8	; 200
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	9c af       	std	Y+60, r25	; 0x3c
    1624:	8b af       	std	Y+59, r24	; 0x3b
    1626:	8b ad       	ldd	r24, Y+59	; 0x3b
    1628:	9c ad       	ldd	r25, Y+60	; 0x3c
    162a:	01 97       	sbiw	r24, 0x01	; 1
    162c:	f1 f7       	brne	.-4      	; 0x162a <LCD_sendCommand+0x3f6>
    162e:	9c af       	std	Y+60, r25	; 0x3c
    1630:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1632:	8d ad       	ldd	r24, Y+61	; 0x3d
    1634:	9e ad       	ldd	r25, Y+62	; 0x3e
    1636:	01 97       	sbiw	r24, 0x01	; 1
    1638:	9e af       	std	Y+62, r25	; 0x3e
    163a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    163c:	8d ad       	ldd	r24, Y+61	; 0x3d
    163e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1640:	00 97       	sbiw	r24, 0x00	; 0
    1642:	69 f7       	brne	.-38     	; 0x161e <LCD_sendCommand+0x3ea>
    1644:	16 c0       	rjmp	.+44     	; 0x1672 <LCD_sendCommand+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1646:	fe 01       	movw	r30, r28
    1648:	ff 96       	adiw	r30, 0x3f	; 63
    164a:	60 81       	ld	r22, Z
    164c:	71 81       	ldd	r23, Z+1	; 0x01
    164e:	82 81       	ldd	r24, Z+2	; 0x02
    1650:	93 81       	ldd	r25, Z+3	; 0x03
    1652:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    1656:	dc 01       	movw	r26, r24
    1658:	cb 01       	movw	r24, r22
    165a:	9e af       	std	Y+62, r25	; 0x3e
    165c:	8d af       	std	Y+61, r24	; 0x3d
    165e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1660:	9e ad       	ldd	r25, Y+62	; 0x3e
    1662:	9a af       	std	Y+58, r25	; 0x3a
    1664:	89 af       	std	Y+57, r24	; 0x39
    1666:	89 ad       	ldd	r24, Y+57	; 0x39
    1668:	9a ad       	ldd	r25, Y+58	; 0x3a
    166a:	01 97       	sbiw	r24, 0x01	; 1
    166c:	f1 f7       	brne	.-4      	; 0x166a <LCD_sendCommand+0x436>
    166e:	9a af       	std	Y+58, r25	; 0x3a
    1670:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(1); /* delay for processing Tdsw = 100ns */
			CLEAR_BIT(LCD_PORT,EN); /* disable LCD E=0 */
    1672:	ab e3       	ldi	r26, 0x3B	; 59
    1674:	b0 e0       	ldi	r27, 0x00	; 0
    1676:	eb e3       	ldi	r30, 0x3B	; 59
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	80 81       	ld	r24, Z
    167c:	8b 7f       	andi	r24, 0xFB	; 251
    167e:	8c 93       	st	X, r24
    1680:	80 e0       	ldi	r24, 0x00	; 0
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	a0 e8       	ldi	r26, 0x80	; 128
    1686:	bf e3       	ldi	r27, 0x3F	; 63
    1688:	8d ab       	std	Y+53, r24	; 0x35
    168a:	9e ab       	std	Y+54, r25	; 0x36
    168c:	af ab       	std	Y+55, r26	; 0x37
    168e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1690:	6d a9       	ldd	r22, Y+53	; 0x35
    1692:	7e a9       	ldd	r23, Y+54	; 0x36
    1694:	8f a9       	ldd	r24, Y+55	; 0x37
    1696:	98 ad       	ldd	r25, Y+56	; 0x38
    1698:	20 e0       	ldi	r18, 0x00	; 0
    169a:	30 e0       	ldi	r19, 0x00	; 0
    169c:	4a ef       	ldi	r20, 0xFA	; 250
    169e:	54 e4       	ldi	r21, 0x44	; 68
    16a0:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    16a4:	dc 01       	movw	r26, r24
    16a6:	cb 01       	movw	r24, r22
    16a8:	89 ab       	std	Y+49, r24	; 0x31
    16aa:	9a ab       	std	Y+50, r25	; 0x32
    16ac:	ab ab       	std	Y+51, r26	; 0x33
    16ae:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    16b0:	69 a9       	ldd	r22, Y+49	; 0x31
    16b2:	7a a9       	ldd	r23, Y+50	; 0x32
    16b4:	8b a9       	ldd	r24, Y+51	; 0x33
    16b6:	9c a9       	ldd	r25, Y+52	; 0x34
    16b8:	20 e0       	ldi	r18, 0x00	; 0
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	40 e8       	ldi	r20, 0x80	; 128
    16be:	5f e3       	ldi	r21, 0x3F	; 63
    16c0:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    16c4:	88 23       	and	r24, r24
    16c6:	2c f4       	brge	.+10     	; 0x16d2 <LCD_sendCommand+0x49e>
		__ticks = 1;
    16c8:	81 e0       	ldi	r24, 0x01	; 1
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	98 ab       	std	Y+48, r25	; 0x30
    16ce:	8f a7       	std	Y+47, r24	; 0x2f
    16d0:	3f c0       	rjmp	.+126    	; 0x1750 <LCD_sendCommand+0x51c>
	else if (__tmp > 65535)
    16d2:	69 a9       	ldd	r22, Y+49	; 0x31
    16d4:	7a a9       	ldd	r23, Y+50	; 0x32
    16d6:	8b a9       	ldd	r24, Y+51	; 0x33
    16d8:	9c a9       	ldd	r25, Y+52	; 0x34
    16da:	20 e0       	ldi	r18, 0x00	; 0
    16dc:	3f ef       	ldi	r19, 0xFF	; 255
    16de:	4f e7       	ldi	r20, 0x7F	; 127
    16e0:	57 e4       	ldi	r21, 0x47	; 71
    16e2:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    16e6:	18 16       	cp	r1, r24
    16e8:	4c f5       	brge	.+82     	; 0x173c <LCD_sendCommand+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16ea:	6d a9       	ldd	r22, Y+53	; 0x35
    16ec:	7e a9       	ldd	r23, Y+54	; 0x36
    16ee:	8f a9       	ldd	r24, Y+55	; 0x37
    16f0:	98 ad       	ldd	r25, Y+56	; 0x38
    16f2:	20 e0       	ldi	r18, 0x00	; 0
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	40 e2       	ldi	r20, 0x20	; 32
    16f8:	51 e4       	ldi	r21, 0x41	; 65
    16fa:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    16fe:	dc 01       	movw	r26, r24
    1700:	cb 01       	movw	r24, r22
    1702:	bc 01       	movw	r22, r24
    1704:	cd 01       	movw	r24, r26
    1706:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    170a:	dc 01       	movw	r26, r24
    170c:	cb 01       	movw	r24, r22
    170e:	98 ab       	std	Y+48, r25	; 0x30
    1710:	8f a7       	std	Y+47, r24	; 0x2f
    1712:	0f c0       	rjmp	.+30     	; 0x1732 <LCD_sendCommand+0x4fe>
    1714:	88 ec       	ldi	r24, 0xC8	; 200
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	9e a7       	std	Y+46, r25	; 0x2e
    171a:	8d a7       	std	Y+45, r24	; 0x2d
    171c:	8d a5       	ldd	r24, Y+45	; 0x2d
    171e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1720:	01 97       	sbiw	r24, 0x01	; 1
    1722:	f1 f7       	brne	.-4      	; 0x1720 <LCD_sendCommand+0x4ec>
    1724:	9e a7       	std	Y+46, r25	; 0x2e
    1726:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1728:	8f a5       	ldd	r24, Y+47	; 0x2f
    172a:	98 a9       	ldd	r25, Y+48	; 0x30
    172c:	01 97       	sbiw	r24, 0x01	; 1
    172e:	98 ab       	std	Y+48, r25	; 0x30
    1730:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1732:	8f a5       	ldd	r24, Y+47	; 0x2f
    1734:	98 a9       	ldd	r25, Y+48	; 0x30
    1736:	00 97       	sbiw	r24, 0x00	; 0
    1738:	69 f7       	brne	.-38     	; 0x1714 <LCD_sendCommand+0x4e0>
    173a:	14 c0       	rjmp	.+40     	; 0x1764 <LCD_sendCommand+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    173c:	69 a9       	ldd	r22, Y+49	; 0x31
    173e:	7a a9       	ldd	r23, Y+50	; 0x32
    1740:	8b a9       	ldd	r24, Y+51	; 0x33
    1742:	9c a9       	ldd	r25, Y+52	; 0x34
    1744:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    1748:	dc 01       	movw	r26, r24
    174a:	cb 01       	movw	r24, r22
    174c:	98 ab       	std	Y+48, r25	; 0x30
    174e:	8f a7       	std	Y+47, r24	; 0x2f
    1750:	8f a5       	ldd	r24, Y+47	; 0x2f
    1752:	98 a9       	ldd	r25, Y+48	; 0x30
    1754:	9c a7       	std	Y+44, r25	; 0x2c
    1756:	8b a7       	std	Y+43, r24	; 0x2b
    1758:	8b a5       	ldd	r24, Y+43	; 0x2b
    175a:	9c a5       	ldd	r25, Y+44	; 0x2c
    175c:	01 97       	sbiw	r24, 0x01	; 1
    175e:	f1 f7       	brne	.-4      	; 0x175c <LCD_sendCommand+0x528>
    1760:	9c a7       	std	Y+44, r25	; 0x2c
    1762:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(1); /* delay for processing Th = 13ns */
			SET_BIT(LCD_PORT,EN); /* Enable LCD E=1 */
    1764:	ab e3       	ldi	r26, 0x3B	; 59
    1766:	b0 e0       	ldi	r27, 0x00	; 0
    1768:	eb e3       	ldi	r30, 0x3B	; 59
    176a:	f0 e0       	ldi	r31, 0x00	; 0
    176c:	80 81       	ld	r24, Z
    176e:	84 60       	ori	r24, 0x04	; 4
    1770:	8c 93       	st	X, r24
    1772:	80 e0       	ldi	r24, 0x00	; 0
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	a0 e8       	ldi	r26, 0x80	; 128
    1778:	bf e3       	ldi	r27, 0x3F	; 63
    177a:	8f a3       	std	Y+39, r24	; 0x27
    177c:	98 a7       	std	Y+40, r25	; 0x28
    177e:	a9 a7       	std	Y+41, r26	; 0x29
    1780:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1782:	6f a1       	ldd	r22, Y+39	; 0x27
    1784:	78 a5       	ldd	r23, Y+40	; 0x28
    1786:	89 a5       	ldd	r24, Y+41	; 0x29
    1788:	9a a5       	ldd	r25, Y+42	; 0x2a
    178a:	20 e0       	ldi	r18, 0x00	; 0
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	4a ef       	ldi	r20, 0xFA	; 250
    1790:	54 e4       	ldi	r21, 0x44	; 68
    1792:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    1796:	dc 01       	movw	r26, r24
    1798:	cb 01       	movw	r24, r22
    179a:	8b a3       	std	Y+35, r24	; 0x23
    179c:	9c a3       	std	Y+36, r25	; 0x24
    179e:	ad a3       	std	Y+37, r26	; 0x25
    17a0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    17a2:	6b a1       	ldd	r22, Y+35	; 0x23
    17a4:	7c a1       	ldd	r23, Y+36	; 0x24
    17a6:	8d a1       	ldd	r24, Y+37	; 0x25
    17a8:	9e a1       	ldd	r25, Y+38	; 0x26
    17aa:	20 e0       	ldi	r18, 0x00	; 0
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	40 e8       	ldi	r20, 0x80	; 128
    17b0:	5f e3       	ldi	r21, 0x3F	; 63
    17b2:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    17b6:	88 23       	and	r24, r24
    17b8:	2c f4       	brge	.+10     	; 0x17c4 <LCD_sendCommand+0x590>
		__ticks = 1;
    17ba:	81 e0       	ldi	r24, 0x01	; 1
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	9a a3       	std	Y+34, r25	; 0x22
    17c0:	89 a3       	std	Y+33, r24	; 0x21
    17c2:	3f c0       	rjmp	.+126    	; 0x1842 <LCD_sendCommand+0x60e>
	else if (__tmp > 65535)
    17c4:	6b a1       	ldd	r22, Y+35	; 0x23
    17c6:	7c a1       	ldd	r23, Y+36	; 0x24
    17c8:	8d a1       	ldd	r24, Y+37	; 0x25
    17ca:	9e a1       	ldd	r25, Y+38	; 0x26
    17cc:	20 e0       	ldi	r18, 0x00	; 0
    17ce:	3f ef       	ldi	r19, 0xFF	; 255
    17d0:	4f e7       	ldi	r20, 0x7F	; 127
    17d2:	57 e4       	ldi	r21, 0x47	; 71
    17d4:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    17d8:	18 16       	cp	r1, r24
    17da:	4c f5       	brge	.+82     	; 0x182e <LCD_sendCommand+0x5fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17dc:	6f a1       	ldd	r22, Y+39	; 0x27
    17de:	78 a5       	ldd	r23, Y+40	; 0x28
    17e0:	89 a5       	ldd	r24, Y+41	; 0x29
    17e2:	9a a5       	ldd	r25, Y+42	; 0x2a
    17e4:	20 e0       	ldi	r18, 0x00	; 0
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	40 e2       	ldi	r20, 0x20	; 32
    17ea:	51 e4       	ldi	r21, 0x41	; 65
    17ec:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    17f0:	dc 01       	movw	r26, r24
    17f2:	cb 01       	movw	r24, r22
    17f4:	bc 01       	movw	r22, r24
    17f6:	cd 01       	movw	r24, r26
    17f8:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    17fc:	dc 01       	movw	r26, r24
    17fe:	cb 01       	movw	r24, r22
    1800:	9a a3       	std	Y+34, r25	; 0x22
    1802:	89 a3       	std	Y+33, r24	; 0x21
    1804:	0f c0       	rjmp	.+30     	; 0x1824 <LCD_sendCommand+0x5f0>
    1806:	88 ec       	ldi	r24, 0xC8	; 200
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	98 a3       	std	Y+32, r25	; 0x20
    180c:	8f 8f       	std	Y+31, r24	; 0x1f
    180e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1810:	98 a1       	ldd	r25, Y+32	; 0x20
    1812:	01 97       	sbiw	r24, 0x01	; 1
    1814:	f1 f7       	brne	.-4      	; 0x1812 <LCD_sendCommand+0x5de>
    1816:	98 a3       	std	Y+32, r25	; 0x20
    1818:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    181a:	89 a1       	ldd	r24, Y+33	; 0x21
    181c:	9a a1       	ldd	r25, Y+34	; 0x22
    181e:	01 97       	sbiw	r24, 0x01	; 1
    1820:	9a a3       	std	Y+34, r25	; 0x22
    1822:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1824:	89 a1       	ldd	r24, Y+33	; 0x21
    1826:	9a a1       	ldd	r25, Y+34	; 0x22
    1828:	00 97       	sbiw	r24, 0x00	; 0
    182a:	69 f7       	brne	.-38     	; 0x1806 <LCD_sendCommand+0x5d2>
    182c:	14 c0       	rjmp	.+40     	; 0x1856 <LCD_sendCommand+0x622>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    182e:	6b a1       	ldd	r22, Y+35	; 0x23
    1830:	7c a1       	ldd	r23, Y+36	; 0x24
    1832:	8d a1       	ldd	r24, Y+37	; 0x25
    1834:	9e a1       	ldd	r25, Y+38	; 0x26
    1836:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    183a:	dc 01       	movw	r26, r24
    183c:	cb 01       	movw	r24, r22
    183e:	9a a3       	std	Y+34, r25	; 0x22
    1840:	89 a3       	std	Y+33, r24	; 0x21
    1842:	89 a1       	ldd	r24, Y+33	; 0x21
    1844:	9a a1       	ldd	r25, Y+34	; 0x22
    1846:	9e 8f       	std	Y+30, r25	; 0x1e
    1848:	8d 8f       	std	Y+29, r24	; 0x1d
    184a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    184c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    184e:	01 97       	sbiw	r24, 0x01	; 1
    1850:	f1 f7       	brne	.-4      	; 0x184e <LCD_sendCommand+0x61a>
    1852:	9e 8f       	std	Y+30, r25	; 0x1e
    1854:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
			LCD_PORT = (LCD_PORT & 0x0F) | ((command & 0x0F) << 4);
    1856:	ab e3       	ldi	r26, 0x3B	; 59
    1858:	b0 e0       	ldi	r27, 0x00	; 0
    185a:	eb e3       	ldi	r30, 0x3B	; 59
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	80 81       	ld	r24, Z
    1860:	28 2f       	mov	r18, r24
    1862:	2f 70       	andi	r18, 0x0F	; 15
    1864:	fe 01       	movw	r30, r28
    1866:	ed 59       	subi	r30, 0x9D	; 157
    1868:	ff 4f       	sbci	r31, 0xFF	; 255
    186a:	80 81       	ld	r24, Z
    186c:	88 2f       	mov	r24, r24
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	82 95       	swap	r24
    1872:	92 95       	swap	r25
    1874:	90 7f       	andi	r25, 0xF0	; 240
    1876:	98 27       	eor	r25, r24
    1878:	80 7f       	andi	r24, 0xF0	; 240
    187a:	98 27       	eor	r25, r24
    187c:	82 2b       	or	r24, r18
    187e:	8c 93       	st	X, r24
    1880:	80 e0       	ldi	r24, 0x00	; 0
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	a0 e8       	ldi	r26, 0x80	; 128
    1886:	bf e3       	ldi	r27, 0x3F	; 63
    1888:	89 8f       	std	Y+25, r24	; 0x19
    188a:	9a 8f       	std	Y+26, r25	; 0x1a
    188c:	ab 8f       	std	Y+27, r26	; 0x1b
    188e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1890:	69 8d       	ldd	r22, Y+25	; 0x19
    1892:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1894:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1896:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1898:	20 e0       	ldi	r18, 0x00	; 0
    189a:	30 e0       	ldi	r19, 0x00	; 0
    189c:	4a ef       	ldi	r20, 0xFA	; 250
    189e:	54 e4       	ldi	r21, 0x44	; 68
    18a0:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    18a4:	dc 01       	movw	r26, r24
    18a6:	cb 01       	movw	r24, r22
    18a8:	8d 8b       	std	Y+21, r24	; 0x15
    18aa:	9e 8b       	std	Y+22, r25	; 0x16
    18ac:	af 8b       	std	Y+23, r26	; 0x17
    18ae:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18b0:	6d 89       	ldd	r22, Y+21	; 0x15
    18b2:	7e 89       	ldd	r23, Y+22	; 0x16
    18b4:	8f 89       	ldd	r24, Y+23	; 0x17
    18b6:	98 8d       	ldd	r25, Y+24	; 0x18
    18b8:	20 e0       	ldi	r18, 0x00	; 0
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	40 e8       	ldi	r20, 0x80	; 128
    18be:	5f e3       	ldi	r21, 0x3F	; 63
    18c0:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    18c4:	88 23       	and	r24, r24
    18c6:	2c f4       	brge	.+10     	; 0x18d2 <LCD_sendCommand+0x69e>
		__ticks = 1;
    18c8:	81 e0       	ldi	r24, 0x01	; 1
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	9c 8b       	std	Y+20, r25	; 0x14
    18ce:	8b 8b       	std	Y+19, r24	; 0x13
    18d0:	3f c0       	rjmp	.+126    	; 0x1950 <LCD_sendCommand+0x71c>
	else if (__tmp > 65535)
    18d2:	6d 89       	ldd	r22, Y+21	; 0x15
    18d4:	7e 89       	ldd	r23, Y+22	; 0x16
    18d6:	8f 89       	ldd	r24, Y+23	; 0x17
    18d8:	98 8d       	ldd	r25, Y+24	; 0x18
    18da:	20 e0       	ldi	r18, 0x00	; 0
    18dc:	3f ef       	ldi	r19, 0xFF	; 255
    18de:	4f e7       	ldi	r20, 0x7F	; 127
    18e0:	57 e4       	ldi	r21, 0x47	; 71
    18e2:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    18e6:	18 16       	cp	r1, r24
    18e8:	4c f5       	brge	.+82     	; 0x193c <LCD_sendCommand+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ea:	69 8d       	ldd	r22, Y+25	; 0x19
    18ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18f2:	20 e0       	ldi	r18, 0x00	; 0
    18f4:	30 e0       	ldi	r19, 0x00	; 0
    18f6:	40 e2       	ldi	r20, 0x20	; 32
    18f8:	51 e4       	ldi	r21, 0x41	; 65
    18fa:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    18fe:	dc 01       	movw	r26, r24
    1900:	cb 01       	movw	r24, r22
    1902:	bc 01       	movw	r22, r24
    1904:	cd 01       	movw	r24, r26
    1906:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    190a:	dc 01       	movw	r26, r24
    190c:	cb 01       	movw	r24, r22
    190e:	9c 8b       	std	Y+20, r25	; 0x14
    1910:	8b 8b       	std	Y+19, r24	; 0x13
    1912:	0f c0       	rjmp	.+30     	; 0x1932 <LCD_sendCommand+0x6fe>
    1914:	88 ec       	ldi	r24, 0xC8	; 200
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	9a 8b       	std	Y+18, r25	; 0x12
    191a:	89 8b       	std	Y+17, r24	; 0x11
    191c:	89 89       	ldd	r24, Y+17	; 0x11
    191e:	9a 89       	ldd	r25, Y+18	; 0x12
    1920:	01 97       	sbiw	r24, 0x01	; 1
    1922:	f1 f7       	brne	.-4      	; 0x1920 <LCD_sendCommand+0x6ec>
    1924:	9a 8b       	std	Y+18, r25	; 0x12
    1926:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1928:	8b 89       	ldd	r24, Y+19	; 0x13
    192a:	9c 89       	ldd	r25, Y+20	; 0x14
    192c:	01 97       	sbiw	r24, 0x01	; 1
    192e:	9c 8b       	std	Y+20, r25	; 0x14
    1930:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1932:	8b 89       	ldd	r24, Y+19	; 0x13
    1934:	9c 89       	ldd	r25, Y+20	; 0x14
    1936:	00 97       	sbiw	r24, 0x00	; 0
    1938:	69 f7       	brne	.-38     	; 0x1914 <LCD_sendCommand+0x6e0>
    193a:	14 c0       	rjmp	.+40     	; 0x1964 <LCD_sendCommand+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    193c:	6d 89       	ldd	r22, Y+21	; 0x15
    193e:	7e 89       	ldd	r23, Y+22	; 0x16
    1940:	8f 89       	ldd	r24, Y+23	; 0x17
    1942:	98 8d       	ldd	r25, Y+24	; 0x18
    1944:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    1948:	dc 01       	movw	r26, r24
    194a:	cb 01       	movw	r24, r22
    194c:	9c 8b       	std	Y+20, r25	; 0x14
    194e:	8b 8b       	std	Y+19, r24	; 0x13
    1950:	8b 89       	ldd	r24, Y+19	; 0x13
    1952:	9c 89       	ldd	r25, Y+20	; 0x14
    1954:	98 8b       	std	Y+16, r25	; 0x10
    1956:	8f 87       	std	Y+15, r24	; 0x0f
    1958:	8f 85       	ldd	r24, Y+15	; 0x0f
    195a:	98 89       	ldd	r25, Y+16	; 0x10
    195c:	01 97       	sbiw	r24, 0x01	; 1
    195e:	f1 f7       	brne	.-4      	; 0x195c <LCD_sendCommand+0x728>
    1960:	98 8b       	std	Y+16, r25	; 0x10
    1962:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1); /* delay for processing Tdsw = 100ns */
				CLEAR_BIT(LCD_PORT,EN); /* disable LCD E=0 */
    1964:	ab e3       	ldi	r26, 0x3B	; 59
    1966:	b0 e0       	ldi	r27, 0x00	; 0
    1968:	eb e3       	ldi	r30, 0x3B	; 59
    196a:	f0 e0       	ldi	r31, 0x00	; 0
    196c:	80 81       	ld	r24, Z
    196e:	8b 7f       	andi	r24, 0xFB	; 251
    1970:	8c 93       	st	X, r24
    1972:	80 e0       	ldi	r24, 0x00	; 0
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	a0 e8       	ldi	r26, 0x80	; 128
    1978:	bf e3       	ldi	r27, 0x3F	; 63
    197a:	8b 87       	std	Y+11, r24	; 0x0b
    197c:	9c 87       	std	Y+12, r25	; 0x0c
    197e:	ad 87       	std	Y+13, r26	; 0x0d
    1980:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1982:	6b 85       	ldd	r22, Y+11	; 0x0b
    1984:	7c 85       	ldd	r23, Y+12	; 0x0c
    1986:	8d 85       	ldd	r24, Y+13	; 0x0d
    1988:	9e 85       	ldd	r25, Y+14	; 0x0e
    198a:	20 e0       	ldi	r18, 0x00	; 0
    198c:	30 e0       	ldi	r19, 0x00	; 0
    198e:	4a ef       	ldi	r20, 0xFA	; 250
    1990:	54 e4       	ldi	r21, 0x44	; 68
    1992:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    1996:	dc 01       	movw	r26, r24
    1998:	cb 01       	movw	r24, r22
    199a:	8f 83       	std	Y+7, r24	; 0x07
    199c:	98 87       	std	Y+8, r25	; 0x08
    199e:	a9 87       	std	Y+9, r26	; 0x09
    19a0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19a2:	6f 81       	ldd	r22, Y+7	; 0x07
    19a4:	78 85       	ldd	r23, Y+8	; 0x08
    19a6:	89 85       	ldd	r24, Y+9	; 0x09
    19a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    19aa:	20 e0       	ldi	r18, 0x00	; 0
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	40 e8       	ldi	r20, 0x80	; 128
    19b0:	5f e3       	ldi	r21, 0x3F	; 63
    19b2:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    19b6:	88 23       	and	r24, r24
    19b8:	2c f4       	brge	.+10     	; 0x19c4 <LCD_sendCommand+0x790>
		__ticks = 1;
    19ba:	81 e0       	ldi	r24, 0x01	; 1
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	9e 83       	std	Y+6, r25	; 0x06
    19c0:	8d 83       	std	Y+5, r24	; 0x05
    19c2:	3f c0       	rjmp	.+126    	; 0x1a42 <LCD_sendCommand+0x80e>
	else if (__tmp > 65535)
    19c4:	6f 81       	ldd	r22, Y+7	; 0x07
    19c6:	78 85       	ldd	r23, Y+8	; 0x08
    19c8:	89 85       	ldd	r24, Y+9	; 0x09
    19ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    19cc:	20 e0       	ldi	r18, 0x00	; 0
    19ce:	3f ef       	ldi	r19, 0xFF	; 255
    19d0:	4f e7       	ldi	r20, 0x7F	; 127
    19d2:	57 e4       	ldi	r21, 0x47	; 71
    19d4:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    19d8:	18 16       	cp	r1, r24
    19da:	4c f5       	brge	.+82     	; 0x1a2e <LCD_sendCommand+0x7fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    19de:	7c 85       	ldd	r23, Y+12	; 0x0c
    19e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    19e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    19e4:	20 e0       	ldi	r18, 0x00	; 0
    19e6:	30 e0       	ldi	r19, 0x00	; 0
    19e8:	40 e2       	ldi	r20, 0x20	; 32
    19ea:	51 e4       	ldi	r21, 0x41	; 65
    19ec:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    19f0:	dc 01       	movw	r26, r24
    19f2:	cb 01       	movw	r24, r22
    19f4:	bc 01       	movw	r22, r24
    19f6:	cd 01       	movw	r24, r26
    19f8:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    19fc:	dc 01       	movw	r26, r24
    19fe:	cb 01       	movw	r24, r22
    1a00:	9e 83       	std	Y+6, r25	; 0x06
    1a02:	8d 83       	std	Y+5, r24	; 0x05
    1a04:	0f c0       	rjmp	.+30     	; 0x1a24 <LCD_sendCommand+0x7f0>
    1a06:	88 ec       	ldi	r24, 0xC8	; 200
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	9c 83       	std	Y+4, r25	; 0x04
    1a0c:	8b 83       	std	Y+3, r24	; 0x03
    1a0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a10:	9c 81       	ldd	r25, Y+4	; 0x04
    1a12:	01 97       	sbiw	r24, 0x01	; 1
    1a14:	f1 f7       	brne	.-4      	; 0x1a12 <LCD_sendCommand+0x7de>
    1a16:	9c 83       	std	Y+4, r25	; 0x04
    1a18:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a1e:	01 97       	sbiw	r24, 0x01	; 1
    1a20:	9e 83       	std	Y+6, r25	; 0x06
    1a22:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a24:	8d 81       	ldd	r24, Y+5	; 0x05
    1a26:	9e 81       	ldd	r25, Y+6	; 0x06
    1a28:	00 97       	sbiw	r24, 0x00	; 0
    1a2a:	69 f7       	brne	.-38     	; 0x1a06 <LCD_sendCommand+0x7d2>
    1a2c:	14 c0       	rjmp	.+40     	; 0x1a56 <LCD_sendCommand+0x822>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a2e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a30:	78 85       	ldd	r23, Y+8	; 0x08
    1a32:	89 85       	ldd	r24, Y+9	; 0x09
    1a34:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a36:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    1a3a:	dc 01       	movw	r26, r24
    1a3c:	cb 01       	movw	r24, r22
    1a3e:	9e 83       	std	Y+6, r25	; 0x06
    1a40:	8d 83       	std	Y+5, r24	; 0x05
    1a42:	8d 81       	ldd	r24, Y+5	; 0x05
    1a44:	9e 81       	ldd	r25, Y+6	; 0x06
    1a46:	9a 83       	std	Y+2, r25	; 0x02
    1a48:	89 83       	std	Y+1, r24	; 0x01
    1a4a:	89 81       	ldd	r24, Y+1	; 0x01
    1a4c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a4e:	01 97       	sbiw	r24, 0x01	; 1
    1a50:	f1 f7       	brne	.-4      	; 0x1a4e <LCD_sendCommand+0x81a>
    1a52:	9a 83       	std	Y+2, r25	; 0x02
    1a54:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_PORT,EN); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1a56:	cd 59       	subi	r28, 0x9D	; 157
    1a58:	df 4f       	sbci	r29, 0xFF	; 255
    1a5a:	0f b6       	in	r0, 0x3f	; 63
    1a5c:	f8 94       	cli
    1a5e:	de bf       	out	0x3e, r29	; 62
    1a60:	0f be       	out	0x3f, r0	; 63
    1a62:	cd bf       	out	0x3d, r28	; 61
    1a64:	cf 91       	pop	r28
    1a66:	df 91       	pop	r29
    1a68:	1f 91       	pop	r17
    1a6a:	0f 91       	pop	r16
    1a6c:	08 95       	ret

00001a6e <LCD_displayCharacter>:
void LCD_displayCharacter(uint8 data){
    1a6e:	0f 93       	push	r16
    1a70:	1f 93       	push	r17
    1a72:	df 93       	push	r29
    1a74:	cf 93       	push	r28
    1a76:	cd b7       	in	r28, 0x3d	; 61
    1a78:	de b7       	in	r29, 0x3e	; 62
    1a7a:	c3 56       	subi	r28, 0x63	; 99
    1a7c:	d0 40       	sbci	r29, 0x00	; 0
    1a7e:	0f b6       	in	r0, 0x3f	; 63
    1a80:	f8 94       	cli
    1a82:	de bf       	out	0x3e, r29	; 62
    1a84:	0f be       	out	0x3f, r0	; 63
    1a86:	cd bf       	out	0x3d, r28	; 61
    1a88:	fe 01       	movw	r30, r28
    1a8a:	ed 59       	subi	r30, 0x9D	; 157
    1a8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a8e:	80 83       	st	Z, r24
	SET_BIT(LCD_PORT,RS); /* Data Mode RS=1 */
    1a90:	ab e3       	ldi	r26, 0x3B	; 59
    1a92:	b0 e0       	ldi	r27, 0x00	; 0
    1a94:	eb e3       	ldi	r30, 0x3B	; 59
    1a96:	f0 e0       	ldi	r31, 0x00	; 0
    1a98:	80 81       	ld	r24, Z
    1a9a:	81 60       	ori	r24, 0x01	; 1
    1a9c:	8c 93       	st	X, r24
		CLEAR_BIT(LCD_PORT,RW); /* write data to LCD so RW=0 */
    1a9e:	ab e3       	ldi	r26, 0x3B	; 59
    1aa0:	b0 e0       	ldi	r27, 0x00	; 0
    1aa2:	eb e3       	ldi	r30, 0x3B	; 59
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	80 81       	ld	r24, Z
    1aa8:	8d 7f       	andi	r24, 0xFD	; 253
    1aaa:	8c 93       	st	X, r24
    1aac:	fe 01       	movw	r30, r28
    1aae:	e1 5a       	subi	r30, 0xA1	; 161
    1ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab2:	80 e0       	ldi	r24, 0x00	; 0
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	a0 e8       	ldi	r26, 0x80	; 128
    1ab8:	bf e3       	ldi	r27, 0x3F	; 63
    1aba:	80 83       	st	Z, r24
    1abc:	91 83       	std	Z+1, r25	; 0x01
    1abe:	a2 83       	std	Z+2, r26	; 0x02
    1ac0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ac2:	8e 01       	movw	r16, r28
    1ac4:	05 5a       	subi	r16, 0xA5	; 165
    1ac6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ac8:	fe 01       	movw	r30, r28
    1aca:	e1 5a       	subi	r30, 0xA1	; 161
    1acc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ace:	60 81       	ld	r22, Z
    1ad0:	71 81       	ldd	r23, Z+1	; 0x01
    1ad2:	82 81       	ldd	r24, Z+2	; 0x02
    1ad4:	93 81       	ldd	r25, Z+3	; 0x03
    1ad6:	20 e0       	ldi	r18, 0x00	; 0
    1ad8:	30 e0       	ldi	r19, 0x00	; 0
    1ada:	4a ef       	ldi	r20, 0xFA	; 250
    1adc:	54 e4       	ldi	r21, 0x44	; 68
    1ade:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    1ae2:	dc 01       	movw	r26, r24
    1ae4:	cb 01       	movw	r24, r22
    1ae6:	f8 01       	movw	r30, r16
    1ae8:	80 83       	st	Z, r24
    1aea:	91 83       	std	Z+1, r25	; 0x01
    1aec:	a2 83       	std	Z+2, r26	; 0x02
    1aee:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1af0:	fe 01       	movw	r30, r28
    1af2:	e5 5a       	subi	r30, 0xA5	; 165
    1af4:	ff 4f       	sbci	r31, 0xFF	; 255
    1af6:	60 81       	ld	r22, Z
    1af8:	71 81       	ldd	r23, Z+1	; 0x01
    1afa:	82 81       	ldd	r24, Z+2	; 0x02
    1afc:	93 81       	ldd	r25, Z+3	; 0x03
    1afe:	20 e0       	ldi	r18, 0x00	; 0
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	40 e8       	ldi	r20, 0x80	; 128
    1b04:	5f e3       	ldi	r21, 0x3F	; 63
    1b06:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    1b0a:	88 23       	and	r24, r24
    1b0c:	44 f4       	brge	.+16     	; 0x1b1e <LCD_displayCharacter+0xb0>
		__ticks = 1;
    1b0e:	fe 01       	movw	r30, r28
    1b10:	e7 5a       	subi	r30, 0xA7	; 167
    1b12:	ff 4f       	sbci	r31, 0xFF	; 255
    1b14:	81 e0       	ldi	r24, 0x01	; 1
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	91 83       	std	Z+1, r25	; 0x01
    1b1a:	80 83       	st	Z, r24
    1b1c:	64 c0       	rjmp	.+200    	; 0x1be6 <LCD_displayCharacter+0x178>
	else if (__tmp > 65535)
    1b1e:	fe 01       	movw	r30, r28
    1b20:	e5 5a       	subi	r30, 0xA5	; 165
    1b22:	ff 4f       	sbci	r31, 0xFF	; 255
    1b24:	60 81       	ld	r22, Z
    1b26:	71 81       	ldd	r23, Z+1	; 0x01
    1b28:	82 81       	ldd	r24, Z+2	; 0x02
    1b2a:	93 81       	ldd	r25, Z+3	; 0x03
    1b2c:	20 e0       	ldi	r18, 0x00	; 0
    1b2e:	3f ef       	ldi	r19, 0xFF	; 255
    1b30:	4f e7       	ldi	r20, 0x7F	; 127
    1b32:	57 e4       	ldi	r21, 0x47	; 71
    1b34:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    1b38:	18 16       	cp	r1, r24
    1b3a:	0c f0       	brlt	.+2      	; 0x1b3e <LCD_displayCharacter+0xd0>
    1b3c:	43 c0       	rjmp	.+134    	; 0x1bc4 <LCD_displayCharacter+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b3e:	fe 01       	movw	r30, r28
    1b40:	e1 5a       	subi	r30, 0xA1	; 161
    1b42:	ff 4f       	sbci	r31, 0xFF	; 255
    1b44:	60 81       	ld	r22, Z
    1b46:	71 81       	ldd	r23, Z+1	; 0x01
    1b48:	82 81       	ldd	r24, Z+2	; 0x02
    1b4a:	93 81       	ldd	r25, Z+3	; 0x03
    1b4c:	20 e0       	ldi	r18, 0x00	; 0
    1b4e:	30 e0       	ldi	r19, 0x00	; 0
    1b50:	40 e2       	ldi	r20, 0x20	; 32
    1b52:	51 e4       	ldi	r21, 0x41	; 65
    1b54:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    1b58:	dc 01       	movw	r26, r24
    1b5a:	cb 01       	movw	r24, r22
    1b5c:	8e 01       	movw	r16, r28
    1b5e:	07 5a       	subi	r16, 0xA7	; 167
    1b60:	1f 4f       	sbci	r17, 0xFF	; 255
    1b62:	bc 01       	movw	r22, r24
    1b64:	cd 01       	movw	r24, r26
    1b66:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    1b6a:	dc 01       	movw	r26, r24
    1b6c:	cb 01       	movw	r24, r22
    1b6e:	f8 01       	movw	r30, r16
    1b70:	91 83       	std	Z+1, r25	; 0x01
    1b72:	80 83       	st	Z, r24
    1b74:	1f c0       	rjmp	.+62     	; 0x1bb4 <LCD_displayCharacter+0x146>
    1b76:	fe 01       	movw	r30, r28
    1b78:	e9 5a       	subi	r30, 0xA9	; 169
    1b7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7c:	88 ec       	ldi	r24, 0xC8	; 200
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	91 83       	std	Z+1, r25	; 0x01
    1b82:	80 83       	st	Z, r24
    1b84:	fe 01       	movw	r30, r28
    1b86:	e9 5a       	subi	r30, 0xA9	; 169
    1b88:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8a:	80 81       	ld	r24, Z
    1b8c:	91 81       	ldd	r25, Z+1	; 0x01
    1b8e:	01 97       	sbiw	r24, 0x01	; 1
    1b90:	f1 f7       	brne	.-4      	; 0x1b8e <LCD_displayCharacter+0x120>
    1b92:	fe 01       	movw	r30, r28
    1b94:	e9 5a       	subi	r30, 0xA9	; 169
    1b96:	ff 4f       	sbci	r31, 0xFF	; 255
    1b98:	91 83       	std	Z+1, r25	; 0x01
    1b9a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b9c:	de 01       	movw	r26, r28
    1b9e:	a7 5a       	subi	r26, 0xA7	; 167
    1ba0:	bf 4f       	sbci	r27, 0xFF	; 255
    1ba2:	fe 01       	movw	r30, r28
    1ba4:	e7 5a       	subi	r30, 0xA7	; 167
    1ba6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba8:	80 81       	ld	r24, Z
    1baa:	91 81       	ldd	r25, Z+1	; 0x01
    1bac:	01 97       	sbiw	r24, 0x01	; 1
    1bae:	11 96       	adiw	r26, 0x01	; 1
    1bb0:	9c 93       	st	X, r25
    1bb2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bb4:	fe 01       	movw	r30, r28
    1bb6:	e7 5a       	subi	r30, 0xA7	; 167
    1bb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bba:	80 81       	ld	r24, Z
    1bbc:	91 81       	ldd	r25, Z+1	; 0x01
    1bbe:	00 97       	sbiw	r24, 0x00	; 0
    1bc0:	d1 f6       	brne	.-76     	; 0x1b76 <LCD_displayCharacter+0x108>
    1bc2:	27 c0       	rjmp	.+78     	; 0x1c12 <LCD_displayCharacter+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bc4:	8e 01       	movw	r16, r28
    1bc6:	07 5a       	subi	r16, 0xA7	; 167
    1bc8:	1f 4f       	sbci	r17, 0xFF	; 255
    1bca:	fe 01       	movw	r30, r28
    1bcc:	e5 5a       	subi	r30, 0xA5	; 165
    1bce:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd0:	60 81       	ld	r22, Z
    1bd2:	71 81       	ldd	r23, Z+1	; 0x01
    1bd4:	82 81       	ldd	r24, Z+2	; 0x02
    1bd6:	93 81       	ldd	r25, Z+3	; 0x03
    1bd8:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    1bdc:	dc 01       	movw	r26, r24
    1bde:	cb 01       	movw	r24, r22
    1be0:	f8 01       	movw	r30, r16
    1be2:	91 83       	std	Z+1, r25	; 0x01
    1be4:	80 83       	st	Z, r24
    1be6:	de 01       	movw	r26, r28
    1be8:	ab 5a       	subi	r26, 0xAB	; 171
    1bea:	bf 4f       	sbci	r27, 0xFF	; 255
    1bec:	fe 01       	movw	r30, r28
    1bee:	e7 5a       	subi	r30, 0xA7	; 167
    1bf0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf2:	80 81       	ld	r24, Z
    1bf4:	91 81       	ldd	r25, Z+1	; 0x01
    1bf6:	8d 93       	st	X+, r24
    1bf8:	9c 93       	st	X, r25
    1bfa:	fe 01       	movw	r30, r28
    1bfc:	eb 5a       	subi	r30, 0xAB	; 171
    1bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    1c00:	80 81       	ld	r24, Z
    1c02:	91 81       	ldd	r25, Z+1	; 0x01
    1c04:	01 97       	sbiw	r24, 0x01	; 1
    1c06:	f1 f7       	brne	.-4      	; 0x1c04 <LCD_displayCharacter+0x196>
    1c08:	fe 01       	movw	r30, r28
    1c0a:	eb 5a       	subi	r30, 0xAB	; 171
    1c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0e:	91 83       	std	Z+1, r25	; 0x01
    1c10:	80 83       	st	Z, r24
			_delay_ms(1); /* delay for processing Tas = 50ns */
			SET_BIT(LCD_PORT,EN); /* Enable LCD E=1 */
    1c12:	ab e3       	ldi	r26, 0x3B	; 59
    1c14:	b0 e0       	ldi	r27, 0x00	; 0
    1c16:	eb e3       	ldi	r30, 0x3B	; 59
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	80 81       	ld	r24, Z
    1c1c:	84 60       	ori	r24, 0x04	; 4
    1c1e:	8c 93       	st	X, r24
    1c20:	fe 01       	movw	r30, r28
    1c22:	ef 5a       	subi	r30, 0xAF	; 175
    1c24:	ff 4f       	sbci	r31, 0xFF	; 255
    1c26:	80 e0       	ldi	r24, 0x00	; 0
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	a0 e8       	ldi	r26, 0x80	; 128
    1c2c:	bf e3       	ldi	r27, 0x3F	; 63
    1c2e:	80 83       	st	Z, r24
    1c30:	91 83       	std	Z+1, r25	; 0x01
    1c32:	a2 83       	std	Z+2, r26	; 0x02
    1c34:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c36:	8e 01       	movw	r16, r28
    1c38:	03 5b       	subi	r16, 0xB3	; 179
    1c3a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c3c:	fe 01       	movw	r30, r28
    1c3e:	ef 5a       	subi	r30, 0xAF	; 175
    1c40:	ff 4f       	sbci	r31, 0xFF	; 255
    1c42:	60 81       	ld	r22, Z
    1c44:	71 81       	ldd	r23, Z+1	; 0x01
    1c46:	82 81       	ldd	r24, Z+2	; 0x02
    1c48:	93 81       	ldd	r25, Z+3	; 0x03
    1c4a:	20 e0       	ldi	r18, 0x00	; 0
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
    1c4e:	4a ef       	ldi	r20, 0xFA	; 250
    1c50:	54 e4       	ldi	r21, 0x44	; 68
    1c52:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    1c56:	dc 01       	movw	r26, r24
    1c58:	cb 01       	movw	r24, r22
    1c5a:	f8 01       	movw	r30, r16
    1c5c:	80 83       	st	Z, r24
    1c5e:	91 83       	std	Z+1, r25	; 0x01
    1c60:	a2 83       	std	Z+2, r26	; 0x02
    1c62:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c64:	fe 01       	movw	r30, r28
    1c66:	e3 5b       	subi	r30, 0xB3	; 179
    1c68:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6a:	60 81       	ld	r22, Z
    1c6c:	71 81       	ldd	r23, Z+1	; 0x01
    1c6e:	82 81       	ldd	r24, Z+2	; 0x02
    1c70:	93 81       	ldd	r25, Z+3	; 0x03
    1c72:	20 e0       	ldi	r18, 0x00	; 0
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	40 e8       	ldi	r20, 0x80	; 128
    1c78:	5f e3       	ldi	r21, 0x3F	; 63
    1c7a:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    1c7e:	88 23       	and	r24, r24
    1c80:	44 f4       	brge	.+16     	; 0x1c92 <LCD_displayCharacter+0x224>
		__ticks = 1;
    1c82:	fe 01       	movw	r30, r28
    1c84:	e5 5b       	subi	r30, 0xB5	; 181
    1c86:	ff 4f       	sbci	r31, 0xFF	; 255
    1c88:	81 e0       	ldi	r24, 0x01	; 1
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	91 83       	std	Z+1, r25	; 0x01
    1c8e:	80 83       	st	Z, r24
    1c90:	64 c0       	rjmp	.+200    	; 0x1d5a <LCD_displayCharacter+0x2ec>
	else if (__tmp > 65535)
    1c92:	fe 01       	movw	r30, r28
    1c94:	e3 5b       	subi	r30, 0xB3	; 179
    1c96:	ff 4f       	sbci	r31, 0xFF	; 255
    1c98:	60 81       	ld	r22, Z
    1c9a:	71 81       	ldd	r23, Z+1	; 0x01
    1c9c:	82 81       	ldd	r24, Z+2	; 0x02
    1c9e:	93 81       	ldd	r25, Z+3	; 0x03
    1ca0:	20 e0       	ldi	r18, 0x00	; 0
    1ca2:	3f ef       	ldi	r19, 0xFF	; 255
    1ca4:	4f e7       	ldi	r20, 0x7F	; 127
    1ca6:	57 e4       	ldi	r21, 0x47	; 71
    1ca8:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    1cac:	18 16       	cp	r1, r24
    1cae:	0c f0       	brlt	.+2      	; 0x1cb2 <LCD_displayCharacter+0x244>
    1cb0:	43 c0       	rjmp	.+134    	; 0x1d38 <LCD_displayCharacter+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cb2:	fe 01       	movw	r30, r28
    1cb4:	ef 5a       	subi	r30, 0xAF	; 175
    1cb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb8:	60 81       	ld	r22, Z
    1cba:	71 81       	ldd	r23, Z+1	; 0x01
    1cbc:	82 81       	ldd	r24, Z+2	; 0x02
    1cbe:	93 81       	ldd	r25, Z+3	; 0x03
    1cc0:	20 e0       	ldi	r18, 0x00	; 0
    1cc2:	30 e0       	ldi	r19, 0x00	; 0
    1cc4:	40 e2       	ldi	r20, 0x20	; 32
    1cc6:	51 e4       	ldi	r21, 0x41	; 65
    1cc8:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    1ccc:	dc 01       	movw	r26, r24
    1cce:	cb 01       	movw	r24, r22
    1cd0:	8e 01       	movw	r16, r28
    1cd2:	05 5b       	subi	r16, 0xB5	; 181
    1cd4:	1f 4f       	sbci	r17, 0xFF	; 255
    1cd6:	bc 01       	movw	r22, r24
    1cd8:	cd 01       	movw	r24, r26
    1cda:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    1cde:	dc 01       	movw	r26, r24
    1ce0:	cb 01       	movw	r24, r22
    1ce2:	f8 01       	movw	r30, r16
    1ce4:	91 83       	std	Z+1, r25	; 0x01
    1ce6:	80 83       	st	Z, r24
    1ce8:	1f c0       	rjmp	.+62     	; 0x1d28 <LCD_displayCharacter+0x2ba>
    1cea:	fe 01       	movw	r30, r28
    1cec:	e7 5b       	subi	r30, 0xB7	; 183
    1cee:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf0:	88 ec       	ldi	r24, 0xC8	; 200
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	91 83       	std	Z+1, r25	; 0x01
    1cf6:	80 83       	st	Z, r24
    1cf8:	fe 01       	movw	r30, r28
    1cfa:	e7 5b       	subi	r30, 0xB7	; 183
    1cfc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfe:	80 81       	ld	r24, Z
    1d00:	91 81       	ldd	r25, Z+1	; 0x01
    1d02:	01 97       	sbiw	r24, 0x01	; 1
    1d04:	f1 f7       	brne	.-4      	; 0x1d02 <LCD_displayCharacter+0x294>
    1d06:	fe 01       	movw	r30, r28
    1d08:	e7 5b       	subi	r30, 0xB7	; 183
    1d0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0c:	91 83       	std	Z+1, r25	; 0x01
    1d0e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d10:	de 01       	movw	r26, r28
    1d12:	a5 5b       	subi	r26, 0xB5	; 181
    1d14:	bf 4f       	sbci	r27, 0xFF	; 255
    1d16:	fe 01       	movw	r30, r28
    1d18:	e5 5b       	subi	r30, 0xB5	; 181
    1d1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1c:	80 81       	ld	r24, Z
    1d1e:	91 81       	ldd	r25, Z+1	; 0x01
    1d20:	01 97       	sbiw	r24, 0x01	; 1
    1d22:	11 96       	adiw	r26, 0x01	; 1
    1d24:	9c 93       	st	X, r25
    1d26:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d28:	fe 01       	movw	r30, r28
    1d2a:	e5 5b       	subi	r30, 0xB5	; 181
    1d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2e:	80 81       	ld	r24, Z
    1d30:	91 81       	ldd	r25, Z+1	; 0x01
    1d32:	00 97       	sbiw	r24, 0x00	; 0
    1d34:	d1 f6       	brne	.-76     	; 0x1cea <LCD_displayCharacter+0x27c>
    1d36:	27 c0       	rjmp	.+78     	; 0x1d86 <LCD_displayCharacter+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d38:	8e 01       	movw	r16, r28
    1d3a:	05 5b       	subi	r16, 0xB5	; 181
    1d3c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d3e:	fe 01       	movw	r30, r28
    1d40:	e3 5b       	subi	r30, 0xB3	; 179
    1d42:	ff 4f       	sbci	r31, 0xFF	; 255
    1d44:	60 81       	ld	r22, Z
    1d46:	71 81       	ldd	r23, Z+1	; 0x01
    1d48:	82 81       	ldd	r24, Z+2	; 0x02
    1d4a:	93 81       	ldd	r25, Z+3	; 0x03
    1d4c:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    1d50:	dc 01       	movw	r26, r24
    1d52:	cb 01       	movw	r24, r22
    1d54:	f8 01       	movw	r30, r16
    1d56:	91 83       	std	Z+1, r25	; 0x01
    1d58:	80 83       	st	Z, r24
    1d5a:	de 01       	movw	r26, r28
    1d5c:	a9 5b       	subi	r26, 0xB9	; 185
    1d5e:	bf 4f       	sbci	r27, 0xFF	; 255
    1d60:	fe 01       	movw	r30, r28
    1d62:	e5 5b       	subi	r30, 0xB5	; 181
    1d64:	ff 4f       	sbci	r31, 0xFF	; 255
    1d66:	80 81       	ld	r24, Z
    1d68:	91 81       	ldd	r25, Z+1	; 0x01
    1d6a:	8d 93       	st	X+, r24
    1d6c:	9c 93       	st	X, r25
    1d6e:	fe 01       	movw	r30, r28
    1d70:	e9 5b       	subi	r30, 0xB9	; 185
    1d72:	ff 4f       	sbci	r31, 0xFF	; 255
    1d74:	80 81       	ld	r24, Z
    1d76:	91 81       	ldd	r25, Z+1	; 0x01
    1d78:	01 97       	sbiw	r24, 0x01	; 1
    1d7a:	f1 f7       	brne	.-4      	; 0x1d78 <LCD_displayCharacter+0x30a>
    1d7c:	fe 01       	movw	r30, r28
    1d7e:	e9 5b       	subi	r30, 0xB9	; 185
    1d80:	ff 4f       	sbci	r31, 0xFF	; 255
    1d82:	91 83       	std	Z+1, r25	; 0x01
    1d84:	80 83       	st	Z, r24
			_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	#if (DATA_BITS_MODE == 4)
			LCD_PORT = (LCD_PORT & 0x0F) | (data & 0xF0);
    1d86:	ab e3       	ldi	r26, 0x3B	; 59
    1d88:	b0 e0       	ldi	r27, 0x00	; 0
    1d8a:	eb e3       	ldi	r30, 0x3B	; 59
    1d8c:	f0 e0       	ldi	r31, 0x00	; 0
    1d8e:	80 81       	ld	r24, Z
    1d90:	98 2f       	mov	r25, r24
    1d92:	9f 70       	andi	r25, 0x0F	; 15
    1d94:	fe 01       	movw	r30, r28
    1d96:	ed 59       	subi	r30, 0x9D	; 157
    1d98:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9a:	80 81       	ld	r24, Z
    1d9c:	80 7f       	andi	r24, 0xF0	; 240
    1d9e:	89 2b       	or	r24, r25
    1da0:	8c 93       	st	X, r24
    1da2:	fe 01       	movw	r30, r28
    1da4:	ed 5b       	subi	r30, 0xBD	; 189
    1da6:	ff 4f       	sbci	r31, 0xFF	; 255
    1da8:	80 e0       	ldi	r24, 0x00	; 0
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	a0 e8       	ldi	r26, 0x80	; 128
    1dae:	bf e3       	ldi	r27, 0x3F	; 63
    1db0:	80 83       	st	Z, r24
    1db2:	91 83       	std	Z+1, r25	; 0x01
    1db4:	a2 83       	std	Z+2, r26	; 0x02
    1db6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1db8:	8e 01       	movw	r16, r28
    1dba:	01 5c       	subi	r16, 0xC1	; 193
    1dbc:	1f 4f       	sbci	r17, 0xFF	; 255
    1dbe:	fe 01       	movw	r30, r28
    1dc0:	ed 5b       	subi	r30, 0xBD	; 189
    1dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc4:	60 81       	ld	r22, Z
    1dc6:	71 81       	ldd	r23, Z+1	; 0x01
    1dc8:	82 81       	ldd	r24, Z+2	; 0x02
    1dca:	93 81       	ldd	r25, Z+3	; 0x03
    1dcc:	20 e0       	ldi	r18, 0x00	; 0
    1dce:	30 e0       	ldi	r19, 0x00	; 0
    1dd0:	4a ef       	ldi	r20, 0xFA	; 250
    1dd2:	54 e4       	ldi	r21, 0x44	; 68
    1dd4:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    1dd8:	dc 01       	movw	r26, r24
    1dda:	cb 01       	movw	r24, r22
    1ddc:	f8 01       	movw	r30, r16
    1dde:	80 83       	st	Z, r24
    1de0:	91 83       	std	Z+1, r25	; 0x01
    1de2:	a2 83       	std	Z+2, r26	; 0x02
    1de4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1de6:	fe 01       	movw	r30, r28
    1de8:	ff 96       	adiw	r30, 0x3f	; 63
    1dea:	60 81       	ld	r22, Z
    1dec:	71 81       	ldd	r23, Z+1	; 0x01
    1dee:	82 81       	ldd	r24, Z+2	; 0x02
    1df0:	93 81       	ldd	r25, Z+3	; 0x03
    1df2:	20 e0       	ldi	r18, 0x00	; 0
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	40 e8       	ldi	r20, 0x80	; 128
    1df8:	5f e3       	ldi	r21, 0x3F	; 63
    1dfa:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    1dfe:	88 23       	and	r24, r24
    1e00:	2c f4       	brge	.+10     	; 0x1e0c <LCD_displayCharacter+0x39e>
		__ticks = 1;
    1e02:	81 e0       	ldi	r24, 0x01	; 1
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	9e af       	std	Y+62, r25	; 0x3e
    1e08:	8d af       	std	Y+61, r24	; 0x3d
    1e0a:	46 c0       	rjmp	.+140    	; 0x1e98 <LCD_displayCharacter+0x42a>
	else if (__tmp > 65535)
    1e0c:	fe 01       	movw	r30, r28
    1e0e:	ff 96       	adiw	r30, 0x3f	; 63
    1e10:	60 81       	ld	r22, Z
    1e12:	71 81       	ldd	r23, Z+1	; 0x01
    1e14:	82 81       	ldd	r24, Z+2	; 0x02
    1e16:	93 81       	ldd	r25, Z+3	; 0x03
    1e18:	20 e0       	ldi	r18, 0x00	; 0
    1e1a:	3f ef       	ldi	r19, 0xFF	; 255
    1e1c:	4f e7       	ldi	r20, 0x7F	; 127
    1e1e:	57 e4       	ldi	r21, 0x47	; 71
    1e20:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    1e24:	18 16       	cp	r1, r24
    1e26:	64 f5       	brge	.+88     	; 0x1e80 <LCD_displayCharacter+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e28:	fe 01       	movw	r30, r28
    1e2a:	ed 5b       	subi	r30, 0xBD	; 189
    1e2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2e:	60 81       	ld	r22, Z
    1e30:	71 81       	ldd	r23, Z+1	; 0x01
    1e32:	82 81       	ldd	r24, Z+2	; 0x02
    1e34:	93 81       	ldd	r25, Z+3	; 0x03
    1e36:	20 e0       	ldi	r18, 0x00	; 0
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	40 e2       	ldi	r20, 0x20	; 32
    1e3c:	51 e4       	ldi	r21, 0x41	; 65
    1e3e:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    1e42:	dc 01       	movw	r26, r24
    1e44:	cb 01       	movw	r24, r22
    1e46:	bc 01       	movw	r22, r24
    1e48:	cd 01       	movw	r24, r26
    1e4a:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    1e4e:	dc 01       	movw	r26, r24
    1e50:	cb 01       	movw	r24, r22
    1e52:	9e af       	std	Y+62, r25	; 0x3e
    1e54:	8d af       	std	Y+61, r24	; 0x3d
    1e56:	0f c0       	rjmp	.+30     	; 0x1e76 <LCD_displayCharacter+0x408>
    1e58:	88 ec       	ldi	r24, 0xC8	; 200
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	9c af       	std	Y+60, r25	; 0x3c
    1e5e:	8b af       	std	Y+59, r24	; 0x3b
    1e60:	8b ad       	ldd	r24, Y+59	; 0x3b
    1e62:	9c ad       	ldd	r25, Y+60	; 0x3c
    1e64:	01 97       	sbiw	r24, 0x01	; 1
    1e66:	f1 f7       	brne	.-4      	; 0x1e64 <LCD_displayCharacter+0x3f6>
    1e68:	9c af       	std	Y+60, r25	; 0x3c
    1e6a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e6c:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e6e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e70:	01 97       	sbiw	r24, 0x01	; 1
    1e72:	9e af       	std	Y+62, r25	; 0x3e
    1e74:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e76:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e78:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e7a:	00 97       	sbiw	r24, 0x00	; 0
    1e7c:	69 f7       	brne	.-38     	; 0x1e58 <LCD_displayCharacter+0x3ea>
    1e7e:	16 c0       	rjmp	.+44     	; 0x1eac <LCD_displayCharacter+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e80:	fe 01       	movw	r30, r28
    1e82:	ff 96       	adiw	r30, 0x3f	; 63
    1e84:	60 81       	ld	r22, Z
    1e86:	71 81       	ldd	r23, Z+1	; 0x01
    1e88:	82 81       	ldd	r24, Z+2	; 0x02
    1e8a:	93 81       	ldd	r25, Z+3	; 0x03
    1e8c:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    1e90:	dc 01       	movw	r26, r24
    1e92:	cb 01       	movw	r24, r22
    1e94:	9e af       	std	Y+62, r25	; 0x3e
    1e96:	8d af       	std	Y+61, r24	; 0x3d
    1e98:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e9a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e9c:	9a af       	std	Y+58, r25	; 0x3a
    1e9e:	89 af       	std	Y+57, r24	; 0x39
    1ea0:	89 ad       	ldd	r24, Y+57	; 0x39
    1ea2:	9a ad       	ldd	r25, Y+58	; 0x3a
    1ea4:	01 97       	sbiw	r24, 0x01	; 1
    1ea6:	f1 f7       	brne	.-4      	; 0x1ea4 <LCD_displayCharacter+0x436>
    1ea8:	9a af       	std	Y+58, r25	; 0x3a
    1eaa:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(1); /* delay for processing Tdsw = 100ns */
				CLEAR_BIT(LCD_PORT,EN); /* disable LCD E=0 */
    1eac:	ab e3       	ldi	r26, 0x3B	; 59
    1eae:	b0 e0       	ldi	r27, 0x00	; 0
    1eb0:	eb e3       	ldi	r30, 0x3B	; 59
    1eb2:	f0 e0       	ldi	r31, 0x00	; 0
    1eb4:	80 81       	ld	r24, Z
    1eb6:	8b 7f       	andi	r24, 0xFB	; 251
    1eb8:	8c 93       	st	X, r24
    1eba:	80 e0       	ldi	r24, 0x00	; 0
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	a0 e8       	ldi	r26, 0x80	; 128
    1ec0:	bf e3       	ldi	r27, 0x3F	; 63
    1ec2:	8d ab       	std	Y+53, r24	; 0x35
    1ec4:	9e ab       	std	Y+54, r25	; 0x36
    1ec6:	af ab       	std	Y+55, r26	; 0x37
    1ec8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eca:	6d a9       	ldd	r22, Y+53	; 0x35
    1ecc:	7e a9       	ldd	r23, Y+54	; 0x36
    1ece:	8f a9       	ldd	r24, Y+55	; 0x37
    1ed0:	98 ad       	ldd	r25, Y+56	; 0x38
    1ed2:	20 e0       	ldi	r18, 0x00	; 0
    1ed4:	30 e0       	ldi	r19, 0x00	; 0
    1ed6:	4a ef       	ldi	r20, 0xFA	; 250
    1ed8:	54 e4       	ldi	r21, 0x44	; 68
    1eda:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    1ede:	dc 01       	movw	r26, r24
    1ee0:	cb 01       	movw	r24, r22
    1ee2:	89 ab       	std	Y+49, r24	; 0x31
    1ee4:	9a ab       	std	Y+50, r25	; 0x32
    1ee6:	ab ab       	std	Y+51, r26	; 0x33
    1ee8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1eea:	69 a9       	ldd	r22, Y+49	; 0x31
    1eec:	7a a9       	ldd	r23, Y+50	; 0x32
    1eee:	8b a9       	ldd	r24, Y+51	; 0x33
    1ef0:	9c a9       	ldd	r25, Y+52	; 0x34
    1ef2:	20 e0       	ldi	r18, 0x00	; 0
    1ef4:	30 e0       	ldi	r19, 0x00	; 0
    1ef6:	40 e8       	ldi	r20, 0x80	; 128
    1ef8:	5f e3       	ldi	r21, 0x3F	; 63
    1efa:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    1efe:	88 23       	and	r24, r24
    1f00:	2c f4       	brge	.+10     	; 0x1f0c <LCD_displayCharacter+0x49e>
		__ticks = 1;
    1f02:	81 e0       	ldi	r24, 0x01	; 1
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	98 ab       	std	Y+48, r25	; 0x30
    1f08:	8f a7       	std	Y+47, r24	; 0x2f
    1f0a:	3f c0       	rjmp	.+126    	; 0x1f8a <LCD_displayCharacter+0x51c>
	else if (__tmp > 65535)
    1f0c:	69 a9       	ldd	r22, Y+49	; 0x31
    1f0e:	7a a9       	ldd	r23, Y+50	; 0x32
    1f10:	8b a9       	ldd	r24, Y+51	; 0x33
    1f12:	9c a9       	ldd	r25, Y+52	; 0x34
    1f14:	20 e0       	ldi	r18, 0x00	; 0
    1f16:	3f ef       	ldi	r19, 0xFF	; 255
    1f18:	4f e7       	ldi	r20, 0x7F	; 127
    1f1a:	57 e4       	ldi	r21, 0x47	; 71
    1f1c:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    1f20:	18 16       	cp	r1, r24
    1f22:	4c f5       	brge	.+82     	; 0x1f76 <LCD_displayCharacter+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f24:	6d a9       	ldd	r22, Y+53	; 0x35
    1f26:	7e a9       	ldd	r23, Y+54	; 0x36
    1f28:	8f a9       	ldd	r24, Y+55	; 0x37
    1f2a:	98 ad       	ldd	r25, Y+56	; 0x38
    1f2c:	20 e0       	ldi	r18, 0x00	; 0
    1f2e:	30 e0       	ldi	r19, 0x00	; 0
    1f30:	40 e2       	ldi	r20, 0x20	; 32
    1f32:	51 e4       	ldi	r21, 0x41	; 65
    1f34:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    1f38:	dc 01       	movw	r26, r24
    1f3a:	cb 01       	movw	r24, r22
    1f3c:	bc 01       	movw	r22, r24
    1f3e:	cd 01       	movw	r24, r26
    1f40:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    1f44:	dc 01       	movw	r26, r24
    1f46:	cb 01       	movw	r24, r22
    1f48:	98 ab       	std	Y+48, r25	; 0x30
    1f4a:	8f a7       	std	Y+47, r24	; 0x2f
    1f4c:	0f c0       	rjmp	.+30     	; 0x1f6c <LCD_displayCharacter+0x4fe>
    1f4e:	88 ec       	ldi	r24, 0xC8	; 200
    1f50:	90 e0       	ldi	r25, 0x00	; 0
    1f52:	9e a7       	std	Y+46, r25	; 0x2e
    1f54:	8d a7       	std	Y+45, r24	; 0x2d
    1f56:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f58:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f5a:	01 97       	sbiw	r24, 0x01	; 1
    1f5c:	f1 f7       	brne	.-4      	; 0x1f5a <LCD_displayCharacter+0x4ec>
    1f5e:	9e a7       	std	Y+46, r25	; 0x2e
    1f60:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f62:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f64:	98 a9       	ldd	r25, Y+48	; 0x30
    1f66:	01 97       	sbiw	r24, 0x01	; 1
    1f68:	98 ab       	std	Y+48, r25	; 0x30
    1f6a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f6c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f6e:	98 a9       	ldd	r25, Y+48	; 0x30
    1f70:	00 97       	sbiw	r24, 0x00	; 0
    1f72:	69 f7       	brne	.-38     	; 0x1f4e <LCD_displayCharacter+0x4e0>
    1f74:	14 c0       	rjmp	.+40     	; 0x1f9e <LCD_displayCharacter+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f76:	69 a9       	ldd	r22, Y+49	; 0x31
    1f78:	7a a9       	ldd	r23, Y+50	; 0x32
    1f7a:	8b a9       	ldd	r24, Y+51	; 0x33
    1f7c:	9c a9       	ldd	r25, Y+52	; 0x34
    1f7e:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    1f82:	dc 01       	movw	r26, r24
    1f84:	cb 01       	movw	r24, r22
    1f86:	98 ab       	std	Y+48, r25	; 0x30
    1f88:	8f a7       	std	Y+47, r24	; 0x2f
    1f8a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f8c:	98 a9       	ldd	r25, Y+48	; 0x30
    1f8e:	9c a7       	std	Y+44, r25	; 0x2c
    1f90:	8b a7       	std	Y+43, r24	; 0x2b
    1f92:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f94:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f96:	01 97       	sbiw	r24, 0x01	; 1
    1f98:	f1 f7       	brne	.-4      	; 0x1f96 <LCD_displayCharacter+0x528>
    1f9a:	9c a7       	std	Y+44, r25	; 0x2c
    1f9c:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(1); /* delay for processing Th = 13ns */
				SET_BIT(LCD_PORT,EN); /* Enable LCD E=1 */
    1f9e:	ab e3       	ldi	r26, 0x3B	; 59
    1fa0:	b0 e0       	ldi	r27, 0x00	; 0
    1fa2:	eb e3       	ldi	r30, 0x3B	; 59
    1fa4:	f0 e0       	ldi	r31, 0x00	; 0
    1fa6:	80 81       	ld	r24, Z
    1fa8:	84 60       	ori	r24, 0x04	; 4
    1faa:	8c 93       	st	X, r24
    1fac:	80 e0       	ldi	r24, 0x00	; 0
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	a0 e8       	ldi	r26, 0x80	; 128
    1fb2:	bf e3       	ldi	r27, 0x3F	; 63
    1fb4:	8f a3       	std	Y+39, r24	; 0x27
    1fb6:	98 a7       	std	Y+40, r25	; 0x28
    1fb8:	a9 a7       	std	Y+41, r26	; 0x29
    1fba:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fbc:	6f a1       	ldd	r22, Y+39	; 0x27
    1fbe:	78 a5       	ldd	r23, Y+40	; 0x28
    1fc0:	89 a5       	ldd	r24, Y+41	; 0x29
    1fc2:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fc4:	20 e0       	ldi	r18, 0x00	; 0
    1fc6:	30 e0       	ldi	r19, 0x00	; 0
    1fc8:	4a ef       	ldi	r20, 0xFA	; 250
    1fca:	54 e4       	ldi	r21, 0x44	; 68
    1fcc:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    1fd0:	dc 01       	movw	r26, r24
    1fd2:	cb 01       	movw	r24, r22
    1fd4:	8b a3       	std	Y+35, r24	; 0x23
    1fd6:	9c a3       	std	Y+36, r25	; 0x24
    1fd8:	ad a3       	std	Y+37, r26	; 0x25
    1fda:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1fdc:	6b a1       	ldd	r22, Y+35	; 0x23
    1fde:	7c a1       	ldd	r23, Y+36	; 0x24
    1fe0:	8d a1       	ldd	r24, Y+37	; 0x25
    1fe2:	9e a1       	ldd	r25, Y+38	; 0x26
    1fe4:	20 e0       	ldi	r18, 0x00	; 0
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	40 e8       	ldi	r20, 0x80	; 128
    1fea:	5f e3       	ldi	r21, 0x3F	; 63
    1fec:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    1ff0:	88 23       	and	r24, r24
    1ff2:	2c f4       	brge	.+10     	; 0x1ffe <LCD_displayCharacter+0x590>
		__ticks = 1;
    1ff4:	81 e0       	ldi	r24, 0x01	; 1
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	9a a3       	std	Y+34, r25	; 0x22
    1ffa:	89 a3       	std	Y+33, r24	; 0x21
    1ffc:	3f c0       	rjmp	.+126    	; 0x207c <LCD_displayCharacter+0x60e>
	else if (__tmp > 65535)
    1ffe:	6b a1       	ldd	r22, Y+35	; 0x23
    2000:	7c a1       	ldd	r23, Y+36	; 0x24
    2002:	8d a1       	ldd	r24, Y+37	; 0x25
    2004:	9e a1       	ldd	r25, Y+38	; 0x26
    2006:	20 e0       	ldi	r18, 0x00	; 0
    2008:	3f ef       	ldi	r19, 0xFF	; 255
    200a:	4f e7       	ldi	r20, 0x7F	; 127
    200c:	57 e4       	ldi	r21, 0x47	; 71
    200e:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    2012:	18 16       	cp	r1, r24
    2014:	4c f5       	brge	.+82     	; 0x2068 <LCD_displayCharacter+0x5fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2016:	6f a1       	ldd	r22, Y+39	; 0x27
    2018:	78 a5       	ldd	r23, Y+40	; 0x28
    201a:	89 a5       	ldd	r24, Y+41	; 0x29
    201c:	9a a5       	ldd	r25, Y+42	; 0x2a
    201e:	20 e0       	ldi	r18, 0x00	; 0
    2020:	30 e0       	ldi	r19, 0x00	; 0
    2022:	40 e2       	ldi	r20, 0x20	; 32
    2024:	51 e4       	ldi	r21, 0x41	; 65
    2026:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    202a:	dc 01       	movw	r26, r24
    202c:	cb 01       	movw	r24, r22
    202e:	bc 01       	movw	r22, r24
    2030:	cd 01       	movw	r24, r26
    2032:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    2036:	dc 01       	movw	r26, r24
    2038:	cb 01       	movw	r24, r22
    203a:	9a a3       	std	Y+34, r25	; 0x22
    203c:	89 a3       	std	Y+33, r24	; 0x21
    203e:	0f c0       	rjmp	.+30     	; 0x205e <LCD_displayCharacter+0x5f0>
    2040:	88 ec       	ldi	r24, 0xC8	; 200
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	98 a3       	std	Y+32, r25	; 0x20
    2046:	8f 8f       	std	Y+31, r24	; 0x1f
    2048:	8f 8d       	ldd	r24, Y+31	; 0x1f
    204a:	98 a1       	ldd	r25, Y+32	; 0x20
    204c:	01 97       	sbiw	r24, 0x01	; 1
    204e:	f1 f7       	brne	.-4      	; 0x204c <LCD_displayCharacter+0x5de>
    2050:	98 a3       	std	Y+32, r25	; 0x20
    2052:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2054:	89 a1       	ldd	r24, Y+33	; 0x21
    2056:	9a a1       	ldd	r25, Y+34	; 0x22
    2058:	01 97       	sbiw	r24, 0x01	; 1
    205a:	9a a3       	std	Y+34, r25	; 0x22
    205c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    205e:	89 a1       	ldd	r24, Y+33	; 0x21
    2060:	9a a1       	ldd	r25, Y+34	; 0x22
    2062:	00 97       	sbiw	r24, 0x00	; 0
    2064:	69 f7       	brne	.-38     	; 0x2040 <LCD_displayCharacter+0x5d2>
    2066:	14 c0       	rjmp	.+40     	; 0x2090 <LCD_displayCharacter+0x622>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2068:	6b a1       	ldd	r22, Y+35	; 0x23
    206a:	7c a1       	ldd	r23, Y+36	; 0x24
    206c:	8d a1       	ldd	r24, Y+37	; 0x25
    206e:	9e a1       	ldd	r25, Y+38	; 0x26
    2070:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    2074:	dc 01       	movw	r26, r24
    2076:	cb 01       	movw	r24, r22
    2078:	9a a3       	std	Y+34, r25	; 0x22
    207a:	89 a3       	std	Y+33, r24	; 0x21
    207c:	89 a1       	ldd	r24, Y+33	; 0x21
    207e:	9a a1       	ldd	r25, Y+34	; 0x22
    2080:	9e 8f       	std	Y+30, r25	; 0x1e
    2082:	8d 8f       	std	Y+29, r24	; 0x1d
    2084:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2086:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2088:	01 97       	sbiw	r24, 0x01	; 1
    208a:	f1 f7       	brne	.-4      	; 0x2088 <LCD_displayCharacter+0x61a>
    208c:	9e 8f       	std	Y+30, r25	; 0x1e
    208e:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
				LCD_PORT = (LCD_PORT & 0x0F) | ((data & 0x0F) << 4);
    2090:	ab e3       	ldi	r26, 0x3B	; 59
    2092:	b0 e0       	ldi	r27, 0x00	; 0
    2094:	eb e3       	ldi	r30, 0x3B	; 59
    2096:	f0 e0       	ldi	r31, 0x00	; 0
    2098:	80 81       	ld	r24, Z
    209a:	28 2f       	mov	r18, r24
    209c:	2f 70       	andi	r18, 0x0F	; 15
    209e:	fe 01       	movw	r30, r28
    20a0:	ed 59       	subi	r30, 0x9D	; 157
    20a2:	ff 4f       	sbci	r31, 0xFF	; 255
    20a4:	80 81       	ld	r24, Z
    20a6:	88 2f       	mov	r24, r24
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	82 95       	swap	r24
    20ac:	92 95       	swap	r25
    20ae:	90 7f       	andi	r25, 0xF0	; 240
    20b0:	98 27       	eor	r25, r24
    20b2:	80 7f       	andi	r24, 0xF0	; 240
    20b4:	98 27       	eor	r25, r24
    20b6:	82 2b       	or	r24, r18
    20b8:	8c 93       	st	X, r24
    20ba:	80 e0       	ldi	r24, 0x00	; 0
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	a0 e8       	ldi	r26, 0x80	; 128
    20c0:	bf e3       	ldi	r27, 0x3F	; 63
    20c2:	89 8f       	std	Y+25, r24	; 0x19
    20c4:	9a 8f       	std	Y+26, r25	; 0x1a
    20c6:	ab 8f       	std	Y+27, r26	; 0x1b
    20c8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20ca:	69 8d       	ldd	r22, Y+25	; 0x19
    20cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20d2:	20 e0       	ldi	r18, 0x00	; 0
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	4a ef       	ldi	r20, 0xFA	; 250
    20d8:	54 e4       	ldi	r21, 0x44	; 68
    20da:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    20de:	dc 01       	movw	r26, r24
    20e0:	cb 01       	movw	r24, r22
    20e2:	8d 8b       	std	Y+21, r24	; 0x15
    20e4:	9e 8b       	std	Y+22, r25	; 0x16
    20e6:	af 8b       	std	Y+23, r26	; 0x17
    20e8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    20ea:	6d 89       	ldd	r22, Y+21	; 0x15
    20ec:	7e 89       	ldd	r23, Y+22	; 0x16
    20ee:	8f 89       	ldd	r24, Y+23	; 0x17
    20f0:	98 8d       	ldd	r25, Y+24	; 0x18
    20f2:	20 e0       	ldi	r18, 0x00	; 0
    20f4:	30 e0       	ldi	r19, 0x00	; 0
    20f6:	40 e8       	ldi	r20, 0x80	; 128
    20f8:	5f e3       	ldi	r21, 0x3F	; 63
    20fa:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    20fe:	88 23       	and	r24, r24
    2100:	2c f4       	brge	.+10     	; 0x210c <LCD_displayCharacter+0x69e>
		__ticks = 1;
    2102:	81 e0       	ldi	r24, 0x01	; 1
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	9c 8b       	std	Y+20, r25	; 0x14
    2108:	8b 8b       	std	Y+19, r24	; 0x13
    210a:	3f c0       	rjmp	.+126    	; 0x218a <LCD_displayCharacter+0x71c>
	else if (__tmp > 65535)
    210c:	6d 89       	ldd	r22, Y+21	; 0x15
    210e:	7e 89       	ldd	r23, Y+22	; 0x16
    2110:	8f 89       	ldd	r24, Y+23	; 0x17
    2112:	98 8d       	ldd	r25, Y+24	; 0x18
    2114:	20 e0       	ldi	r18, 0x00	; 0
    2116:	3f ef       	ldi	r19, 0xFF	; 255
    2118:	4f e7       	ldi	r20, 0x7F	; 127
    211a:	57 e4       	ldi	r21, 0x47	; 71
    211c:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    2120:	18 16       	cp	r1, r24
    2122:	4c f5       	brge	.+82     	; 0x2176 <LCD_displayCharacter+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2124:	69 8d       	ldd	r22, Y+25	; 0x19
    2126:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2128:	8b 8d       	ldd	r24, Y+27	; 0x1b
    212a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    212c:	20 e0       	ldi	r18, 0x00	; 0
    212e:	30 e0       	ldi	r19, 0x00	; 0
    2130:	40 e2       	ldi	r20, 0x20	; 32
    2132:	51 e4       	ldi	r21, 0x41	; 65
    2134:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    2138:	dc 01       	movw	r26, r24
    213a:	cb 01       	movw	r24, r22
    213c:	bc 01       	movw	r22, r24
    213e:	cd 01       	movw	r24, r26
    2140:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    2144:	dc 01       	movw	r26, r24
    2146:	cb 01       	movw	r24, r22
    2148:	9c 8b       	std	Y+20, r25	; 0x14
    214a:	8b 8b       	std	Y+19, r24	; 0x13
    214c:	0f c0       	rjmp	.+30     	; 0x216c <LCD_displayCharacter+0x6fe>
    214e:	88 ec       	ldi	r24, 0xC8	; 200
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	9a 8b       	std	Y+18, r25	; 0x12
    2154:	89 8b       	std	Y+17, r24	; 0x11
    2156:	89 89       	ldd	r24, Y+17	; 0x11
    2158:	9a 89       	ldd	r25, Y+18	; 0x12
    215a:	01 97       	sbiw	r24, 0x01	; 1
    215c:	f1 f7       	brne	.-4      	; 0x215a <LCD_displayCharacter+0x6ec>
    215e:	9a 8b       	std	Y+18, r25	; 0x12
    2160:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2162:	8b 89       	ldd	r24, Y+19	; 0x13
    2164:	9c 89       	ldd	r25, Y+20	; 0x14
    2166:	01 97       	sbiw	r24, 0x01	; 1
    2168:	9c 8b       	std	Y+20, r25	; 0x14
    216a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    216c:	8b 89       	ldd	r24, Y+19	; 0x13
    216e:	9c 89       	ldd	r25, Y+20	; 0x14
    2170:	00 97       	sbiw	r24, 0x00	; 0
    2172:	69 f7       	brne	.-38     	; 0x214e <LCD_displayCharacter+0x6e0>
    2174:	14 c0       	rjmp	.+40     	; 0x219e <LCD_displayCharacter+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2176:	6d 89       	ldd	r22, Y+21	; 0x15
    2178:	7e 89       	ldd	r23, Y+22	; 0x16
    217a:	8f 89       	ldd	r24, Y+23	; 0x17
    217c:	98 8d       	ldd	r25, Y+24	; 0x18
    217e:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    2182:	dc 01       	movw	r26, r24
    2184:	cb 01       	movw	r24, r22
    2186:	9c 8b       	std	Y+20, r25	; 0x14
    2188:	8b 8b       	std	Y+19, r24	; 0x13
    218a:	8b 89       	ldd	r24, Y+19	; 0x13
    218c:	9c 89       	ldd	r25, Y+20	; 0x14
    218e:	98 8b       	std	Y+16, r25	; 0x10
    2190:	8f 87       	std	Y+15, r24	; 0x0f
    2192:	8f 85       	ldd	r24, Y+15	; 0x0f
    2194:	98 89       	ldd	r25, Y+16	; 0x10
    2196:	01 97       	sbiw	r24, 0x01	; 1
    2198:	f1 f7       	brne	.-4      	; 0x2196 <LCD_displayCharacter+0x728>
    219a:	98 8b       	std	Y+16, r25	; 0x10
    219c:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(1); /* delay for processing Tdsw = 100ns */
					CLEAR_BIT(LCD_PORT,EN); /* disable LCD E=0 */
    219e:	ab e3       	ldi	r26, 0x3B	; 59
    21a0:	b0 e0       	ldi	r27, 0x00	; 0
    21a2:	eb e3       	ldi	r30, 0x3B	; 59
    21a4:	f0 e0       	ldi	r31, 0x00	; 0
    21a6:	80 81       	ld	r24, Z
    21a8:	8b 7f       	andi	r24, 0xFB	; 251
    21aa:	8c 93       	st	X, r24
    21ac:	80 e0       	ldi	r24, 0x00	; 0
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	a0 e8       	ldi	r26, 0x80	; 128
    21b2:	bf e3       	ldi	r27, 0x3F	; 63
    21b4:	8b 87       	std	Y+11, r24	; 0x0b
    21b6:	9c 87       	std	Y+12, r25	; 0x0c
    21b8:	ad 87       	std	Y+13, r26	; 0x0d
    21ba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    21be:	7c 85       	ldd	r23, Y+12	; 0x0c
    21c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    21c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    21c4:	20 e0       	ldi	r18, 0x00	; 0
    21c6:	30 e0       	ldi	r19, 0x00	; 0
    21c8:	4a ef       	ldi	r20, 0xFA	; 250
    21ca:	54 e4       	ldi	r21, 0x44	; 68
    21cc:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    21d0:	dc 01       	movw	r26, r24
    21d2:	cb 01       	movw	r24, r22
    21d4:	8f 83       	std	Y+7, r24	; 0x07
    21d6:	98 87       	std	Y+8, r25	; 0x08
    21d8:	a9 87       	std	Y+9, r26	; 0x09
    21da:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21dc:	6f 81       	ldd	r22, Y+7	; 0x07
    21de:	78 85       	ldd	r23, Y+8	; 0x08
    21e0:	89 85       	ldd	r24, Y+9	; 0x09
    21e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    21e4:	20 e0       	ldi	r18, 0x00	; 0
    21e6:	30 e0       	ldi	r19, 0x00	; 0
    21e8:	40 e8       	ldi	r20, 0x80	; 128
    21ea:	5f e3       	ldi	r21, 0x3F	; 63
    21ec:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    21f0:	88 23       	and	r24, r24
    21f2:	2c f4       	brge	.+10     	; 0x21fe <LCD_displayCharacter+0x790>
		__ticks = 1;
    21f4:	81 e0       	ldi	r24, 0x01	; 1
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	9e 83       	std	Y+6, r25	; 0x06
    21fa:	8d 83       	std	Y+5, r24	; 0x05
    21fc:	3f c0       	rjmp	.+126    	; 0x227c <LCD_displayCharacter+0x80e>
	else if (__tmp > 65535)
    21fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2200:	78 85       	ldd	r23, Y+8	; 0x08
    2202:	89 85       	ldd	r24, Y+9	; 0x09
    2204:	9a 85       	ldd	r25, Y+10	; 0x0a
    2206:	20 e0       	ldi	r18, 0x00	; 0
    2208:	3f ef       	ldi	r19, 0xFF	; 255
    220a:	4f e7       	ldi	r20, 0x7F	; 127
    220c:	57 e4       	ldi	r21, 0x47	; 71
    220e:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    2212:	18 16       	cp	r1, r24
    2214:	4c f5       	brge	.+82     	; 0x2268 <LCD_displayCharacter+0x7fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2216:	6b 85       	ldd	r22, Y+11	; 0x0b
    2218:	7c 85       	ldd	r23, Y+12	; 0x0c
    221a:	8d 85       	ldd	r24, Y+13	; 0x0d
    221c:	9e 85       	ldd	r25, Y+14	; 0x0e
    221e:	20 e0       	ldi	r18, 0x00	; 0
    2220:	30 e0       	ldi	r19, 0x00	; 0
    2222:	40 e2       	ldi	r20, 0x20	; 32
    2224:	51 e4       	ldi	r21, 0x41	; 65
    2226:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    222a:	dc 01       	movw	r26, r24
    222c:	cb 01       	movw	r24, r22
    222e:	bc 01       	movw	r22, r24
    2230:	cd 01       	movw	r24, r26
    2232:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    2236:	dc 01       	movw	r26, r24
    2238:	cb 01       	movw	r24, r22
    223a:	9e 83       	std	Y+6, r25	; 0x06
    223c:	8d 83       	std	Y+5, r24	; 0x05
    223e:	0f c0       	rjmp	.+30     	; 0x225e <LCD_displayCharacter+0x7f0>
    2240:	88 ec       	ldi	r24, 0xC8	; 200
    2242:	90 e0       	ldi	r25, 0x00	; 0
    2244:	9c 83       	std	Y+4, r25	; 0x04
    2246:	8b 83       	std	Y+3, r24	; 0x03
    2248:	8b 81       	ldd	r24, Y+3	; 0x03
    224a:	9c 81       	ldd	r25, Y+4	; 0x04
    224c:	01 97       	sbiw	r24, 0x01	; 1
    224e:	f1 f7       	brne	.-4      	; 0x224c <LCD_displayCharacter+0x7de>
    2250:	9c 83       	std	Y+4, r25	; 0x04
    2252:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2254:	8d 81       	ldd	r24, Y+5	; 0x05
    2256:	9e 81       	ldd	r25, Y+6	; 0x06
    2258:	01 97       	sbiw	r24, 0x01	; 1
    225a:	9e 83       	std	Y+6, r25	; 0x06
    225c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    225e:	8d 81       	ldd	r24, Y+5	; 0x05
    2260:	9e 81       	ldd	r25, Y+6	; 0x06
    2262:	00 97       	sbiw	r24, 0x00	; 0
    2264:	69 f7       	brne	.-38     	; 0x2240 <LCD_displayCharacter+0x7d2>
    2266:	14 c0       	rjmp	.+40     	; 0x2290 <LCD_displayCharacter+0x822>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2268:	6f 81       	ldd	r22, Y+7	; 0x07
    226a:	78 85       	ldd	r23, Y+8	; 0x08
    226c:	89 85       	ldd	r24, Y+9	; 0x09
    226e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2270:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    2274:	dc 01       	movw	r26, r24
    2276:	cb 01       	movw	r24, r22
    2278:	9e 83       	std	Y+6, r25	; 0x06
    227a:	8d 83       	std	Y+5, r24	; 0x05
    227c:	8d 81       	ldd	r24, Y+5	; 0x05
    227e:	9e 81       	ldd	r25, Y+6	; 0x06
    2280:	9a 83       	std	Y+2, r25	; 0x02
    2282:	89 83       	std	Y+1, r24	; 0x01
    2284:	89 81       	ldd	r24, Y+1	; 0x01
    2286:	9a 81       	ldd	r25, Y+2	; 0x02
    2288:	01 97       	sbiw	r24, 0x01	; 1
    228a:	f1 f7       	brne	.-4      	; 0x2288 <LCD_displayCharacter+0x81a>
    228c:	9a 83       	std	Y+2, r25	; 0x02
    228e:	89 83       	std	Y+1, r24	; 0x01
		LCD_DATA_PORT = data; /* out the required command to the data bus D0 --> D7 */
		_delay_ms(1); /* delay for processing Tdsw = 100ns */
		CLEAR_BIT(LCD_PORT,EN); /* disable LCD E=0 */
		_delay_ms(1); /* delay for processing Th = 13ns */
	#endif
}
    2290:	cd 59       	subi	r28, 0x9D	; 157
    2292:	df 4f       	sbci	r29, 0xFF	; 255
    2294:	0f b6       	in	r0, 0x3f	; 63
    2296:	f8 94       	cli
    2298:	de bf       	out	0x3e, r29	; 62
    229a:	0f be       	out	0x3f, r0	; 63
    229c:	cd bf       	out	0x3d, r28	; 61
    229e:	cf 91       	pop	r28
    22a0:	df 91       	pop	r29
    22a2:	1f 91       	pop	r17
    22a4:	0f 91       	pop	r16
    22a6:	08 95       	ret

000022a8 <LCD_gotoRowColumn>:
void LCD_gotoRowColumn(unsigned char row,unsigned char col){
    22a8:	df 93       	push	r29
    22aa:	cf 93       	push	r28
    22ac:	cd b7       	in	r28, 0x3d	; 61
    22ae:	de b7       	in	r29, 0x3e	; 62
    22b0:	6e 97       	sbiw	r28, 0x1e	; 30
    22b2:	0f b6       	in	r0, 0x3f	; 63
    22b4:	f8 94       	cli
    22b6:	de bf       	out	0x3e, r29	; 62
    22b8:	0f be       	out	0x3f, r0	; 63
    22ba:	cd bf       	out	0x3d, r28	; 61
    22bc:	8d 8f       	std	Y+29, r24	; 0x1d
    22be:	6e 8f       	std	Y+30, r22	; 0x1e
	unsigned char fristcharadr[]={0x80,0xC0,0x90,0xD0};  // location of the rows in lcd (2lines and 4lines)
    22c0:	80 e8       	ldi	r24, 0x80	; 128
    22c2:	89 8f       	std	Y+25, r24	; 0x19
    22c4:	80 ec       	ldi	r24, 0xC0	; 192
    22c6:	8a 8f       	std	Y+26, r24	; 0x1a
    22c8:	80 e9       	ldi	r24, 0x90	; 144
    22ca:	8b 8f       	std	Y+27, r24	; 0x1b
    22cc:	80 ed       	ldi	r24, 0xD0	; 208
    22ce:	8c 8f       	std	Y+28, r24	; 0x1c
	LCD_sendCommand(fristcharadr[row-1]+(col-1));
    22d0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22d2:	88 2f       	mov	r24, r24
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	9c 01       	movw	r18, r24
    22d8:	21 50       	subi	r18, 0x01	; 1
    22da:	30 40       	sbci	r19, 0x00	; 0
    22dc:	ce 01       	movw	r24, r28
    22de:	49 96       	adiw	r24, 0x19	; 25
    22e0:	fc 01       	movw	r30, r24
    22e2:	e2 0f       	add	r30, r18
    22e4:	f3 1f       	adc	r31, r19
    22e6:	90 81       	ld	r25, Z
    22e8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    22ea:	89 0f       	add	r24, r25
    22ec:	81 50       	subi	r24, 0x01	; 1
    22ee:	0e 94 1a 09 	call	0x1234	; 0x1234 <LCD_sendCommand>
    22f2:	80 e0       	ldi	r24, 0x00	; 0
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	a8 ec       	ldi	r26, 0xC8	; 200
    22f8:	b2 e4       	ldi	r27, 0x42	; 66
    22fa:	8d 8b       	std	Y+21, r24	; 0x15
    22fc:	9e 8b       	std	Y+22, r25	; 0x16
    22fe:	af 8b       	std	Y+23, r26	; 0x17
    2300:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2302:	6d 89       	ldd	r22, Y+21	; 0x15
    2304:	7e 89       	ldd	r23, Y+22	; 0x16
    2306:	8f 89       	ldd	r24, Y+23	; 0x17
    2308:	98 8d       	ldd	r25, Y+24	; 0x18
    230a:	2b ea       	ldi	r18, 0xAB	; 171
    230c:	3a ea       	ldi	r19, 0xAA	; 170
    230e:	4a e2       	ldi	r20, 0x2A	; 42
    2310:	50 e4       	ldi	r21, 0x40	; 64
    2312:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    2316:	dc 01       	movw	r26, r24
    2318:	cb 01       	movw	r24, r22
    231a:	89 8b       	std	Y+17, r24	; 0x11
    231c:	9a 8b       	std	Y+18, r25	; 0x12
    231e:	ab 8b       	std	Y+19, r26	; 0x13
    2320:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2322:	69 89       	ldd	r22, Y+17	; 0x11
    2324:	7a 89       	ldd	r23, Y+18	; 0x12
    2326:	8b 89       	ldd	r24, Y+19	; 0x13
    2328:	9c 89       	ldd	r25, Y+20	; 0x14
    232a:	20 e0       	ldi	r18, 0x00	; 0
    232c:	30 e0       	ldi	r19, 0x00	; 0
    232e:	40 e8       	ldi	r20, 0x80	; 128
    2330:	5f e3       	ldi	r21, 0x3F	; 63
    2332:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    2336:	88 23       	and	r24, r24
    2338:	1c f4       	brge	.+6      	; 0x2340 <LCD_gotoRowColumn+0x98>
		__ticks = 1;
    233a:	81 e0       	ldi	r24, 0x01	; 1
    233c:	88 8b       	std	Y+16, r24	; 0x10
    233e:	91 c0       	rjmp	.+290    	; 0x2462 <LCD_gotoRowColumn+0x1ba>
	else if (__tmp > 255)
    2340:	69 89       	ldd	r22, Y+17	; 0x11
    2342:	7a 89       	ldd	r23, Y+18	; 0x12
    2344:	8b 89       	ldd	r24, Y+19	; 0x13
    2346:	9c 89       	ldd	r25, Y+20	; 0x14
    2348:	20 e0       	ldi	r18, 0x00	; 0
    234a:	30 e0       	ldi	r19, 0x00	; 0
    234c:	4f e7       	ldi	r20, 0x7F	; 127
    234e:	53 e4       	ldi	r21, 0x43	; 67
    2350:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    2354:	18 16       	cp	r1, r24
    2356:	0c f0       	brlt	.+2      	; 0x235a <LCD_gotoRowColumn+0xb2>
    2358:	7b c0       	rjmp	.+246    	; 0x2450 <LCD_gotoRowColumn+0x1a8>
	{
		_delay_ms(__us / 1000.0);
    235a:	6d 89       	ldd	r22, Y+21	; 0x15
    235c:	7e 89       	ldd	r23, Y+22	; 0x16
    235e:	8f 89       	ldd	r24, Y+23	; 0x17
    2360:	98 8d       	ldd	r25, Y+24	; 0x18
    2362:	20 e0       	ldi	r18, 0x00	; 0
    2364:	30 e0       	ldi	r19, 0x00	; 0
    2366:	4a e7       	ldi	r20, 0x7A	; 122
    2368:	54 e4       	ldi	r21, 0x44	; 68
    236a:	0e 94 8e 03 	call	0x71c	; 0x71c <__divsf3>
    236e:	dc 01       	movw	r26, r24
    2370:	cb 01       	movw	r24, r22
    2372:	8c 87       	std	Y+12, r24	; 0x0c
    2374:	9d 87       	std	Y+13, r25	; 0x0d
    2376:	ae 87       	std	Y+14, r26	; 0x0e
    2378:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    237a:	6c 85       	ldd	r22, Y+12	; 0x0c
    237c:	7d 85       	ldd	r23, Y+13	; 0x0d
    237e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2380:	9f 85       	ldd	r25, Y+15	; 0x0f
    2382:	20 e0       	ldi	r18, 0x00	; 0
    2384:	30 e0       	ldi	r19, 0x00	; 0
    2386:	4a ef       	ldi	r20, 0xFA	; 250
    2388:	54 e4       	ldi	r21, 0x44	; 68
    238a:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    238e:	dc 01       	movw	r26, r24
    2390:	cb 01       	movw	r24, r22
    2392:	88 87       	std	Y+8, r24	; 0x08
    2394:	99 87       	std	Y+9, r25	; 0x09
    2396:	aa 87       	std	Y+10, r26	; 0x0a
    2398:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    239a:	68 85       	ldd	r22, Y+8	; 0x08
    239c:	79 85       	ldd	r23, Y+9	; 0x09
    239e:	8a 85       	ldd	r24, Y+10	; 0x0a
    23a0:	9b 85       	ldd	r25, Y+11	; 0x0b
    23a2:	20 e0       	ldi	r18, 0x00	; 0
    23a4:	30 e0       	ldi	r19, 0x00	; 0
    23a6:	40 e8       	ldi	r20, 0x80	; 128
    23a8:	5f e3       	ldi	r21, 0x3F	; 63
    23aa:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    23ae:	88 23       	and	r24, r24
    23b0:	2c f4       	brge	.+10     	; 0x23bc <LCD_gotoRowColumn+0x114>
		__ticks = 1;
    23b2:	81 e0       	ldi	r24, 0x01	; 1
    23b4:	90 e0       	ldi	r25, 0x00	; 0
    23b6:	9f 83       	std	Y+7, r25	; 0x07
    23b8:	8e 83       	std	Y+6, r24	; 0x06
    23ba:	3f c0       	rjmp	.+126    	; 0x243a <LCD_gotoRowColumn+0x192>
	else if (__tmp > 65535)
    23bc:	68 85       	ldd	r22, Y+8	; 0x08
    23be:	79 85       	ldd	r23, Y+9	; 0x09
    23c0:	8a 85       	ldd	r24, Y+10	; 0x0a
    23c2:	9b 85       	ldd	r25, Y+11	; 0x0b
    23c4:	20 e0       	ldi	r18, 0x00	; 0
    23c6:	3f ef       	ldi	r19, 0xFF	; 255
    23c8:	4f e7       	ldi	r20, 0x7F	; 127
    23ca:	57 e4       	ldi	r21, 0x47	; 71
    23cc:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    23d0:	18 16       	cp	r1, r24
    23d2:	4c f5       	brge	.+82     	; 0x2426 <LCD_gotoRowColumn+0x17e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23d4:	6c 85       	ldd	r22, Y+12	; 0x0c
    23d6:	7d 85       	ldd	r23, Y+13	; 0x0d
    23d8:	8e 85       	ldd	r24, Y+14	; 0x0e
    23da:	9f 85       	ldd	r25, Y+15	; 0x0f
    23dc:	20 e0       	ldi	r18, 0x00	; 0
    23de:	30 e0       	ldi	r19, 0x00	; 0
    23e0:	40 e2       	ldi	r20, 0x20	; 32
    23e2:	51 e4       	ldi	r21, 0x41	; 65
    23e4:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    23e8:	dc 01       	movw	r26, r24
    23ea:	cb 01       	movw	r24, r22
    23ec:	bc 01       	movw	r22, r24
    23ee:	cd 01       	movw	r24, r26
    23f0:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    23f4:	dc 01       	movw	r26, r24
    23f6:	cb 01       	movw	r24, r22
    23f8:	9f 83       	std	Y+7, r25	; 0x07
    23fa:	8e 83       	std	Y+6, r24	; 0x06
    23fc:	0f c0       	rjmp	.+30     	; 0x241c <LCD_gotoRowColumn+0x174>
    23fe:	88 ec       	ldi	r24, 0xC8	; 200
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	9d 83       	std	Y+5, r25	; 0x05
    2404:	8c 83       	std	Y+4, r24	; 0x04
    2406:	8c 81       	ldd	r24, Y+4	; 0x04
    2408:	9d 81       	ldd	r25, Y+5	; 0x05
    240a:	01 97       	sbiw	r24, 0x01	; 1
    240c:	f1 f7       	brne	.-4      	; 0x240a <LCD_gotoRowColumn+0x162>
    240e:	9d 83       	std	Y+5, r25	; 0x05
    2410:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2412:	8e 81       	ldd	r24, Y+6	; 0x06
    2414:	9f 81       	ldd	r25, Y+7	; 0x07
    2416:	01 97       	sbiw	r24, 0x01	; 1
    2418:	9f 83       	std	Y+7, r25	; 0x07
    241a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    241c:	8e 81       	ldd	r24, Y+6	; 0x06
    241e:	9f 81       	ldd	r25, Y+7	; 0x07
    2420:	00 97       	sbiw	r24, 0x00	; 0
    2422:	69 f7       	brne	.-38     	; 0x23fe <LCD_gotoRowColumn+0x156>
    2424:	24 c0       	rjmp	.+72     	; 0x246e <LCD_gotoRowColumn+0x1c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2426:	68 85       	ldd	r22, Y+8	; 0x08
    2428:	79 85       	ldd	r23, Y+9	; 0x09
    242a:	8a 85       	ldd	r24, Y+10	; 0x0a
    242c:	9b 85       	ldd	r25, Y+11	; 0x0b
    242e:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    2432:	dc 01       	movw	r26, r24
    2434:	cb 01       	movw	r24, r22
    2436:	9f 83       	std	Y+7, r25	; 0x07
    2438:	8e 83       	std	Y+6, r24	; 0x06
    243a:	8e 81       	ldd	r24, Y+6	; 0x06
    243c:	9f 81       	ldd	r25, Y+7	; 0x07
    243e:	9b 83       	std	Y+3, r25	; 0x03
    2440:	8a 83       	std	Y+2, r24	; 0x02
    2442:	8a 81       	ldd	r24, Y+2	; 0x02
    2444:	9b 81       	ldd	r25, Y+3	; 0x03
    2446:	01 97       	sbiw	r24, 0x01	; 1
    2448:	f1 f7       	brne	.-4      	; 0x2446 <LCD_gotoRowColumn+0x19e>
    244a:	9b 83       	std	Y+3, r25	; 0x03
    244c:	8a 83       	std	Y+2, r24	; 0x02
    244e:	0f c0       	rjmp	.+30     	; 0x246e <LCD_gotoRowColumn+0x1c6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2450:	69 89       	ldd	r22, Y+17	; 0x11
    2452:	7a 89       	ldd	r23, Y+18	; 0x12
    2454:	8b 89       	ldd	r24, Y+19	; 0x13
    2456:	9c 89       	ldd	r25, Y+20	; 0x14
    2458:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    245c:	dc 01       	movw	r26, r24
    245e:	cb 01       	movw	r24, r22
    2460:	88 8b       	std	Y+16, r24	; 0x10
    2462:	88 89       	ldd	r24, Y+16	; 0x10
    2464:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2466:	89 81       	ldd	r24, Y+1	; 0x01
    2468:	8a 95       	dec	r24
    246a:	f1 f7       	brne	.-4      	; 0x2468 <LCD_gotoRowColumn+0x1c0>
    246c:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);
	}
    246e:	6e 96       	adiw	r28, 0x1e	; 30
    2470:	0f b6       	in	r0, 0x3f	; 63
    2472:	f8 94       	cli
    2474:	de bf       	out	0x3e, r29	; 62
    2476:	0f be       	out	0x3f, r0	; 63
    2478:	cd bf       	out	0x3d, r28	; 61
    247a:	cf 91       	pop	r28
    247c:	df 91       	pop	r29
    247e:	08 95       	ret

00002480 <LCD_print_str>:
void LCD_print_str(char *text){
    2480:	df 93       	push	r29
    2482:	cf 93       	push	r28
    2484:	00 d0       	rcall	.+0      	; 0x2486 <LCD_print_str+0x6>
    2486:	cd b7       	in	r28, 0x3d	; 61
    2488:	de b7       	in	r29, 0x3e	; 62
    248a:	9a 83       	std	Y+2, r25	; 0x02
    248c:	89 83       	std	Y+1, r24	; 0x01
    248e:	0a c0       	rjmp	.+20     	; 0x24a4 <LCD_print_str+0x24>
	while((*text) !='\0'){
		LCD_displayCharacter(*text);
    2490:	e9 81       	ldd	r30, Y+1	; 0x01
    2492:	fa 81       	ldd	r31, Y+2	; 0x02
    2494:	80 81       	ld	r24, Z
    2496:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <LCD_displayCharacter>
		text++;
    249a:	89 81       	ldd	r24, Y+1	; 0x01
    249c:	9a 81       	ldd	r25, Y+2	; 0x02
    249e:	01 96       	adiw	r24, 0x01	; 1
    24a0:	9a 83       	std	Y+2, r25	; 0x02
    24a2:	89 83       	std	Y+1, r24	; 0x01
	unsigned char fristcharadr[]={0x80,0xC0,0x90,0xD0};  // location of the rows in lcd (2lines and 4lines)
	LCD_sendCommand(fristcharadr[row-1]+(col-1));
	_delay_us(100);
	}
void LCD_print_str(char *text){
	while((*text) !='\0'){
    24a4:	e9 81       	ldd	r30, Y+1	; 0x01
    24a6:	fa 81       	ldd	r31, Y+2	; 0x02
    24a8:	80 81       	ld	r24, Z
    24aa:	88 23       	and	r24, r24
    24ac:	89 f7       	brne	.-30     	; 0x2490 <LCD_print_str+0x10>
		LCD_displayCharacter(*text);
		text++;
	}

}
    24ae:	0f 90       	pop	r0
    24b0:	0f 90       	pop	r0
    24b2:	cf 91       	pop	r28
    24b4:	df 91       	pop	r29
    24b6:	08 95       	ret

000024b8 <LCD_intgerToString>:
void LCD_intgerToString(int data)
{
    24b8:	df 93       	push	r29
    24ba:	cf 93       	push	r28
    24bc:	cd b7       	in	r28, 0x3d	; 61
    24be:	de b7       	in	r29, 0x3e	; 62
    24c0:	62 97       	sbiw	r28, 0x12	; 18
    24c2:	0f b6       	in	r0, 0x3f	; 63
    24c4:	f8 94       	cli
    24c6:	de bf       	out	0x3e, r29	; 62
    24c8:	0f be       	out	0x3f, r0	; 63
    24ca:	cd bf       	out	0x3d, r28	; 61
    24cc:	9a 8b       	std	Y+18, r25	; 0x12
    24ce:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    24d0:	89 89       	ldd	r24, Y+17	; 0x11
    24d2:	9a 89       	ldd	r25, Y+18	; 0x12
    24d4:	9e 01       	movw	r18, r28
    24d6:	2f 5f       	subi	r18, 0xFF	; 255
    24d8:	3f 4f       	sbci	r19, 0xFF	; 255
    24da:	b9 01       	movw	r22, r18
    24dc:	4a e0       	ldi	r20, 0x0A	; 10
    24de:	50 e0       	ldi	r21, 0x00	; 0
    24e0:	0e 94 3d 1b 	call	0x367a	; 0x367a <itoa>
   LCD_print_str(buff);
    24e4:	ce 01       	movw	r24, r28
    24e6:	01 96       	adiw	r24, 0x01	; 1
    24e8:	0e 94 40 12 	call	0x2480	; 0x2480 <LCD_print_str>
}
    24ec:	62 96       	adiw	r28, 0x12	; 18
    24ee:	0f b6       	in	r0, 0x3f	; 63
    24f0:	f8 94       	cli
    24f2:	de bf       	out	0x3e, r29	; 62
    24f4:	0f be       	out	0x3f, r0	; 63
    24f6:	cd bf       	out	0x3d, r28	; 61
    24f8:	cf 91       	pop	r28
    24fa:	df 91       	pop	r29
    24fc:	08 95       	ret

000024fe <LCD_FLOATToString>:
void LCD_FLOATToString(double data,uint8 width,uint8 prec){
    24fe:	0f 93       	push	r16
    2500:	1f 93       	push	r17
    2502:	df 93       	push	r29
    2504:	cf 93       	push	r28
    2506:	cd b7       	in	r28, 0x3d	; 61
    2508:	de b7       	in	r29, 0x3e	; 62
    250a:	6a 97       	sbiw	r28, 0x1a	; 26
    250c:	0f b6       	in	r0, 0x3f	; 63
    250e:	f8 94       	cli
    2510:	de bf       	out	0x3e, r29	; 62
    2512:	0f be       	out	0x3f, r0	; 63
    2514:	cd bf       	out	0x3d, r28	; 61
    2516:	6d 8b       	std	Y+21, r22	; 0x15
    2518:	7e 8b       	std	Y+22, r23	; 0x16
    251a:	8f 8b       	std	Y+23, r24	; 0x17
    251c:	98 8f       	std	Y+24, r25	; 0x18
    251e:	49 8f       	std	Y+25, r20	; 0x19
    2520:	2a 8f       	std	Y+26, r18	; 0x1a
	char num[20];
	dtostrf(data,width,prec,num);
    2522:	89 8d       	ldd	r24, Y+25	; 0x19
    2524:	48 2f       	mov	r20, r24
    2526:	50 e0       	ldi	r21, 0x00	; 0
    2528:	8a 8d       	ldd	r24, Y+26	; 0x1a
    252a:	28 2f       	mov	r18, r24
    252c:	30 e0       	ldi	r19, 0x00	; 0
    252e:	8d 89       	ldd	r24, Y+21	; 0x15
    2530:	9e 89       	ldd	r25, Y+22	; 0x16
    2532:	af 89       	ldd	r26, Y+23	; 0x17
    2534:	b8 8d       	ldd	r27, Y+24	; 0x18
    2536:	bc 01       	movw	r22, r24
    2538:	cd 01       	movw	r24, r26
    253a:	fe 01       	movw	r30, r28
    253c:	31 96       	adiw	r30, 0x01	; 1
    253e:	8f 01       	movw	r16, r30
    2540:	0e 94 1c 1b 	call	0x3638	; 0x3638 <dtostrf>
	LCD_print_str(num);
    2544:	ce 01       	movw	r24, r28
    2546:	01 96       	adiw	r24, 0x01	; 1
    2548:	0e 94 40 12 	call	0x2480	; 0x2480 <LCD_print_str>
}
    254c:	6a 96       	adiw	r28, 0x1a	; 26
    254e:	0f b6       	in	r0, 0x3f	; 63
    2550:	f8 94       	cli
    2552:	de bf       	out	0x3e, r29	; 62
    2554:	0f be       	out	0x3f, r0	; 63
    2556:	cd bf       	out	0x3d, r28	; 61
    2558:	cf 91       	pop	r28
    255a:	df 91       	pop	r29
    255c:	1f 91       	pop	r17
    255e:	0f 91       	pop	r16
    2560:	08 95       	ret

00002562 <LCD_clearScreen>:
void LCD_clearScreen(void){
    2562:	df 93       	push	r29
    2564:	cf 93       	push	r28
    2566:	cd b7       	in	r28, 0x3d	; 61
    2568:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display
    256a:	81 e0       	ldi	r24, 0x01	; 1
    256c:	0e 94 1a 09 	call	0x1234	; 0x1234 <LCD_sendCommand>
}
    2570:	cf 91       	pop	r28
    2572:	df 91       	pop	r29
    2574:	08 95       	ret

00002576 <ds18b20_reset>:

/*******************************************************************************
 *                      Functions Prototypes(Private)                          *
 *******************************************************************************/

uint8_t ds18b20_reset() {
    2576:	0f 93       	push	r16
    2578:	1f 93       	push	r17
    257a:	df 93       	push	r29
    257c:	cf 93       	push	r28
    257e:	cd b7       	in	r28, 0x3d	; 61
    2580:	de b7       	in	r29, 0x3e	; 62
    2582:	c9 54       	subi	r28, 0x49	; 73
    2584:	d0 40       	sbci	r29, 0x00	; 0
    2586:	0f b6       	in	r0, 0x3f	; 63
    2588:	f8 94       	cli
    258a:	de bf       	out	0x3e, r29	; 62
    258c:	0f be       	out	0x3f, r0	; 63
    258e:	cd bf       	out	0x3d, r28	; 61
	uint8_t i;

	//low for 480us
	DS18B20_PORT &= ~ (1<<DS18B20_DQ); //low
    2590:	a5 e3       	ldi	r26, 0x35	; 53
    2592:	b0 e0       	ldi	r27, 0x00	; 0
    2594:	e5 e3       	ldi	r30, 0x35	; 53
    2596:	f0 e0       	ldi	r31, 0x00	; 0
    2598:	80 81       	ld	r24, Z
    259a:	8e 7f       	andi	r24, 0xFE	; 254
    259c:	8c 93       	st	X, r24
	DS18B20_DDR |= (1<<DS18B20_DQ); //output
    259e:	a4 e3       	ldi	r26, 0x34	; 52
    25a0:	b0 e0       	ldi	r27, 0x00	; 0
    25a2:	e4 e3       	ldi	r30, 0x34	; 52
    25a4:	f0 e0       	ldi	r31, 0x00	; 0
    25a6:	80 81       	ld	r24, Z
    25a8:	81 60       	ori	r24, 0x01	; 1
    25aa:	8c 93       	st	X, r24
    25ac:	fe 01       	movw	r30, r28
    25ae:	eb 5b       	subi	r30, 0xBB	; 187
    25b0:	ff 4f       	sbci	r31, 0xFF	; 255
    25b2:	80 e0       	ldi	r24, 0x00	; 0
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	a0 ef       	ldi	r26, 0xF0	; 240
    25b8:	b3 e4       	ldi	r27, 0x43	; 67
    25ba:	80 83       	st	Z, r24
    25bc:	91 83       	std	Z+1, r25	; 0x01
    25be:	a2 83       	std	Z+2, r26	; 0x02
    25c0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    25c2:	8e 01       	movw	r16, r28
    25c4:	0f 5b       	subi	r16, 0xBF	; 191
    25c6:	1f 4f       	sbci	r17, 0xFF	; 255
    25c8:	fe 01       	movw	r30, r28
    25ca:	eb 5b       	subi	r30, 0xBB	; 187
    25cc:	ff 4f       	sbci	r31, 0xFF	; 255
    25ce:	60 81       	ld	r22, Z
    25d0:	71 81       	ldd	r23, Z+1	; 0x01
    25d2:	82 81       	ldd	r24, Z+2	; 0x02
    25d4:	93 81       	ldd	r25, Z+3	; 0x03
    25d6:	2b ea       	ldi	r18, 0xAB	; 171
    25d8:	3a ea       	ldi	r19, 0xAA	; 170
    25da:	4a e2       	ldi	r20, 0x2A	; 42
    25dc:	50 e4       	ldi	r21, 0x40	; 64
    25de:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    25e2:	dc 01       	movw	r26, r24
    25e4:	cb 01       	movw	r24, r22
    25e6:	f8 01       	movw	r30, r16
    25e8:	80 83       	st	Z, r24
    25ea:	91 83       	std	Z+1, r25	; 0x01
    25ec:	a2 83       	std	Z+2, r26	; 0x02
    25ee:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25f0:	fe 01       	movw	r30, r28
    25f2:	ef 5b       	subi	r30, 0xBF	; 191
    25f4:	ff 4f       	sbci	r31, 0xFF	; 255
    25f6:	60 81       	ld	r22, Z
    25f8:	71 81       	ldd	r23, Z+1	; 0x01
    25fa:	82 81       	ldd	r24, Z+2	; 0x02
    25fc:	93 81       	ldd	r25, Z+3	; 0x03
    25fe:	20 e0       	ldi	r18, 0x00	; 0
    2600:	30 e0       	ldi	r19, 0x00	; 0
    2602:	40 e8       	ldi	r20, 0x80	; 128
    2604:	5f e3       	ldi	r21, 0x3F	; 63
    2606:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    260a:	88 23       	and	r24, r24
    260c:	34 f4       	brge	.+12     	; 0x261a <ds18b20_reset+0xa4>
		__ticks = 1;
    260e:	81 e0       	ldi	r24, 0x01	; 1
    2610:	fe 01       	movw	r30, r28
    2612:	e0 5c       	subi	r30, 0xC0	; 192
    2614:	ff 4f       	sbci	r31, 0xFF	; 255
    2616:	80 83       	st	Z, r24
    2618:	9d c0       	rjmp	.+314    	; 0x2754 <ds18b20_reset+0x1de>
	else if (__tmp > 255)
    261a:	fe 01       	movw	r30, r28
    261c:	ef 5b       	subi	r30, 0xBF	; 191
    261e:	ff 4f       	sbci	r31, 0xFF	; 255
    2620:	60 81       	ld	r22, Z
    2622:	71 81       	ldd	r23, Z+1	; 0x01
    2624:	82 81       	ldd	r24, Z+2	; 0x02
    2626:	93 81       	ldd	r25, Z+3	; 0x03
    2628:	20 e0       	ldi	r18, 0x00	; 0
    262a:	30 e0       	ldi	r19, 0x00	; 0
    262c:	4f e7       	ldi	r20, 0x7F	; 127
    262e:	53 e4       	ldi	r21, 0x43	; 67
    2630:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    2634:	18 16       	cp	r1, r24
    2636:	0c f0       	brlt	.+2      	; 0x263a <ds18b20_reset+0xc4>
    2638:	7e c0       	rjmp	.+252    	; 0x2736 <ds18b20_reset+0x1c0>
	{
		_delay_ms(__us / 1000.0);
    263a:	fe 01       	movw	r30, r28
    263c:	eb 5b       	subi	r30, 0xBB	; 187
    263e:	ff 4f       	sbci	r31, 0xFF	; 255
    2640:	60 81       	ld	r22, Z
    2642:	71 81       	ldd	r23, Z+1	; 0x01
    2644:	82 81       	ldd	r24, Z+2	; 0x02
    2646:	93 81       	ldd	r25, Z+3	; 0x03
    2648:	20 e0       	ldi	r18, 0x00	; 0
    264a:	30 e0       	ldi	r19, 0x00	; 0
    264c:	4a e7       	ldi	r20, 0x7A	; 122
    264e:	54 e4       	ldi	r21, 0x44	; 68
    2650:	0e 94 8e 03 	call	0x71c	; 0x71c <__divsf3>
    2654:	dc 01       	movw	r26, r24
    2656:	cb 01       	movw	r24, r22
    2658:	8c af       	std	Y+60, r24	; 0x3c
    265a:	9d af       	std	Y+61, r25	; 0x3d
    265c:	ae af       	std	Y+62, r26	; 0x3e
    265e:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2660:	6c ad       	ldd	r22, Y+60	; 0x3c
    2662:	7d ad       	ldd	r23, Y+61	; 0x3d
    2664:	8e ad       	ldd	r24, Y+62	; 0x3e
    2666:	9f ad       	ldd	r25, Y+63	; 0x3f
    2668:	20 e0       	ldi	r18, 0x00	; 0
    266a:	30 e0       	ldi	r19, 0x00	; 0
    266c:	4a ef       	ldi	r20, 0xFA	; 250
    266e:	54 e4       	ldi	r21, 0x44	; 68
    2670:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    2674:	dc 01       	movw	r26, r24
    2676:	cb 01       	movw	r24, r22
    2678:	88 af       	std	Y+56, r24	; 0x38
    267a:	99 af       	std	Y+57, r25	; 0x39
    267c:	aa af       	std	Y+58, r26	; 0x3a
    267e:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    2680:	68 ad       	ldd	r22, Y+56	; 0x38
    2682:	79 ad       	ldd	r23, Y+57	; 0x39
    2684:	8a ad       	ldd	r24, Y+58	; 0x3a
    2686:	9b ad       	ldd	r25, Y+59	; 0x3b
    2688:	20 e0       	ldi	r18, 0x00	; 0
    268a:	30 e0       	ldi	r19, 0x00	; 0
    268c:	40 e8       	ldi	r20, 0x80	; 128
    268e:	5f e3       	ldi	r21, 0x3F	; 63
    2690:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    2694:	88 23       	and	r24, r24
    2696:	2c f4       	brge	.+10     	; 0x26a2 <ds18b20_reset+0x12c>
		__ticks = 1;
    2698:	81 e0       	ldi	r24, 0x01	; 1
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	9f ab       	std	Y+55, r25	; 0x37
    269e:	8e ab       	std	Y+54, r24	; 0x36
    26a0:	3f c0       	rjmp	.+126    	; 0x2720 <ds18b20_reset+0x1aa>
	else if (__tmp > 65535)
    26a2:	68 ad       	ldd	r22, Y+56	; 0x38
    26a4:	79 ad       	ldd	r23, Y+57	; 0x39
    26a6:	8a ad       	ldd	r24, Y+58	; 0x3a
    26a8:	9b ad       	ldd	r25, Y+59	; 0x3b
    26aa:	20 e0       	ldi	r18, 0x00	; 0
    26ac:	3f ef       	ldi	r19, 0xFF	; 255
    26ae:	4f e7       	ldi	r20, 0x7F	; 127
    26b0:	57 e4       	ldi	r21, 0x47	; 71
    26b2:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    26b6:	18 16       	cp	r1, r24
    26b8:	4c f5       	brge	.+82     	; 0x270c <ds18b20_reset+0x196>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26ba:	6c ad       	ldd	r22, Y+60	; 0x3c
    26bc:	7d ad       	ldd	r23, Y+61	; 0x3d
    26be:	8e ad       	ldd	r24, Y+62	; 0x3e
    26c0:	9f ad       	ldd	r25, Y+63	; 0x3f
    26c2:	20 e0       	ldi	r18, 0x00	; 0
    26c4:	30 e0       	ldi	r19, 0x00	; 0
    26c6:	40 e2       	ldi	r20, 0x20	; 32
    26c8:	51 e4       	ldi	r21, 0x41	; 65
    26ca:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    26ce:	dc 01       	movw	r26, r24
    26d0:	cb 01       	movw	r24, r22
    26d2:	bc 01       	movw	r22, r24
    26d4:	cd 01       	movw	r24, r26
    26d6:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    26da:	dc 01       	movw	r26, r24
    26dc:	cb 01       	movw	r24, r22
    26de:	9f ab       	std	Y+55, r25	; 0x37
    26e0:	8e ab       	std	Y+54, r24	; 0x36
    26e2:	0f c0       	rjmp	.+30     	; 0x2702 <ds18b20_reset+0x18c>
    26e4:	88 ec       	ldi	r24, 0xC8	; 200
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	9d ab       	std	Y+53, r25	; 0x35
    26ea:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    26ec:	8c a9       	ldd	r24, Y+52	; 0x34
    26ee:	9d a9       	ldd	r25, Y+53	; 0x35
    26f0:	01 97       	sbiw	r24, 0x01	; 1
    26f2:	f1 f7       	brne	.-4      	; 0x26f0 <ds18b20_reset+0x17a>
    26f4:	9d ab       	std	Y+53, r25	; 0x35
    26f6:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26f8:	8e a9       	ldd	r24, Y+54	; 0x36
    26fa:	9f a9       	ldd	r25, Y+55	; 0x37
    26fc:	01 97       	sbiw	r24, 0x01	; 1
    26fe:	9f ab       	std	Y+55, r25	; 0x37
    2700:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2702:	8e a9       	ldd	r24, Y+54	; 0x36
    2704:	9f a9       	ldd	r25, Y+55	; 0x37
    2706:	00 97       	sbiw	r24, 0x00	; 0
    2708:	69 f7       	brne	.-38     	; 0x26e4 <ds18b20_reset+0x16e>
    270a:	2d c0       	rjmp	.+90     	; 0x2766 <ds18b20_reset+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    270c:	68 ad       	ldd	r22, Y+56	; 0x38
    270e:	79 ad       	ldd	r23, Y+57	; 0x39
    2710:	8a ad       	ldd	r24, Y+58	; 0x3a
    2712:	9b ad       	ldd	r25, Y+59	; 0x3b
    2714:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    2718:	dc 01       	movw	r26, r24
    271a:	cb 01       	movw	r24, r22
    271c:	9f ab       	std	Y+55, r25	; 0x37
    271e:	8e ab       	std	Y+54, r24	; 0x36
    2720:	8e a9       	ldd	r24, Y+54	; 0x36
    2722:	9f a9       	ldd	r25, Y+55	; 0x37
    2724:	9b ab       	std	Y+51, r25	; 0x33
    2726:	8a ab       	std	Y+50, r24	; 0x32
    2728:	8a a9       	ldd	r24, Y+50	; 0x32
    272a:	9b a9       	ldd	r25, Y+51	; 0x33
    272c:	01 97       	sbiw	r24, 0x01	; 1
    272e:	f1 f7       	brne	.-4      	; 0x272c <ds18b20_reset+0x1b6>
    2730:	9b ab       	std	Y+51, r25	; 0x33
    2732:	8a ab       	std	Y+50, r24	; 0x32
    2734:	18 c0       	rjmp	.+48     	; 0x2766 <ds18b20_reset+0x1f0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2736:	fe 01       	movw	r30, r28
    2738:	ef 5b       	subi	r30, 0xBF	; 191
    273a:	ff 4f       	sbci	r31, 0xFF	; 255
    273c:	60 81       	ld	r22, Z
    273e:	71 81       	ldd	r23, Z+1	; 0x01
    2740:	82 81       	ldd	r24, Z+2	; 0x02
    2742:	93 81       	ldd	r25, Z+3	; 0x03
    2744:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    2748:	dc 01       	movw	r26, r24
    274a:	cb 01       	movw	r24, r22
    274c:	fe 01       	movw	r30, r28
    274e:	e0 5c       	subi	r30, 0xC0	; 192
    2750:	ff 4f       	sbci	r31, 0xFF	; 255
    2752:	80 83       	st	Z, r24
    2754:	fe 01       	movw	r30, r28
    2756:	e0 5c       	subi	r30, 0xC0	; 192
    2758:	ff 4f       	sbci	r31, 0xFF	; 255
    275a:	80 81       	ld	r24, Z
    275c:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    275e:	89 a9       	ldd	r24, Y+49	; 0x31
    2760:	8a 95       	dec	r24
    2762:	f1 f7       	brne	.-4      	; 0x2760 <ds18b20_reset+0x1ea>
    2764:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(480);

	//release line and wait for 60uS
	DS18B20_DDR &= ~(1<<DS18B20_DQ); //input
    2766:	a4 e3       	ldi	r26, 0x34	; 52
    2768:	b0 e0       	ldi	r27, 0x00	; 0
    276a:	e4 e3       	ldi	r30, 0x34	; 52
    276c:	f0 e0       	ldi	r31, 0x00	; 0
    276e:	80 81       	ld	r24, Z
    2770:	8e 7f       	andi	r24, 0xFE	; 254
    2772:	8c 93       	st	X, r24
    2774:	80 e0       	ldi	r24, 0x00	; 0
    2776:	90 e0       	ldi	r25, 0x00	; 0
    2778:	a0 e7       	ldi	r26, 0x70	; 112
    277a:	b2 e4       	ldi	r27, 0x42	; 66
    277c:	8d a7       	std	Y+45, r24	; 0x2d
    277e:	9e a7       	std	Y+46, r25	; 0x2e
    2780:	af a7       	std	Y+47, r26	; 0x2f
    2782:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2784:	6d a5       	ldd	r22, Y+45	; 0x2d
    2786:	7e a5       	ldd	r23, Y+46	; 0x2e
    2788:	8f a5       	ldd	r24, Y+47	; 0x2f
    278a:	98 a9       	ldd	r25, Y+48	; 0x30
    278c:	2b ea       	ldi	r18, 0xAB	; 171
    278e:	3a ea       	ldi	r19, 0xAA	; 170
    2790:	4a e2       	ldi	r20, 0x2A	; 42
    2792:	50 e4       	ldi	r21, 0x40	; 64
    2794:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    2798:	dc 01       	movw	r26, r24
    279a:	cb 01       	movw	r24, r22
    279c:	89 a7       	std	Y+41, r24	; 0x29
    279e:	9a a7       	std	Y+42, r25	; 0x2a
    27a0:	ab a7       	std	Y+43, r26	; 0x2b
    27a2:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    27a4:	69 a5       	ldd	r22, Y+41	; 0x29
    27a6:	7a a5       	ldd	r23, Y+42	; 0x2a
    27a8:	8b a5       	ldd	r24, Y+43	; 0x2b
    27aa:	9c a5       	ldd	r25, Y+44	; 0x2c
    27ac:	20 e0       	ldi	r18, 0x00	; 0
    27ae:	30 e0       	ldi	r19, 0x00	; 0
    27b0:	40 e8       	ldi	r20, 0x80	; 128
    27b2:	5f e3       	ldi	r21, 0x3F	; 63
    27b4:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    27b8:	88 23       	and	r24, r24
    27ba:	1c f4       	brge	.+6      	; 0x27c2 <ds18b20_reset+0x24c>
		__ticks = 1;
    27bc:	81 e0       	ldi	r24, 0x01	; 1
    27be:	88 a7       	std	Y+40, r24	; 0x28
    27c0:	91 c0       	rjmp	.+290    	; 0x28e4 <ds18b20_reset+0x36e>
	else if (__tmp > 255)
    27c2:	69 a5       	ldd	r22, Y+41	; 0x29
    27c4:	7a a5       	ldd	r23, Y+42	; 0x2a
    27c6:	8b a5       	ldd	r24, Y+43	; 0x2b
    27c8:	9c a5       	ldd	r25, Y+44	; 0x2c
    27ca:	20 e0       	ldi	r18, 0x00	; 0
    27cc:	30 e0       	ldi	r19, 0x00	; 0
    27ce:	4f e7       	ldi	r20, 0x7F	; 127
    27d0:	53 e4       	ldi	r21, 0x43	; 67
    27d2:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    27d6:	18 16       	cp	r1, r24
    27d8:	0c f0       	brlt	.+2      	; 0x27dc <ds18b20_reset+0x266>
    27da:	7b c0       	rjmp	.+246    	; 0x28d2 <ds18b20_reset+0x35c>
	{
		_delay_ms(__us / 1000.0);
    27dc:	6d a5       	ldd	r22, Y+45	; 0x2d
    27de:	7e a5       	ldd	r23, Y+46	; 0x2e
    27e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    27e2:	98 a9       	ldd	r25, Y+48	; 0x30
    27e4:	20 e0       	ldi	r18, 0x00	; 0
    27e6:	30 e0       	ldi	r19, 0x00	; 0
    27e8:	4a e7       	ldi	r20, 0x7A	; 122
    27ea:	54 e4       	ldi	r21, 0x44	; 68
    27ec:	0e 94 8e 03 	call	0x71c	; 0x71c <__divsf3>
    27f0:	dc 01       	movw	r26, r24
    27f2:	cb 01       	movw	r24, r22
    27f4:	8c a3       	std	Y+36, r24	; 0x24
    27f6:	9d a3       	std	Y+37, r25	; 0x25
    27f8:	ae a3       	std	Y+38, r26	; 0x26
    27fa:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27fc:	6c a1       	ldd	r22, Y+36	; 0x24
    27fe:	7d a1       	ldd	r23, Y+37	; 0x25
    2800:	8e a1       	ldd	r24, Y+38	; 0x26
    2802:	9f a1       	ldd	r25, Y+39	; 0x27
    2804:	20 e0       	ldi	r18, 0x00	; 0
    2806:	30 e0       	ldi	r19, 0x00	; 0
    2808:	4a ef       	ldi	r20, 0xFA	; 250
    280a:	54 e4       	ldi	r21, 0x44	; 68
    280c:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    2810:	dc 01       	movw	r26, r24
    2812:	cb 01       	movw	r24, r22
    2814:	88 a3       	std	Y+32, r24	; 0x20
    2816:	99 a3       	std	Y+33, r25	; 0x21
    2818:	aa a3       	std	Y+34, r26	; 0x22
    281a:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    281c:	68 a1       	ldd	r22, Y+32	; 0x20
    281e:	79 a1       	ldd	r23, Y+33	; 0x21
    2820:	8a a1       	ldd	r24, Y+34	; 0x22
    2822:	9b a1       	ldd	r25, Y+35	; 0x23
    2824:	20 e0       	ldi	r18, 0x00	; 0
    2826:	30 e0       	ldi	r19, 0x00	; 0
    2828:	40 e8       	ldi	r20, 0x80	; 128
    282a:	5f e3       	ldi	r21, 0x3F	; 63
    282c:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    2830:	88 23       	and	r24, r24
    2832:	2c f4       	brge	.+10     	; 0x283e <ds18b20_reset+0x2c8>
		__ticks = 1;
    2834:	81 e0       	ldi	r24, 0x01	; 1
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	9f 8f       	std	Y+31, r25	; 0x1f
    283a:	8e 8f       	std	Y+30, r24	; 0x1e
    283c:	3f c0       	rjmp	.+126    	; 0x28bc <ds18b20_reset+0x346>
	else if (__tmp > 65535)
    283e:	68 a1       	ldd	r22, Y+32	; 0x20
    2840:	79 a1       	ldd	r23, Y+33	; 0x21
    2842:	8a a1       	ldd	r24, Y+34	; 0x22
    2844:	9b a1       	ldd	r25, Y+35	; 0x23
    2846:	20 e0       	ldi	r18, 0x00	; 0
    2848:	3f ef       	ldi	r19, 0xFF	; 255
    284a:	4f e7       	ldi	r20, 0x7F	; 127
    284c:	57 e4       	ldi	r21, 0x47	; 71
    284e:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    2852:	18 16       	cp	r1, r24
    2854:	4c f5       	brge	.+82     	; 0x28a8 <ds18b20_reset+0x332>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2856:	6c a1       	ldd	r22, Y+36	; 0x24
    2858:	7d a1       	ldd	r23, Y+37	; 0x25
    285a:	8e a1       	ldd	r24, Y+38	; 0x26
    285c:	9f a1       	ldd	r25, Y+39	; 0x27
    285e:	20 e0       	ldi	r18, 0x00	; 0
    2860:	30 e0       	ldi	r19, 0x00	; 0
    2862:	40 e2       	ldi	r20, 0x20	; 32
    2864:	51 e4       	ldi	r21, 0x41	; 65
    2866:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    286a:	dc 01       	movw	r26, r24
    286c:	cb 01       	movw	r24, r22
    286e:	bc 01       	movw	r22, r24
    2870:	cd 01       	movw	r24, r26
    2872:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    2876:	dc 01       	movw	r26, r24
    2878:	cb 01       	movw	r24, r22
    287a:	9f 8f       	std	Y+31, r25	; 0x1f
    287c:	8e 8f       	std	Y+30, r24	; 0x1e
    287e:	0f c0       	rjmp	.+30     	; 0x289e <ds18b20_reset+0x328>
    2880:	88 ec       	ldi	r24, 0xC8	; 200
    2882:	90 e0       	ldi	r25, 0x00	; 0
    2884:	9d 8f       	std	Y+29, r25	; 0x1d
    2886:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2888:	8c 8d       	ldd	r24, Y+28	; 0x1c
    288a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    288c:	01 97       	sbiw	r24, 0x01	; 1
    288e:	f1 f7       	brne	.-4      	; 0x288c <ds18b20_reset+0x316>
    2890:	9d 8f       	std	Y+29, r25	; 0x1d
    2892:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2894:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2896:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2898:	01 97       	sbiw	r24, 0x01	; 1
    289a:	9f 8f       	std	Y+31, r25	; 0x1f
    289c:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    289e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    28a0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    28a2:	00 97       	sbiw	r24, 0x00	; 0
    28a4:	69 f7       	brne	.-38     	; 0x2880 <ds18b20_reset+0x30a>
    28a6:	24 c0       	rjmp	.+72     	; 0x28f0 <ds18b20_reset+0x37a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28a8:	68 a1       	ldd	r22, Y+32	; 0x20
    28aa:	79 a1       	ldd	r23, Y+33	; 0x21
    28ac:	8a a1       	ldd	r24, Y+34	; 0x22
    28ae:	9b a1       	ldd	r25, Y+35	; 0x23
    28b0:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    28b4:	dc 01       	movw	r26, r24
    28b6:	cb 01       	movw	r24, r22
    28b8:	9f 8f       	std	Y+31, r25	; 0x1f
    28ba:	8e 8f       	std	Y+30, r24	; 0x1e
    28bc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    28be:	9f 8d       	ldd	r25, Y+31	; 0x1f
    28c0:	9b 8f       	std	Y+27, r25	; 0x1b
    28c2:	8a 8f       	std	Y+26, r24	; 0x1a
    28c4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    28c6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    28c8:	01 97       	sbiw	r24, 0x01	; 1
    28ca:	f1 f7       	brne	.-4      	; 0x28c8 <ds18b20_reset+0x352>
    28cc:	9b 8f       	std	Y+27, r25	; 0x1b
    28ce:	8a 8f       	std	Y+26, r24	; 0x1a
    28d0:	0f c0       	rjmp	.+30     	; 0x28f0 <ds18b20_reset+0x37a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    28d2:	69 a5       	ldd	r22, Y+41	; 0x29
    28d4:	7a a5       	ldd	r23, Y+42	; 0x2a
    28d6:	8b a5       	ldd	r24, Y+43	; 0x2b
    28d8:	9c a5       	ldd	r25, Y+44	; 0x2c
    28da:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    28de:	dc 01       	movw	r26, r24
    28e0:	cb 01       	movw	r24, r22
    28e2:	88 a7       	std	Y+40, r24	; 0x28
    28e4:	88 a5       	ldd	r24, Y+40	; 0x28
    28e6:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    28e8:	89 8d       	ldd	r24, Y+25	; 0x19
    28ea:	8a 95       	dec	r24
    28ec:	f1 f7       	brne	.-4      	; 0x28ea <ds18b20_reset+0x374>
    28ee:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(60);

	//get value and wait 420us
	i = (DS18B20_PIN & (1<<DS18B20_DQ));
    28f0:	e3 e3       	ldi	r30, 0x33	; 51
    28f2:	f0 e0       	ldi	r31, 0x00	; 0
    28f4:	80 81       	ld	r24, Z
    28f6:	fe 01       	movw	r30, r28
    28f8:	e7 5b       	subi	r30, 0xB7	; 183
    28fa:	ff 4f       	sbci	r31, 0xFF	; 255
    28fc:	81 70       	andi	r24, 0x01	; 1
    28fe:	80 83       	st	Z, r24
    2900:	80 e0       	ldi	r24, 0x00	; 0
    2902:	90 e0       	ldi	r25, 0x00	; 0
    2904:	a2 ed       	ldi	r26, 0xD2	; 210
    2906:	b3 e4       	ldi	r27, 0x43	; 67
    2908:	8d 8b       	std	Y+21, r24	; 0x15
    290a:	9e 8b       	std	Y+22, r25	; 0x16
    290c:	af 8b       	std	Y+23, r26	; 0x17
    290e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2910:	6d 89       	ldd	r22, Y+21	; 0x15
    2912:	7e 89       	ldd	r23, Y+22	; 0x16
    2914:	8f 89       	ldd	r24, Y+23	; 0x17
    2916:	98 8d       	ldd	r25, Y+24	; 0x18
    2918:	2b ea       	ldi	r18, 0xAB	; 171
    291a:	3a ea       	ldi	r19, 0xAA	; 170
    291c:	4a e2       	ldi	r20, 0x2A	; 42
    291e:	50 e4       	ldi	r21, 0x40	; 64
    2920:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    2924:	dc 01       	movw	r26, r24
    2926:	cb 01       	movw	r24, r22
    2928:	89 8b       	std	Y+17, r24	; 0x11
    292a:	9a 8b       	std	Y+18, r25	; 0x12
    292c:	ab 8b       	std	Y+19, r26	; 0x13
    292e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2930:	69 89       	ldd	r22, Y+17	; 0x11
    2932:	7a 89       	ldd	r23, Y+18	; 0x12
    2934:	8b 89       	ldd	r24, Y+19	; 0x13
    2936:	9c 89       	ldd	r25, Y+20	; 0x14
    2938:	20 e0       	ldi	r18, 0x00	; 0
    293a:	30 e0       	ldi	r19, 0x00	; 0
    293c:	40 e8       	ldi	r20, 0x80	; 128
    293e:	5f e3       	ldi	r21, 0x3F	; 63
    2940:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    2944:	88 23       	and	r24, r24
    2946:	1c f4       	brge	.+6      	; 0x294e <ds18b20_reset+0x3d8>
		__ticks = 1;
    2948:	81 e0       	ldi	r24, 0x01	; 1
    294a:	88 8b       	std	Y+16, r24	; 0x10
    294c:	91 c0       	rjmp	.+290    	; 0x2a70 <ds18b20_reset+0x4fa>
	else if (__tmp > 255)
    294e:	69 89       	ldd	r22, Y+17	; 0x11
    2950:	7a 89       	ldd	r23, Y+18	; 0x12
    2952:	8b 89       	ldd	r24, Y+19	; 0x13
    2954:	9c 89       	ldd	r25, Y+20	; 0x14
    2956:	20 e0       	ldi	r18, 0x00	; 0
    2958:	30 e0       	ldi	r19, 0x00	; 0
    295a:	4f e7       	ldi	r20, 0x7F	; 127
    295c:	53 e4       	ldi	r21, 0x43	; 67
    295e:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    2962:	18 16       	cp	r1, r24
    2964:	0c f0       	brlt	.+2      	; 0x2968 <ds18b20_reset+0x3f2>
    2966:	7b c0       	rjmp	.+246    	; 0x2a5e <ds18b20_reset+0x4e8>
	{
		_delay_ms(__us / 1000.0);
    2968:	6d 89       	ldd	r22, Y+21	; 0x15
    296a:	7e 89       	ldd	r23, Y+22	; 0x16
    296c:	8f 89       	ldd	r24, Y+23	; 0x17
    296e:	98 8d       	ldd	r25, Y+24	; 0x18
    2970:	20 e0       	ldi	r18, 0x00	; 0
    2972:	30 e0       	ldi	r19, 0x00	; 0
    2974:	4a e7       	ldi	r20, 0x7A	; 122
    2976:	54 e4       	ldi	r21, 0x44	; 68
    2978:	0e 94 8e 03 	call	0x71c	; 0x71c <__divsf3>
    297c:	dc 01       	movw	r26, r24
    297e:	cb 01       	movw	r24, r22
    2980:	8c 87       	std	Y+12, r24	; 0x0c
    2982:	9d 87       	std	Y+13, r25	; 0x0d
    2984:	ae 87       	std	Y+14, r26	; 0x0e
    2986:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2988:	6c 85       	ldd	r22, Y+12	; 0x0c
    298a:	7d 85       	ldd	r23, Y+13	; 0x0d
    298c:	8e 85       	ldd	r24, Y+14	; 0x0e
    298e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2990:	20 e0       	ldi	r18, 0x00	; 0
    2992:	30 e0       	ldi	r19, 0x00	; 0
    2994:	4a ef       	ldi	r20, 0xFA	; 250
    2996:	54 e4       	ldi	r21, 0x44	; 68
    2998:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    299c:	dc 01       	movw	r26, r24
    299e:	cb 01       	movw	r24, r22
    29a0:	88 87       	std	Y+8, r24	; 0x08
    29a2:	99 87       	std	Y+9, r25	; 0x09
    29a4:	aa 87       	std	Y+10, r26	; 0x0a
    29a6:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    29a8:	68 85       	ldd	r22, Y+8	; 0x08
    29aa:	79 85       	ldd	r23, Y+9	; 0x09
    29ac:	8a 85       	ldd	r24, Y+10	; 0x0a
    29ae:	9b 85       	ldd	r25, Y+11	; 0x0b
    29b0:	20 e0       	ldi	r18, 0x00	; 0
    29b2:	30 e0       	ldi	r19, 0x00	; 0
    29b4:	40 e8       	ldi	r20, 0x80	; 128
    29b6:	5f e3       	ldi	r21, 0x3F	; 63
    29b8:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    29bc:	88 23       	and	r24, r24
    29be:	2c f4       	brge	.+10     	; 0x29ca <ds18b20_reset+0x454>
		__ticks = 1;
    29c0:	81 e0       	ldi	r24, 0x01	; 1
    29c2:	90 e0       	ldi	r25, 0x00	; 0
    29c4:	9f 83       	std	Y+7, r25	; 0x07
    29c6:	8e 83       	std	Y+6, r24	; 0x06
    29c8:	3f c0       	rjmp	.+126    	; 0x2a48 <ds18b20_reset+0x4d2>
	else if (__tmp > 65535)
    29ca:	68 85       	ldd	r22, Y+8	; 0x08
    29cc:	79 85       	ldd	r23, Y+9	; 0x09
    29ce:	8a 85       	ldd	r24, Y+10	; 0x0a
    29d0:	9b 85       	ldd	r25, Y+11	; 0x0b
    29d2:	20 e0       	ldi	r18, 0x00	; 0
    29d4:	3f ef       	ldi	r19, 0xFF	; 255
    29d6:	4f e7       	ldi	r20, 0x7F	; 127
    29d8:	57 e4       	ldi	r21, 0x47	; 71
    29da:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    29de:	18 16       	cp	r1, r24
    29e0:	4c f5       	brge	.+82     	; 0x2a34 <ds18b20_reset+0x4be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29e2:	6c 85       	ldd	r22, Y+12	; 0x0c
    29e4:	7d 85       	ldd	r23, Y+13	; 0x0d
    29e6:	8e 85       	ldd	r24, Y+14	; 0x0e
    29e8:	9f 85       	ldd	r25, Y+15	; 0x0f
    29ea:	20 e0       	ldi	r18, 0x00	; 0
    29ec:	30 e0       	ldi	r19, 0x00	; 0
    29ee:	40 e2       	ldi	r20, 0x20	; 32
    29f0:	51 e4       	ldi	r21, 0x41	; 65
    29f2:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    29f6:	dc 01       	movw	r26, r24
    29f8:	cb 01       	movw	r24, r22
    29fa:	bc 01       	movw	r22, r24
    29fc:	cd 01       	movw	r24, r26
    29fe:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    2a02:	dc 01       	movw	r26, r24
    2a04:	cb 01       	movw	r24, r22
    2a06:	9f 83       	std	Y+7, r25	; 0x07
    2a08:	8e 83       	std	Y+6, r24	; 0x06
    2a0a:	0f c0       	rjmp	.+30     	; 0x2a2a <ds18b20_reset+0x4b4>
    2a0c:	88 ec       	ldi	r24, 0xC8	; 200
    2a0e:	90 e0       	ldi	r25, 0x00	; 0
    2a10:	9d 83       	std	Y+5, r25	; 0x05
    2a12:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2a14:	8c 81       	ldd	r24, Y+4	; 0x04
    2a16:	9d 81       	ldd	r25, Y+5	; 0x05
    2a18:	01 97       	sbiw	r24, 0x01	; 1
    2a1a:	f1 f7       	brne	.-4      	; 0x2a18 <ds18b20_reset+0x4a2>
    2a1c:	9d 83       	std	Y+5, r25	; 0x05
    2a1e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a20:	8e 81       	ldd	r24, Y+6	; 0x06
    2a22:	9f 81       	ldd	r25, Y+7	; 0x07
    2a24:	01 97       	sbiw	r24, 0x01	; 1
    2a26:	9f 83       	std	Y+7, r25	; 0x07
    2a28:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a2a:	8e 81       	ldd	r24, Y+6	; 0x06
    2a2c:	9f 81       	ldd	r25, Y+7	; 0x07
    2a2e:	00 97       	sbiw	r24, 0x00	; 0
    2a30:	69 f7       	brne	.-38     	; 0x2a0c <ds18b20_reset+0x496>
    2a32:	24 c0       	rjmp	.+72     	; 0x2a7c <ds18b20_reset+0x506>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a34:	68 85       	ldd	r22, Y+8	; 0x08
    2a36:	79 85       	ldd	r23, Y+9	; 0x09
    2a38:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a3a:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a3c:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    2a40:	dc 01       	movw	r26, r24
    2a42:	cb 01       	movw	r24, r22
    2a44:	9f 83       	std	Y+7, r25	; 0x07
    2a46:	8e 83       	std	Y+6, r24	; 0x06
    2a48:	8e 81       	ldd	r24, Y+6	; 0x06
    2a4a:	9f 81       	ldd	r25, Y+7	; 0x07
    2a4c:	9b 83       	std	Y+3, r25	; 0x03
    2a4e:	8a 83       	std	Y+2, r24	; 0x02
    2a50:	8a 81       	ldd	r24, Y+2	; 0x02
    2a52:	9b 81       	ldd	r25, Y+3	; 0x03
    2a54:	01 97       	sbiw	r24, 0x01	; 1
    2a56:	f1 f7       	brne	.-4      	; 0x2a54 <ds18b20_reset+0x4de>
    2a58:	9b 83       	std	Y+3, r25	; 0x03
    2a5a:	8a 83       	std	Y+2, r24	; 0x02
    2a5c:	0f c0       	rjmp	.+30     	; 0x2a7c <ds18b20_reset+0x506>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2a5e:	69 89       	ldd	r22, Y+17	; 0x11
    2a60:	7a 89       	ldd	r23, Y+18	; 0x12
    2a62:	8b 89       	ldd	r24, Y+19	; 0x13
    2a64:	9c 89       	ldd	r25, Y+20	; 0x14
    2a66:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    2a6a:	dc 01       	movw	r26, r24
    2a6c:	cb 01       	movw	r24, r22
    2a6e:	88 8b       	std	Y+16, r24	; 0x10
    2a70:	88 89       	ldd	r24, Y+16	; 0x10
    2a72:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2a74:	89 81       	ldd	r24, Y+1	; 0x01
    2a76:	8a 95       	dec	r24
    2a78:	f1 f7       	brne	.-4      	; 0x2a76 <ds18b20_reset+0x500>
    2a7a:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(420);

	//return the read value, 0=ok, 1=error
	return i;
    2a7c:	fe 01       	movw	r30, r28
    2a7e:	e7 5b       	subi	r30, 0xB7	; 183
    2a80:	ff 4f       	sbci	r31, 0xFF	; 255
    2a82:	80 81       	ld	r24, Z
}
    2a84:	c7 5b       	subi	r28, 0xB7	; 183
    2a86:	df 4f       	sbci	r29, 0xFF	; 255
    2a88:	0f b6       	in	r0, 0x3f	; 63
    2a8a:	f8 94       	cli
    2a8c:	de bf       	out	0x3e, r29	; 62
    2a8e:	0f be       	out	0x3f, r0	; 63
    2a90:	cd bf       	out	0x3d, r28	; 61
    2a92:	cf 91       	pop	r28
    2a94:	df 91       	pop	r29
    2a96:	1f 91       	pop	r17
    2a98:	0f 91       	pop	r16
    2a9a:	08 95       	ret

00002a9c <ds18b20_writebit>:

/*
 * write one bit
 */
void ds18b20_writebit(uint8_t bit){
    2a9c:	df 93       	push	r29
    2a9e:	cf 93       	push	r28
    2aa0:	cd b7       	in	r28, 0x3d	; 61
    2aa2:	de b7       	in	r29, 0x3e	; 62
    2aa4:	e1 97       	sbiw	r28, 0x31	; 49
    2aa6:	0f b6       	in	r0, 0x3f	; 63
    2aa8:	f8 94       	cli
    2aaa:	de bf       	out	0x3e, r29	; 62
    2aac:	0f be       	out	0x3f, r0	; 63
    2aae:	cd bf       	out	0x3d, r28	; 61
    2ab0:	89 ab       	std	Y+49, r24	; 0x31
	//low for 1uS
	DS18B20_PORT &= ~ (1<<DS18B20_DQ); //low
    2ab2:	a5 e3       	ldi	r26, 0x35	; 53
    2ab4:	b0 e0       	ldi	r27, 0x00	; 0
    2ab6:	e5 e3       	ldi	r30, 0x35	; 53
    2ab8:	f0 e0       	ldi	r31, 0x00	; 0
    2aba:	80 81       	ld	r24, Z
    2abc:	8e 7f       	andi	r24, 0xFE	; 254
    2abe:	8c 93       	st	X, r24
	DS18B20_DDR |= (1<<DS18B20_DQ); //output
    2ac0:	a4 e3       	ldi	r26, 0x34	; 52
    2ac2:	b0 e0       	ldi	r27, 0x00	; 0
    2ac4:	e4 e3       	ldi	r30, 0x34	; 52
    2ac6:	f0 e0       	ldi	r31, 0x00	; 0
    2ac8:	80 81       	ld	r24, Z
    2aca:	81 60       	ori	r24, 0x01	; 1
    2acc:	8c 93       	st	X, r24
    2ace:	80 e0       	ldi	r24, 0x00	; 0
    2ad0:	90 e0       	ldi	r25, 0x00	; 0
    2ad2:	a0 ea       	ldi	r26, 0xA0	; 160
    2ad4:	b0 e4       	ldi	r27, 0x40	; 64
    2ad6:	8d a7       	std	Y+45, r24	; 0x2d
    2ad8:	9e a7       	std	Y+46, r25	; 0x2e
    2ada:	af a7       	std	Y+47, r26	; 0x2f
    2adc:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2ade:	6d a5       	ldd	r22, Y+45	; 0x2d
    2ae0:	7e a5       	ldd	r23, Y+46	; 0x2e
    2ae2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ae4:	98 a9       	ldd	r25, Y+48	; 0x30
    2ae6:	2b ea       	ldi	r18, 0xAB	; 171
    2ae8:	3a ea       	ldi	r19, 0xAA	; 170
    2aea:	4a e2       	ldi	r20, 0x2A	; 42
    2aec:	50 e4       	ldi	r21, 0x40	; 64
    2aee:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    2af2:	dc 01       	movw	r26, r24
    2af4:	cb 01       	movw	r24, r22
    2af6:	89 a7       	std	Y+41, r24	; 0x29
    2af8:	9a a7       	std	Y+42, r25	; 0x2a
    2afa:	ab a7       	std	Y+43, r26	; 0x2b
    2afc:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2afe:	69 a5       	ldd	r22, Y+41	; 0x29
    2b00:	7a a5       	ldd	r23, Y+42	; 0x2a
    2b02:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b04:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b06:	20 e0       	ldi	r18, 0x00	; 0
    2b08:	30 e0       	ldi	r19, 0x00	; 0
    2b0a:	40 e8       	ldi	r20, 0x80	; 128
    2b0c:	5f e3       	ldi	r21, 0x3F	; 63
    2b0e:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    2b12:	88 23       	and	r24, r24
    2b14:	1c f4       	brge	.+6      	; 0x2b1c <ds18b20_writebit+0x80>
		__ticks = 1;
    2b16:	81 e0       	ldi	r24, 0x01	; 1
    2b18:	88 a7       	std	Y+40, r24	; 0x28
    2b1a:	91 c0       	rjmp	.+290    	; 0x2c3e <ds18b20_writebit+0x1a2>
	else if (__tmp > 255)
    2b1c:	69 a5       	ldd	r22, Y+41	; 0x29
    2b1e:	7a a5       	ldd	r23, Y+42	; 0x2a
    2b20:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b22:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b24:	20 e0       	ldi	r18, 0x00	; 0
    2b26:	30 e0       	ldi	r19, 0x00	; 0
    2b28:	4f e7       	ldi	r20, 0x7F	; 127
    2b2a:	53 e4       	ldi	r21, 0x43	; 67
    2b2c:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    2b30:	18 16       	cp	r1, r24
    2b32:	0c f0       	brlt	.+2      	; 0x2b36 <ds18b20_writebit+0x9a>
    2b34:	7b c0       	rjmp	.+246    	; 0x2c2c <ds18b20_writebit+0x190>
	{
		_delay_ms(__us / 1000.0);
    2b36:	6d a5       	ldd	r22, Y+45	; 0x2d
    2b38:	7e a5       	ldd	r23, Y+46	; 0x2e
    2b3a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b3c:	98 a9       	ldd	r25, Y+48	; 0x30
    2b3e:	20 e0       	ldi	r18, 0x00	; 0
    2b40:	30 e0       	ldi	r19, 0x00	; 0
    2b42:	4a e7       	ldi	r20, 0x7A	; 122
    2b44:	54 e4       	ldi	r21, 0x44	; 68
    2b46:	0e 94 8e 03 	call	0x71c	; 0x71c <__divsf3>
    2b4a:	dc 01       	movw	r26, r24
    2b4c:	cb 01       	movw	r24, r22
    2b4e:	8c a3       	std	Y+36, r24	; 0x24
    2b50:	9d a3       	std	Y+37, r25	; 0x25
    2b52:	ae a3       	std	Y+38, r26	; 0x26
    2b54:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b56:	6c a1       	ldd	r22, Y+36	; 0x24
    2b58:	7d a1       	ldd	r23, Y+37	; 0x25
    2b5a:	8e a1       	ldd	r24, Y+38	; 0x26
    2b5c:	9f a1       	ldd	r25, Y+39	; 0x27
    2b5e:	20 e0       	ldi	r18, 0x00	; 0
    2b60:	30 e0       	ldi	r19, 0x00	; 0
    2b62:	4a ef       	ldi	r20, 0xFA	; 250
    2b64:	54 e4       	ldi	r21, 0x44	; 68
    2b66:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    2b6a:	dc 01       	movw	r26, r24
    2b6c:	cb 01       	movw	r24, r22
    2b6e:	88 a3       	std	Y+32, r24	; 0x20
    2b70:	99 a3       	std	Y+33, r25	; 0x21
    2b72:	aa a3       	std	Y+34, r26	; 0x22
    2b74:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2b76:	68 a1       	ldd	r22, Y+32	; 0x20
    2b78:	79 a1       	ldd	r23, Y+33	; 0x21
    2b7a:	8a a1       	ldd	r24, Y+34	; 0x22
    2b7c:	9b a1       	ldd	r25, Y+35	; 0x23
    2b7e:	20 e0       	ldi	r18, 0x00	; 0
    2b80:	30 e0       	ldi	r19, 0x00	; 0
    2b82:	40 e8       	ldi	r20, 0x80	; 128
    2b84:	5f e3       	ldi	r21, 0x3F	; 63
    2b86:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    2b8a:	88 23       	and	r24, r24
    2b8c:	2c f4       	brge	.+10     	; 0x2b98 <ds18b20_writebit+0xfc>
		__ticks = 1;
    2b8e:	81 e0       	ldi	r24, 0x01	; 1
    2b90:	90 e0       	ldi	r25, 0x00	; 0
    2b92:	9f 8f       	std	Y+31, r25	; 0x1f
    2b94:	8e 8f       	std	Y+30, r24	; 0x1e
    2b96:	3f c0       	rjmp	.+126    	; 0x2c16 <ds18b20_writebit+0x17a>
	else if (__tmp > 65535)
    2b98:	68 a1       	ldd	r22, Y+32	; 0x20
    2b9a:	79 a1       	ldd	r23, Y+33	; 0x21
    2b9c:	8a a1       	ldd	r24, Y+34	; 0x22
    2b9e:	9b a1       	ldd	r25, Y+35	; 0x23
    2ba0:	20 e0       	ldi	r18, 0x00	; 0
    2ba2:	3f ef       	ldi	r19, 0xFF	; 255
    2ba4:	4f e7       	ldi	r20, 0x7F	; 127
    2ba6:	57 e4       	ldi	r21, 0x47	; 71
    2ba8:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    2bac:	18 16       	cp	r1, r24
    2bae:	4c f5       	brge	.+82     	; 0x2c02 <ds18b20_writebit+0x166>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bb0:	6c a1       	ldd	r22, Y+36	; 0x24
    2bb2:	7d a1       	ldd	r23, Y+37	; 0x25
    2bb4:	8e a1       	ldd	r24, Y+38	; 0x26
    2bb6:	9f a1       	ldd	r25, Y+39	; 0x27
    2bb8:	20 e0       	ldi	r18, 0x00	; 0
    2bba:	30 e0       	ldi	r19, 0x00	; 0
    2bbc:	40 e2       	ldi	r20, 0x20	; 32
    2bbe:	51 e4       	ldi	r21, 0x41	; 65
    2bc0:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    2bc4:	dc 01       	movw	r26, r24
    2bc6:	cb 01       	movw	r24, r22
    2bc8:	bc 01       	movw	r22, r24
    2bca:	cd 01       	movw	r24, r26
    2bcc:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    2bd0:	dc 01       	movw	r26, r24
    2bd2:	cb 01       	movw	r24, r22
    2bd4:	9f 8f       	std	Y+31, r25	; 0x1f
    2bd6:	8e 8f       	std	Y+30, r24	; 0x1e
    2bd8:	0f c0       	rjmp	.+30     	; 0x2bf8 <ds18b20_writebit+0x15c>
    2bda:	88 ec       	ldi	r24, 0xC8	; 200
    2bdc:	90 e0       	ldi	r25, 0x00	; 0
    2bde:	9d 8f       	std	Y+29, r25	; 0x1d
    2be0:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2be2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2be4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2be6:	01 97       	sbiw	r24, 0x01	; 1
    2be8:	f1 f7       	brne	.-4      	; 0x2be6 <ds18b20_writebit+0x14a>
    2bea:	9d 8f       	std	Y+29, r25	; 0x1d
    2bec:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bee:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2bf0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2bf2:	01 97       	sbiw	r24, 0x01	; 1
    2bf4:	9f 8f       	std	Y+31, r25	; 0x1f
    2bf6:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bf8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2bfa:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2bfc:	00 97       	sbiw	r24, 0x00	; 0
    2bfe:	69 f7       	brne	.-38     	; 0x2bda <ds18b20_writebit+0x13e>
    2c00:	24 c0       	rjmp	.+72     	; 0x2c4a <ds18b20_writebit+0x1ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c02:	68 a1       	ldd	r22, Y+32	; 0x20
    2c04:	79 a1       	ldd	r23, Y+33	; 0x21
    2c06:	8a a1       	ldd	r24, Y+34	; 0x22
    2c08:	9b a1       	ldd	r25, Y+35	; 0x23
    2c0a:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    2c0e:	dc 01       	movw	r26, r24
    2c10:	cb 01       	movw	r24, r22
    2c12:	9f 8f       	std	Y+31, r25	; 0x1f
    2c14:	8e 8f       	std	Y+30, r24	; 0x1e
    2c16:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2c18:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2c1a:	9b 8f       	std	Y+27, r25	; 0x1b
    2c1c:	8a 8f       	std	Y+26, r24	; 0x1a
    2c1e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2c20:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2c22:	01 97       	sbiw	r24, 0x01	; 1
    2c24:	f1 f7       	brne	.-4      	; 0x2c22 <ds18b20_writebit+0x186>
    2c26:	9b 8f       	std	Y+27, r25	; 0x1b
    2c28:	8a 8f       	std	Y+26, r24	; 0x1a
    2c2a:	0f c0       	rjmp	.+30     	; 0x2c4a <ds18b20_writebit+0x1ae>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2c2c:	69 a5       	ldd	r22, Y+41	; 0x29
    2c2e:	7a a5       	ldd	r23, Y+42	; 0x2a
    2c30:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c32:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c34:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    2c38:	dc 01       	movw	r26, r24
    2c3a:	cb 01       	movw	r24, r22
    2c3c:	88 a7       	std	Y+40, r24	; 0x28
    2c3e:	88 a5       	ldd	r24, Y+40	; 0x28
    2c40:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2c42:	89 8d       	ldd	r24, Y+25	; 0x19
    2c44:	8a 95       	dec	r24
    2c46:	f1 f7       	brne	.-4      	; 0x2c44 <ds18b20_writebit+0x1a8>
    2c48:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(5);

	//if we want to write 1, release the line (if not will keep low)
	if(bit)
    2c4a:	89 a9       	ldd	r24, Y+49	; 0x31
    2c4c:	88 23       	and	r24, r24
    2c4e:	39 f0       	breq	.+14     	; 0x2c5e <ds18b20_writebit+0x1c2>
		DS18B20_DDR &= ~(1<<DS18B20_DQ); //input
    2c50:	a4 e3       	ldi	r26, 0x34	; 52
    2c52:	b0 e0       	ldi	r27, 0x00	; 0
    2c54:	e4 e3       	ldi	r30, 0x34	; 52
    2c56:	f0 e0       	ldi	r31, 0x00	; 0
    2c58:	80 81       	ld	r24, Z
    2c5a:	8e 7f       	andi	r24, 0xFE	; 254
    2c5c:	8c 93       	st	X, r24
    2c5e:	80 e0       	ldi	r24, 0x00	; 0
    2c60:	90 e0       	ldi	r25, 0x00	; 0
    2c62:	a0 e7       	ldi	r26, 0x70	; 112
    2c64:	b2 e4       	ldi	r27, 0x42	; 66
    2c66:	8d 8b       	std	Y+21, r24	; 0x15
    2c68:	9e 8b       	std	Y+22, r25	; 0x16
    2c6a:	af 8b       	std	Y+23, r26	; 0x17
    2c6c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2c6e:	6d 89       	ldd	r22, Y+21	; 0x15
    2c70:	7e 89       	ldd	r23, Y+22	; 0x16
    2c72:	8f 89       	ldd	r24, Y+23	; 0x17
    2c74:	98 8d       	ldd	r25, Y+24	; 0x18
    2c76:	2b ea       	ldi	r18, 0xAB	; 171
    2c78:	3a ea       	ldi	r19, 0xAA	; 170
    2c7a:	4a e2       	ldi	r20, 0x2A	; 42
    2c7c:	50 e4       	ldi	r21, 0x40	; 64
    2c7e:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    2c82:	dc 01       	movw	r26, r24
    2c84:	cb 01       	movw	r24, r22
    2c86:	89 8b       	std	Y+17, r24	; 0x11
    2c88:	9a 8b       	std	Y+18, r25	; 0x12
    2c8a:	ab 8b       	std	Y+19, r26	; 0x13
    2c8c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2c8e:	69 89       	ldd	r22, Y+17	; 0x11
    2c90:	7a 89       	ldd	r23, Y+18	; 0x12
    2c92:	8b 89       	ldd	r24, Y+19	; 0x13
    2c94:	9c 89       	ldd	r25, Y+20	; 0x14
    2c96:	20 e0       	ldi	r18, 0x00	; 0
    2c98:	30 e0       	ldi	r19, 0x00	; 0
    2c9a:	40 e8       	ldi	r20, 0x80	; 128
    2c9c:	5f e3       	ldi	r21, 0x3F	; 63
    2c9e:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    2ca2:	88 23       	and	r24, r24
    2ca4:	1c f4       	brge	.+6      	; 0x2cac <ds18b20_writebit+0x210>
		__ticks = 1;
    2ca6:	81 e0       	ldi	r24, 0x01	; 1
    2ca8:	88 8b       	std	Y+16, r24	; 0x10
    2caa:	91 c0       	rjmp	.+290    	; 0x2dce <ds18b20_writebit+0x332>
	else if (__tmp > 255)
    2cac:	69 89       	ldd	r22, Y+17	; 0x11
    2cae:	7a 89       	ldd	r23, Y+18	; 0x12
    2cb0:	8b 89       	ldd	r24, Y+19	; 0x13
    2cb2:	9c 89       	ldd	r25, Y+20	; 0x14
    2cb4:	20 e0       	ldi	r18, 0x00	; 0
    2cb6:	30 e0       	ldi	r19, 0x00	; 0
    2cb8:	4f e7       	ldi	r20, 0x7F	; 127
    2cba:	53 e4       	ldi	r21, 0x43	; 67
    2cbc:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    2cc0:	18 16       	cp	r1, r24
    2cc2:	0c f0       	brlt	.+2      	; 0x2cc6 <ds18b20_writebit+0x22a>
    2cc4:	7b c0       	rjmp	.+246    	; 0x2dbc <ds18b20_writebit+0x320>
	{
		_delay_ms(__us / 1000.0);
    2cc6:	6d 89       	ldd	r22, Y+21	; 0x15
    2cc8:	7e 89       	ldd	r23, Y+22	; 0x16
    2cca:	8f 89       	ldd	r24, Y+23	; 0x17
    2ccc:	98 8d       	ldd	r25, Y+24	; 0x18
    2cce:	20 e0       	ldi	r18, 0x00	; 0
    2cd0:	30 e0       	ldi	r19, 0x00	; 0
    2cd2:	4a e7       	ldi	r20, 0x7A	; 122
    2cd4:	54 e4       	ldi	r21, 0x44	; 68
    2cd6:	0e 94 8e 03 	call	0x71c	; 0x71c <__divsf3>
    2cda:	dc 01       	movw	r26, r24
    2cdc:	cb 01       	movw	r24, r22
    2cde:	8c 87       	std	Y+12, r24	; 0x0c
    2ce0:	9d 87       	std	Y+13, r25	; 0x0d
    2ce2:	ae 87       	std	Y+14, r26	; 0x0e
    2ce4:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ce6:	6c 85       	ldd	r22, Y+12	; 0x0c
    2ce8:	7d 85       	ldd	r23, Y+13	; 0x0d
    2cea:	8e 85       	ldd	r24, Y+14	; 0x0e
    2cec:	9f 85       	ldd	r25, Y+15	; 0x0f
    2cee:	20 e0       	ldi	r18, 0x00	; 0
    2cf0:	30 e0       	ldi	r19, 0x00	; 0
    2cf2:	4a ef       	ldi	r20, 0xFA	; 250
    2cf4:	54 e4       	ldi	r21, 0x44	; 68
    2cf6:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    2cfa:	dc 01       	movw	r26, r24
    2cfc:	cb 01       	movw	r24, r22
    2cfe:	88 87       	std	Y+8, r24	; 0x08
    2d00:	99 87       	std	Y+9, r25	; 0x09
    2d02:	aa 87       	std	Y+10, r26	; 0x0a
    2d04:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2d06:	68 85       	ldd	r22, Y+8	; 0x08
    2d08:	79 85       	ldd	r23, Y+9	; 0x09
    2d0a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d0c:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d0e:	20 e0       	ldi	r18, 0x00	; 0
    2d10:	30 e0       	ldi	r19, 0x00	; 0
    2d12:	40 e8       	ldi	r20, 0x80	; 128
    2d14:	5f e3       	ldi	r21, 0x3F	; 63
    2d16:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    2d1a:	88 23       	and	r24, r24
    2d1c:	2c f4       	brge	.+10     	; 0x2d28 <ds18b20_writebit+0x28c>
		__ticks = 1;
    2d1e:	81 e0       	ldi	r24, 0x01	; 1
    2d20:	90 e0       	ldi	r25, 0x00	; 0
    2d22:	9f 83       	std	Y+7, r25	; 0x07
    2d24:	8e 83       	std	Y+6, r24	; 0x06
    2d26:	3f c0       	rjmp	.+126    	; 0x2da6 <ds18b20_writebit+0x30a>
	else if (__tmp > 65535)
    2d28:	68 85       	ldd	r22, Y+8	; 0x08
    2d2a:	79 85       	ldd	r23, Y+9	; 0x09
    2d2c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d2e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d30:	20 e0       	ldi	r18, 0x00	; 0
    2d32:	3f ef       	ldi	r19, 0xFF	; 255
    2d34:	4f e7       	ldi	r20, 0x7F	; 127
    2d36:	57 e4       	ldi	r21, 0x47	; 71
    2d38:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    2d3c:	18 16       	cp	r1, r24
    2d3e:	4c f5       	brge	.+82     	; 0x2d92 <ds18b20_writebit+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d40:	6c 85       	ldd	r22, Y+12	; 0x0c
    2d42:	7d 85       	ldd	r23, Y+13	; 0x0d
    2d44:	8e 85       	ldd	r24, Y+14	; 0x0e
    2d46:	9f 85       	ldd	r25, Y+15	; 0x0f
    2d48:	20 e0       	ldi	r18, 0x00	; 0
    2d4a:	30 e0       	ldi	r19, 0x00	; 0
    2d4c:	40 e2       	ldi	r20, 0x20	; 32
    2d4e:	51 e4       	ldi	r21, 0x41	; 65
    2d50:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    2d54:	dc 01       	movw	r26, r24
    2d56:	cb 01       	movw	r24, r22
    2d58:	bc 01       	movw	r22, r24
    2d5a:	cd 01       	movw	r24, r26
    2d5c:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    2d60:	dc 01       	movw	r26, r24
    2d62:	cb 01       	movw	r24, r22
    2d64:	9f 83       	std	Y+7, r25	; 0x07
    2d66:	8e 83       	std	Y+6, r24	; 0x06
    2d68:	0f c0       	rjmp	.+30     	; 0x2d88 <ds18b20_writebit+0x2ec>
    2d6a:	88 ec       	ldi	r24, 0xC8	; 200
    2d6c:	90 e0       	ldi	r25, 0x00	; 0
    2d6e:	9d 83       	std	Y+5, r25	; 0x05
    2d70:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2d72:	8c 81       	ldd	r24, Y+4	; 0x04
    2d74:	9d 81       	ldd	r25, Y+5	; 0x05
    2d76:	01 97       	sbiw	r24, 0x01	; 1
    2d78:	f1 f7       	brne	.-4      	; 0x2d76 <ds18b20_writebit+0x2da>
    2d7a:	9d 83       	std	Y+5, r25	; 0x05
    2d7c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d7e:	8e 81       	ldd	r24, Y+6	; 0x06
    2d80:	9f 81       	ldd	r25, Y+7	; 0x07
    2d82:	01 97       	sbiw	r24, 0x01	; 1
    2d84:	9f 83       	std	Y+7, r25	; 0x07
    2d86:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d88:	8e 81       	ldd	r24, Y+6	; 0x06
    2d8a:	9f 81       	ldd	r25, Y+7	; 0x07
    2d8c:	00 97       	sbiw	r24, 0x00	; 0
    2d8e:	69 f7       	brne	.-38     	; 0x2d6a <ds18b20_writebit+0x2ce>
    2d90:	24 c0       	rjmp	.+72     	; 0x2dda <ds18b20_writebit+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d92:	68 85       	ldd	r22, Y+8	; 0x08
    2d94:	79 85       	ldd	r23, Y+9	; 0x09
    2d96:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d98:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d9a:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    2d9e:	dc 01       	movw	r26, r24
    2da0:	cb 01       	movw	r24, r22
    2da2:	9f 83       	std	Y+7, r25	; 0x07
    2da4:	8e 83       	std	Y+6, r24	; 0x06
    2da6:	8e 81       	ldd	r24, Y+6	; 0x06
    2da8:	9f 81       	ldd	r25, Y+7	; 0x07
    2daa:	9b 83       	std	Y+3, r25	; 0x03
    2dac:	8a 83       	std	Y+2, r24	; 0x02
    2dae:	8a 81       	ldd	r24, Y+2	; 0x02
    2db0:	9b 81       	ldd	r25, Y+3	; 0x03
    2db2:	01 97       	sbiw	r24, 0x01	; 1
    2db4:	f1 f7       	brne	.-4      	; 0x2db2 <ds18b20_writebit+0x316>
    2db6:	9b 83       	std	Y+3, r25	; 0x03
    2db8:	8a 83       	std	Y+2, r24	; 0x02
    2dba:	0f c0       	rjmp	.+30     	; 0x2dda <ds18b20_writebit+0x33e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2dbc:	69 89       	ldd	r22, Y+17	; 0x11
    2dbe:	7a 89       	ldd	r23, Y+18	; 0x12
    2dc0:	8b 89       	ldd	r24, Y+19	; 0x13
    2dc2:	9c 89       	ldd	r25, Y+20	; 0x14
    2dc4:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    2dc8:	dc 01       	movw	r26, r24
    2dca:	cb 01       	movw	r24, r22
    2dcc:	88 8b       	std	Y+16, r24	; 0x10
    2dce:	88 89       	ldd	r24, Y+16	; 0x10
    2dd0:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2dd2:	89 81       	ldd	r24, Y+1	; 0x01
    2dd4:	8a 95       	dec	r24
    2dd6:	f1 f7       	brne	.-4      	; 0x2dd4 <ds18b20_writebit+0x338>
    2dd8:	89 83       	std	Y+1, r24	; 0x01

	//wait 60uS and release the line
	_delay_us(60);
	DS18B20_DDR &= ~(1<<DS18B20_DQ); //input
    2dda:	a4 e3       	ldi	r26, 0x34	; 52
    2ddc:	b0 e0       	ldi	r27, 0x00	; 0
    2dde:	e4 e3       	ldi	r30, 0x34	; 52
    2de0:	f0 e0       	ldi	r31, 0x00	; 0
    2de2:	80 81       	ld	r24, Z
    2de4:	8e 7f       	andi	r24, 0xFE	; 254
    2de6:	8c 93       	st	X, r24
}
    2de8:	e1 96       	adiw	r28, 0x31	; 49
    2dea:	0f b6       	in	r0, 0x3f	; 63
    2dec:	f8 94       	cli
    2dee:	de bf       	out	0x3e, r29	; 62
    2df0:	0f be       	out	0x3f, r0	; 63
    2df2:	cd bf       	out	0x3d, r28	; 61
    2df4:	cf 91       	pop	r28
    2df6:	df 91       	pop	r29
    2df8:	08 95       	ret

00002dfa <ds18b20_readbit>:

/*
 * read one bit
 */
uint8_t ds18b20_readbit(void){
    2dfa:	0f 93       	push	r16
    2dfc:	1f 93       	push	r17
    2dfe:	df 93       	push	r29
    2e00:	cf 93       	push	r28
    2e02:	cd b7       	in	r28, 0x3d	; 61
    2e04:	de b7       	in	r29, 0x3e	; 62
    2e06:	c9 54       	subi	r28, 0x49	; 73
    2e08:	d0 40       	sbci	r29, 0x00	; 0
    2e0a:	0f b6       	in	r0, 0x3f	; 63
    2e0c:	f8 94       	cli
    2e0e:	de bf       	out	0x3e, r29	; 62
    2e10:	0f be       	out	0x3f, r0	; 63
    2e12:	cd bf       	out	0x3d, r28	; 61
	uint8_t bit=0;
    2e14:	fe 01       	movw	r30, r28
    2e16:	e7 5b       	subi	r30, 0xB7	; 183
    2e18:	ff 4f       	sbci	r31, 0xFF	; 255
    2e1a:	10 82       	st	Z, r1

	//low for 1uS
	DS18B20_PORT &= ~ (1<<DS18B20_DQ); //low
    2e1c:	a5 e3       	ldi	r26, 0x35	; 53
    2e1e:	b0 e0       	ldi	r27, 0x00	; 0
    2e20:	e5 e3       	ldi	r30, 0x35	; 53
    2e22:	f0 e0       	ldi	r31, 0x00	; 0
    2e24:	80 81       	ld	r24, Z
    2e26:	8e 7f       	andi	r24, 0xFE	; 254
    2e28:	8c 93       	st	X, r24
	DS18B20_DDR |= (1<<DS18B20_DQ); //output
    2e2a:	a4 e3       	ldi	r26, 0x34	; 52
    2e2c:	b0 e0       	ldi	r27, 0x00	; 0
    2e2e:	e4 e3       	ldi	r30, 0x34	; 52
    2e30:	f0 e0       	ldi	r31, 0x00	; 0
    2e32:	80 81       	ld	r24, Z
    2e34:	81 60       	ori	r24, 0x01	; 1
    2e36:	8c 93       	st	X, r24
    2e38:	fe 01       	movw	r30, r28
    2e3a:	eb 5b       	subi	r30, 0xBB	; 187
    2e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e3e:	80 e0       	ldi	r24, 0x00	; 0
    2e40:	90 e0       	ldi	r25, 0x00	; 0
    2e42:	a0 ea       	ldi	r26, 0xA0	; 160
    2e44:	b0 e4       	ldi	r27, 0x40	; 64
    2e46:	80 83       	st	Z, r24
    2e48:	91 83       	std	Z+1, r25	; 0x01
    2e4a:	a2 83       	std	Z+2, r26	; 0x02
    2e4c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2e4e:	8e 01       	movw	r16, r28
    2e50:	0f 5b       	subi	r16, 0xBF	; 191
    2e52:	1f 4f       	sbci	r17, 0xFF	; 255
    2e54:	fe 01       	movw	r30, r28
    2e56:	eb 5b       	subi	r30, 0xBB	; 187
    2e58:	ff 4f       	sbci	r31, 0xFF	; 255
    2e5a:	60 81       	ld	r22, Z
    2e5c:	71 81       	ldd	r23, Z+1	; 0x01
    2e5e:	82 81       	ldd	r24, Z+2	; 0x02
    2e60:	93 81       	ldd	r25, Z+3	; 0x03
    2e62:	2b ea       	ldi	r18, 0xAB	; 171
    2e64:	3a ea       	ldi	r19, 0xAA	; 170
    2e66:	4a e2       	ldi	r20, 0x2A	; 42
    2e68:	50 e4       	ldi	r21, 0x40	; 64
    2e6a:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    2e6e:	dc 01       	movw	r26, r24
    2e70:	cb 01       	movw	r24, r22
    2e72:	f8 01       	movw	r30, r16
    2e74:	80 83       	st	Z, r24
    2e76:	91 83       	std	Z+1, r25	; 0x01
    2e78:	a2 83       	std	Z+2, r26	; 0x02
    2e7a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e7c:	fe 01       	movw	r30, r28
    2e7e:	ef 5b       	subi	r30, 0xBF	; 191
    2e80:	ff 4f       	sbci	r31, 0xFF	; 255
    2e82:	60 81       	ld	r22, Z
    2e84:	71 81       	ldd	r23, Z+1	; 0x01
    2e86:	82 81       	ldd	r24, Z+2	; 0x02
    2e88:	93 81       	ldd	r25, Z+3	; 0x03
    2e8a:	20 e0       	ldi	r18, 0x00	; 0
    2e8c:	30 e0       	ldi	r19, 0x00	; 0
    2e8e:	40 e8       	ldi	r20, 0x80	; 128
    2e90:	5f e3       	ldi	r21, 0x3F	; 63
    2e92:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    2e96:	88 23       	and	r24, r24
    2e98:	34 f4       	brge	.+12     	; 0x2ea6 <ds18b20_readbit+0xac>
		__ticks = 1;
    2e9a:	81 e0       	ldi	r24, 0x01	; 1
    2e9c:	fe 01       	movw	r30, r28
    2e9e:	e0 5c       	subi	r30, 0xC0	; 192
    2ea0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea2:	80 83       	st	Z, r24
    2ea4:	9d c0       	rjmp	.+314    	; 0x2fe0 <ds18b20_readbit+0x1e6>
	else if (__tmp > 255)
    2ea6:	fe 01       	movw	r30, r28
    2ea8:	ef 5b       	subi	r30, 0xBF	; 191
    2eaa:	ff 4f       	sbci	r31, 0xFF	; 255
    2eac:	60 81       	ld	r22, Z
    2eae:	71 81       	ldd	r23, Z+1	; 0x01
    2eb0:	82 81       	ldd	r24, Z+2	; 0x02
    2eb2:	93 81       	ldd	r25, Z+3	; 0x03
    2eb4:	20 e0       	ldi	r18, 0x00	; 0
    2eb6:	30 e0       	ldi	r19, 0x00	; 0
    2eb8:	4f e7       	ldi	r20, 0x7F	; 127
    2eba:	53 e4       	ldi	r21, 0x43	; 67
    2ebc:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    2ec0:	18 16       	cp	r1, r24
    2ec2:	0c f0       	brlt	.+2      	; 0x2ec6 <ds18b20_readbit+0xcc>
    2ec4:	7e c0       	rjmp	.+252    	; 0x2fc2 <ds18b20_readbit+0x1c8>
	{
		_delay_ms(__us / 1000.0);
    2ec6:	fe 01       	movw	r30, r28
    2ec8:	eb 5b       	subi	r30, 0xBB	; 187
    2eca:	ff 4f       	sbci	r31, 0xFF	; 255
    2ecc:	60 81       	ld	r22, Z
    2ece:	71 81       	ldd	r23, Z+1	; 0x01
    2ed0:	82 81       	ldd	r24, Z+2	; 0x02
    2ed2:	93 81       	ldd	r25, Z+3	; 0x03
    2ed4:	20 e0       	ldi	r18, 0x00	; 0
    2ed6:	30 e0       	ldi	r19, 0x00	; 0
    2ed8:	4a e7       	ldi	r20, 0x7A	; 122
    2eda:	54 e4       	ldi	r21, 0x44	; 68
    2edc:	0e 94 8e 03 	call	0x71c	; 0x71c <__divsf3>
    2ee0:	dc 01       	movw	r26, r24
    2ee2:	cb 01       	movw	r24, r22
    2ee4:	8c af       	std	Y+60, r24	; 0x3c
    2ee6:	9d af       	std	Y+61, r25	; 0x3d
    2ee8:	ae af       	std	Y+62, r26	; 0x3e
    2eea:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2eec:	6c ad       	ldd	r22, Y+60	; 0x3c
    2eee:	7d ad       	ldd	r23, Y+61	; 0x3d
    2ef0:	8e ad       	ldd	r24, Y+62	; 0x3e
    2ef2:	9f ad       	ldd	r25, Y+63	; 0x3f
    2ef4:	20 e0       	ldi	r18, 0x00	; 0
    2ef6:	30 e0       	ldi	r19, 0x00	; 0
    2ef8:	4a ef       	ldi	r20, 0xFA	; 250
    2efa:	54 e4       	ldi	r21, 0x44	; 68
    2efc:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    2f00:	dc 01       	movw	r26, r24
    2f02:	cb 01       	movw	r24, r22
    2f04:	88 af       	std	Y+56, r24	; 0x38
    2f06:	99 af       	std	Y+57, r25	; 0x39
    2f08:	aa af       	std	Y+58, r26	; 0x3a
    2f0a:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    2f0c:	68 ad       	ldd	r22, Y+56	; 0x38
    2f0e:	79 ad       	ldd	r23, Y+57	; 0x39
    2f10:	8a ad       	ldd	r24, Y+58	; 0x3a
    2f12:	9b ad       	ldd	r25, Y+59	; 0x3b
    2f14:	20 e0       	ldi	r18, 0x00	; 0
    2f16:	30 e0       	ldi	r19, 0x00	; 0
    2f18:	40 e8       	ldi	r20, 0x80	; 128
    2f1a:	5f e3       	ldi	r21, 0x3F	; 63
    2f1c:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    2f20:	88 23       	and	r24, r24
    2f22:	2c f4       	brge	.+10     	; 0x2f2e <ds18b20_readbit+0x134>
		__ticks = 1;
    2f24:	81 e0       	ldi	r24, 0x01	; 1
    2f26:	90 e0       	ldi	r25, 0x00	; 0
    2f28:	9f ab       	std	Y+55, r25	; 0x37
    2f2a:	8e ab       	std	Y+54, r24	; 0x36
    2f2c:	3f c0       	rjmp	.+126    	; 0x2fac <ds18b20_readbit+0x1b2>
	else if (__tmp > 65535)
    2f2e:	68 ad       	ldd	r22, Y+56	; 0x38
    2f30:	79 ad       	ldd	r23, Y+57	; 0x39
    2f32:	8a ad       	ldd	r24, Y+58	; 0x3a
    2f34:	9b ad       	ldd	r25, Y+59	; 0x3b
    2f36:	20 e0       	ldi	r18, 0x00	; 0
    2f38:	3f ef       	ldi	r19, 0xFF	; 255
    2f3a:	4f e7       	ldi	r20, 0x7F	; 127
    2f3c:	57 e4       	ldi	r21, 0x47	; 71
    2f3e:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    2f42:	18 16       	cp	r1, r24
    2f44:	4c f5       	brge	.+82     	; 0x2f98 <ds18b20_readbit+0x19e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f46:	6c ad       	ldd	r22, Y+60	; 0x3c
    2f48:	7d ad       	ldd	r23, Y+61	; 0x3d
    2f4a:	8e ad       	ldd	r24, Y+62	; 0x3e
    2f4c:	9f ad       	ldd	r25, Y+63	; 0x3f
    2f4e:	20 e0       	ldi	r18, 0x00	; 0
    2f50:	30 e0       	ldi	r19, 0x00	; 0
    2f52:	40 e2       	ldi	r20, 0x20	; 32
    2f54:	51 e4       	ldi	r21, 0x41	; 65
    2f56:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    2f5a:	dc 01       	movw	r26, r24
    2f5c:	cb 01       	movw	r24, r22
    2f5e:	bc 01       	movw	r22, r24
    2f60:	cd 01       	movw	r24, r26
    2f62:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    2f66:	dc 01       	movw	r26, r24
    2f68:	cb 01       	movw	r24, r22
    2f6a:	9f ab       	std	Y+55, r25	; 0x37
    2f6c:	8e ab       	std	Y+54, r24	; 0x36
    2f6e:	0f c0       	rjmp	.+30     	; 0x2f8e <ds18b20_readbit+0x194>
    2f70:	88 ec       	ldi	r24, 0xC8	; 200
    2f72:	90 e0       	ldi	r25, 0x00	; 0
    2f74:	9d ab       	std	Y+53, r25	; 0x35
    2f76:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2f78:	8c a9       	ldd	r24, Y+52	; 0x34
    2f7a:	9d a9       	ldd	r25, Y+53	; 0x35
    2f7c:	01 97       	sbiw	r24, 0x01	; 1
    2f7e:	f1 f7       	brne	.-4      	; 0x2f7c <ds18b20_readbit+0x182>
    2f80:	9d ab       	std	Y+53, r25	; 0x35
    2f82:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f84:	8e a9       	ldd	r24, Y+54	; 0x36
    2f86:	9f a9       	ldd	r25, Y+55	; 0x37
    2f88:	01 97       	sbiw	r24, 0x01	; 1
    2f8a:	9f ab       	std	Y+55, r25	; 0x37
    2f8c:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f8e:	8e a9       	ldd	r24, Y+54	; 0x36
    2f90:	9f a9       	ldd	r25, Y+55	; 0x37
    2f92:	00 97       	sbiw	r24, 0x00	; 0
    2f94:	69 f7       	brne	.-38     	; 0x2f70 <ds18b20_readbit+0x176>
    2f96:	2d c0       	rjmp	.+90     	; 0x2ff2 <ds18b20_readbit+0x1f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f98:	68 ad       	ldd	r22, Y+56	; 0x38
    2f9a:	79 ad       	ldd	r23, Y+57	; 0x39
    2f9c:	8a ad       	ldd	r24, Y+58	; 0x3a
    2f9e:	9b ad       	ldd	r25, Y+59	; 0x3b
    2fa0:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    2fa4:	dc 01       	movw	r26, r24
    2fa6:	cb 01       	movw	r24, r22
    2fa8:	9f ab       	std	Y+55, r25	; 0x37
    2faa:	8e ab       	std	Y+54, r24	; 0x36
    2fac:	8e a9       	ldd	r24, Y+54	; 0x36
    2fae:	9f a9       	ldd	r25, Y+55	; 0x37
    2fb0:	9b ab       	std	Y+51, r25	; 0x33
    2fb2:	8a ab       	std	Y+50, r24	; 0x32
    2fb4:	8a a9       	ldd	r24, Y+50	; 0x32
    2fb6:	9b a9       	ldd	r25, Y+51	; 0x33
    2fb8:	01 97       	sbiw	r24, 0x01	; 1
    2fba:	f1 f7       	brne	.-4      	; 0x2fb8 <ds18b20_readbit+0x1be>
    2fbc:	9b ab       	std	Y+51, r25	; 0x33
    2fbe:	8a ab       	std	Y+50, r24	; 0x32
    2fc0:	18 c0       	rjmp	.+48     	; 0x2ff2 <ds18b20_readbit+0x1f8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2fc2:	fe 01       	movw	r30, r28
    2fc4:	ef 5b       	subi	r30, 0xBF	; 191
    2fc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc8:	60 81       	ld	r22, Z
    2fca:	71 81       	ldd	r23, Z+1	; 0x01
    2fcc:	82 81       	ldd	r24, Z+2	; 0x02
    2fce:	93 81       	ldd	r25, Z+3	; 0x03
    2fd0:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    2fd4:	dc 01       	movw	r26, r24
    2fd6:	cb 01       	movw	r24, r22
    2fd8:	fe 01       	movw	r30, r28
    2fda:	e0 5c       	subi	r30, 0xC0	; 192
    2fdc:	ff 4f       	sbci	r31, 0xFF	; 255
    2fde:	80 83       	st	Z, r24
    2fe0:	fe 01       	movw	r30, r28
    2fe2:	e0 5c       	subi	r30, 0xC0	; 192
    2fe4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe6:	80 81       	ld	r24, Z
    2fe8:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2fea:	89 a9       	ldd	r24, Y+49	; 0x31
    2fec:	8a 95       	dec	r24
    2fee:	f1 f7       	brne	.-4      	; 0x2fec <ds18b20_readbit+0x1f2>
    2ff0:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(5);

	//release line and wait for 14uS
	DS18B20_DDR &= ~(1<<DS18B20_DQ); //input
    2ff2:	a4 e3       	ldi	r26, 0x34	; 52
    2ff4:	b0 e0       	ldi	r27, 0x00	; 0
    2ff6:	e4 e3       	ldi	r30, 0x34	; 52
    2ff8:	f0 e0       	ldi	r31, 0x00	; 0
    2ffa:	80 81       	ld	r24, Z
    2ffc:	8e 7f       	andi	r24, 0xFE	; 254
    2ffe:	8c 93       	st	X, r24
    3000:	80 e0       	ldi	r24, 0x00	; 0
    3002:	90 e0       	ldi	r25, 0x00	; 0
    3004:	a0 ea       	ldi	r26, 0xA0	; 160
    3006:	b1 e4       	ldi	r27, 0x41	; 65
    3008:	8d a7       	std	Y+45, r24	; 0x2d
    300a:	9e a7       	std	Y+46, r25	; 0x2e
    300c:	af a7       	std	Y+47, r26	; 0x2f
    300e:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3010:	6d a5       	ldd	r22, Y+45	; 0x2d
    3012:	7e a5       	ldd	r23, Y+46	; 0x2e
    3014:	8f a5       	ldd	r24, Y+47	; 0x2f
    3016:	98 a9       	ldd	r25, Y+48	; 0x30
    3018:	2b ea       	ldi	r18, 0xAB	; 171
    301a:	3a ea       	ldi	r19, 0xAA	; 170
    301c:	4a e2       	ldi	r20, 0x2A	; 42
    301e:	50 e4       	ldi	r21, 0x40	; 64
    3020:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    3024:	dc 01       	movw	r26, r24
    3026:	cb 01       	movw	r24, r22
    3028:	89 a7       	std	Y+41, r24	; 0x29
    302a:	9a a7       	std	Y+42, r25	; 0x2a
    302c:	ab a7       	std	Y+43, r26	; 0x2b
    302e:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    3030:	69 a5       	ldd	r22, Y+41	; 0x29
    3032:	7a a5       	ldd	r23, Y+42	; 0x2a
    3034:	8b a5       	ldd	r24, Y+43	; 0x2b
    3036:	9c a5       	ldd	r25, Y+44	; 0x2c
    3038:	20 e0       	ldi	r18, 0x00	; 0
    303a:	30 e0       	ldi	r19, 0x00	; 0
    303c:	40 e8       	ldi	r20, 0x80	; 128
    303e:	5f e3       	ldi	r21, 0x3F	; 63
    3040:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    3044:	88 23       	and	r24, r24
    3046:	1c f4       	brge	.+6      	; 0x304e <ds18b20_readbit+0x254>
		__ticks = 1;
    3048:	81 e0       	ldi	r24, 0x01	; 1
    304a:	88 a7       	std	Y+40, r24	; 0x28
    304c:	91 c0       	rjmp	.+290    	; 0x3170 <ds18b20_readbit+0x376>
	else if (__tmp > 255)
    304e:	69 a5       	ldd	r22, Y+41	; 0x29
    3050:	7a a5       	ldd	r23, Y+42	; 0x2a
    3052:	8b a5       	ldd	r24, Y+43	; 0x2b
    3054:	9c a5       	ldd	r25, Y+44	; 0x2c
    3056:	20 e0       	ldi	r18, 0x00	; 0
    3058:	30 e0       	ldi	r19, 0x00	; 0
    305a:	4f e7       	ldi	r20, 0x7F	; 127
    305c:	53 e4       	ldi	r21, 0x43	; 67
    305e:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    3062:	18 16       	cp	r1, r24
    3064:	0c f0       	brlt	.+2      	; 0x3068 <ds18b20_readbit+0x26e>
    3066:	7b c0       	rjmp	.+246    	; 0x315e <ds18b20_readbit+0x364>
	{
		_delay_ms(__us / 1000.0);
    3068:	6d a5       	ldd	r22, Y+45	; 0x2d
    306a:	7e a5       	ldd	r23, Y+46	; 0x2e
    306c:	8f a5       	ldd	r24, Y+47	; 0x2f
    306e:	98 a9       	ldd	r25, Y+48	; 0x30
    3070:	20 e0       	ldi	r18, 0x00	; 0
    3072:	30 e0       	ldi	r19, 0x00	; 0
    3074:	4a e7       	ldi	r20, 0x7A	; 122
    3076:	54 e4       	ldi	r21, 0x44	; 68
    3078:	0e 94 8e 03 	call	0x71c	; 0x71c <__divsf3>
    307c:	dc 01       	movw	r26, r24
    307e:	cb 01       	movw	r24, r22
    3080:	8c a3       	std	Y+36, r24	; 0x24
    3082:	9d a3       	std	Y+37, r25	; 0x25
    3084:	ae a3       	std	Y+38, r26	; 0x26
    3086:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3088:	6c a1       	ldd	r22, Y+36	; 0x24
    308a:	7d a1       	ldd	r23, Y+37	; 0x25
    308c:	8e a1       	ldd	r24, Y+38	; 0x26
    308e:	9f a1       	ldd	r25, Y+39	; 0x27
    3090:	20 e0       	ldi	r18, 0x00	; 0
    3092:	30 e0       	ldi	r19, 0x00	; 0
    3094:	4a ef       	ldi	r20, 0xFA	; 250
    3096:	54 e4       	ldi	r21, 0x44	; 68
    3098:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    309c:	dc 01       	movw	r26, r24
    309e:	cb 01       	movw	r24, r22
    30a0:	88 a3       	std	Y+32, r24	; 0x20
    30a2:	99 a3       	std	Y+33, r25	; 0x21
    30a4:	aa a3       	std	Y+34, r26	; 0x22
    30a6:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    30a8:	68 a1       	ldd	r22, Y+32	; 0x20
    30aa:	79 a1       	ldd	r23, Y+33	; 0x21
    30ac:	8a a1       	ldd	r24, Y+34	; 0x22
    30ae:	9b a1       	ldd	r25, Y+35	; 0x23
    30b0:	20 e0       	ldi	r18, 0x00	; 0
    30b2:	30 e0       	ldi	r19, 0x00	; 0
    30b4:	40 e8       	ldi	r20, 0x80	; 128
    30b6:	5f e3       	ldi	r21, 0x3F	; 63
    30b8:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    30bc:	88 23       	and	r24, r24
    30be:	2c f4       	brge	.+10     	; 0x30ca <ds18b20_readbit+0x2d0>
		__ticks = 1;
    30c0:	81 e0       	ldi	r24, 0x01	; 1
    30c2:	90 e0       	ldi	r25, 0x00	; 0
    30c4:	9f 8f       	std	Y+31, r25	; 0x1f
    30c6:	8e 8f       	std	Y+30, r24	; 0x1e
    30c8:	3f c0       	rjmp	.+126    	; 0x3148 <ds18b20_readbit+0x34e>
	else if (__tmp > 65535)
    30ca:	68 a1       	ldd	r22, Y+32	; 0x20
    30cc:	79 a1       	ldd	r23, Y+33	; 0x21
    30ce:	8a a1       	ldd	r24, Y+34	; 0x22
    30d0:	9b a1       	ldd	r25, Y+35	; 0x23
    30d2:	20 e0       	ldi	r18, 0x00	; 0
    30d4:	3f ef       	ldi	r19, 0xFF	; 255
    30d6:	4f e7       	ldi	r20, 0x7F	; 127
    30d8:	57 e4       	ldi	r21, 0x47	; 71
    30da:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    30de:	18 16       	cp	r1, r24
    30e0:	4c f5       	brge	.+82     	; 0x3134 <ds18b20_readbit+0x33a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30e2:	6c a1       	ldd	r22, Y+36	; 0x24
    30e4:	7d a1       	ldd	r23, Y+37	; 0x25
    30e6:	8e a1       	ldd	r24, Y+38	; 0x26
    30e8:	9f a1       	ldd	r25, Y+39	; 0x27
    30ea:	20 e0       	ldi	r18, 0x00	; 0
    30ec:	30 e0       	ldi	r19, 0x00	; 0
    30ee:	40 e2       	ldi	r20, 0x20	; 32
    30f0:	51 e4       	ldi	r21, 0x41	; 65
    30f2:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    30f6:	dc 01       	movw	r26, r24
    30f8:	cb 01       	movw	r24, r22
    30fa:	bc 01       	movw	r22, r24
    30fc:	cd 01       	movw	r24, r26
    30fe:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    3102:	dc 01       	movw	r26, r24
    3104:	cb 01       	movw	r24, r22
    3106:	9f 8f       	std	Y+31, r25	; 0x1f
    3108:	8e 8f       	std	Y+30, r24	; 0x1e
    310a:	0f c0       	rjmp	.+30     	; 0x312a <ds18b20_readbit+0x330>
    310c:	88 ec       	ldi	r24, 0xC8	; 200
    310e:	90 e0       	ldi	r25, 0x00	; 0
    3110:	9d 8f       	std	Y+29, r25	; 0x1d
    3112:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3114:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3116:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3118:	01 97       	sbiw	r24, 0x01	; 1
    311a:	f1 f7       	brne	.-4      	; 0x3118 <ds18b20_readbit+0x31e>
    311c:	9d 8f       	std	Y+29, r25	; 0x1d
    311e:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3120:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3122:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3124:	01 97       	sbiw	r24, 0x01	; 1
    3126:	9f 8f       	std	Y+31, r25	; 0x1f
    3128:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    312a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    312c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    312e:	00 97       	sbiw	r24, 0x00	; 0
    3130:	69 f7       	brne	.-38     	; 0x310c <ds18b20_readbit+0x312>
    3132:	24 c0       	rjmp	.+72     	; 0x317c <ds18b20_readbit+0x382>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3134:	68 a1       	ldd	r22, Y+32	; 0x20
    3136:	79 a1       	ldd	r23, Y+33	; 0x21
    3138:	8a a1       	ldd	r24, Y+34	; 0x22
    313a:	9b a1       	ldd	r25, Y+35	; 0x23
    313c:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    3140:	dc 01       	movw	r26, r24
    3142:	cb 01       	movw	r24, r22
    3144:	9f 8f       	std	Y+31, r25	; 0x1f
    3146:	8e 8f       	std	Y+30, r24	; 0x1e
    3148:	8e 8d       	ldd	r24, Y+30	; 0x1e
    314a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    314c:	9b 8f       	std	Y+27, r25	; 0x1b
    314e:	8a 8f       	std	Y+26, r24	; 0x1a
    3150:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3152:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3154:	01 97       	sbiw	r24, 0x01	; 1
    3156:	f1 f7       	brne	.-4      	; 0x3154 <ds18b20_readbit+0x35a>
    3158:	9b 8f       	std	Y+27, r25	; 0x1b
    315a:	8a 8f       	std	Y+26, r24	; 0x1a
    315c:	0f c0       	rjmp	.+30     	; 0x317c <ds18b20_readbit+0x382>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    315e:	69 a5       	ldd	r22, Y+41	; 0x29
    3160:	7a a5       	ldd	r23, Y+42	; 0x2a
    3162:	8b a5       	ldd	r24, Y+43	; 0x2b
    3164:	9c a5       	ldd	r25, Y+44	; 0x2c
    3166:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    316a:	dc 01       	movw	r26, r24
    316c:	cb 01       	movw	r24, r22
    316e:	88 a7       	std	Y+40, r24	; 0x28
    3170:	88 a5       	ldd	r24, Y+40	; 0x28
    3172:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3174:	89 8d       	ldd	r24, Y+25	; 0x19
    3176:	8a 95       	dec	r24
    3178:	f1 f7       	brne	.-4      	; 0x3176 <ds18b20_readbit+0x37c>
    317a:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(20);

	//read the value
	if(DS18B20_PIN & (1<<DS18B20_DQ))
    317c:	e3 e3       	ldi	r30, 0x33	; 51
    317e:	f0 e0       	ldi	r31, 0x00	; 0
    3180:	80 81       	ld	r24, Z
    3182:	88 2f       	mov	r24, r24
    3184:	90 e0       	ldi	r25, 0x00	; 0
    3186:	81 70       	andi	r24, 0x01	; 1
    3188:	90 70       	andi	r25, 0x00	; 0
    318a:	88 23       	and	r24, r24
    318c:	29 f0       	breq	.+10     	; 0x3198 <ds18b20_readbit+0x39e>
		bit=1;
    318e:	fe 01       	movw	r30, r28
    3190:	e7 5b       	subi	r30, 0xB7	; 183
    3192:	ff 4f       	sbci	r31, 0xFF	; 255
    3194:	81 e0       	ldi	r24, 0x01	; 1
    3196:	80 83       	st	Z, r24
    3198:	80 e0       	ldi	r24, 0x00	; 0
    319a:	90 e0       	ldi	r25, 0x00	; 0
    319c:	a0 e2       	ldi	r26, 0x20	; 32
    319e:	b2 e4       	ldi	r27, 0x42	; 66
    31a0:	8d 8b       	std	Y+21, r24	; 0x15
    31a2:	9e 8b       	std	Y+22, r25	; 0x16
    31a4:	af 8b       	std	Y+23, r26	; 0x17
    31a6:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    31a8:	6d 89       	ldd	r22, Y+21	; 0x15
    31aa:	7e 89       	ldd	r23, Y+22	; 0x16
    31ac:	8f 89       	ldd	r24, Y+23	; 0x17
    31ae:	98 8d       	ldd	r25, Y+24	; 0x18
    31b0:	2b ea       	ldi	r18, 0xAB	; 171
    31b2:	3a ea       	ldi	r19, 0xAA	; 170
    31b4:	4a e2       	ldi	r20, 0x2A	; 42
    31b6:	50 e4       	ldi	r21, 0x40	; 64
    31b8:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    31bc:	dc 01       	movw	r26, r24
    31be:	cb 01       	movw	r24, r22
    31c0:	89 8b       	std	Y+17, r24	; 0x11
    31c2:	9a 8b       	std	Y+18, r25	; 0x12
    31c4:	ab 8b       	std	Y+19, r26	; 0x13
    31c6:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    31c8:	69 89       	ldd	r22, Y+17	; 0x11
    31ca:	7a 89       	ldd	r23, Y+18	; 0x12
    31cc:	8b 89       	ldd	r24, Y+19	; 0x13
    31ce:	9c 89       	ldd	r25, Y+20	; 0x14
    31d0:	20 e0       	ldi	r18, 0x00	; 0
    31d2:	30 e0       	ldi	r19, 0x00	; 0
    31d4:	40 e8       	ldi	r20, 0x80	; 128
    31d6:	5f e3       	ldi	r21, 0x3F	; 63
    31d8:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    31dc:	88 23       	and	r24, r24
    31de:	1c f4       	brge	.+6      	; 0x31e6 <ds18b20_readbit+0x3ec>
		__ticks = 1;
    31e0:	81 e0       	ldi	r24, 0x01	; 1
    31e2:	88 8b       	std	Y+16, r24	; 0x10
    31e4:	91 c0       	rjmp	.+290    	; 0x3308 <ds18b20_readbit+0x50e>
	else if (__tmp > 255)
    31e6:	69 89       	ldd	r22, Y+17	; 0x11
    31e8:	7a 89       	ldd	r23, Y+18	; 0x12
    31ea:	8b 89       	ldd	r24, Y+19	; 0x13
    31ec:	9c 89       	ldd	r25, Y+20	; 0x14
    31ee:	20 e0       	ldi	r18, 0x00	; 0
    31f0:	30 e0       	ldi	r19, 0x00	; 0
    31f2:	4f e7       	ldi	r20, 0x7F	; 127
    31f4:	53 e4       	ldi	r21, 0x43	; 67
    31f6:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    31fa:	18 16       	cp	r1, r24
    31fc:	0c f0       	brlt	.+2      	; 0x3200 <ds18b20_readbit+0x406>
    31fe:	7b c0       	rjmp	.+246    	; 0x32f6 <ds18b20_readbit+0x4fc>
	{
		_delay_ms(__us / 1000.0);
    3200:	6d 89       	ldd	r22, Y+21	; 0x15
    3202:	7e 89       	ldd	r23, Y+22	; 0x16
    3204:	8f 89       	ldd	r24, Y+23	; 0x17
    3206:	98 8d       	ldd	r25, Y+24	; 0x18
    3208:	20 e0       	ldi	r18, 0x00	; 0
    320a:	30 e0       	ldi	r19, 0x00	; 0
    320c:	4a e7       	ldi	r20, 0x7A	; 122
    320e:	54 e4       	ldi	r21, 0x44	; 68
    3210:	0e 94 8e 03 	call	0x71c	; 0x71c <__divsf3>
    3214:	dc 01       	movw	r26, r24
    3216:	cb 01       	movw	r24, r22
    3218:	8c 87       	std	Y+12, r24	; 0x0c
    321a:	9d 87       	std	Y+13, r25	; 0x0d
    321c:	ae 87       	std	Y+14, r26	; 0x0e
    321e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3220:	6c 85       	ldd	r22, Y+12	; 0x0c
    3222:	7d 85       	ldd	r23, Y+13	; 0x0d
    3224:	8e 85       	ldd	r24, Y+14	; 0x0e
    3226:	9f 85       	ldd	r25, Y+15	; 0x0f
    3228:	20 e0       	ldi	r18, 0x00	; 0
    322a:	30 e0       	ldi	r19, 0x00	; 0
    322c:	4a ef       	ldi	r20, 0xFA	; 250
    322e:	54 e4       	ldi	r21, 0x44	; 68
    3230:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    3234:	dc 01       	movw	r26, r24
    3236:	cb 01       	movw	r24, r22
    3238:	88 87       	std	Y+8, r24	; 0x08
    323a:	99 87       	std	Y+9, r25	; 0x09
    323c:	aa 87       	std	Y+10, r26	; 0x0a
    323e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3240:	68 85       	ldd	r22, Y+8	; 0x08
    3242:	79 85       	ldd	r23, Y+9	; 0x09
    3244:	8a 85       	ldd	r24, Y+10	; 0x0a
    3246:	9b 85       	ldd	r25, Y+11	; 0x0b
    3248:	20 e0       	ldi	r18, 0x00	; 0
    324a:	30 e0       	ldi	r19, 0x00	; 0
    324c:	40 e8       	ldi	r20, 0x80	; 128
    324e:	5f e3       	ldi	r21, 0x3F	; 63
    3250:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    3254:	88 23       	and	r24, r24
    3256:	2c f4       	brge	.+10     	; 0x3262 <ds18b20_readbit+0x468>
		__ticks = 1;
    3258:	81 e0       	ldi	r24, 0x01	; 1
    325a:	90 e0       	ldi	r25, 0x00	; 0
    325c:	9f 83       	std	Y+7, r25	; 0x07
    325e:	8e 83       	std	Y+6, r24	; 0x06
    3260:	3f c0       	rjmp	.+126    	; 0x32e0 <ds18b20_readbit+0x4e6>
	else if (__tmp > 65535)
    3262:	68 85       	ldd	r22, Y+8	; 0x08
    3264:	79 85       	ldd	r23, Y+9	; 0x09
    3266:	8a 85       	ldd	r24, Y+10	; 0x0a
    3268:	9b 85       	ldd	r25, Y+11	; 0x0b
    326a:	20 e0       	ldi	r18, 0x00	; 0
    326c:	3f ef       	ldi	r19, 0xFF	; 255
    326e:	4f e7       	ldi	r20, 0x7F	; 127
    3270:	57 e4       	ldi	r21, 0x47	; 71
    3272:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    3276:	18 16       	cp	r1, r24
    3278:	4c f5       	brge	.+82     	; 0x32cc <ds18b20_readbit+0x4d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    327a:	6c 85       	ldd	r22, Y+12	; 0x0c
    327c:	7d 85       	ldd	r23, Y+13	; 0x0d
    327e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3280:	9f 85       	ldd	r25, Y+15	; 0x0f
    3282:	20 e0       	ldi	r18, 0x00	; 0
    3284:	30 e0       	ldi	r19, 0x00	; 0
    3286:	40 e2       	ldi	r20, 0x20	; 32
    3288:	51 e4       	ldi	r21, 0x41	; 65
    328a:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    328e:	dc 01       	movw	r26, r24
    3290:	cb 01       	movw	r24, r22
    3292:	bc 01       	movw	r22, r24
    3294:	cd 01       	movw	r24, r26
    3296:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    329a:	dc 01       	movw	r26, r24
    329c:	cb 01       	movw	r24, r22
    329e:	9f 83       	std	Y+7, r25	; 0x07
    32a0:	8e 83       	std	Y+6, r24	; 0x06
    32a2:	0f c0       	rjmp	.+30     	; 0x32c2 <ds18b20_readbit+0x4c8>
    32a4:	88 ec       	ldi	r24, 0xC8	; 200
    32a6:	90 e0       	ldi	r25, 0x00	; 0
    32a8:	9d 83       	std	Y+5, r25	; 0x05
    32aa:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    32ac:	8c 81       	ldd	r24, Y+4	; 0x04
    32ae:	9d 81       	ldd	r25, Y+5	; 0x05
    32b0:	01 97       	sbiw	r24, 0x01	; 1
    32b2:	f1 f7       	brne	.-4      	; 0x32b0 <ds18b20_readbit+0x4b6>
    32b4:	9d 83       	std	Y+5, r25	; 0x05
    32b6:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32b8:	8e 81       	ldd	r24, Y+6	; 0x06
    32ba:	9f 81       	ldd	r25, Y+7	; 0x07
    32bc:	01 97       	sbiw	r24, 0x01	; 1
    32be:	9f 83       	std	Y+7, r25	; 0x07
    32c0:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32c2:	8e 81       	ldd	r24, Y+6	; 0x06
    32c4:	9f 81       	ldd	r25, Y+7	; 0x07
    32c6:	00 97       	sbiw	r24, 0x00	; 0
    32c8:	69 f7       	brne	.-38     	; 0x32a4 <ds18b20_readbit+0x4aa>
    32ca:	24 c0       	rjmp	.+72     	; 0x3314 <ds18b20_readbit+0x51a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32cc:	68 85       	ldd	r22, Y+8	; 0x08
    32ce:	79 85       	ldd	r23, Y+9	; 0x09
    32d0:	8a 85       	ldd	r24, Y+10	; 0x0a
    32d2:	9b 85       	ldd	r25, Y+11	; 0x0b
    32d4:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    32d8:	dc 01       	movw	r26, r24
    32da:	cb 01       	movw	r24, r22
    32dc:	9f 83       	std	Y+7, r25	; 0x07
    32de:	8e 83       	std	Y+6, r24	; 0x06
    32e0:	8e 81       	ldd	r24, Y+6	; 0x06
    32e2:	9f 81       	ldd	r25, Y+7	; 0x07
    32e4:	9b 83       	std	Y+3, r25	; 0x03
    32e6:	8a 83       	std	Y+2, r24	; 0x02
    32e8:	8a 81       	ldd	r24, Y+2	; 0x02
    32ea:	9b 81       	ldd	r25, Y+3	; 0x03
    32ec:	01 97       	sbiw	r24, 0x01	; 1
    32ee:	f1 f7       	brne	.-4      	; 0x32ec <ds18b20_readbit+0x4f2>
    32f0:	9b 83       	std	Y+3, r25	; 0x03
    32f2:	8a 83       	std	Y+2, r24	; 0x02
    32f4:	0f c0       	rjmp	.+30     	; 0x3314 <ds18b20_readbit+0x51a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    32f6:	69 89       	ldd	r22, Y+17	; 0x11
    32f8:	7a 89       	ldd	r23, Y+18	; 0x12
    32fa:	8b 89       	ldd	r24, Y+19	; 0x13
    32fc:	9c 89       	ldd	r25, Y+20	; 0x14
    32fe:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    3302:	dc 01       	movw	r26, r24
    3304:	cb 01       	movw	r24, r22
    3306:	88 8b       	std	Y+16, r24	; 0x10
    3308:	88 89       	ldd	r24, Y+16	; 0x10
    330a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    330c:	89 81       	ldd	r24, Y+1	; 0x01
    330e:	8a 95       	dec	r24
    3310:	f1 f7       	brne	.-4      	; 0x330e <ds18b20_readbit+0x514>
    3312:	89 83       	std	Y+1, r24	; 0x01

	//wait 45uS and return read value
	_delay_us(40);
	return bit;
    3314:	fe 01       	movw	r30, r28
    3316:	e7 5b       	subi	r30, 0xB7	; 183
    3318:	ff 4f       	sbci	r31, 0xFF	; 255
    331a:	80 81       	ld	r24, Z
}
    331c:	c7 5b       	subi	r28, 0xB7	; 183
    331e:	df 4f       	sbci	r29, 0xFF	; 255
    3320:	0f b6       	in	r0, 0x3f	; 63
    3322:	f8 94       	cli
    3324:	de bf       	out	0x3e, r29	; 62
    3326:	0f be       	out	0x3f, r0	; 63
    3328:	cd bf       	out	0x3d, r28	; 61
    332a:	cf 91       	pop	r28
    332c:	df 91       	pop	r29
    332e:	1f 91       	pop	r17
    3330:	0f 91       	pop	r16
    3332:	08 95       	ret

00003334 <ds18b20_writebyte>:

/*
 * write one byte
 */
void ds18b20_writebyte(uint8_t byte){
    3334:	df 93       	push	r29
    3336:	cf 93       	push	r28
    3338:	00 d0       	rcall	.+0      	; 0x333a <ds18b20_writebyte+0x6>
    333a:	0f 92       	push	r0
    333c:	cd b7       	in	r28, 0x3d	; 61
    333e:	de b7       	in	r29, 0x3e	; 62
    3340:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i=8;
    3342:	88 e0       	ldi	r24, 0x08	; 8
    3344:	89 83       	std	Y+1, r24	; 0x01
    3346:	07 c0       	rjmp	.+14     	; 0x3356 <ds18b20_writebyte+0x22>
	while(i--){
		ds18b20_writebit(byte&1);
    3348:	8a 81       	ldd	r24, Y+2	; 0x02
    334a:	81 70       	andi	r24, 0x01	; 1
    334c:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <ds18b20_writebit>
		byte >>= 1;
    3350:	8a 81       	ldd	r24, Y+2	; 0x02
    3352:	86 95       	lsr	r24
    3354:	8a 83       	std	Y+2, r24	; 0x02
/*
 * write one byte
 */
void ds18b20_writebyte(uint8_t byte){
	uint8_t i=8;
	while(i--){
    3356:	89 81       	ldd	r24, Y+1	; 0x01
    3358:	8b 83       	std	Y+3, r24	; 0x03
    335a:	8b 81       	ldd	r24, Y+3	; 0x03
    335c:	88 23       	and	r24, r24
    335e:	11 f0       	breq	.+4      	; 0x3364 <ds18b20_writebyte+0x30>
    3360:	81 e0       	ldi	r24, 0x01	; 1
    3362:	8b 83       	std	Y+3, r24	; 0x03
    3364:	8b 81       	ldd	r24, Y+3	; 0x03
    3366:	99 81       	ldd	r25, Y+1	; 0x01
    3368:	91 50       	subi	r25, 0x01	; 1
    336a:	99 83       	std	Y+1, r25	; 0x01
    336c:	88 23       	and	r24, r24
    336e:	61 f7       	brne	.-40     	; 0x3348 <ds18b20_writebyte+0x14>
		ds18b20_writebit(byte&1);
		byte >>= 1;
	}
}
    3370:	0f 90       	pop	r0
    3372:	0f 90       	pop	r0
    3374:	0f 90       	pop	r0
    3376:	cf 91       	pop	r28
    3378:	df 91       	pop	r29
    337a:	08 95       	ret

0000337c <ds18b20_readbyte>:

/*
 * read one byte
 */
uint8_t ds18b20_readbyte(void){
    337c:	df 93       	push	r29
    337e:	cf 93       	push	r28
    3380:	00 d0       	rcall	.+0      	; 0x3382 <ds18b20_readbyte+0x6>
    3382:	0f 92       	push	r0
    3384:	cd b7       	in	r28, 0x3d	; 61
    3386:	de b7       	in	r29, 0x3e	; 62
	uint8_t i=8, n=0;
    3388:	88 e0       	ldi	r24, 0x08	; 8
    338a:	8a 83       	std	Y+2, r24	; 0x02
    338c:	19 82       	std	Y+1, r1	; 0x01
    338e:	10 c0       	rjmp	.+32     	; 0x33b0 <ds18b20_readbyte+0x34>
	while(i--){
		n >>= 1;
    3390:	89 81       	ldd	r24, Y+1	; 0x01
    3392:	86 95       	lsr	r24
    3394:	89 83       	std	Y+1, r24	; 0x01
		n |= (ds18b20_readbit()<<7);
    3396:	0e 94 fd 16 	call	0x2dfa	; 0x2dfa <ds18b20_readbit>
    339a:	88 2f       	mov	r24, r24
    339c:	90 e0       	ldi	r25, 0x00	; 0
    339e:	96 95       	lsr	r25
    33a0:	98 2f       	mov	r25, r24
    33a2:	88 27       	eor	r24, r24
    33a4:	97 95       	ror	r25
    33a6:	87 95       	ror	r24
    33a8:	98 2f       	mov	r25, r24
    33aa:	89 81       	ldd	r24, Y+1	; 0x01
    33ac:	89 2b       	or	r24, r25
    33ae:	89 83       	std	Y+1, r24	; 0x01
/*
 * read one byte
 */
uint8_t ds18b20_readbyte(void){
	uint8_t i=8, n=0;
	while(i--){
    33b0:	8a 81       	ldd	r24, Y+2	; 0x02
    33b2:	8b 83       	std	Y+3, r24	; 0x03
    33b4:	8b 81       	ldd	r24, Y+3	; 0x03
    33b6:	88 23       	and	r24, r24
    33b8:	11 f0       	breq	.+4      	; 0x33be <ds18b20_readbyte+0x42>
    33ba:	81 e0       	ldi	r24, 0x01	; 1
    33bc:	8b 83       	std	Y+3, r24	; 0x03
    33be:	8b 81       	ldd	r24, Y+3	; 0x03
    33c0:	9a 81       	ldd	r25, Y+2	; 0x02
    33c2:	91 50       	subi	r25, 0x01	; 1
    33c4:	9a 83       	std	Y+2, r25	; 0x02
    33c6:	88 23       	and	r24, r24
    33c8:	19 f7       	brne	.-58     	; 0x3390 <ds18b20_readbyte+0x14>
		n >>= 1;
		n |= (ds18b20_readbit()<<7);
	}
	return n;
    33ca:	89 81       	ldd	r24, Y+1	; 0x01
}
    33cc:	0f 90       	pop	r0
    33ce:	0f 90       	pop	r0
    33d0:	0f 90       	pop	r0
    33d2:	cf 91       	pop	r28
    33d4:	df 91       	pop	r29
    33d6:	08 95       	ret

000033d8 <ds18b20_gettemp>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/


double ds18b20_gettemp() {
    33d8:	df 93       	push	r29
    33da:	cf 93       	push	r28
    33dc:	00 d0       	rcall	.+0      	; 0x33de <ds18b20_gettemp+0x6>
    33de:	00 d0       	rcall	.+0      	; 0x33e0 <ds18b20_gettemp+0x8>
    33e0:	00 d0       	rcall	.+0      	; 0x33e2 <ds18b20_gettemp+0xa>
    33e2:	cd b7       	in	r28, 0x3d	; 61
    33e4:	de b7       	in	r29, 0x3e	; 62
	uint8_t  temperature_l;
    uint8_t temperature_h;
	double retd = 0;
    33e6:	80 e0       	ldi	r24, 0x00	; 0
    33e8:	90 e0       	ldi	r25, 0x00	; 0
    33ea:	a0 e0       	ldi	r26, 0x00	; 0
    33ec:	b0 e0       	ldi	r27, 0x00	; 0
    33ee:	89 83       	std	Y+1, r24	; 0x01
    33f0:	9a 83       	std	Y+2, r25	; 0x02
    33f2:	ab 83       	std	Y+3, r26	; 0x03
    33f4:	bc 83       	std	Y+4, r27	; 0x04

	#if DS18B20_STOPINTERRUPTONREAD == 1
	cli();
    33f6:	f8 94       	cli
	#endif

	ds18b20_reset(); //reset
    33f8:	0e 94 bb 12 	call	0x2576	; 0x2576 <ds18b20_reset>
	ds18b20_writebyte(DS18B20_CMD_SKIPROM);
    33fc:	8c ec       	ldi	r24, 0xCC	; 204
    33fe:	0e 94 9a 19 	call	0x3334	; 0x3334 <ds18b20_writebyte>
	ds18b20_writebyte(DS18B20_CMD_CONVERTTEMP); //start temperature conversion
    3402:	84 e4       	ldi	r24, 0x44	; 68
    3404:	0e 94 9a 19 	call	0x3334	; 0x3334 <ds18b20_writebyte>

	while(!ds18b20_readbit()); //wait until conversion is complete
    3408:	0e 94 fd 16 	call	0x2dfa	; 0x2dfa <ds18b20_readbit>
    340c:	88 23       	and	r24, r24
    340e:	e1 f3       	breq	.-8      	; 0x3408 <ds18b20_gettemp+0x30>

	ds18b20_reset(); //reset
    3410:	0e 94 bb 12 	call	0x2576	; 0x2576 <ds18b20_reset>
	ds18b20_writebyte(DS18B20_CMD_SKIPROM); //skip ROM
    3414:	8c ec       	ldi	r24, 0xCC	; 204
    3416:	0e 94 9a 19 	call	0x3334	; 0x3334 <ds18b20_writebyte>
	ds18b20_writebyte(DS18B20_CMD_RSCRATCHPAD); //read scratchpad
    341a:	8e eb       	ldi	r24, 0xBE	; 190
    341c:	0e 94 9a 19 	call	0x3334	; 0x3334 <ds18b20_writebyte>

	//read 2 byte from scratchpad
	temperature_l = ds18b20_readbyte();
    3420:	0e 94 be 19 	call	0x337c	; 0x337c <ds18b20_readbyte>
    3424:	8e 83       	std	Y+6, r24	; 0x06
	temperature_h = ds18b20_readbyte();
    3426:	0e 94 be 19 	call	0x337c	; 0x337c <ds18b20_readbyte>
    342a:	8d 83       	std	Y+5, r24	; 0x05
//
	#if DS18B20_STOPINTERRUPTONREAD == 1
	sei();
    342c:	78 94       	sei
	#endif

	//convert the 12 bit value obtained
	retd = ( ( temperature_h << 8 ) + temperature_l ) *0.0625;
    342e:	8d 81       	ldd	r24, Y+5	; 0x05
    3430:	88 2f       	mov	r24, r24
    3432:	90 e0       	ldi	r25, 0x00	; 0
    3434:	38 2f       	mov	r19, r24
    3436:	22 27       	eor	r18, r18
    3438:	8e 81       	ldd	r24, Y+6	; 0x06
    343a:	88 2f       	mov	r24, r24
    343c:	90 e0       	ldi	r25, 0x00	; 0
    343e:	82 0f       	add	r24, r18
    3440:	93 1f       	adc	r25, r19
    3442:	aa 27       	eor	r26, r26
    3444:	97 fd       	sbrc	r25, 7
    3446:	a0 95       	com	r26
    3448:	ba 2f       	mov	r27, r26
    344a:	bc 01       	movw	r22, r24
    344c:	cd 01       	movw	r24, r26
    344e:	0e 94 ca 04 	call	0x994	; 0x994 <__floatsisf>
    3452:	dc 01       	movw	r26, r24
    3454:	cb 01       	movw	r24, r22
    3456:	bc 01       	movw	r22, r24
    3458:	cd 01       	movw	r24, r26
    345a:	20 e0       	ldi	r18, 0x00	; 0
    345c:	30 e0       	ldi	r19, 0x00	; 0
    345e:	40 e8       	ldi	r20, 0x80	; 128
    3460:	5d e3       	ldi	r21, 0x3D	; 61
    3462:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    3466:	dc 01       	movw	r26, r24
    3468:	cb 01       	movw	r24, r22
    346a:	89 83       	std	Y+1, r24	; 0x01
    346c:	9a 83       	std	Y+2, r25	; 0x02
    346e:	ab 83       	std	Y+3, r26	; 0x03
    3470:	bc 83       	std	Y+4, r27	; 0x04

	return retd;
    3472:	89 81       	ldd	r24, Y+1	; 0x01
    3474:	9a 81       	ldd	r25, Y+2	; 0x02
    3476:	ab 81       	ldd	r26, Y+3	; 0x03
    3478:	bc 81       	ldd	r27, Y+4	; 0x04
}
    347a:	bc 01       	movw	r22, r24
    347c:	cd 01       	movw	r24, r26
    347e:	26 96       	adiw	r28, 0x06	; 6
    3480:	0f b6       	in	r0, 0x3f	; 63
    3482:	f8 94       	cli
    3484:	de bf       	out	0x3e, r29	; 62
    3486:	0f be       	out	0x3f, r0	; 63
    3488:	cd bf       	out	0x3d, r28	; 61
    348a:	cf 91       	pop	r28
    348c:	df 91       	pop	r29
    348e:	08 95       	ret

00003490 <main>:

#include "LCD.h"
#include "DS18B20.h"


int main(void){
    3490:	df 93       	push	r29
    3492:	cf 93       	push	r28
    3494:	cd b7       	in	r28, 0x3d	; 61
    3496:	de b7       	in	r29, 0x3e	; 62
    3498:	62 97       	sbiw	r28, 0x12	; 18
    349a:	0f b6       	in	r0, 0x3f	; 63
    349c:	f8 94       	cli
    349e:	de bf       	out	0x3e, r29	; 62
    34a0:	0f be       	out	0x3f, r0	; 63
    34a2:	cd bf       	out	0x3d, r28	; 61

	LCD_init();
    34a4:	0e 94 71 07 	call	0xee2	; 0xee2 <LCD_init>
	double  temp;

	while(1){
    LCD_gotoRowColumn(1,1);
    34a8:	81 e0       	ldi	r24, 0x01	; 1
    34aa:	61 e0       	ldi	r22, 0x01	; 1
    34ac:	0e 94 54 11 	call	0x22a8	; 0x22a8 <LCD_gotoRowColumn>
    LCD_print_str("temperature=");
    34b0:	80 e6       	ldi	r24, 0x60	; 96
    34b2:	90 e0       	ldi	r25, 0x00	; 0
    34b4:	0e 94 40 12 	call	0x2480	; 0x2480 <LCD_print_str>
    temp=ds18b20_gettemp();
    34b8:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <ds18b20_gettemp>
    34bc:	dc 01       	movw	r26, r24
    34be:	cb 01       	movw	r24, r22
    34c0:	8f 87       	std	Y+15, r24	; 0x0f
    34c2:	98 8b       	std	Y+16, r25	; 0x10
    34c4:	a9 8b       	std	Y+17, r26	; 0x11
    34c6:	ba 8b       	std	Y+18, r27	; 0x12
    LCD_gotoRowColumn(2,1);
    34c8:	82 e0       	ldi	r24, 0x02	; 2
    34ca:	61 e0       	ldi	r22, 0x01	; 1
    34cc:	0e 94 54 11 	call	0x22a8	; 0x22a8 <LCD_gotoRowColumn>
    LCD_FLOATToString(temp,6,3);
    34d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    34d2:	98 89       	ldd	r25, Y+16	; 0x10
    34d4:	a9 89       	ldd	r26, Y+17	; 0x11
    34d6:	ba 89       	ldd	r27, Y+18	; 0x12
    34d8:	bc 01       	movw	r22, r24
    34da:	cd 01       	movw	r24, r26
    34dc:	46 e0       	ldi	r20, 0x06	; 6
    34de:	23 e0       	ldi	r18, 0x03	; 3
    34e0:	0e 94 7f 12 	call	0x24fe	; 0x24fe <LCD_FLOATToString>
    34e4:	80 e0       	ldi	r24, 0x00	; 0
    34e6:	90 e0       	ldi	r25, 0x00	; 0
    34e8:	a6 e9       	ldi	r26, 0x96	; 150
    34ea:	b3 e4       	ldi	r27, 0x43	; 67
    34ec:	8b 87       	std	Y+11, r24	; 0x0b
    34ee:	9c 87       	std	Y+12, r25	; 0x0c
    34f0:	ad 87       	std	Y+13, r26	; 0x0d
    34f2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    34f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    34f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    34fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    34fc:	20 e0       	ldi	r18, 0x00	; 0
    34fe:	30 e0       	ldi	r19, 0x00	; 0
    3500:	4a ef       	ldi	r20, 0xFA	; 250
    3502:	54 e4       	ldi	r21, 0x44	; 68
    3504:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    3508:	dc 01       	movw	r26, r24
    350a:	cb 01       	movw	r24, r22
    350c:	8f 83       	std	Y+7, r24	; 0x07
    350e:	98 87       	std	Y+8, r25	; 0x08
    3510:	a9 87       	std	Y+9, r26	; 0x09
    3512:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3514:	6f 81       	ldd	r22, Y+7	; 0x07
    3516:	78 85       	ldd	r23, Y+8	; 0x08
    3518:	89 85       	ldd	r24, Y+9	; 0x09
    351a:	9a 85       	ldd	r25, Y+10	; 0x0a
    351c:	20 e0       	ldi	r18, 0x00	; 0
    351e:	30 e0       	ldi	r19, 0x00	; 0
    3520:	40 e8       	ldi	r20, 0x80	; 128
    3522:	5f e3       	ldi	r21, 0x3F	; 63
    3524:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    3528:	88 23       	and	r24, r24
    352a:	2c f4       	brge	.+10     	; 0x3536 <main+0xa6>
		__ticks = 1;
    352c:	81 e0       	ldi	r24, 0x01	; 1
    352e:	90 e0       	ldi	r25, 0x00	; 0
    3530:	9e 83       	std	Y+6, r25	; 0x06
    3532:	8d 83       	std	Y+5, r24	; 0x05
    3534:	3f c0       	rjmp	.+126    	; 0x35b4 <main+0x124>
	else if (__tmp > 65535)
    3536:	6f 81       	ldd	r22, Y+7	; 0x07
    3538:	78 85       	ldd	r23, Y+8	; 0x08
    353a:	89 85       	ldd	r24, Y+9	; 0x09
    353c:	9a 85       	ldd	r25, Y+10	; 0x0a
    353e:	20 e0       	ldi	r18, 0x00	; 0
    3540:	3f ef       	ldi	r19, 0xFF	; 255
    3542:	4f e7       	ldi	r20, 0x7F	; 127
    3544:	57 e4       	ldi	r21, 0x47	; 71
    3546:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    354a:	18 16       	cp	r1, r24
    354c:	4c f5       	brge	.+82     	; 0x35a0 <main+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    354e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3550:	7c 85       	ldd	r23, Y+12	; 0x0c
    3552:	8d 85       	ldd	r24, Y+13	; 0x0d
    3554:	9e 85       	ldd	r25, Y+14	; 0x0e
    3556:	20 e0       	ldi	r18, 0x00	; 0
    3558:	30 e0       	ldi	r19, 0x00	; 0
    355a:	40 e2       	ldi	r20, 0x20	; 32
    355c:	51 e4       	ldi	r21, 0x41	; 65
    355e:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    3562:	dc 01       	movw	r26, r24
    3564:	cb 01       	movw	r24, r22
    3566:	bc 01       	movw	r22, r24
    3568:	cd 01       	movw	r24, r26
    356a:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    356e:	dc 01       	movw	r26, r24
    3570:	cb 01       	movw	r24, r22
    3572:	9e 83       	std	Y+6, r25	; 0x06
    3574:	8d 83       	std	Y+5, r24	; 0x05
    3576:	0f c0       	rjmp	.+30     	; 0x3596 <main+0x106>
    3578:	88 ec       	ldi	r24, 0xC8	; 200
    357a:	90 e0       	ldi	r25, 0x00	; 0
    357c:	9c 83       	std	Y+4, r25	; 0x04
    357e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3580:	8b 81       	ldd	r24, Y+3	; 0x03
    3582:	9c 81       	ldd	r25, Y+4	; 0x04
    3584:	01 97       	sbiw	r24, 0x01	; 1
    3586:	f1 f7       	brne	.-4      	; 0x3584 <main+0xf4>
    3588:	9c 83       	std	Y+4, r25	; 0x04
    358a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    358c:	8d 81       	ldd	r24, Y+5	; 0x05
    358e:	9e 81       	ldd	r25, Y+6	; 0x06
    3590:	01 97       	sbiw	r24, 0x01	; 1
    3592:	9e 83       	std	Y+6, r25	; 0x06
    3594:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3596:	8d 81       	ldd	r24, Y+5	; 0x05
    3598:	9e 81       	ldd	r25, Y+6	; 0x06
    359a:	00 97       	sbiw	r24, 0x00	; 0
    359c:	69 f7       	brne	.-38     	; 0x3578 <main+0xe8>
    359e:	84 cf       	rjmp	.-248    	; 0x34a8 <main+0x18>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35a0:	6f 81       	ldd	r22, Y+7	; 0x07
    35a2:	78 85       	ldd	r23, Y+8	; 0x08
    35a4:	89 85       	ldd	r24, Y+9	; 0x09
    35a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    35a8:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    35ac:	dc 01       	movw	r26, r24
    35ae:	cb 01       	movw	r24, r22
    35b0:	9e 83       	std	Y+6, r25	; 0x06
    35b2:	8d 83       	std	Y+5, r24	; 0x05
    35b4:	8d 81       	ldd	r24, Y+5	; 0x05
    35b6:	9e 81       	ldd	r25, Y+6	; 0x06
    35b8:	9a 83       	std	Y+2, r25	; 0x02
    35ba:	89 83       	std	Y+1, r24	; 0x01
    35bc:	89 81       	ldd	r24, Y+1	; 0x01
    35be:	9a 81       	ldd	r25, Y+2	; 0x02
    35c0:	01 97       	sbiw	r24, 0x01	; 1
    35c2:	f1 f7       	brne	.-4      	; 0x35c0 <main+0x130>
    35c4:	9a 83       	std	Y+2, r25	; 0x02
    35c6:	89 83       	std	Y+1, r24	; 0x01
    35c8:	6f cf       	rjmp	.-290    	; 0x34a8 <main+0x18>

000035ca <__prologue_saves__>:
    35ca:	2f 92       	push	r2
    35cc:	3f 92       	push	r3
    35ce:	4f 92       	push	r4
    35d0:	5f 92       	push	r5
    35d2:	6f 92       	push	r6
    35d4:	7f 92       	push	r7
    35d6:	8f 92       	push	r8
    35d8:	9f 92       	push	r9
    35da:	af 92       	push	r10
    35dc:	bf 92       	push	r11
    35de:	cf 92       	push	r12
    35e0:	df 92       	push	r13
    35e2:	ef 92       	push	r14
    35e4:	ff 92       	push	r15
    35e6:	0f 93       	push	r16
    35e8:	1f 93       	push	r17
    35ea:	cf 93       	push	r28
    35ec:	df 93       	push	r29
    35ee:	cd b7       	in	r28, 0x3d	; 61
    35f0:	de b7       	in	r29, 0x3e	; 62
    35f2:	ca 1b       	sub	r28, r26
    35f4:	db 0b       	sbc	r29, r27
    35f6:	0f b6       	in	r0, 0x3f	; 63
    35f8:	f8 94       	cli
    35fa:	de bf       	out	0x3e, r29	; 62
    35fc:	0f be       	out	0x3f, r0	; 63
    35fe:	cd bf       	out	0x3d, r28	; 61
    3600:	09 94       	ijmp

00003602 <__epilogue_restores__>:
    3602:	2a 88       	ldd	r2, Y+18	; 0x12
    3604:	39 88       	ldd	r3, Y+17	; 0x11
    3606:	48 88       	ldd	r4, Y+16	; 0x10
    3608:	5f 84       	ldd	r5, Y+15	; 0x0f
    360a:	6e 84       	ldd	r6, Y+14	; 0x0e
    360c:	7d 84       	ldd	r7, Y+13	; 0x0d
    360e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3610:	9b 84       	ldd	r9, Y+11	; 0x0b
    3612:	aa 84       	ldd	r10, Y+10	; 0x0a
    3614:	b9 84       	ldd	r11, Y+9	; 0x09
    3616:	c8 84       	ldd	r12, Y+8	; 0x08
    3618:	df 80       	ldd	r13, Y+7	; 0x07
    361a:	ee 80       	ldd	r14, Y+6	; 0x06
    361c:	fd 80       	ldd	r15, Y+5	; 0x05
    361e:	0c 81       	ldd	r16, Y+4	; 0x04
    3620:	1b 81       	ldd	r17, Y+3	; 0x03
    3622:	aa 81       	ldd	r26, Y+2	; 0x02
    3624:	b9 81       	ldd	r27, Y+1	; 0x01
    3626:	ce 0f       	add	r28, r30
    3628:	d1 1d       	adc	r29, r1
    362a:	0f b6       	in	r0, 0x3f	; 63
    362c:	f8 94       	cli
    362e:	de bf       	out	0x3e, r29	; 62
    3630:	0f be       	out	0x3f, r0	; 63
    3632:	cd bf       	out	0x3d, r28	; 61
    3634:	ed 01       	movw	r28, r26
    3636:	08 95       	ret

00003638 <dtostrf>:
    3638:	ef 92       	push	r14
    363a:	ff 92       	push	r15
    363c:	0f 93       	push	r16
    363e:	1f 93       	push	r17
    3640:	f2 2f       	mov	r31, r18
    3642:	f0 2e       	mov	r15, r16
    3644:	47 fd       	sbrc	r20, 7
    3646:	02 c0       	rjmp	.+4      	; 0x364c <dtostrf+0x14>
    3648:	e4 e0       	ldi	r30, 0x04	; 4
    364a:	01 c0       	rjmp	.+2      	; 0x364e <dtostrf+0x16>
    364c:	e4 e1       	ldi	r30, 0x14	; 20
    364e:	24 2f       	mov	r18, r20
    3650:	33 27       	eor	r19, r19
    3652:	27 fd       	sbrc	r18, 7
    3654:	30 95       	com	r19
    3656:	37 ff       	sbrs	r19, 7
    3658:	03 c0       	rjmp	.+6      	; 0x3660 <dtostrf+0x28>
    365a:	30 95       	com	r19
    365c:	21 95       	neg	r18
    365e:	3f 4f       	sbci	r19, 0xFF	; 255
    3660:	4f 2d       	mov	r20, r15
    3662:	51 2f       	mov	r21, r17
    3664:	0f 2f       	mov	r16, r31
    3666:	ee 2e       	mov	r14, r30
    3668:	0e 94 5e 1b 	call	0x36bc	; 0x36bc <dtoa_prf>
    366c:	8f 2d       	mov	r24, r15
    366e:	91 2f       	mov	r25, r17
    3670:	1f 91       	pop	r17
    3672:	0f 91       	pop	r16
    3674:	ff 90       	pop	r15
    3676:	ef 90       	pop	r14
    3678:	08 95       	ret

0000367a <itoa>:
    367a:	fb 01       	movw	r30, r22
    367c:	9f 01       	movw	r18, r30
    367e:	e8 94       	clt
    3680:	42 30       	cpi	r20, 0x02	; 2
    3682:	c4 f0       	brlt	.+48     	; 0x36b4 <itoa+0x3a>
    3684:	45 32       	cpi	r20, 0x25	; 37
    3686:	b4 f4       	brge	.+44     	; 0x36b4 <itoa+0x3a>
    3688:	4a 30       	cpi	r20, 0x0A	; 10
    368a:	29 f4       	brne	.+10     	; 0x3696 <itoa+0x1c>
    368c:	97 fb       	bst	r25, 7
    368e:	1e f4       	brtc	.+6      	; 0x3696 <itoa+0x1c>
    3690:	90 95       	com	r25
    3692:	81 95       	neg	r24
    3694:	9f 4f       	sbci	r25, 0xFF	; 255
    3696:	64 2f       	mov	r22, r20
    3698:	77 27       	eor	r23, r23
    369a:	0e 94 a8 1d 	call	0x3b50	; 0x3b50 <__udivmodhi4>
    369e:	80 5d       	subi	r24, 0xD0	; 208
    36a0:	8a 33       	cpi	r24, 0x3A	; 58
    36a2:	0c f0       	brlt	.+2      	; 0x36a6 <itoa+0x2c>
    36a4:	89 5d       	subi	r24, 0xD9	; 217
    36a6:	81 93       	st	Z+, r24
    36a8:	cb 01       	movw	r24, r22
    36aa:	00 97       	sbiw	r24, 0x00	; 0
    36ac:	a1 f7       	brne	.-24     	; 0x3696 <itoa+0x1c>
    36ae:	16 f4       	brtc	.+4      	; 0x36b4 <itoa+0x3a>
    36b0:	5d e2       	ldi	r21, 0x2D	; 45
    36b2:	51 93       	st	Z+, r21
    36b4:	10 82       	st	Z, r1
    36b6:	c9 01       	movw	r24, r18
    36b8:	0c 94 98 1d 	jmp	0x3b30	; 0x3b30 <strrev>

000036bc <dtoa_prf>:
    36bc:	a9 e0       	ldi	r26, 0x09	; 9
    36be:	b0 e0       	ldi	r27, 0x00	; 0
    36c0:	e4 e6       	ldi	r30, 0x64	; 100
    36c2:	fb e1       	ldi	r31, 0x1B	; 27
    36c4:	0c 94 e9 1a 	jmp	0x35d2	; 0x35d2 <__prologue_saves__+0x8>
    36c8:	6a 01       	movw	r12, r20
    36ca:	12 2f       	mov	r17, r18
    36cc:	a0 2e       	mov	r10, r16
    36ce:	be 2c       	mov	r11, r14
    36d0:	2b e3       	ldi	r18, 0x3B	; 59
    36d2:	20 17       	cp	r18, r16
    36d4:	18 f4       	brcc	.+6      	; 0x36dc <dtoa_prf+0x20>
    36d6:	2c e3       	ldi	r18, 0x3C	; 60
    36d8:	92 2e       	mov	r9, r18
    36da:	02 c0       	rjmp	.+4      	; 0x36e0 <dtoa_prf+0x24>
    36dc:	90 2e       	mov	r9, r16
    36de:	93 94       	inc	r9
    36e0:	ae 01       	movw	r20, r28
    36e2:	4f 5f       	subi	r20, 0xFF	; 255
    36e4:	5f 4f       	sbci	r21, 0xFF	; 255
    36e6:	27 e0       	ldi	r18, 0x07	; 7
    36e8:	09 2d       	mov	r16, r9
    36ea:	0e 94 c0 1c 	call	0x3980	; 0x3980 <__ftoa_engine>
    36ee:	bc 01       	movw	r22, r24
    36f0:	89 81       	ldd	r24, Y+1	; 0x01
    36f2:	e8 2e       	mov	r14, r24
    36f4:	ff 24       	eor	r15, r15
    36f6:	c7 01       	movw	r24, r14
    36f8:	89 70       	andi	r24, 0x09	; 9
    36fa:	90 70       	andi	r25, 0x00	; 0
    36fc:	01 97       	sbiw	r24, 0x01	; 1
    36fe:	11 f4       	brne	.+4      	; 0x3704 <dtoa_prf+0x48>
    3700:	ad e2       	ldi	r26, 0x2D	; 45
    3702:	09 c0       	rjmp	.+18     	; 0x3716 <dtoa_prf+0x5a>
    3704:	b1 fe       	sbrs	r11, 1
    3706:	02 c0       	rjmp	.+4      	; 0x370c <dtoa_prf+0x50>
    3708:	ab e2       	ldi	r26, 0x2B	; 43
    370a:	05 c0       	rjmp	.+10     	; 0x3716 <dtoa_prf+0x5a>
    370c:	b0 fc       	sbrc	r11, 0
    370e:	02 c0       	rjmp	.+4      	; 0x3714 <dtoa_prf+0x58>
    3710:	a0 e0       	ldi	r26, 0x00	; 0
    3712:	01 c0       	rjmp	.+2      	; 0x3716 <dtoa_prf+0x5a>
    3714:	a0 e2       	ldi	r26, 0x20	; 32
    3716:	e3 fe       	sbrs	r14, 3
    3718:	3b c0       	rjmp	.+118    	; 0x3790 <dtoa_prf+0xd4>
    371a:	aa 23       	and	r26, r26
    371c:	11 f4       	brne	.+4      	; 0x3722 <dtoa_prf+0x66>
    371e:	23 e0       	ldi	r18, 0x03	; 3
    3720:	01 c0       	rjmp	.+2      	; 0x3724 <dtoa_prf+0x68>
    3722:	24 e0       	ldi	r18, 0x04	; 4
    3724:	21 17       	cp	r18, r17
    3726:	10 f0       	brcs	.+4      	; 0x372c <dtoa_prf+0x70>
    3728:	20 e0       	ldi	r18, 0x00	; 0
    372a:	02 c0       	rjmp	.+4      	; 0x3730 <dtoa_prf+0x74>
    372c:	12 1b       	sub	r17, r18
    372e:	21 2f       	mov	r18, r17
    3730:	eb 2c       	mov	r14, r11
    3732:	b4 fe       	sbrs	r11, 4
    3734:	02 c0       	rjmp	.+4      	; 0x373a <dtoa_prf+0x7e>
    3736:	32 2f       	mov	r19, r18
    3738:	0a c0       	rjmp	.+20     	; 0x374e <dtoa_prf+0x92>
    373a:	f6 01       	movw	r30, r12
    373c:	32 2f       	mov	r19, r18
    373e:	80 e2       	ldi	r24, 0x20	; 32
    3740:	02 c0       	rjmp	.+4      	; 0x3746 <dtoa_prf+0x8a>
    3742:	81 93       	st	Z+, r24
    3744:	31 50       	subi	r19, 0x01	; 1
    3746:	33 23       	and	r19, r19
    3748:	e1 f7       	brne	.-8      	; 0x3742 <dtoa_prf+0x86>
    374a:	c2 0e       	add	r12, r18
    374c:	d1 1c       	adc	r13, r1
    374e:	aa 23       	and	r26, r26
    3750:	19 f0       	breq	.+6      	; 0x3758 <dtoa_prf+0x9c>
    3752:	f6 01       	movw	r30, r12
    3754:	a1 93       	st	Z+, r26
    3756:	6f 01       	movw	r12, r30
    3758:	f6 01       	movw	r30, r12
    375a:	31 96       	adiw	r30, 0x01	; 1
    375c:	e2 fe       	sbrs	r14, 2
    375e:	05 c0       	rjmp	.+10     	; 0x376a <dtoa_prf+0xae>
    3760:	9e e4       	ldi	r25, 0x4E	; 78
    3762:	d6 01       	movw	r26, r12
    3764:	9c 93       	st	X, r25
    3766:	81 e4       	ldi	r24, 0x41	; 65
    3768:	04 c0       	rjmp	.+8      	; 0x3772 <dtoa_prf+0xb6>
    376a:	9e e6       	ldi	r25, 0x6E	; 110
    376c:	d6 01       	movw	r26, r12
    376e:	9c 93       	st	X, r25
    3770:	81 e6       	ldi	r24, 0x61	; 97
    3772:	11 96       	adiw	r26, 0x01	; 1
    3774:	8c 93       	st	X, r24
    3776:	91 83       	std	Z+1, r25	; 0x01
    3778:	32 96       	adiw	r30, 0x02	; 2
    377a:	df 01       	movw	r26, r30
    377c:	83 2f       	mov	r24, r19
    377e:	90 e2       	ldi	r25, 0x20	; 32
    3780:	02 c0       	rjmp	.+4      	; 0x3786 <dtoa_prf+0xca>
    3782:	9d 93       	st	X+, r25
    3784:	81 50       	subi	r24, 0x01	; 1
    3786:	88 23       	and	r24, r24
    3788:	e1 f7       	brne	.-8      	; 0x3782 <dtoa_prf+0xc6>
    378a:	e3 0f       	add	r30, r19
    378c:	f1 1d       	adc	r31, r1
    378e:	40 c0       	rjmp	.+128    	; 0x3810 <dtoa_prf+0x154>
    3790:	e2 fe       	sbrs	r14, 2
    3792:	42 c0       	rjmp	.+132    	; 0x3818 <dtoa_prf+0x15c>
    3794:	aa 23       	and	r26, r26
    3796:	11 f4       	brne	.+4      	; 0x379c <dtoa_prf+0xe0>
    3798:	23 e0       	ldi	r18, 0x03	; 3
    379a:	01 c0       	rjmp	.+2      	; 0x379e <dtoa_prf+0xe2>
    379c:	24 e0       	ldi	r18, 0x04	; 4
    379e:	21 17       	cp	r18, r17
    37a0:	10 f0       	brcs	.+4      	; 0x37a6 <dtoa_prf+0xea>
    37a2:	20 e0       	ldi	r18, 0x00	; 0
    37a4:	02 c0       	rjmp	.+4      	; 0x37aa <dtoa_prf+0xee>
    37a6:	12 1b       	sub	r17, r18
    37a8:	21 2f       	mov	r18, r17
    37aa:	eb 2c       	mov	r14, r11
    37ac:	b4 fe       	sbrs	r11, 4
    37ae:	02 c0       	rjmp	.+4      	; 0x37b4 <dtoa_prf+0xf8>
    37b0:	92 2f       	mov	r25, r18
    37b2:	0a c0       	rjmp	.+20     	; 0x37c8 <dtoa_prf+0x10c>
    37b4:	f6 01       	movw	r30, r12
    37b6:	92 2f       	mov	r25, r18
    37b8:	80 e2       	ldi	r24, 0x20	; 32
    37ba:	02 c0       	rjmp	.+4      	; 0x37c0 <dtoa_prf+0x104>
    37bc:	81 93       	st	Z+, r24
    37be:	91 50       	subi	r25, 0x01	; 1
    37c0:	99 23       	and	r25, r25
    37c2:	e1 f7       	brne	.-8      	; 0x37bc <dtoa_prf+0x100>
    37c4:	c2 0e       	add	r12, r18
    37c6:	d1 1c       	adc	r13, r1
    37c8:	aa 23       	and	r26, r26
    37ca:	19 f0       	breq	.+6      	; 0x37d2 <dtoa_prf+0x116>
    37cc:	f6 01       	movw	r30, r12
    37ce:	a1 93       	st	Z+, r26
    37d0:	6f 01       	movw	r12, r30
    37d2:	f6 01       	movw	r30, r12
    37d4:	31 96       	adiw	r30, 0x01	; 1
    37d6:	e2 fe       	sbrs	r14, 2
    37d8:	08 c0       	rjmp	.+16     	; 0x37ea <dtoa_prf+0x12e>
    37da:	89 e4       	ldi	r24, 0x49	; 73
    37dc:	d6 01       	movw	r26, r12
    37de:	8c 93       	st	X, r24
    37e0:	8e e4       	ldi	r24, 0x4E	; 78
    37e2:	11 96       	adiw	r26, 0x01	; 1
    37e4:	8c 93       	st	X, r24
    37e6:	86 e4       	ldi	r24, 0x46	; 70
    37e8:	07 c0       	rjmp	.+14     	; 0x37f8 <dtoa_prf+0x13c>
    37ea:	89 e6       	ldi	r24, 0x69	; 105
    37ec:	d6 01       	movw	r26, r12
    37ee:	8c 93       	st	X, r24
    37f0:	8e e6       	ldi	r24, 0x6E	; 110
    37f2:	11 96       	adiw	r26, 0x01	; 1
    37f4:	8c 93       	st	X, r24
    37f6:	86 e6       	ldi	r24, 0x66	; 102
    37f8:	81 83       	std	Z+1, r24	; 0x01
    37fa:	32 96       	adiw	r30, 0x02	; 2
    37fc:	df 01       	movw	r26, r30
    37fe:	89 2f       	mov	r24, r25
    3800:	20 e2       	ldi	r18, 0x20	; 32
    3802:	02 c0       	rjmp	.+4      	; 0x3808 <dtoa_prf+0x14c>
    3804:	2d 93       	st	X+, r18
    3806:	81 50       	subi	r24, 0x01	; 1
    3808:	88 23       	and	r24, r24
    380a:	e1 f7       	brne	.-8      	; 0x3804 <dtoa_prf+0x148>
    380c:	e9 0f       	add	r30, r25
    380e:	f1 1d       	adc	r31, r1
    3810:	10 82       	st	Z, r1
    3812:	2e ef       	ldi	r18, 0xFE	; 254
    3814:	3f ef       	ldi	r19, 0xFF	; 255
    3816:	af c0       	rjmp	.+350    	; 0x3976 <dtoa_prf+0x2ba>
    3818:	16 16       	cp	r1, r22
    381a:	17 06       	cpc	r1, r23
    381c:	1c f0       	brlt	.+6      	; 0x3824 <dtoa_prf+0x168>
    381e:	41 e0       	ldi	r20, 0x01	; 1
    3820:	50 e0       	ldi	r21, 0x00	; 0
    3822:	03 c0       	rjmp	.+6      	; 0x382a <dtoa_prf+0x16e>
    3824:	ab 01       	movw	r20, r22
    3826:	4f 5f       	subi	r20, 0xFF	; 255
    3828:	5f 4f       	sbci	r21, 0xFF	; 255
    382a:	aa 20       	and	r10, r10
    382c:	19 f4       	brne	.+6      	; 0x3834 <dtoa_prf+0x178>
    382e:	80 e0       	ldi	r24, 0x00	; 0
    3830:	90 e0       	ldi	r25, 0x00	; 0
    3832:	03 c0       	rjmp	.+6      	; 0x383a <dtoa_prf+0x17e>
    3834:	8a 2d       	mov	r24, r10
    3836:	90 e0       	ldi	r25, 0x00	; 0
    3838:	01 96       	adiw	r24, 0x01	; 1
    383a:	20 e0       	ldi	r18, 0x00	; 0
    383c:	30 e0       	ldi	r19, 0x00	; 0
    383e:	aa 23       	and	r26, r26
    3840:	11 f0       	breq	.+4      	; 0x3846 <dtoa_prf+0x18a>
    3842:	21 e0       	ldi	r18, 0x01	; 1
    3844:	30 e0       	ldi	r19, 0x00	; 0
    3846:	24 0f       	add	r18, r20
    3848:	35 1f       	adc	r19, r21
    384a:	28 0f       	add	r18, r24
    384c:	39 1f       	adc	r19, r25
    384e:	81 2f       	mov	r24, r17
    3850:	90 e0       	ldi	r25, 0x00	; 0
    3852:	28 17       	cp	r18, r24
    3854:	39 07       	cpc	r19, r25
    3856:	14 f0       	brlt	.+4      	; 0x385c <dtoa_prf+0x1a0>
    3858:	20 e0       	ldi	r18, 0x00	; 0
    385a:	02 c0       	rjmp	.+4      	; 0x3860 <dtoa_prf+0x1a4>
    385c:	12 1b       	sub	r17, r18
    385e:	21 2f       	mov	r18, r17
    3860:	4b 2d       	mov	r20, r11
    3862:	50 e0       	ldi	r21, 0x00	; 0
    3864:	ca 01       	movw	r24, r20
    3866:	80 71       	andi	r24, 0x10	; 16
    3868:	90 70       	andi	r25, 0x00	; 0
    386a:	b4 fc       	sbrc	r11, 4
    386c:	0d c0       	rjmp	.+26     	; 0x3888 <dtoa_prf+0x1cc>
    386e:	b3 fc       	sbrc	r11, 3
    3870:	0b c0       	rjmp	.+22     	; 0x3888 <dtoa_prf+0x1cc>
    3872:	f6 01       	movw	r30, r12
    3874:	32 2f       	mov	r19, r18
    3876:	40 e2       	ldi	r20, 0x20	; 32
    3878:	02 c0       	rjmp	.+4      	; 0x387e <dtoa_prf+0x1c2>
    387a:	41 93       	st	Z+, r20
    387c:	31 50       	subi	r19, 0x01	; 1
    387e:	33 23       	and	r19, r19
    3880:	e1 f7       	brne	.-8      	; 0x387a <dtoa_prf+0x1be>
    3882:	c2 0e       	add	r12, r18
    3884:	d1 1c       	adc	r13, r1
    3886:	01 c0       	rjmp	.+2      	; 0x388a <dtoa_prf+0x1ce>
    3888:	32 2f       	mov	r19, r18
    388a:	aa 23       	and	r26, r26
    388c:	19 f0       	breq	.+6      	; 0x3894 <dtoa_prf+0x1d8>
    388e:	f6 01       	movw	r30, r12
    3890:	a1 93       	st	Z+, r26
    3892:	6f 01       	movw	r12, r30
    3894:	89 2b       	or	r24, r25
    3896:	11 f0       	breq	.+4      	; 0x389c <dtoa_prf+0x1e0>
    3898:	13 2f       	mov	r17, r19
    389a:	0a c0       	rjmp	.+20     	; 0x38b0 <dtoa_prf+0x1f4>
    389c:	f6 01       	movw	r30, r12
    389e:	13 2f       	mov	r17, r19
    38a0:	80 e3       	ldi	r24, 0x30	; 48
    38a2:	02 c0       	rjmp	.+4      	; 0x38a8 <dtoa_prf+0x1ec>
    38a4:	81 93       	st	Z+, r24
    38a6:	11 50       	subi	r17, 0x01	; 1
    38a8:	11 23       	and	r17, r17
    38aa:	e1 f7       	brne	.-8      	; 0x38a4 <dtoa_prf+0x1e8>
    38ac:	c3 0e       	add	r12, r19
    38ae:	d1 1c       	adc	r13, r1
    38b0:	09 2d       	mov	r16, r9
    38b2:	06 0f       	add	r16, r22
    38b4:	ba 80       	ldd	r11, Y+2	; 0x02
    38b6:	90 e1       	ldi	r25, 0x10	; 16
    38b8:	89 2e       	mov	r8, r25
    38ba:	91 2c       	mov	r9, r1
    38bc:	8e 20       	and	r8, r14
    38be:	9f 20       	and	r9, r15
    38c0:	e4 fe       	sbrs	r14, 4
    38c2:	04 c0       	rjmp	.+8      	; 0x38cc <dtoa_prf+0x210>
    38c4:	f1 e3       	ldi	r31, 0x31	; 49
    38c6:	bf 16       	cp	r11, r31
    38c8:	09 f4       	brne	.+2      	; 0x38cc <dtoa_prf+0x210>
    38ca:	01 50       	subi	r16, 0x01	; 1
    38cc:	10 16       	cp	r1, r16
    38ce:	14 f0       	brlt	.+4      	; 0x38d4 <dtoa_prf+0x218>
    38d0:	01 e0       	ldi	r16, 0x01	; 1
    38d2:	03 c0       	rjmp	.+6      	; 0x38da <dtoa_prf+0x21e>
    38d4:	09 30       	cpi	r16, 0x09	; 9
    38d6:	08 f0       	brcs	.+2      	; 0x38da <dtoa_prf+0x21e>
    38d8:	08 e0       	ldi	r16, 0x08	; 8
    38da:	9b 01       	movw	r18, r22
    38dc:	77 ff       	sbrs	r23, 7
    38de:	02 c0       	rjmp	.+4      	; 0x38e4 <dtoa_prf+0x228>
    38e0:	20 e0       	ldi	r18, 0x00	; 0
    38e2:	30 e0       	ldi	r19, 0x00	; 0
    38e4:	cb 01       	movw	r24, r22
    38e6:	01 96       	adiw	r24, 0x01	; 1
    38e8:	82 1b       	sub	r24, r18
    38ea:	93 0b       	sbc	r25, r19
    38ec:	fe 01       	movw	r30, r28
    38ee:	31 96       	adiw	r30, 0x01	; 1
    38f0:	e8 0f       	add	r30, r24
    38f2:	f9 1f       	adc	r31, r25
    38f4:	8e e2       	ldi	r24, 0x2E	; 46
    38f6:	f8 2e       	mov	r15, r24
    38f8:	3b 01       	movw	r6, r22
    38fa:	60 1a       	sub	r6, r16
    38fc:	71 08       	sbc	r7, r1
    38fe:	8a 2d       	mov	r24, r10
    3900:	90 e0       	ldi	r25, 0x00	; 0
    3902:	44 27       	eor	r20, r20
    3904:	55 27       	eor	r21, r21
    3906:	48 1b       	sub	r20, r24
    3908:	59 0b       	sbc	r21, r25
    390a:	8f ef       	ldi	r24, 0xFF	; 255
    390c:	2f 3f       	cpi	r18, 0xFF	; 255
    390e:	38 07       	cpc	r19, r24
    3910:	19 f4       	brne	.+6      	; 0x3918 <dtoa_prf+0x25c>
    3912:	d6 01       	movw	r26, r12
    3914:	fd 92       	st	X+, r15
    3916:	6d 01       	movw	r12, r26
    3918:	62 17       	cp	r22, r18
    391a:	73 07       	cpc	r23, r19
    391c:	2c f0       	brlt	.+10     	; 0x3928 <dtoa_prf+0x26c>
    391e:	62 16       	cp	r6, r18
    3920:	73 06       	cpc	r7, r19
    3922:	14 f4       	brge	.+4      	; 0x3928 <dtoa_prf+0x26c>
    3924:	80 81       	ld	r24, Z
    3926:	01 c0       	rjmp	.+2      	; 0x392a <dtoa_prf+0x26e>
    3928:	80 e3       	ldi	r24, 0x30	; 48
    392a:	21 50       	subi	r18, 0x01	; 1
    392c:	30 40       	sbci	r19, 0x00	; 0
    392e:	31 96       	adiw	r30, 0x01	; 1
    3930:	24 17       	cp	r18, r20
    3932:	35 07       	cpc	r19, r21
    3934:	24 f0       	brlt	.+8      	; 0x393e <dtoa_prf+0x282>
    3936:	d6 01       	movw	r26, r12
    3938:	8d 93       	st	X+, r24
    393a:	6d 01       	movw	r12, r26
    393c:	e6 cf       	rjmp	.-52     	; 0x390a <dtoa_prf+0x24e>
    393e:	26 17       	cp	r18, r22
    3940:	37 07       	cpc	r19, r23
    3942:	49 f4       	brne	.+18     	; 0x3956 <dtoa_prf+0x29a>
    3944:	b5 e3       	ldi	r27, 0x35	; 53
    3946:	bb 15       	cp	r27, r11
    3948:	28 f0       	brcs	.+10     	; 0x3954 <dtoa_prf+0x298>
    394a:	bb 16       	cp	r11, r27
    394c:	21 f4       	brne	.+8      	; 0x3956 <dtoa_prf+0x29a>
    394e:	81 14       	cp	r8, r1
    3950:	91 04       	cpc	r9, r1
    3952:	09 f4       	brne	.+2      	; 0x3956 <dtoa_prf+0x29a>
    3954:	81 e3       	ldi	r24, 0x31	; 49
    3956:	f6 01       	movw	r30, r12
    3958:	81 93       	st	Z+, r24
    395a:	d6 01       	movw	r26, r12
    395c:	81 2f       	mov	r24, r17
    395e:	90 e2       	ldi	r25, 0x20	; 32
    3960:	02 c0       	rjmp	.+4      	; 0x3966 <dtoa_prf+0x2aa>
    3962:	9c 93       	st	X, r25
    3964:	81 50       	subi	r24, 0x01	; 1
    3966:	11 96       	adiw	r26, 0x01	; 1
    3968:	88 23       	and	r24, r24
    396a:	d9 f7       	brne	.-10     	; 0x3962 <dtoa_prf+0x2a6>
    396c:	e1 0f       	add	r30, r17
    396e:	f1 1d       	adc	r31, r1
    3970:	10 82       	st	Z, r1
    3972:	20 e0       	ldi	r18, 0x00	; 0
    3974:	30 e0       	ldi	r19, 0x00	; 0
    3976:	c9 01       	movw	r24, r18
    3978:	29 96       	adiw	r28, 0x09	; 9
    397a:	ee e0       	ldi	r30, 0x0E	; 14
    397c:	0c 94 05 1b 	jmp	0x360a	; 0x360a <__epilogue_restores__+0x8>

00003980 <__ftoa_engine>:
    3980:	28 30       	cpi	r18, 0x08	; 8
    3982:	08 f0       	brcs	.+2      	; 0x3986 <__ftoa_engine+0x6>
    3984:	27 e0       	ldi	r18, 0x07	; 7
    3986:	33 27       	eor	r19, r19
    3988:	da 01       	movw	r26, r20
    398a:	99 0f       	add	r25, r25
    398c:	31 1d       	adc	r19, r1
    398e:	87 fd       	sbrc	r24, 7
    3990:	91 60       	ori	r25, 0x01	; 1
    3992:	00 96       	adiw	r24, 0x00	; 0
    3994:	61 05       	cpc	r22, r1
    3996:	71 05       	cpc	r23, r1
    3998:	39 f4       	brne	.+14     	; 0x39a8 <__ftoa_engine+0x28>
    399a:	32 60       	ori	r19, 0x02	; 2
    399c:	2e 5f       	subi	r18, 0xFE	; 254
    399e:	3d 93       	st	X+, r19
    39a0:	30 e3       	ldi	r19, 0x30	; 48
    39a2:	2a 95       	dec	r18
    39a4:	e1 f7       	brne	.-8      	; 0x399e <__ftoa_engine+0x1e>
    39a6:	08 95       	ret
    39a8:	9f 3f       	cpi	r25, 0xFF	; 255
    39aa:	30 f0       	brcs	.+12     	; 0x39b8 <__ftoa_engine+0x38>
    39ac:	80 38       	cpi	r24, 0x80	; 128
    39ae:	71 05       	cpc	r23, r1
    39b0:	61 05       	cpc	r22, r1
    39b2:	09 f0       	breq	.+2      	; 0x39b6 <__ftoa_engine+0x36>
    39b4:	3c 5f       	subi	r19, 0xFC	; 252
    39b6:	3c 5f       	subi	r19, 0xFC	; 252
    39b8:	3d 93       	st	X+, r19
    39ba:	91 30       	cpi	r25, 0x01	; 1
    39bc:	08 f0       	brcs	.+2      	; 0x39c0 <__ftoa_engine+0x40>
    39be:	80 68       	ori	r24, 0x80	; 128
    39c0:	91 1d       	adc	r25, r1
    39c2:	df 93       	push	r29
    39c4:	cf 93       	push	r28
    39c6:	1f 93       	push	r17
    39c8:	0f 93       	push	r16
    39ca:	ff 92       	push	r15
    39cc:	ef 92       	push	r14
    39ce:	19 2f       	mov	r17, r25
    39d0:	98 7f       	andi	r25, 0xF8	; 248
    39d2:	96 95       	lsr	r25
    39d4:	e9 2f       	mov	r30, r25
    39d6:	96 95       	lsr	r25
    39d8:	96 95       	lsr	r25
    39da:	e9 0f       	add	r30, r25
    39dc:	ff 27       	eor	r31, r31
    39de:	e2 55       	subi	r30, 0x52	; 82
    39e0:	ff 4f       	sbci	r31, 0xFF	; 255
    39e2:	99 27       	eor	r25, r25
    39e4:	33 27       	eor	r19, r19
    39e6:	ee 24       	eor	r14, r14
    39e8:	ff 24       	eor	r15, r15
    39ea:	a7 01       	movw	r20, r14
    39ec:	e7 01       	movw	r28, r14
    39ee:	05 90       	lpm	r0, Z+
    39f0:	08 94       	sec
    39f2:	07 94       	ror	r0
    39f4:	28 f4       	brcc	.+10     	; 0x3a00 <__ftoa_engine+0x80>
    39f6:	36 0f       	add	r19, r22
    39f8:	e7 1e       	adc	r14, r23
    39fa:	f8 1e       	adc	r15, r24
    39fc:	49 1f       	adc	r20, r25
    39fe:	51 1d       	adc	r21, r1
    3a00:	66 0f       	add	r22, r22
    3a02:	77 1f       	adc	r23, r23
    3a04:	88 1f       	adc	r24, r24
    3a06:	99 1f       	adc	r25, r25
    3a08:	06 94       	lsr	r0
    3a0a:	a1 f7       	brne	.-24     	; 0x39f4 <__ftoa_engine+0x74>
    3a0c:	05 90       	lpm	r0, Z+
    3a0e:	07 94       	ror	r0
    3a10:	28 f4       	brcc	.+10     	; 0x3a1c <__ftoa_engine+0x9c>
    3a12:	e7 0e       	add	r14, r23
    3a14:	f8 1e       	adc	r15, r24
    3a16:	49 1f       	adc	r20, r25
    3a18:	56 1f       	adc	r21, r22
    3a1a:	c1 1d       	adc	r28, r1
    3a1c:	77 0f       	add	r23, r23
    3a1e:	88 1f       	adc	r24, r24
    3a20:	99 1f       	adc	r25, r25
    3a22:	66 1f       	adc	r22, r22
    3a24:	06 94       	lsr	r0
    3a26:	a1 f7       	brne	.-24     	; 0x3a10 <__ftoa_engine+0x90>
    3a28:	05 90       	lpm	r0, Z+
    3a2a:	07 94       	ror	r0
    3a2c:	28 f4       	brcc	.+10     	; 0x3a38 <__ftoa_engine+0xb8>
    3a2e:	f8 0e       	add	r15, r24
    3a30:	49 1f       	adc	r20, r25
    3a32:	56 1f       	adc	r21, r22
    3a34:	c7 1f       	adc	r28, r23
    3a36:	d1 1d       	adc	r29, r1
    3a38:	88 0f       	add	r24, r24
    3a3a:	99 1f       	adc	r25, r25
    3a3c:	66 1f       	adc	r22, r22
    3a3e:	77 1f       	adc	r23, r23
    3a40:	06 94       	lsr	r0
    3a42:	a1 f7       	brne	.-24     	; 0x3a2c <__ftoa_engine+0xac>
    3a44:	05 90       	lpm	r0, Z+
    3a46:	07 94       	ror	r0
    3a48:	20 f4       	brcc	.+8      	; 0x3a52 <__ftoa_engine+0xd2>
    3a4a:	49 0f       	add	r20, r25
    3a4c:	56 1f       	adc	r21, r22
    3a4e:	c7 1f       	adc	r28, r23
    3a50:	d8 1f       	adc	r29, r24
    3a52:	99 0f       	add	r25, r25
    3a54:	66 1f       	adc	r22, r22
    3a56:	77 1f       	adc	r23, r23
    3a58:	88 1f       	adc	r24, r24
    3a5a:	06 94       	lsr	r0
    3a5c:	a9 f7       	brne	.-22     	; 0x3a48 <__ftoa_engine+0xc8>
    3a5e:	84 91       	lpm	r24, Z+
    3a60:	10 95       	com	r17
    3a62:	17 70       	andi	r17, 0x07	; 7
    3a64:	41 f0       	breq	.+16     	; 0x3a76 <__ftoa_engine+0xf6>
    3a66:	d6 95       	lsr	r29
    3a68:	c7 95       	ror	r28
    3a6a:	57 95       	ror	r21
    3a6c:	47 95       	ror	r20
    3a6e:	f7 94       	ror	r15
    3a70:	e7 94       	ror	r14
    3a72:	1a 95       	dec	r17
    3a74:	c1 f7       	brne	.-16     	; 0x3a66 <__ftoa_engine+0xe6>
    3a76:	e4 e5       	ldi	r30, 0x54	; 84
    3a78:	f0 e0       	ldi	r31, 0x00	; 0
    3a7a:	68 94       	set
    3a7c:	15 90       	lpm	r1, Z+
    3a7e:	15 91       	lpm	r17, Z+
    3a80:	35 91       	lpm	r19, Z+
    3a82:	65 91       	lpm	r22, Z+
    3a84:	95 91       	lpm	r25, Z+
    3a86:	05 90       	lpm	r0, Z+
    3a88:	7f e2       	ldi	r23, 0x2F	; 47
    3a8a:	73 95       	inc	r23
    3a8c:	e1 18       	sub	r14, r1
    3a8e:	f1 0a       	sbc	r15, r17
    3a90:	43 0b       	sbc	r20, r19
    3a92:	56 0b       	sbc	r21, r22
    3a94:	c9 0b       	sbc	r28, r25
    3a96:	d0 09       	sbc	r29, r0
    3a98:	c0 f7       	brcc	.-16     	; 0x3a8a <__ftoa_engine+0x10a>
    3a9a:	e1 0c       	add	r14, r1
    3a9c:	f1 1e       	adc	r15, r17
    3a9e:	43 1f       	adc	r20, r19
    3aa0:	56 1f       	adc	r21, r22
    3aa2:	c9 1f       	adc	r28, r25
    3aa4:	d0 1d       	adc	r29, r0
    3aa6:	7e f4       	brtc	.+30     	; 0x3ac6 <__ftoa_engine+0x146>
    3aa8:	70 33       	cpi	r23, 0x30	; 48
    3aaa:	11 f4       	brne	.+4      	; 0x3ab0 <__ftoa_engine+0x130>
    3aac:	8a 95       	dec	r24
    3aae:	e6 cf       	rjmp	.-52     	; 0x3a7c <__ftoa_engine+0xfc>
    3ab0:	e8 94       	clt
    3ab2:	01 50       	subi	r16, 0x01	; 1
    3ab4:	30 f0       	brcs	.+12     	; 0x3ac2 <__ftoa_engine+0x142>
    3ab6:	08 0f       	add	r16, r24
    3ab8:	0a f4       	brpl	.+2      	; 0x3abc <__ftoa_engine+0x13c>
    3aba:	00 27       	eor	r16, r16
    3abc:	02 17       	cp	r16, r18
    3abe:	08 f4       	brcc	.+2      	; 0x3ac2 <__ftoa_engine+0x142>
    3ac0:	20 2f       	mov	r18, r16
    3ac2:	23 95       	inc	r18
    3ac4:	02 2f       	mov	r16, r18
    3ac6:	7a 33       	cpi	r23, 0x3A	; 58
    3ac8:	28 f0       	brcs	.+10     	; 0x3ad4 <__ftoa_engine+0x154>
    3aca:	79 e3       	ldi	r23, 0x39	; 57
    3acc:	7d 93       	st	X+, r23
    3ace:	2a 95       	dec	r18
    3ad0:	e9 f7       	brne	.-6      	; 0x3acc <__ftoa_engine+0x14c>
    3ad2:	10 c0       	rjmp	.+32     	; 0x3af4 <__ftoa_engine+0x174>
    3ad4:	7d 93       	st	X+, r23
    3ad6:	2a 95       	dec	r18
    3ad8:	89 f6       	brne	.-94     	; 0x3a7c <__ftoa_engine+0xfc>
    3ada:	06 94       	lsr	r0
    3adc:	97 95       	ror	r25
    3ade:	67 95       	ror	r22
    3ae0:	37 95       	ror	r19
    3ae2:	17 95       	ror	r17
    3ae4:	17 94       	ror	r1
    3ae6:	e1 18       	sub	r14, r1
    3ae8:	f1 0a       	sbc	r15, r17
    3aea:	43 0b       	sbc	r20, r19
    3aec:	56 0b       	sbc	r21, r22
    3aee:	c9 0b       	sbc	r28, r25
    3af0:	d0 09       	sbc	r29, r0
    3af2:	98 f0       	brcs	.+38     	; 0x3b1a <__ftoa_engine+0x19a>
    3af4:	23 95       	inc	r18
    3af6:	7e 91       	ld	r23, -X
    3af8:	73 95       	inc	r23
    3afa:	7a 33       	cpi	r23, 0x3A	; 58
    3afc:	08 f0       	brcs	.+2      	; 0x3b00 <__ftoa_engine+0x180>
    3afe:	70 e3       	ldi	r23, 0x30	; 48
    3b00:	7c 93       	st	X, r23
    3b02:	20 13       	cpse	r18, r16
    3b04:	b8 f7       	brcc	.-18     	; 0x3af4 <__ftoa_engine+0x174>
    3b06:	7e 91       	ld	r23, -X
    3b08:	70 61       	ori	r23, 0x10	; 16
    3b0a:	7d 93       	st	X+, r23
    3b0c:	30 f0       	brcs	.+12     	; 0x3b1a <__ftoa_engine+0x19a>
    3b0e:	83 95       	inc	r24
    3b10:	71 e3       	ldi	r23, 0x31	; 49
    3b12:	7d 93       	st	X+, r23
    3b14:	70 e3       	ldi	r23, 0x30	; 48
    3b16:	2a 95       	dec	r18
    3b18:	e1 f7       	brne	.-8      	; 0x3b12 <__ftoa_engine+0x192>
    3b1a:	11 24       	eor	r1, r1
    3b1c:	ef 90       	pop	r14
    3b1e:	ff 90       	pop	r15
    3b20:	0f 91       	pop	r16
    3b22:	1f 91       	pop	r17
    3b24:	cf 91       	pop	r28
    3b26:	df 91       	pop	r29
    3b28:	99 27       	eor	r25, r25
    3b2a:	87 fd       	sbrc	r24, 7
    3b2c:	90 95       	com	r25
    3b2e:	08 95       	ret

00003b30 <strrev>:
    3b30:	dc 01       	movw	r26, r24
    3b32:	fc 01       	movw	r30, r24
    3b34:	67 2f       	mov	r22, r23
    3b36:	71 91       	ld	r23, Z+
    3b38:	77 23       	and	r23, r23
    3b3a:	e1 f7       	brne	.-8      	; 0x3b34 <strrev+0x4>
    3b3c:	32 97       	sbiw	r30, 0x02	; 2
    3b3e:	04 c0       	rjmp	.+8      	; 0x3b48 <strrev+0x18>
    3b40:	7c 91       	ld	r23, X
    3b42:	6d 93       	st	X+, r22
    3b44:	70 83       	st	Z, r23
    3b46:	62 91       	ld	r22, -Z
    3b48:	ae 17       	cp	r26, r30
    3b4a:	bf 07       	cpc	r27, r31
    3b4c:	c8 f3       	brcs	.-14     	; 0x3b40 <strrev+0x10>
    3b4e:	08 95       	ret

00003b50 <__udivmodhi4>:
    3b50:	aa 1b       	sub	r26, r26
    3b52:	bb 1b       	sub	r27, r27
    3b54:	51 e1       	ldi	r21, 0x11	; 17
    3b56:	07 c0       	rjmp	.+14     	; 0x3b66 <__udivmodhi4_ep>

00003b58 <__udivmodhi4_loop>:
    3b58:	aa 1f       	adc	r26, r26
    3b5a:	bb 1f       	adc	r27, r27
    3b5c:	a6 17       	cp	r26, r22
    3b5e:	b7 07       	cpc	r27, r23
    3b60:	10 f0       	brcs	.+4      	; 0x3b66 <__udivmodhi4_ep>
    3b62:	a6 1b       	sub	r26, r22
    3b64:	b7 0b       	sbc	r27, r23

00003b66 <__udivmodhi4_ep>:
    3b66:	88 1f       	adc	r24, r24
    3b68:	99 1f       	adc	r25, r25
    3b6a:	5a 95       	dec	r21
    3b6c:	a9 f7       	brne	.-22     	; 0x3b58 <__udivmodhi4_loop>
    3b6e:	80 95       	com	r24
    3b70:	90 95       	com	r25
    3b72:	bc 01       	movw	r22, r24
    3b74:	cd 01       	movw	r24, r26
    3b76:	08 95       	ret

00003b78 <_exit>:
    3b78:	f8 94       	cli

00003b7a <__stop_program>:
    3b7a:	ff cf       	rjmp	.-2      	; 0x3b7a <__stop_program>
